; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_77(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 10240, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 4, !dbg !15
  %21 = srem i32 %20, 640, !dbg !16
  %22 = mul i32 %20, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %.frozen13 = freeze i32 %18, !dbg !18
  %23 = sdiv i32 %.frozen13, 2560, !dbg !18
  %24 = sext i32 %21 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %19) #3, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %19) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %19) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %19) #3, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %19) #3, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %19) #3, !dbg !26
  %39 = icmp slt i32 %21, 512, !dbg !27
  %40 = mul i32 %23, 2560, !dbg !28
  %srem.decomposed = sub i32 %.frozen13, %40, !dbg !28
  %41 = shl nsw i32 %23, 11, !dbg !29
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = and i1 %19, %39, !dbg !32
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !33
  %47 = and i32 %21, -32, !dbg !34
  %48 = icmp eq i32 %47, 512, !dbg !34
  %49 = shl nsw i32 %21, 2, !dbg !35
  %50 = shl nsw i32 %23, 7, !dbg !36
  %51 = add nsw i32 %50, %.decomposed, !dbg !35
  %52 = add nsw i32 %51, -2048, !dbg !37
  %53 = add nsw i32 %52, %49, !dbg !38
  %54 = sext i32 %53 to i64, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !39
  %56 = and i1 %19, %48, !dbg !40
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !41
  %58 = icmp eq i32 %47, 544, !dbg !42
  %59 = add nsw i32 %51, -2176, !dbg !43
  %60 = add nsw i32 %59, %49, !dbg !44
  %61 = sext i32 %60 to i64, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !45
  %63 = and i1 %19, %58, !dbg !46
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !47
  %65 = icmp eq i32 %47, 576, !dbg !48
  %66 = add nsw i32 %51, -2304, !dbg !49
  %67 = add nsw i32 %66, %49, !dbg !50
  %68 = sext i32 %67 to i64, !dbg !51
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !51
  %70 = and i1 %19, %65, !dbg !52
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !53
  %72 = icmp sgt i32 %21, 607, !dbg !54
  %73 = add nsw i32 %51, -2432, !dbg !55
  %74 = add nsw i32 %73, %49, !dbg !56
  %75 = sext i32 %74 to i64, !dbg !57
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !57
  %77 = and i1 %19, %72, !dbg !58
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #3, !dbg !59
  %79 = fadd float %30, 0x3EE4F8B580000000, !dbg !60
  %80 = fadd float %32, 0x3EE4F8B580000000, !dbg !60
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i = icmp eq i32 %81, 0, !dbg !61
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i = icmp eq i32 %82, 0, !dbg !61
  br i1 %.not.i, label %88, label %83, !dbg !61

83:                                               ; preds = %12
  br i1 %.not1.i, label %86, label %84, !dbg !61

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

88:                                               ; preds = %12
  br i1 %.not1.i, label %91, label %89, !dbg !61

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !61
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i8 = icmp eq i32 %93, 0, !dbg !61
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i11 = icmp eq i32 %94, 0, !dbg !61
  br i1 %.not.i8, label %100, label %95, !dbg !61

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %98, label %96, !dbg !61

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !61
  br label %__nv_sqrtf.exit12, !dbg !61

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !61
  br label %__nv_sqrtf.exit12, !dbg !61

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %103, label %101, !dbg !61

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !61
  br label %__nv_sqrtf.exit12, !dbg !61

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !61
  br label %__nv_sqrtf.exit12, !dbg !61

__nv_sqrtf.exit12:                                ; preds = %96, %98, %101, %103
  %.0.i10 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !61
  %105 = extractvalue { i32, i32 } %46, 1, !dbg !33
  %106 = extractvalue { i32, i32 } %57, 1, !dbg !41
  %107 = extractvalue { i32, i32 } %64, 1, !dbg !47
  %108 = extractvalue { i32, i32 } %71, 1, !dbg !53
  %109 = extractvalue { i32, i32 } %78, 1, !dbg !59
  %.v1 = select i1 %65, i32 %108, i32 %109, !dbg !62
  %.v3 = select i1 %58, i32 %107, i32 %.v1, !dbg !63
  %.v5 = select i1 %48, i32 %106, i32 %.v3, !dbg !64
  %.v7 = select i1 %39, i32 %105, i32 %.v5, !dbg !65
  %110 = bitcast i32 %.v7 to float, !dbg !65
  %111 = bitcast i32 %27 to float, !dbg !20
  %112 = fsub float %110, %111, !dbg !66
  %113 = extractvalue { i32, i32 } %46, 0, !dbg !33
  %114 = extractvalue { i32, i32 } %57, 0, !dbg !41
  %115 = extractvalue { i32, i32 } %64, 0, !dbg !47
  %116 = extractvalue { i32, i32 } %71, 0, !dbg !53
  %117 = extractvalue { i32, i32 } %78, 0, !dbg !59
  %.v = select i1 %65, i32 %116, i32 %117, !dbg !62
  %.v2 = select i1 %58, i32 %115, i32 %.v, !dbg !63
  %.v4 = select i1 %48, i32 %114, i32 %.v2, !dbg !64
  %.v6 = select i1 %39, i32 %113, i32 %.v4, !dbg !65
  %118 = bitcast i32 %.v6 to float, !dbg !65
  %119 = bitcast i32 %26 to float, !dbg !20
  %120 = fsub float %118, %119, !dbg !66
  %121 = bitcast i32 %38 to float, !dbg !26
  %122 = bitcast i32 %37 to float, !dbg !26
  %123 = bitcast i32 %35 to float, !dbg !24
  %124 = bitcast i32 %34 to float, !dbg !24
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !67
  %127 = fmul float %120, %125, !dbg !68
  %128 = fmul float %112, %126, !dbg !68
  %129 = fmul float %127, %124, !dbg !69
  %130 = fmul float %128, %123, !dbg !69
  %131 = fadd float %129, %122, !dbg !70
  %132 = fadd float %130, %121, !dbg !70
  %133 = fcmp olt float %131, 0.000000e+00, !dbg !71
  %134 = fcmp olt float %132, 0.000000e+00, !dbg !71
  %135 = select i1 %133, float 0.000000e+00, float %131, !dbg !75
  %136 = select i1 %134, float 0.000000e+00, float %132, !dbg !75
  %137 = sext i32 %18 to i64, !dbg !76
  %138 = getelementptr float, ptr addrspace(1) %9, i64 %137, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v6, i32 %.v7, ptr addrspace(1) %138, i1 %19) #3, !dbg !77
  %139 = getelementptr float, ptr addrspace(1) %10, i64 %137, !dbg !78
  %140 = bitcast float %135 to i32, !dbg !79
  %141 = bitcast float %136 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %140, i32 %141, ptr addrspace(1) %139, i1 %19) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjwlotuzpzpbu3zehtj2eawt4nharqxukywj54fcw7aixr4cktbz.py", directory: "inductor_cache/jw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_77, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_77, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_77", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_77", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 58, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 70, scope: !7)
!41 = !DILocation(line: 42, column: 63, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 54, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 71, scope: !7)
!47 = !DILocation(line: 47, column: 63, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 54, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 71, scope: !7)
!53 = !DILocation(line: 52, column: 63, scope: !7)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 36, scope: !7)
!56 = !DILocation(line: 56, column: 54, scope: !7)
!57 = !DILocation(line: 56, column: 31, scope: !7)
!58 = !DILocation(line: 56, column: 71, scope: !7)
!59 = !DILocation(line: 56, column: 63, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 27, scope: !7)
!62 = !DILocation(line: 57, column: 35, scope: !7)
!63 = !DILocation(line: 58, column: 35, scope: !7)
!64 = !DILocation(line: 59, column: 34, scope: !7)
!65 = !DILocation(line: 60, column: 33, scope: !7)
!66 = !DILocation(line: 61, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 73, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 74, column: 25, scope: !7)
!77 = !DILocation(line: 74, column: 37, scope: !7)
!78 = !DILocation(line: 75, column: 25, scope: !7)
!79 = !DILocation(line: 75, column: 37, scope: !7)
!80 = !DILocation(line: 75, column: 4, scope: !7)
