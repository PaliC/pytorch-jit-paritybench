; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = lshr i32 %8, 5, !dbg !14
  %13 = lshr i32 %8, 3, !dbg !14
  %14 = and i32 %13, 31, !dbg !14
  %15 = or disjoint i32 %14, 32, !dbg !14
  %16 = or disjoint i32 %14, 96, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %17 = sdiv i32 %.frozen, 128, !dbg !15
  %18 = mul i32 %17, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = shl nuw nsw i32 %14, 6, !dbg !17
  %20 = shl nuw nsw i32 %15, 6, !dbg !17
  %21 = shl nuw nsw i32 %16, 6, !dbg !17
  %22 = and i32 %21, 4032, !dbg !17
  %23 = shl nsw i32 %17, 7, !dbg !18
  %24 = or disjoint i32 %23, %14, !dbg !19
  %25 = or disjoint i32 %23, %15, !dbg !19
  %26 = or disjoint i32 %24, 64, !dbg !19
  %27 = or disjoint i32 %23, %16, !dbg !19
  %28 = sdiv i32 %24, 64, !dbg !20
  %29 = sdiv i32 %25, 64, !dbg !20
  %30 = sdiv i32 %26, 64, !dbg !20
  %31 = sdiv i32 %27, 64, !dbg !20
  %32 = srem i32 %28, 64, !dbg !21
  %33 = srem i32 %29, 64, !dbg !21
  %34 = srem i32 %30, 64, !dbg !21
  %35 = srem i32 %31, 64, !dbg !21
  %36 = shl nsw i32 %32, 12, !dbg !22
  %37 = shl nsw i32 %33, 12, !dbg !22
  %38 = shl nsw i32 %34, 12, !dbg !22
  %39 = shl nsw i32 %35, 12, !dbg !22
  %40 = or disjoint i32 %36, %19, !dbg !23
  %41 = or disjoint i32 %37, %20, !dbg !23
  %42 = or disjoint i32 %38, %19, !dbg !23
  %43 = or disjoint i32 %39, %22, !dbg !23
  %44 = shl nsw i32 %.decomposed, 13, !dbg !24
  %45 = add i32 %24, %44, !dbg !25
  %46 = add i32 %25, %44, !dbg !25
  %47 = add i32 %26, %44, !dbg !25
  %48 = add i32 %27, %44, !dbg !25
  %49 = sdiv i32 %45, 262144, !dbg !26
  %50 = sdiv i32 %46, 262144, !dbg !26
  %51 = sdiv i32 %47, 262144, !dbg !26
  %52 = sdiv i32 %48, 262144, !dbg !26
  %53 = shl nsw i32 %49, 18, !dbg !27
  %54 = shl nsw i32 %50, 18, !dbg !27
  %55 = shl nsw i32 %51, 18, !dbg !27
  %56 = shl nsw i32 %52, 18, !dbg !27
  %57 = add i32 %40, %53, !dbg !28
  %58 = add i32 %41, %54, !dbg !28
  %59 = add i32 %42, %55, !dbg !28
  %60 = add i32 %43, %56, !dbg !28
  %61 = sdiv i32 %45, 4096, !dbg !29
  %62 = sdiv i32 %46, 4096, !dbg !29
  %63 = sdiv i32 %47, 4096, !dbg !29
  %64 = sdiv i32 %48, 4096, !dbg !29
  %65 = srem i32 %61, 64, !dbg !30
  %66 = srem i32 %62, 64, !dbg !30
  %67 = srem i32 %63, 64, !dbg !30
  %68 = srem i32 %64, 64, !dbg !30
  %69 = add i32 %57, %65, !dbg !31
  %70 = add nsw i32 %58, %66, !dbg !31
  %71 = add i32 %59, %67, !dbg !31
  %72 = add nsw i32 %60, %68, !dbg !31
  %73 = sext i32 %69 to i64, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !32
  %75 = sext i32 %70 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !32
  %77 = sext i32 %71 to i64, !dbg !32
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !32
  %79 = sext i32 %72 to i64, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #4, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #4, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #4, !dbg !33
  %84 = bitcast i32 %83 to float, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #4, !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !34
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #4, !dbg !35
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #4, !dbg !35
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #4, !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fsub float %84, %94, !dbg !36
  %98 = fsub float %86, %96, !dbg !36
  %99 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !33
  %100 = insertelement <2 x i32> %99, i32 %82, i64 1, !dbg !33
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !33
  %102 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !35
  %103 = insertelement <2 x i32> %102, i32 %92, i64 1, !dbg !35
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !35
  %105 = fsub <2 x float> %101, %104, !dbg !36
  %106 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %105), !dbg !37
  %107 = tail call float @llvm.fabs.f32(float %97), !dbg !37
  %108 = tail call float @llvm.fabs.f32(float %98), !dbg !37
  %shift = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %109 = fadd <2 x float> %106, %shift, !dbg !38
  %110 = extractelement <2 x float> %109, i64 0, !dbg !38
  %111 = fadd float %110, %107, !dbg !38
  %112 = fadd float %111, %108, !dbg !38
  %113 = bitcast float %112 to i32, !dbg !43
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !43
  %115 = bitcast i32 %114 to float, !dbg !43
  %116 = fadd float %112, %115, !dbg !38
  %117 = bitcast float %116 to i32, !dbg !43
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !43
  %119 = bitcast i32 %118 to float, !dbg !43
  %120 = fadd float %116, %119, !dbg !38
  %121 = lshr i32 %9, 3, !dbg !43
  %122 = icmp samesign ult i32 %9, 8, !dbg !43
  %123 = and i32 %12, 7, !dbg !43
  %124 = shl nuw nsw i32 %10, 3, !dbg !43
  %125 = or disjoint i32 %124, %123, !dbg !43
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !43
  %127 = bitcast float %120 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 %122) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %128 = icmp slt i32 %8, 64, !dbg !43
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %128) #4, !dbg !43
  %131 = bitcast i32 %130 to float, !dbg !43
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !43
  %133 = bitcast i32 %132 to float, !dbg !43
  %134 = fadd float %131, %133, !dbg !38
  %135 = bitcast float %134 to i32, !dbg !43
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !43
  %137 = bitcast i32 %136 to float, !dbg !43
  %138 = fadd float %134, %137, !dbg !38
  %139 = bitcast float %138 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = fadd float %138, %141, !dbg !38
  %143 = icmp eq i32 %10, 0, !dbg !43
  %144 = and i1 %128, %143, !dbg !43
  %145 = bitcast float %142 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %145, i1 %144) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !43
  %147 = load i32, ptr addrspace(3) %146, align 16, !dbg !43
  %148 = sext i32 %11 to i64, !dbg !44
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !44
  %150 = shl nuw nsw i32 %123, 2, !dbg !45
  %151 = or disjoint i32 %150, %121, !dbg !45
  %152 = icmp eq i32 %151, 0, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %149, i1 %152) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfwdzuz47qjhpv4kh3e3x6dn55agnhqws33db56spewnipwrasv7.py", directory: "inductor_cache/fw")
!4 = !{ptr @triton_per_fused_abs_mean_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_7", linkageName: "triton_per_fused_abs_mean_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 65, scope: !7)
!19 = !DILocation(line: 33, column: 61, scope: !7)
!20 = !DILocation(line: 33, column: 72, scope: !7)
!21 = !DILocation(line: 33, column: 78, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 33, column: 47, scope: !7)
!24 = !DILocation(line: 33, column: 113, scope: !7)
!25 = !DILocation(line: 33, column: 108, scope: !7)
!26 = !DILocation(line: 33, column: 120, scope: !7)
!27 = !DILocation(line: 33, column: 93, scope: !7)
!28 = !DILocation(line: 33, column: 85, scope: !7)
!29 = !DILocation(line: 33, column: 160, scope: !7)
!30 = !DILocation(line: 33, column: 168, scope: !7)
!31 = !DILocation(line: 33, column: 132, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 175, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 175, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 23, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 38, column: 24, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
