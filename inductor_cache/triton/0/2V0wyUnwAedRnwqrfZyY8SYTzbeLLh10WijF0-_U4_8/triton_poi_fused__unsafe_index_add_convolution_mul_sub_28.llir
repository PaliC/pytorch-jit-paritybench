; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 6, !dbg !15
  %20 = lshr i32 %14, 4, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 16, !dbg !17
  %24 = or disjoint i32 %22, 32, !dbg !17
  %25 = or disjoint i32 %22, 48, !dbg !17
  %26 = icmp slt i32 %22, 64, !dbg !18
  %27 = icmp slt i32 %23, 64, !dbg !18
  %28 = icmp slt i32 %24, 64, !dbg !18
  %29 = icmp slt i32 %25, 64, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %30 = sdiv i32 %.frozen, 8, !dbg !19
  %31 = sdiv i32 %23, 8, !dbg !19
  %32 = sdiv i32 %24, 8, !dbg !19
  %33 = sdiv i32 %25, 8, !dbg !19
  %34 = mul i32 %30, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %.frozen8 = freeze i32 %17, !dbg !21
  %35 = sdiv i32 %.frozen8, 256, !dbg !21
  %36 = mul i32 %35, 256, !dbg !22
  %.decomposed9 = sub i32 %.frozen8, %36, !dbg !22
  %37 = sext i32 %30 to i64, !dbg !23
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !23
  %39 = sext i32 %31 to i64, !dbg !23
  %40 = getelementptr i64, ptr addrspace(1) %1, i64 %39, !dbg !23
  %41 = sext i32 %32 to i64, !dbg !23
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %41, !dbg !23
  %43 = sext i32 %33 to i64, !dbg !23
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !23
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !24
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !24
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !24
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !24
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !24
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %28) #2, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %28) #2, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %28) #2, !dbg !24
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %28) #2, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %29) #2, !dbg !24
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %29) #2, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %29) #2, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %29) #2, !dbg !24
  %61 = sext i32 %.decomposed to i64, !dbg !25
  %62 = getelementptr i64, ptr addrspace(1) %2, i64 %61, !dbg !25
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %26) #2, !dbg !26
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %26) #2, !dbg !26
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %26) #2, !dbg !26
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %26) #2, !dbg !26
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %27) #2, !dbg !26
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %27) #2, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %27) #2, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %27) #2, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %28) #2, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %28) #2, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %28) #2, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %28) #2, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %29) #2, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %29) #2, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %29) #2, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %29) #2, !dbg !26
  %79 = getelementptr i64, ptr addrspace(1) %4, i64 %61, !dbg !27
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %26) #2, !dbg !28
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %26) #2, !dbg !28
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %26) #2, !dbg !28
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %26) #2, !dbg !28
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !28
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !28
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !28
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !28
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %28) #2, !dbg !28
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %28) #2, !dbg !28
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %28) #2, !dbg !28
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %28) #2, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !28
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %26) #2, !dbg !30
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %26) #2, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %26) #2, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %26) #2, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %27) #2, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %27) #2, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %27) #2, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %27) #2, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %28) #2, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %28) #2, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %28) #2, !dbg !30
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %28) #2, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %29) #2, !dbg !30
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %29) #2, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %29) #2, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %29) #2, !dbg !30
  %113 = getelementptr i64, ptr addrspace(1) %6, i64 %37, !dbg !31
  %114 = getelementptr i64, ptr addrspace(1) %6, i64 %39, !dbg !31
  %115 = getelementptr i64, ptr addrspace(1) %6, i64 %41, !dbg !31
  %116 = getelementptr i64, ptr addrspace(1) %6, i64 %43, !dbg !31
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %113, i1 %26) #2, !dbg !32
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %113, i1 %26) #2, !dbg !32
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %113, i1 %26) #2, !dbg !32
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %113, i1 %26) #2, !dbg !32
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %114, i1 %27) #2, !dbg !32
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %114, i1 %27) #2, !dbg !32
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %114, i1 %27) #2, !dbg !32
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %114, i1 %27) #2, !dbg !32
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %115, i1 %28) #2, !dbg !32
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %115, i1 %28) #2, !dbg !32
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %115, i1 %28) #2, !dbg !32
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %115, i1 %28) #2, !dbg !32
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %29) #2, !dbg !32
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %29) #2, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %29) #2, !dbg !32
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %116, i1 %29) #2, !dbg !32
  %133 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !33
  %134 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !33
  %135 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #2, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #2, !dbg !34
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #2, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #2, !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %27) #2, !dbg !34
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %27) #2, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %27) #2, !dbg !34
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %27) #2, !dbg !34
  %146 = bitcast i32 %145 to float, !dbg !34
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %28) #2, !dbg !34
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %28) #2, !dbg !34
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %28) #2, !dbg !34
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %28) #2, !dbg !34
  %151 = bitcast i32 %150 to float, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %29) #2, !dbg !34
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %29) #2, !dbg !34
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %29) #2, !dbg !34
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %29) #2, !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = shl i32 %22, 8, !dbg !35
  %158 = shl i32 %23, 8, !dbg !35
  %159 = shl i32 %24, 8, !dbg !35
  %160 = shl i32 %25, 8, !dbg !35
  %161 = shl i32 %35, 14, !dbg !36
  %162 = add i32 %161, %.decomposed9, !dbg !37
  %163 = add i32 %162, %157, !dbg !38
  %164 = add i32 %162, %158, !dbg !38
  %165 = add i32 %162, %159, !dbg !38
  %166 = add i32 %162, %160, !dbg !38
  %167 = sext i32 %163 to i64, !dbg !39
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !39
  %169 = sext i32 %164 to i64, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !39
  %171 = sext i32 %165 to i64, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !39
  %173 = sext i32 %166 to i64, !dbg !39
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !39
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %26) #2, !dbg !40
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !40
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !40
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !40
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !40
  %180 = bitcast i32 %176 to float, !dbg !40
  %181 = bitcast i32 %177 to float, !dbg !40
  %182 = bitcast i32 %178 to float, !dbg !40
  %183 = bitcast i32 %179 to float, !dbg !40
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %27) #2, !dbg !40
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !40
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !40
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !40
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !40
  %189 = bitcast i32 %185 to float, !dbg !40
  %190 = bitcast i32 %186 to float, !dbg !40
  %191 = bitcast i32 %187 to float, !dbg !40
  %192 = bitcast i32 %188 to float, !dbg !40
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %28) #2, !dbg !40
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !40
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !40
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !40
  %198 = bitcast i32 %194 to float, !dbg !40
  %199 = bitcast i32 %195 to float, !dbg !40
  %200 = bitcast i32 %196 to float, !dbg !40
  %201 = bitcast i32 %197 to float, !dbg !40
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %29) #2, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !40
  %207 = bitcast i32 %203 to float, !dbg !40
  %208 = bitcast i32 %204 to float, !dbg !40
  %209 = bitcast i32 %205 to float, !dbg !40
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = sext i32 %.decomposed9 to i64, !dbg !41
  %212 = getelementptr float, ptr addrspace(1) %8, i64 %211, !dbg !41
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %212, i1 true) #2, !dbg !42
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !42
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !42
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !42
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !42
  %218 = bitcast i32 %214 to float, !dbg !42
  %219 = bitcast i32 %215 to float, !dbg !42
  %220 = bitcast i32 %216 to float, !dbg !42
  %221 = bitcast i32 %217 to float, !dbg !42
  %222 = lshr i64 %48, 61, !dbg !43
  %223 = and i64 %222, 4, !dbg !43
  %224 = add i64 %223, %48, !dbg !43
  %225 = lshr i64 %52, 61, !dbg !43
  %226 = and i64 %225, 4, !dbg !43
  %227 = add i64 %226, %52, !dbg !43
  %228 = lshr i64 %56, 61, !dbg !43
  %229 = and i64 %228, 4, !dbg !43
  %230 = add i64 %229, %56, !dbg !43
  %231 = lshr i64 %60, 61, !dbg !43
  %232 = and i64 %231, 4, !dbg !43
  %233 = add i64 %232, %60, !dbg !43
  %234 = lshr i64 %66, 61, !dbg !44
  %235 = and i64 %234, 4, !dbg !44
  %236 = add i64 %235, %66, !dbg !44
  %237 = lshr i64 %70, 61, !dbg !44
  %238 = and i64 %237, 4, !dbg !44
  %239 = add i64 %238, %70, !dbg !44
  %240 = lshr i64 %74, 61, !dbg !44
  %241 = and i64 %240, 4, !dbg !44
  %242 = add i64 %241, %74, !dbg !44
  %243 = lshr i64 %78, 61, !dbg !44
  %244 = and i64 %243, 4, !dbg !44
  %245 = add i64 %244, %78, !dbg !44
  %246 = shl i64 %224, 10, !dbg !45
  %247 = shl i64 %227, 10, !dbg !45
  %248 = shl i64 %230, 10, !dbg !45
  %249 = shl i64 %233, 10, !dbg !45
  %250 = shl i32 %35, 12, !dbg !46
  %251 = sext i32 %250 to i64, !dbg !47
  %.idx = shl i64 %236, 10, !dbg !48
  %252 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !48
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %211, !dbg !48
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %246, !dbg !48
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %251, !dbg !48
  %.idx1 = shl i64 %239, 10, !dbg !48
  %256 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !48
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %211, !dbg !48
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %247, !dbg !48
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %251, !dbg !48
  %.idx2 = shl i64 %242, 10, !dbg !48
  %260 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !48
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %211, !dbg !48
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %248, !dbg !48
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %251, !dbg !48
  %.idx3 = shl i64 %245, 10, !dbg !48
  %264 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !48
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %211, !dbg !48
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %249, !dbg !48
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %251, !dbg !48
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %26) #2, !dbg !49
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !49
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !49
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !49
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !49
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %259, i1 %27) #2, !dbg !49
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !49
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !49
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !49
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !49
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %28) #2, !dbg !49
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !49
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !49
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !49
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !49
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %267, i1 %29) #2, !dbg !49
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !49
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !49
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !49
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !49
  %288 = lshr i64 %83, 61, !dbg !50
  %289 = and i64 %288, 4, !dbg !50
  %290 = add i64 %289, %83, !dbg !50
  %291 = lshr i64 %87, 61, !dbg !50
  %292 = and i64 %291, 4, !dbg !50
  %293 = add i64 %292, %87, !dbg !50
  %294 = lshr i64 %91, 61, !dbg !50
  %295 = and i64 %294, 4, !dbg !50
  %296 = add i64 %295, %91, !dbg !50
  %297 = lshr i64 %95, 61, !dbg !50
  %298 = and i64 %297, 4, !dbg !50
  %299 = add i64 %298, %95, !dbg !50
  %.idx4 = shl i64 %290, 10, !dbg !51
  %300 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !51
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %211, !dbg !51
  %302 = getelementptr float, ptr addrspace(1) %301, i64 %246, !dbg !51
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %251, !dbg !51
  %.idx5 = shl i64 %293, 10, !dbg !51
  %304 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !51
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %211, !dbg !51
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %247, !dbg !51
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %251, !dbg !51
  %.idx6 = shl i64 %296, 10, !dbg !51
  %308 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !51
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %211, !dbg !51
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %248, !dbg !51
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %251, !dbg !51
  %.idx7 = shl i64 %299, 10, !dbg !51
  %312 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !51
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %211, !dbg !51
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %249, !dbg !51
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %251, !dbg !51
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %303, i1 %26) #2, !dbg !52
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !52
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !52
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !52
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !52
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %307, i1 %27) #2, !dbg !52
  %322 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !52
  %323 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !52
  %324 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !52
  %325 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !52
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %311, i1 %28) #2, !dbg !52
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !52
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !52
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !52
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !52
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %315, i1 %29) #2, !dbg !52
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !52
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !52
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !52
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !52
  %336 = lshr i64 %120, 61, !dbg !53
  %337 = and i64 %336, 4, !dbg !53
  %338 = add i64 %337, %120, !dbg !53
  %339 = lshr i64 %124, 61, !dbg !53
  %340 = and i64 %339, 4, !dbg !53
  %341 = add i64 %340, %124, !dbg !53
  %342 = lshr i64 %128, 61, !dbg !53
  %343 = and i64 %342, 4, !dbg !53
  %344 = add i64 %343, %128, !dbg !53
  %345 = lshr i64 %132, 61, !dbg !53
  %346 = and i64 %345, 4, !dbg !53
  %347 = add i64 %346, %132, !dbg !53
  %348 = shl i64 %338, 10, !dbg !54
  %349 = shl i64 %341, 10, !dbg !54
  %350 = shl i64 %344, 10, !dbg !54
  %351 = shl i64 %347, 10, !dbg !54
  %352 = getelementptr float, ptr addrspace(1) %253, i64 %348, !dbg !55
  %353 = getelementptr float, ptr addrspace(1) %352, i64 %251, !dbg !55
  %354 = getelementptr float, ptr addrspace(1) %257, i64 %349, !dbg !55
  %355 = getelementptr float, ptr addrspace(1) %354, i64 %251, !dbg !55
  %356 = getelementptr float, ptr addrspace(1) %261, i64 %350, !dbg !55
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %251, !dbg !55
  %358 = getelementptr float, ptr addrspace(1) %265, i64 %351, !dbg !55
  %359 = getelementptr float, ptr addrspace(1) %358, i64 %251, !dbg !55
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %353, i1 %26) #2, !dbg !56
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !56
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !56
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !56
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !56
  %365 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %355, i1 %27) #2, !dbg !56
  %366 = extractvalue { i32, i32, i32, i32 } %365, 0, !dbg !56
  %367 = extractvalue { i32, i32, i32, i32 } %365, 1, !dbg !56
  %368 = extractvalue { i32, i32, i32, i32 } %365, 2, !dbg !56
  %369 = extractvalue { i32, i32, i32, i32 } %365, 3, !dbg !56
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %357, i1 %28) #2, !dbg !56
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !56
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !56
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !56
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !56
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %359, i1 %29) #2, !dbg !56
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !56
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !56
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !56
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !56
  %380 = getelementptr float, ptr addrspace(1) %301, i64 %348, !dbg !57
  %381 = getelementptr float, ptr addrspace(1) %380, i64 %251, !dbg !57
  %382 = getelementptr float, ptr addrspace(1) %305, i64 %349, !dbg !57
  %383 = getelementptr float, ptr addrspace(1) %382, i64 %251, !dbg !57
  %384 = getelementptr float, ptr addrspace(1) %309, i64 %350, !dbg !57
  %385 = getelementptr float, ptr addrspace(1) %384, i64 %251, !dbg !57
  %386 = getelementptr float, ptr addrspace(1) %313, i64 %351, !dbg !57
  %387 = getelementptr float, ptr addrspace(1) %386, i64 %251, !dbg !57
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %381, i1 %26) #2, !dbg !58
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !58
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !58
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !58
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !58
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %383, i1 %27) #2, !dbg !58
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !58
  %395 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !58
  %396 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !58
  %397 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !58
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %385, i1 %28) #2, !dbg !58
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !58
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !58
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !58
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !58
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %387, i1 %29) #2, !dbg !58
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !58
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !58
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !58
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !58
  %408 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !56
  %409 = insertelement <2 x i32> %408, i32 %269, i64 1, !dbg !56
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !56
  %411 = insertelement <2 x i32> poison, i32 %389, i64 0, !dbg !58
  %412 = insertelement <2 x i32> %411, i32 %317, i64 1, !dbg !58
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !58
  %414 = fsub <2 x float> %413, %410, !dbg !59
  %415 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !60
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !60
  %417 = shufflevector <2 x float> %416, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %418 = fmul <2 x float> %414, %417, !dbg !60
  %419 = fadd <2 x float> %418, %410, !dbg !61
  %420 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !56
  %421 = insertelement <2 x i32> %420, i32 %270, i64 1, !dbg !56
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !56
  %423 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !58
  %424 = insertelement <2 x i32> %423, i32 %318, i64 1, !dbg !58
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !58
  %426 = fsub <2 x float> %425, %422, !dbg !59
  %427 = fmul <2 x float> %426, %417, !dbg !60
  %428 = fadd <2 x float> %427, %422, !dbg !61
  %429 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !56
  %430 = insertelement <2 x i32> %429, i32 %271, i64 1, !dbg !56
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !56
  %432 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !58
  %433 = insertelement <2 x i32> %432, i32 %319, i64 1, !dbg !58
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !58
  %435 = fsub <2 x float> %434, %431, !dbg !59
  %436 = fmul <2 x float> %435, %417, !dbg !60
  %437 = fadd <2 x float> %436, %431, !dbg !61
  %438 = insertelement <2 x i32> poison, i32 %364, i64 0, !dbg !56
  %439 = insertelement <2 x i32> %438, i32 %272, i64 1, !dbg !56
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !56
  %441 = insertelement <2 x i32> poison, i32 %392, i64 0, !dbg !58
  %442 = insertelement <2 x i32> %441, i32 %320, i64 1, !dbg !58
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !58
  %444 = fsub <2 x float> %443, %440, !dbg !59
  %445 = fmul <2 x float> %444, %417, !dbg !60
  %446 = fadd <2 x float> %445, %440, !dbg !61
  %447 = insertelement <2 x i32> poison, i32 %366, i64 0, !dbg !56
  %448 = insertelement <2 x i32> %447, i32 %274, i64 1, !dbg !56
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !56
  %450 = insertelement <2 x i32> poison, i32 %394, i64 0, !dbg !58
  %451 = insertelement <2 x i32> %450, i32 %322, i64 1, !dbg !58
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !58
  %453 = fsub <2 x float> %452, %449, !dbg !59
  %454 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !60
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !60
  %456 = shufflevector <2 x float> %455, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %457 = fmul <2 x float> %453, %456, !dbg !60
  %458 = fadd <2 x float> %457, %449, !dbg !61
  %459 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !56
  %460 = insertelement <2 x i32> %459, i32 %275, i64 1, !dbg !56
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !56
  %462 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !58
  %463 = insertelement <2 x i32> %462, i32 %323, i64 1, !dbg !58
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !58
  %465 = fsub <2 x float> %464, %461, !dbg !59
  %466 = fmul <2 x float> %465, %456, !dbg !60
  %467 = fadd <2 x float> %466, %461, !dbg !61
  %468 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !56
  %469 = insertelement <2 x i32> %468, i32 %276, i64 1, !dbg !56
  %470 = bitcast <2 x i32> %469 to <2 x float>, !dbg !56
  %471 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !58
  %472 = insertelement <2 x i32> %471, i32 %324, i64 1, !dbg !58
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !58
  %474 = fsub <2 x float> %473, %470, !dbg !59
  %475 = fmul <2 x float> %474, %456, !dbg !60
  %476 = fadd <2 x float> %475, %470, !dbg !61
  %477 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !56
  %478 = insertelement <2 x i32> %477, i32 %277, i64 1, !dbg !56
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !56
  %480 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !58
  %481 = insertelement <2 x i32> %480, i32 %325, i64 1, !dbg !58
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !58
  %483 = fsub <2 x float> %482, %479, !dbg !59
  %484 = fmul <2 x float> %483, %456, !dbg !60
  %485 = fadd <2 x float> %484, %479, !dbg !61
  %486 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !56
  %487 = insertelement <2 x i32> %486, i32 %279, i64 1, !dbg !56
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !56
  %489 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !58
  %490 = insertelement <2 x i32> %489, i32 %327, i64 1, !dbg !58
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !58
  %492 = fsub <2 x float> %491, %488, !dbg !59
  %493 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !60
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !60
  %495 = shufflevector <2 x float> %494, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %496 = fmul <2 x float> %492, %495, !dbg !60
  %497 = fadd <2 x float> %496, %488, !dbg !61
  %498 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !56
  %499 = insertelement <2 x i32> %498, i32 %280, i64 1, !dbg !56
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !56
  %501 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !58
  %502 = insertelement <2 x i32> %501, i32 %328, i64 1, !dbg !58
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !58
  %504 = fsub <2 x float> %503, %500, !dbg !59
  %505 = fmul <2 x float> %504, %495, !dbg !60
  %506 = fadd <2 x float> %505, %500, !dbg !61
  %507 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !56
  %508 = insertelement <2 x i32> %507, i32 %281, i64 1, !dbg !56
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !56
  %510 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !58
  %511 = insertelement <2 x i32> %510, i32 %329, i64 1, !dbg !58
  %512 = bitcast <2 x i32> %511 to <2 x float>, !dbg !58
  %513 = fsub <2 x float> %512, %509, !dbg !59
  %514 = fmul <2 x float> %513, %495, !dbg !60
  %515 = fadd <2 x float> %514, %509, !dbg !61
  %516 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !56
  %517 = insertelement <2 x i32> %516, i32 %282, i64 1, !dbg !56
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !56
  %519 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !58
  %520 = insertelement <2 x i32> %519, i32 %330, i64 1, !dbg !58
  %521 = bitcast <2 x i32> %520 to <2 x float>, !dbg !58
  %522 = fsub <2 x float> %521, %518, !dbg !59
  %523 = fmul <2 x float> %522, %495, !dbg !60
  %524 = fadd <2 x float> %523, %518, !dbg !61
  %525 = insertelement <2 x i32> poison, i32 %376, i64 0, !dbg !56
  %526 = insertelement <2 x i32> %525, i32 %284, i64 1, !dbg !56
  %527 = bitcast <2 x i32> %526 to <2 x float>, !dbg !56
  %528 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !58
  %529 = insertelement <2 x i32> %528, i32 %332, i64 1, !dbg !58
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !58
  %531 = fsub <2 x float> %530, %527, !dbg !59
  %532 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !60
  %533 = bitcast <2 x i32> %532 to <2 x float>, !dbg !60
  %534 = shufflevector <2 x float> %533, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %535 = fmul <2 x float> %531, %534, !dbg !60
  %536 = fadd <2 x float> %535, %527, !dbg !61
  %537 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !56
  %538 = insertelement <2 x i32> %537, i32 %285, i64 1, !dbg !56
  %539 = bitcast <2 x i32> %538 to <2 x float>, !dbg !56
  %540 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !58
  %541 = insertelement <2 x i32> %540, i32 %333, i64 1, !dbg !58
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !58
  %543 = fsub <2 x float> %542, %539, !dbg !59
  %544 = fmul <2 x float> %543, %534, !dbg !60
  %545 = fadd <2 x float> %544, %539, !dbg !61
  %546 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !56
  %547 = insertelement <2 x i32> %546, i32 %286, i64 1, !dbg !56
  %548 = bitcast <2 x i32> %547 to <2 x float>, !dbg !56
  %549 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !58
  %550 = insertelement <2 x i32> %549, i32 %334, i64 1, !dbg !58
  %551 = bitcast <2 x i32> %550 to <2 x float>, !dbg !58
  %552 = fsub <2 x float> %551, %548, !dbg !59
  %553 = fmul <2 x float> %552, %534, !dbg !60
  %554 = fadd <2 x float> %553, %548, !dbg !61
  %555 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !56
  %556 = insertelement <2 x i32> %555, i32 %287, i64 1, !dbg !56
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !56
  %558 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !58
  %559 = insertelement <2 x i32> %558, i32 %335, i64 1, !dbg !58
  %560 = bitcast <2 x i32> %559 to <2 x float>, !dbg !58
  %561 = fsub <2 x float> %560, %557, !dbg !59
  %562 = fmul <2 x float> %561, %534, !dbg !60
  %563 = fadd <2 x float> %562, %557, !dbg !61
  %564 = extractelement <2 x float> %419, i64 0, !dbg !62
  %565 = extractelement <2 x float> %419, i64 1, !dbg !63
  %566 = fsub float %564, %565, !dbg !62
  %567 = extractelement <2 x float> %428, i64 0, !dbg !62
  %568 = extractelement <2 x float> %428, i64 1, !dbg !63
  %569 = fsub float %567, %568, !dbg !62
  %570 = extractelement <2 x float> %437, i64 0, !dbg !62
  %571 = extractelement <2 x float> %437, i64 1, !dbg !63
  %572 = fsub float %570, %571, !dbg !62
  %573 = extractelement <2 x float> %446, i64 0, !dbg !62
  %574 = extractelement <2 x float> %446, i64 1, !dbg !63
  %575 = fsub float %573, %574, !dbg !62
  %576 = extractelement <2 x float> %458, i64 0, !dbg !62
  %577 = extractelement <2 x float> %458, i64 1, !dbg !63
  %578 = fsub float %576, %577, !dbg !62
  %579 = extractelement <2 x float> %467, i64 0, !dbg !62
  %580 = extractelement <2 x float> %467, i64 1, !dbg !63
  %581 = fsub float %579, %580, !dbg !62
  %582 = extractelement <2 x float> %476, i64 0, !dbg !62
  %583 = extractelement <2 x float> %476, i64 1, !dbg !63
  %584 = fsub float %582, %583, !dbg !62
  %585 = extractelement <2 x float> %485, i64 0, !dbg !62
  %586 = extractelement <2 x float> %485, i64 1, !dbg !63
  %587 = fsub float %585, %586, !dbg !62
  %588 = extractelement <2 x float> %497, i64 0, !dbg !62
  %589 = extractelement <2 x float> %497, i64 1, !dbg !63
  %590 = fsub float %588, %589, !dbg !62
  %591 = extractelement <2 x float> %506, i64 0, !dbg !62
  %592 = extractelement <2 x float> %506, i64 1, !dbg !63
  %593 = fsub float %591, %592, !dbg !62
  %594 = extractelement <2 x float> %515, i64 0, !dbg !62
  %595 = extractelement <2 x float> %515, i64 1, !dbg !63
  %596 = fsub float %594, %595, !dbg !62
  %597 = extractelement <2 x float> %524, i64 0, !dbg !62
  %598 = extractelement <2 x float> %524, i64 1, !dbg !63
  %599 = fsub float %597, %598, !dbg !62
  %600 = extractelement <2 x float> %536, i64 0, !dbg !62
  %601 = extractelement <2 x float> %536, i64 1, !dbg !63
  %602 = fsub float %600, %601, !dbg !62
  %603 = extractelement <2 x float> %545, i64 0, !dbg !62
  %604 = extractelement <2 x float> %545, i64 1, !dbg !63
  %605 = fsub float %603, %604, !dbg !62
  %606 = extractelement <2 x float> %554, i64 0, !dbg !62
  %607 = extractelement <2 x float> %554, i64 1, !dbg !63
  %608 = fsub float %606, %607, !dbg !62
  %609 = extractelement <2 x float> %563, i64 0, !dbg !62
  %610 = extractelement <2 x float> %563, i64 1, !dbg !63
  %611 = fsub float %609, %610, !dbg !62
  %612 = fmul float %566, %141, !dbg !64
  %613 = fmul float %569, %141, !dbg !64
  %614 = fmul float %572, %141, !dbg !64
  %615 = fmul float %575, %141, !dbg !64
  %616 = fmul float %578, %146, !dbg !64
  %617 = fmul float %581, %146, !dbg !64
  %618 = fmul float %584, %146, !dbg !64
  %619 = fmul float %587, %146, !dbg !64
  %620 = fmul float %590, %151, !dbg !64
  %621 = fmul float %593, %151, !dbg !64
  %622 = fmul float %596, %151, !dbg !64
  %623 = fmul float %599, %151, !dbg !64
  %624 = fmul float %602, %156, !dbg !64
  %625 = fmul float %605, %156, !dbg !64
  %626 = fmul float %608, %156, !dbg !64
  %627 = fmul float %611, %156, !dbg !64
  %628 = fadd float %565, %612, !dbg !63
  %629 = fadd float %568, %613, !dbg !63
  %630 = fadd float %571, %614, !dbg !63
  %631 = fadd float %574, %615, !dbg !63
  %632 = fadd float %577, %616, !dbg !63
  %633 = fadd float %580, %617, !dbg !63
  %634 = fadd float %583, %618, !dbg !63
  %635 = fadd float %586, %619, !dbg !63
  %636 = fadd float %589, %620, !dbg !63
  %637 = fadd float %592, %621, !dbg !63
  %638 = fadd float %595, %622, !dbg !63
  %639 = fadd float %598, %623, !dbg !63
  %640 = fadd float %601, %624, !dbg !63
  %641 = fadd float %604, %625, !dbg !63
  %642 = fadd float %607, %626, !dbg !63
  %643 = fadd float %610, %627, !dbg !63
  %644 = fadd float %180, %218, !dbg !65
  %645 = fadd float %181, %219, !dbg !65
  %646 = fadd float %182, %220, !dbg !65
  %647 = fadd float %183, %221, !dbg !65
  %648 = fadd float %189, %218, !dbg !65
  %649 = fadd float %190, %219, !dbg !65
  %650 = fadd float %191, %220, !dbg !65
  %651 = fadd float %192, %221, !dbg !65
  %652 = fadd float %198, %218, !dbg !65
  %653 = fadd float %199, %219, !dbg !65
  %654 = fadd float %200, %220, !dbg !65
  %655 = fadd float %201, %221, !dbg !65
  %656 = fadd float %207, %218, !dbg !65
  %657 = fadd float %208, %219, !dbg !65
  %658 = fadd float %209, %220, !dbg !65
  %659 = fadd float %210, %221, !dbg !65
  %660 = fadd float %644, %628, !dbg !66
  %661 = fadd float %645, %629, !dbg !66
  %662 = fadd float %646, %630, !dbg !66
  %663 = fadd float %647, %631, !dbg !66
  %664 = fadd float %648, %632, !dbg !66
  %665 = fadd float %649, %633, !dbg !66
  %666 = fadd float %650, %634, !dbg !66
  %667 = fadd float %651, %635, !dbg !66
  %668 = fadd float %652, %636, !dbg !66
  %669 = fadd float %653, %637, !dbg !66
  %670 = fadd float %654, %638, !dbg !66
  %671 = fadd float %655, %639, !dbg !66
  %672 = fadd float %656, %640, !dbg !66
  %673 = fadd float %657, %641, !dbg !66
  %674 = fadd float %658, %642, !dbg !66
  %675 = fadd float %659, %643, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %676 = bitcast float %660 to i32, !dbg !68
  %677 = bitcast float %661 to i32, !dbg !68
  %678 = bitcast float %662 to i32, !dbg !68
  %679 = bitcast float %663 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %676, i32 %677, i32 %678, i32 %679, ptr addrspace(1) %168, i1 %26) #2, !dbg !68
  %680 = bitcast float %664 to i32, !dbg !68
  %681 = bitcast float %665 to i32, !dbg !68
  %682 = bitcast float %666 to i32, !dbg !68
  %683 = bitcast float %667 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %680, i32 %681, i32 %682, i32 %683, ptr addrspace(1) %170, i1 %27) #2, !dbg !68
  %684 = bitcast float %668 to i32, !dbg !68
  %685 = bitcast float %669 to i32, !dbg !68
  %686 = bitcast float %670 to i32, !dbg !68
  %687 = bitcast float %671 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %684, i32 %685, i32 %686, i32 %687, ptr addrspace(1) %172, i1 %28) #2, !dbg !68
  %688 = bitcast float %672 to i32, !dbg !68
  %689 = bitcast float %673 to i32, !dbg !68
  %690 = bitcast float %674 to i32, !dbg !68
  %691 = bitcast float %675 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %688, i32 %689, i32 %690, i32 %691, ptr addrspace(1) %174, i1 %29) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjqududxfuudhhhuehdosb7ggeznthyx3l4unayrjkzh3bg6tnaa.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_28", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 55, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 60, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 51, scope: !7)
!46 = !DILocation(line: 49, column: 63, scope: !7)
!47 = !DILocation(line: 49, column: 58, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 68, scope: !7)
!50 = !DILocation(line: 52, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 70, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 52, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 70, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 71, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 60, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
