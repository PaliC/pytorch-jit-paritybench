; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 64, !dbg !14
  %13 = sext i32 %10 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %27 = sext i32 %12 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %39 = insertelement <8 x i32> poison, i32 %26, i64 0, !dbg !16
  %40 = insertelement <8 x i32> %39, i32 %25, i64 1, !dbg !16
  %41 = insertelement <8 x i32> %40, i32 %24, i64 2, !dbg !16
  %42 = insertelement <8 x i32> %41, i32 %23, i64 3, !dbg !16
  %43 = insertelement <8 x i32> %42, i32 %21, i64 4, !dbg !16
  %44 = insertelement <8 x i32> %43, i32 %20, i64 5, !dbg !16
  %45 = insertelement <8 x i32> %44, i32 %19, i64 6, !dbg !16
  %46 = insertelement <8 x i32> %45, i32 %18, i64 7, !dbg !16
  %47 = bitcast <8 x i32> %46 to <8 x float>, !dbg !16
  %48 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !18
  %49 = insertelement <8 x i32> %48, i32 %37, i64 1, !dbg !18
  %50 = insertelement <8 x i32> %49, i32 %36, i64 2, !dbg !18
  %51 = insertelement <8 x i32> %50, i32 %35, i64 3, !dbg !18
  %52 = insertelement <8 x i32> %51, i32 %33, i64 4, !dbg !18
  %53 = insertelement <8 x i32> %52, i32 %32, i64 5, !dbg !18
  %54 = insertelement <8 x i32> %53, i32 %31, i64 6, !dbg !18
  %55 = insertelement <8 x i32> %54, i32 %30, i64 7, !dbg !18
  %56 = bitcast <8 x i32> %55 to <8 x float>, !dbg !18
  %57 = fadd <8 x float> %47, %56, !dbg !19
  %58 = fcmp ogt <8 x float> %57, zeroinitializer, !dbg !20
  %59 = extractelement <8 x float> %57, i64 7, !dbg !21
  %60 = fmul float %59, 0x3FC99999A0000000, !dbg !22
  %61 = extractelement <8 x float> %57, i64 6, !dbg !21
  %62 = fmul float %61, 0x3FC99999A0000000, !dbg !22
  %63 = extractelement <8 x float> %57, i64 5, !dbg !21
  %64 = fmul float %63, 0x3FC99999A0000000, !dbg !22
  %65 = extractelement <8 x float> %57, i64 4, !dbg !21
  %66 = fmul float %65, 0x3FC99999A0000000, !dbg !22
  %67 = extractelement <8 x float> %57, i64 3, !dbg !21
  %68 = fmul float %67, 0x3FC99999A0000000, !dbg !22
  %69 = extractelement <8 x float> %57, i64 2, !dbg !21
  %70 = fmul float %69, 0x3FC99999A0000000, !dbg !22
  %71 = extractelement <8 x float> %57, i64 1, !dbg !21
  %72 = fmul float %71, 0x3FC99999A0000000, !dbg !22
  %73 = extractelement <8 x float> %57, i64 0, !dbg !21
  %74 = fmul float %73, 0x3FC99999A0000000, !dbg !22
  %75 = extractelement <8 x i1> %58, i64 7, !dbg !23
  %76 = select i1 %75, float %59, float %60, !dbg !23
  %77 = extractelement <8 x i1> %58, i64 6, !dbg !23
  %78 = select i1 %77, float %61, float %62, !dbg !23
  %79 = extractelement <8 x i1> %58, i64 5, !dbg !23
  %80 = select i1 %79, float %63, float %64, !dbg !23
  %81 = extractelement <8 x i1> %58, i64 4, !dbg !23
  %82 = select i1 %81, float %65, float %66, !dbg !23
  %83 = extractelement <8 x i1> %58, i64 3, !dbg !23
  %84 = select i1 %83, float %67, float %68, !dbg !23
  %85 = extractelement <8 x i1> %58, i64 2, !dbg !23
  %86 = select i1 %85, float %69, float %70, !dbg !23
  %87 = extractelement <8 x i1> %58, i64 1, !dbg !23
  %88 = select i1 %87, float %71, float %72, !dbg !23
  %89 = extractelement <8 x i1> %58, i64 0, !dbg !23
  %90 = select i1 %89, float %73, float %74, !dbg !23
  %91 = bitcast float %59 to i32, !dbg !21
  %92 = bitcast float %61 to i32, !dbg !21
  %93 = bitcast float %63 to i32, !dbg !21
  %94 = bitcast float %65 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %91, i32 %92, i32 %93, i32 %94, ptr addrspace(1) %14, i1 true) #1, !dbg !21
  %95 = bitcast float %67 to i32, !dbg !21
  %96 = bitcast float %69 to i32, !dbg !21
  %97 = bitcast float %71 to i32, !dbg !21
  %98 = bitcast float %73 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %16, i1 true) #1, !dbg !21
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !24
  %101 = bitcast float %76 to i32, !dbg !25
  %102 = bitcast float %78 to i32, !dbg !25
  %103 = bitcast float %80 to i32, !dbg !25
  %104 = bitcast float %82 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %102, i32 %103, i32 %104, ptr addrspace(1) %99, i1 true) #1, !dbg !25
  %105 = bitcast float %84 to i32, !dbg !25
  %106 = bitcast float %86 to i32, !dbg !25
  %107 = bitcast float %88 to i32, !dbg !25
  %108 = bitcast float %90 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %106, i32 %107, i32 %108, ptr addrspace(1) %100, i1 true) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cymj5jpjfxwyiqqrlghnxkqxzr5cmps4rygw3mjr7h3n3iv7wt2m.py", directory: "inductor_cache/ym")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_10", linkageName: "triton_poi_fused_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 18, scope: !7)
!20 = !DILocation(line: 30, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 18, scope: !7)
!23 = !DILocation(line: 33, column: 32, scope: !7)
!24 = !DILocation(line: 35, column: 25, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 4, scope: !7)
