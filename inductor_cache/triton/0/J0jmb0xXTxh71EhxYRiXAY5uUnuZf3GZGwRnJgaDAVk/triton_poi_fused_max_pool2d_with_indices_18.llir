; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 8, !dbg !16
  %19 = shl i32 %8, 4, !dbg !17
  %20 = and i32 %19, 240, !dbg !17
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 63, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = or disjoint i32 %18, %22, !dbg !18
  %28 = or disjoint i32 %27, 64, !dbg !18
  %29 = or disjoint i32 %27, 128, !dbg !18
  %30 = or disjoint i32 %27, 192, !dbg !18
  %31 = icmp slt i32 %23, 512, !dbg !19
  %32 = icmp slt i32 %27, 512, !dbg !19
  %33 = icmp slt i32 %28, 512, !dbg !19
  %34 = icmp slt i32 %29, 512, !dbg !19
  %35 = icmp slt i32 %30, 512, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen, 2, !dbg !20
  %37 = mul i32 %36, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = shl nsw i32 %.decomposed, 10, !dbg !22
  %39 = shl i32 %36, 12, !dbg !23
  %40 = add i32 %39, %38, !dbg !24
  %41 = add i32 %40, %23, !dbg !25
  %42 = add i32 %40, %24, !dbg !25
  %43 = add i32 %40, %25, !dbg !25
  %44 = add i32 %40, %26, !dbg !25
  %45 = sext i32 %41 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %42 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %43 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %44 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = and i1 %15, %31, !dbg !27
  %54 = and i1 %16, %32, !dbg !27
  %55 = and i1 %33, %16, !dbg !27
  %56 = and i1 %34, %16, !dbg !27
  %57 = and i1 %35, %16, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %53) #2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %53) #2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %78 = or disjoint i32 %40, 512, !dbg !29
  %79 = add i32 %78, %23, !dbg !30
  %80 = add i32 %78, %24, !dbg !30
  %81 = add i32 %78, %25, !dbg !30
  %82 = add i32 %78, %26, !dbg !30
  %83 = sext i32 %79 to i64, !dbg !31
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !31
  %85 = sext i32 %80 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = sext i32 %81 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !31
  %89 = sext i32 %82 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %53) #2, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !32
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %53) #2, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !32
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %53) #2, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !32
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !32
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !32
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %53) #2, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !32
  %111 = add i32 %40, 2048, !dbg !33
  %112 = add i32 %111, %23, !dbg !34
  %113 = add i32 %111, %24, !dbg !34
  %114 = add i32 %111, %25, !dbg !34
  %115 = add i32 %111, %26, !dbg !34
  %116 = sext i32 %112 to i64, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !35
  %118 = sext i32 %113 to i64, !dbg !35
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !35
  %120 = sext i32 %114 to i64, !dbg !35
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !35
  %122 = sext i32 %115 to i64, !dbg !35
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !35
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %53) #2, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !36
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %53) #2, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !36
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %53) #2, !dbg !36
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !36
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %53) #2, !dbg !36
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !36
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !36
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !36
  %144 = add i32 %40, 2560, !dbg !37
  %145 = add i32 %144, %23, !dbg !38
  %146 = add i32 %144, %24, !dbg !38
  %147 = add i32 %144, %25, !dbg !38
  %148 = add i32 %144, %26, !dbg !38
  %149 = sext i32 %145 to i64, !dbg !39
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !39
  %151 = sext i32 %146 to i64, !dbg !39
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !39
  %153 = sext i32 %147 to i64, !dbg !39
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !39
  %155 = sext i32 %148 to i64, !dbg !39
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !39
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %53) #2, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !40
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !40
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !40
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %53) #2, !dbg !40
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !40
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !40
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !40
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !40
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %53) #2, !dbg !40
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !40
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !40
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !40
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !40
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %53) #2, !dbg !40
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !40
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !40
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !40
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !40
  %177 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !28
  %178 = insertelement <4 x i32> %177, i32 %60, i64 1, !dbg !28
  %179 = insertelement <4 x i32> %178, i32 %61, i64 2, !dbg !28
  %180 = insertelement <4 x i32> %179, i32 %62, i64 3, !dbg !28
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !28
  %182 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !32
  %183 = insertelement <4 x i32> %182, i32 %93, i64 1, !dbg !32
  %184 = insertelement <4 x i32> %183, i32 %94, i64 2, !dbg !32
  %185 = insertelement <4 x i32> %184, i32 %95, i64 3, !dbg !32
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !32
  %187 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !36
  %188 = insertelement <4 x i32> %187, i32 %126, i64 1, !dbg !36
  %189 = insertelement <4 x i32> %188, i32 %127, i64 2, !dbg !36
  %190 = insertelement <4 x i32> %189, i32 %128, i64 3, !dbg !36
  %191 = bitcast <4 x i32> %190 to <4 x float>, !dbg !36
  %192 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !40
  %193 = insertelement <4 x i32> %192, i32 %159, i64 1, !dbg !40
  %194 = insertelement <4 x i32> %193, i32 %160, i64 2, !dbg !40
  %195 = insertelement <4 x i32> %194, i32 %161, i64 3, !dbg !40
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !40
  %197 = fcmp ogt <4 x float> %186, %181, !dbg !41
  %198 = fcmp uno <4 x float> %186, zeroinitializer, !dbg !45
  %199 = or <4 x i1> %197, %198, !dbg !46
  %.v = select <4 x i1> %199, <4 x i32> %185, <4 x i32> %180, !dbg !47
  %200 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %201 = fcmp olt <4 x float> %200, %191, !dbg !48
  %202 = fcmp uno <4 x float> %191, zeroinitializer, !dbg !50
  %203 = or <4 x i1> %201, %202, !dbg !51
  %.v34 = select <4 x i1> %203, <4 x i32> %190, <4 x i32> %.v, !dbg !52
  %204 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !52
  %205 = fcmp olt <4 x float> %204, %196, !dbg !53
  %206 = bitcast i32 %158 to float, !dbg !55
  %207 = fcmp uno float %206, 0.000000e+00, !dbg !55
  %208 = bitcast i32 %159 to float, !dbg !55
  %209 = fcmp uno float %208, 0.000000e+00, !dbg !55
  %210 = bitcast i32 %160 to float, !dbg !55
  %211 = fcmp uno float %210, 0.000000e+00, !dbg !55
  %212 = bitcast i32 %161 to float, !dbg !55
  %213 = fcmp uno float %212, 0.000000e+00, !dbg !55
  %214 = extractelement <4 x i1> %205, i64 0, !dbg !56
  %215 = or i1 %214, %207, !dbg !56
  %216 = extractelement <4 x i1> %205, i64 1, !dbg !56
  %217 = or i1 %216, %209, !dbg !56
  %218 = extractelement <4 x i1> %205, i64 2, !dbg !56
  %219 = or i1 %218, %211, !dbg !56
  %220 = extractelement <4 x i1> %205, i64 3, !dbg !56
  %221 = or i1 %220, %213, !dbg !56
  %222 = zext <4 x i1> %197 to <4 x i8>, !dbg !57
  %223 = select <4 x i1> %201, <4 x i8> splat (i8 2), <4 x i8> %222, !dbg !58
  %224 = select <4 x i1> %205, <4 x i8> splat (i8 3), <4 x i8> %223, !dbg !59
  %225 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !28
  %226 = insertelement <4 x i32> %225, i32 %65, i64 1, !dbg !28
  %227 = insertelement <4 x i32> %226, i32 %66, i64 2, !dbg !28
  %228 = insertelement <4 x i32> %227, i32 %67, i64 3, !dbg !28
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !28
  %230 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !32
  %231 = insertelement <4 x i32> %230, i32 %98, i64 1, !dbg !32
  %232 = insertelement <4 x i32> %231, i32 %99, i64 2, !dbg !32
  %233 = insertelement <4 x i32> %232, i32 %100, i64 3, !dbg !32
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !32
  %235 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !36
  %236 = insertelement <4 x i32> %235, i32 %131, i64 1, !dbg !36
  %237 = insertelement <4 x i32> %236, i32 %132, i64 2, !dbg !36
  %238 = insertelement <4 x i32> %237, i32 %133, i64 3, !dbg !36
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !36
  %240 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !40
  %241 = insertelement <4 x i32> %240, i32 %164, i64 1, !dbg !40
  %242 = insertelement <4 x i32> %241, i32 %165, i64 2, !dbg !40
  %243 = insertelement <4 x i32> %242, i32 %166, i64 3, !dbg !40
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !40
  %245 = fcmp ogt <4 x float> %234, %229, !dbg !41
  %246 = fcmp uno <4 x float> %234, zeroinitializer, !dbg !45
  %247 = or <4 x i1> %245, %246, !dbg !46
  %.v35 = select <4 x i1> %247, <4 x i32> %233, <4 x i32> %228, !dbg !47
  %248 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !47
  %249 = fcmp olt <4 x float> %248, %239, !dbg !48
  %250 = fcmp uno <4 x float> %239, zeroinitializer, !dbg !50
  %251 = or <4 x i1> %249, %250, !dbg !51
  %.v36 = select <4 x i1> %251, <4 x i32> %238, <4 x i32> %.v35, !dbg !52
  %252 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !52
  %253 = fcmp olt <4 x float> %252, %244, !dbg !53
  %254 = bitcast i32 %163 to float, !dbg !55
  %255 = fcmp uno float %254, 0.000000e+00, !dbg !55
  %256 = bitcast i32 %164 to float, !dbg !55
  %257 = fcmp uno float %256, 0.000000e+00, !dbg !55
  %258 = bitcast i32 %165 to float, !dbg !55
  %259 = fcmp uno float %258, 0.000000e+00, !dbg !55
  %260 = bitcast i32 %166 to float, !dbg !55
  %261 = fcmp uno float %260, 0.000000e+00, !dbg !55
  %262 = extractelement <4 x i1> %253, i64 0, !dbg !56
  %263 = or i1 %262, %255, !dbg !56
  %264 = extractelement <4 x i1> %253, i64 1, !dbg !56
  %265 = or i1 %264, %257, !dbg !56
  %266 = extractelement <4 x i1> %253, i64 2, !dbg !56
  %267 = or i1 %266, %259, !dbg !56
  %268 = extractelement <4 x i1> %253, i64 3, !dbg !56
  %269 = or i1 %268, %261, !dbg !56
  %270 = zext <4 x i1> %245 to <4 x i8>, !dbg !57
  %271 = select <4 x i1> %249, <4 x i8> splat (i8 2), <4 x i8> %270, !dbg !58
  %272 = select <4 x i1> %253, <4 x i8> splat (i8 3), <4 x i8> %271, !dbg !59
  %273 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !28
  %274 = insertelement <4 x i32> %273, i32 %70, i64 1, !dbg !28
  %275 = insertelement <4 x i32> %274, i32 %71, i64 2, !dbg !28
  %276 = insertelement <4 x i32> %275, i32 %72, i64 3, !dbg !28
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !28
  %278 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !32
  %279 = insertelement <4 x i32> %278, i32 %103, i64 1, !dbg !32
  %280 = insertelement <4 x i32> %279, i32 %104, i64 2, !dbg !32
  %281 = insertelement <4 x i32> %280, i32 %105, i64 3, !dbg !32
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !32
  %283 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !36
  %284 = insertelement <4 x i32> %283, i32 %136, i64 1, !dbg !36
  %285 = insertelement <4 x i32> %284, i32 %137, i64 2, !dbg !36
  %286 = insertelement <4 x i32> %285, i32 %138, i64 3, !dbg !36
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !36
  %288 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !40
  %289 = insertelement <4 x i32> %288, i32 %169, i64 1, !dbg !40
  %290 = insertelement <4 x i32> %289, i32 %170, i64 2, !dbg !40
  %291 = insertelement <4 x i32> %290, i32 %171, i64 3, !dbg !40
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !40
  %293 = fcmp ogt <4 x float> %282, %277, !dbg !41
  %294 = fcmp uno <4 x float> %282, zeroinitializer, !dbg !45
  %295 = or <4 x i1> %293, %294, !dbg !46
  %.v37 = select <4 x i1> %295, <4 x i32> %281, <4 x i32> %276, !dbg !47
  %296 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !47
  %297 = fcmp olt <4 x float> %296, %287, !dbg !48
  %298 = fcmp uno <4 x float> %287, zeroinitializer, !dbg !50
  %299 = or <4 x i1> %297, %298, !dbg !51
  %.v38 = select <4 x i1> %299, <4 x i32> %286, <4 x i32> %.v37, !dbg !52
  %300 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !52
  %301 = fcmp olt <4 x float> %300, %292, !dbg !53
  %302 = bitcast i32 %168 to float, !dbg !55
  %303 = fcmp uno float %302, 0.000000e+00, !dbg !55
  %304 = bitcast i32 %169 to float, !dbg !55
  %305 = fcmp uno float %304, 0.000000e+00, !dbg !55
  %306 = bitcast i32 %170 to float, !dbg !55
  %307 = fcmp uno float %306, 0.000000e+00, !dbg !55
  %308 = bitcast i32 %171 to float, !dbg !55
  %309 = fcmp uno float %308, 0.000000e+00, !dbg !55
  %310 = extractelement <4 x i1> %301, i64 0, !dbg !56
  %311 = or i1 %310, %303, !dbg !56
  %312 = extractelement <4 x i1> %301, i64 1, !dbg !56
  %313 = or i1 %312, %305, !dbg !56
  %314 = extractelement <4 x i1> %301, i64 2, !dbg !56
  %315 = or i1 %314, %307, !dbg !56
  %316 = extractelement <4 x i1> %301, i64 3, !dbg !56
  %317 = or i1 %316, %309, !dbg !56
  %318 = zext <4 x i1> %293 to <4 x i8>, !dbg !57
  %319 = select <4 x i1> %297, <4 x i8> splat (i8 2), <4 x i8> %318, !dbg !58
  %320 = select <4 x i1> %301, <4 x i8> splat (i8 3), <4 x i8> %319, !dbg !59
  %321 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !28
  %322 = insertelement <4 x i32> %321, i32 %75, i64 1, !dbg !28
  %323 = insertelement <4 x i32> %322, i32 %76, i64 2, !dbg !28
  %324 = insertelement <4 x i32> %323, i32 %77, i64 3, !dbg !28
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !28
  %326 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !32
  %327 = insertelement <4 x i32> %326, i32 %108, i64 1, !dbg !32
  %328 = insertelement <4 x i32> %327, i32 %109, i64 2, !dbg !32
  %329 = insertelement <4 x i32> %328, i32 %110, i64 3, !dbg !32
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !32
  %331 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !36
  %332 = insertelement <4 x i32> %331, i32 %141, i64 1, !dbg !36
  %333 = insertelement <4 x i32> %332, i32 %142, i64 2, !dbg !36
  %334 = insertelement <4 x i32> %333, i32 %143, i64 3, !dbg !36
  %335 = bitcast <4 x i32> %334 to <4 x float>, !dbg !36
  %336 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !40
  %337 = insertelement <4 x i32> %336, i32 %174, i64 1, !dbg !40
  %338 = insertelement <4 x i32> %337, i32 %175, i64 2, !dbg !40
  %339 = insertelement <4 x i32> %338, i32 %176, i64 3, !dbg !40
  %340 = bitcast <4 x i32> %339 to <4 x float>, !dbg !40
  %341 = fcmp ogt <4 x float> %330, %325, !dbg !41
  %342 = fcmp uno <4 x float> %330, zeroinitializer, !dbg !45
  %343 = or <4 x i1> %341, %342, !dbg !46
  %.v39 = select <4 x i1> %343, <4 x i32> %329, <4 x i32> %324, !dbg !47
  %344 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !47
  %345 = fcmp olt <4 x float> %344, %335, !dbg !48
  %346 = fcmp uno <4 x float> %335, zeroinitializer, !dbg !50
  %347 = or <4 x i1> %345, %346, !dbg !51
  %.v40 = select <4 x i1> %347, <4 x i32> %334, <4 x i32> %.v39, !dbg !52
  %348 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !52
  %349 = fcmp olt <4 x float> %348, %340, !dbg !53
  %350 = bitcast i32 %173 to float, !dbg !55
  %351 = fcmp uno float %350, 0.000000e+00, !dbg !55
  %352 = bitcast i32 %174 to float, !dbg !55
  %353 = fcmp uno float %352, 0.000000e+00, !dbg !55
  %354 = bitcast i32 %175 to float, !dbg !55
  %355 = fcmp uno float %354, 0.000000e+00, !dbg !55
  %356 = bitcast i32 %176 to float, !dbg !55
  %357 = fcmp uno float %356, 0.000000e+00, !dbg !55
  %358 = extractelement <4 x i1> %349, i64 0, !dbg !56
  %359 = or i1 %358, %351, !dbg !56
  %360 = extractelement <4 x i1> %349, i64 1, !dbg !56
  %361 = or i1 %360, %353, !dbg !56
  %362 = extractelement <4 x i1> %349, i64 2, !dbg !56
  %363 = or i1 %362, %355, !dbg !56
  %364 = extractelement <4 x i1> %349, i64 3, !dbg !56
  %365 = or i1 %364, %357, !dbg !56
  %366 = zext <4 x i1> %341 to <4 x i8>, !dbg !57
  %367 = select <4 x i1> %345, <4 x i8> splat (i8 2), <4 x i8> %366, !dbg !58
  %368 = select <4 x i1> %349, <4 x i8> splat (i8 3), <4 x i8> %367, !dbg !59
  %369 = shl i32 %27, 2, !dbg !60
  %370 = shl i32 %28, 2, !dbg !60
  %371 = shl i32 %29, 2, !dbg !60
  %372 = shl i32 %30, 2, !dbg !60
  %373 = shl i32 %14, 9, !dbg !61
  %374 = add i32 %369, %373, !dbg !62
  %375 = add i32 %373, %370, !dbg !62
  %376 = add i32 %373, %371, !dbg !62
  %377 = add i32 %373, %372, !dbg !62
  %378 = sext i32 %374 to i64, !dbg !63
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !63
  %380 = sext i32 %375 to i64, !dbg !63
  %381 = getelementptr float, ptr addrspace(1) %1, i64 %380, !dbg !63
  %382 = sext i32 %376 to i64, !dbg !63
  %383 = getelementptr float, ptr addrspace(1) %1, i64 %382, !dbg !63
  %384 = sext i32 %377 to i64, !dbg !63
  %385 = getelementptr float, ptr addrspace(1) %1, i64 %384, !dbg !63
  %386 = shl i32 %8, 8, !dbg !64
  %387 = and i32 %386, 3840, !dbg !64
  %388 = or disjoint i32 %387, %10, !dbg !64
  %389 = and i32 %11, 1020, !dbg !64
  %390 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %387, !dbg !64
  %391 = getelementptr float, ptr addrspace(3) %390, i32 %388, !dbg !64
  %392 = extractelement <4 x i32> %.v34, i64 0, !dbg !64
  %393 = select i1 %215, i32 %158, i32 %392, !dbg !65
  %394 = insertelement <1 x i32> poison, i32 %393, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %394, i1 true) #2, !dbg !64
  %395 = or disjoint i32 %388, 16, !dbg !64
  %396 = lshr i32 %395, 2, !dbg !64
  %397 = and i32 %396, 964, !dbg !64
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i32 %397, !dbg !64
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %395, !dbg !64
  %400 = extractelement <4 x i32> %.v34, i64 1, !dbg !64
  %401 = select i1 %217, i32 %159, i32 %400, !dbg !65
  %402 = insertelement <1 x i32> poison, i32 %401, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %402, i1 true) #2, !dbg !64
  %403 = or disjoint i32 %388, 32, !dbg !64
  %404 = lshr i32 %403, 2, !dbg !64
  %405 = and i32 %404, 968, !dbg !64
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !64
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %403, !dbg !64
  %408 = extractelement <4 x i32> %.v34, i64 2, !dbg !64
  %409 = select i1 %219, i32 %160, i32 %408, !dbg !65
  %410 = insertelement <1 x i32> poison, i32 %409, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %410, i1 true) #2, !dbg !64
  %411 = or disjoint i32 %388, 48, !dbg !64
  %412 = lshr i32 %411, 2, !dbg !64
  %413 = and i32 %412, 972, !dbg !64
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %413, !dbg !64
  %415 = getelementptr float, ptr addrspace(3) %414, i32 %411, !dbg !64
  %416 = extractelement <4 x i32> %.v34, i64 3, !dbg !64
  %417 = select i1 %221, i32 %161, i32 %416, !dbg !65
  %418 = insertelement <1 x i32> poison, i32 %417, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %418, i1 true) #2, !dbg !64
  %419 = or disjoint i32 %388, 64, !dbg !64
  %420 = lshr i32 %419, 2, !dbg !64
  %421 = and i32 %420, 976, !dbg !64
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %421, !dbg !64
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %419, !dbg !64
  %424 = extractelement <4 x i32> %.v36, i64 0, !dbg !64
  %425 = select i1 %263, i32 %163, i32 %424, !dbg !65
  %426 = insertelement <1 x i32> poison, i32 %425, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %426, i1 true) #2, !dbg !64
  %427 = or disjoint i32 %388, 80, !dbg !64
  %428 = lshr i32 %427, 2, !dbg !64
  %429 = and i32 %428, 980, !dbg !64
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i32 %429, !dbg !64
  %431 = getelementptr float, ptr addrspace(3) %430, i32 %427, !dbg !64
  %432 = extractelement <4 x i32> %.v36, i64 1, !dbg !64
  %433 = select i1 %265, i32 %164, i32 %432, !dbg !65
  %434 = insertelement <1 x i32> poison, i32 %433, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %434, i1 true) #2, !dbg !64
  %435 = or disjoint i32 %388, 96, !dbg !64
  %436 = lshr i32 %435, 2, !dbg !64
  %437 = and i32 %436, 984, !dbg !64
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %437, !dbg !64
  %439 = getelementptr float, ptr addrspace(3) %438, i32 %435, !dbg !64
  %440 = extractelement <4 x i32> %.v36, i64 2, !dbg !64
  %441 = select i1 %267, i32 %165, i32 %440, !dbg !65
  %442 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %442, i1 true) #2, !dbg !64
  %443 = or disjoint i32 %388, 112, !dbg !64
  %444 = lshr i32 %443, 2, !dbg !64
  %445 = and i32 %444, 988, !dbg !64
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !64
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %443, !dbg !64
  %448 = extractelement <4 x i32> %.v36, i64 3, !dbg !64
  %449 = select i1 %269, i32 %166, i32 %448, !dbg !65
  %450 = insertelement <1 x i32> poison, i32 %449, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %450, i1 true) #2, !dbg !64
  %451 = or disjoint i32 %388, 128, !dbg !64
  %452 = lshr i32 %451, 2, !dbg !64
  %453 = and i32 %452, 992, !dbg !64
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !64
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %451, !dbg !64
  %456 = extractelement <4 x i32> %.v38, i64 0, !dbg !64
  %457 = select i1 %311, i32 %168, i32 %456, !dbg !65
  %458 = insertelement <1 x i32> poison, i32 %457, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %458, i1 true) #2, !dbg !64
  %459 = or disjoint i32 %388, 144, !dbg !64
  %460 = lshr i32 %459, 2, !dbg !64
  %461 = and i32 %460, 996, !dbg !64
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !64
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %459, !dbg !64
  %464 = extractelement <4 x i32> %.v38, i64 1, !dbg !64
  %465 = select i1 %313, i32 %169, i32 %464, !dbg !65
  %466 = insertelement <1 x i32> poison, i32 %465, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %466, i1 true) #2, !dbg !64
  %467 = or disjoint i32 %388, 160, !dbg !64
  %468 = lshr i32 %467, 2, !dbg !64
  %469 = and i32 %468, 1000, !dbg !64
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !64
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %467, !dbg !64
  %472 = extractelement <4 x i32> %.v38, i64 2, !dbg !64
  %473 = select i1 %315, i32 %170, i32 %472, !dbg !65
  %474 = insertelement <1 x i32> poison, i32 %473, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %474, i1 true) #2, !dbg !64
  %475 = or disjoint i32 %388, 176, !dbg !64
  %476 = lshr i32 %475, 2, !dbg !64
  %477 = and i32 %476, 1004, !dbg !64
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !64
  %479 = getelementptr float, ptr addrspace(3) %478, i32 %475, !dbg !64
  %480 = extractelement <4 x i32> %.v38, i64 3, !dbg !64
  %481 = select i1 %317, i32 %171, i32 %480, !dbg !65
  %482 = insertelement <1 x i32> poison, i32 %481, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %482, i1 true) #2, !dbg !64
  %483 = or disjoint i32 %388, 192, !dbg !64
  %484 = lshr i32 %483, 2, !dbg !64
  %485 = and i32 %484, 1008, !dbg !64
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485, !dbg !64
  %487 = getelementptr float, ptr addrspace(3) %486, i32 %483, !dbg !64
  %488 = extractelement <4 x i32> %.v40, i64 0, !dbg !64
  %489 = select i1 %359, i32 %173, i32 %488, !dbg !65
  %490 = insertelement <1 x i32> poison, i32 %489, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %490, i1 true) #2, !dbg !64
  %491 = or disjoint i32 %388, 208, !dbg !64
  %492 = lshr i32 %491, 2, !dbg !64
  %493 = and i32 %492, 1012, !dbg !64
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !64
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %491, !dbg !64
  %496 = extractelement <4 x i32> %.v40, i64 1, !dbg !64
  %497 = select i1 %361, i32 %174, i32 %496, !dbg !65
  %498 = insertelement <1 x i32> poison, i32 %497, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %498, i1 true) #2, !dbg !64
  %499 = or disjoint i32 %388, 224, !dbg !64
  %500 = lshr i32 %499, 2, !dbg !64
  %501 = and i32 %500, 1016, !dbg !64
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %501, !dbg !64
  %503 = getelementptr float, ptr addrspace(3) %502, i32 %499, !dbg !64
  %504 = extractelement <4 x i32> %.v40, i64 2, !dbg !64
  %505 = select i1 %363, i32 %175, i32 %504, !dbg !65
  %506 = insertelement <1 x i32> poison, i32 %505, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %506, i1 true) #2, !dbg !64
  %507 = or disjoint i32 %388, 240, !dbg !64
  %508 = lshr i32 %507, 2, !dbg !64
  %509 = and i32 %508, 1020, !dbg !64
  %510 = getelementptr float, ptr addrspace(3) @global_smem, i32 %509, !dbg !64
  %511 = getelementptr float, ptr addrspace(3) %510, i32 %507, !dbg !64
  %512 = extractelement <4 x i32> %.v40, i64 3, !dbg !64
  %513 = select i1 %365, i32 %176, i32 %512, !dbg !65
  %514 = insertelement <1 x i32> poison, i32 %513, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %514, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %515 = and i32 %8, 252, !dbg !64
  %516 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %515, !dbg !64
  %517 = getelementptr inbounds float, ptr addrspace(3) %516, i32 %389, !dbg !64
  %518 = or disjoint i32 %389, 1024, !dbg !64
  %519 = lshr exact i32 %518, 2, !dbg !64
  %520 = and i32 %519, 508, !dbg !64
  %521 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %520, !dbg !64
  %522 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %518, !dbg !64
  %523 = load <4 x i32>, ptr addrspace(3) %522, align 16, !dbg !64
  %524 = or disjoint i32 %389, 2048, !dbg !64
  %525 = lshr exact i32 %524, 2, !dbg !64
  %526 = and i32 %525, 764, !dbg !64
  %527 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %526, !dbg !64
  %528 = getelementptr inbounds float, ptr addrspace(3) %527, i32 %524, !dbg !64
  %529 = load <4 x i32>, ptr addrspace(3) %528, align 16, !dbg !64
  %530 = or disjoint i32 %389, 3072, !dbg !64
  %531 = lshr exact i32 %530, 2, !dbg !64
  %532 = and i32 %531, 1020, !dbg !64
  %533 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %532, !dbg !64
  %534 = getelementptr inbounds float, ptr addrspace(3) %533, i32 %530, !dbg !64
  %535 = load <4 x i32>, ptr addrspace(3) %534, align 16, !dbg !64
  %.extract = load i32, ptr addrspace(3) %517, align 16, !dbg !64
  %536 = getelementptr inbounds i8, ptr addrspace(3) %517, i32 4, !dbg !64
  %.extract19 = load i32, ptr addrspace(3) %536, align 4, !dbg !64
  %537 = getelementptr inbounds i8, ptr addrspace(3) %517, i32 8, !dbg !64
  %.extract20 = load i32, ptr addrspace(3) %537, align 8, !dbg !64
  %538 = getelementptr inbounds i8, ptr addrspace(3) %517, i32 12, !dbg !64
  %.extract21 = load i32, ptr addrspace(3) %538, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %379, i1 %54) #2, !dbg !64
  %.extract22 = extractelement <4 x i32> %523, i64 0, !dbg !64
  %.extract23 = extractelement <4 x i32> %523, i64 1, !dbg !64
  %.extract24 = extractelement <4 x i32> %523, i64 2, !dbg !64
  %.extract25 = extractelement <4 x i32> %523, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %381, i1 %55) #2, !dbg !64
  %.extract26 = extractelement <4 x i32> %529, i64 0, !dbg !64
  %.extract27 = extractelement <4 x i32> %529, i64 1, !dbg !64
  %.extract28 = extractelement <4 x i32> %529, i64 2, !dbg !64
  %.extract29 = extractelement <4 x i32> %529, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %383, i1 %56) #2, !dbg !64
  %.extract30 = extractelement <4 x i32> %535, i64 0, !dbg !64
  %.extract31 = extractelement <4 x i32> %535, i64 1, !dbg !64
  %.extract32 = extractelement <4 x i32> %535, i64 2, !dbg !64
  %.extract33 = extractelement <4 x i32> %535, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %385, i1 %57) #2, !dbg !64
  %539 = shl i32 %13, 9, !dbg !66
  %540 = add i32 %23, %539, !dbg !67
  %541 = sext i32 %540 to i64, !dbg !68
  %542 = getelementptr i8, ptr addrspace(1) %2, i64 %541, !dbg !68
  %543 = bitcast <4 x i8> %224 to i32, !dbg !69
  %544 = bitcast <4 x i8> %272 to i32, !dbg !69
  %545 = bitcast <4 x i8> %320 to i32, !dbg !69
  %546 = bitcast <4 x i8> %368 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %543, i32 %544, i32 %545, i32 %546, ptr addrspace(1) %542, i1 %53) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4mtp4minipb7uxxbhskson2tncsyqw7fpx55awfmdokoylz2di.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 45, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 63, scope: !7)
!28 = !DILocation(line: 34, column: 55, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 51, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 61, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 52, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 62, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 52, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 62, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 39, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 40, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!57 = !DILocation(line: 44, column: 33, scope: !7)
!58 = !DILocation(line: 47, column: 35, scope: !7)
!59 = !DILocation(line: 50, column: 35, scope: !7)
!60 = !DILocation(line: 51, column: 32, scope: !7)
!61 = !DILocation(line: 51, column: 42, scope: !7)
!62 = !DILocation(line: 51, column: 37, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 53, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!66 = !DILocation(line: 52, column: 34, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 25, scope: !7)
!69 = !DILocation(line: 52, column: 46, scope: !7)
!70 = !DILocation(line: 52, column: 4, scope: !7)
