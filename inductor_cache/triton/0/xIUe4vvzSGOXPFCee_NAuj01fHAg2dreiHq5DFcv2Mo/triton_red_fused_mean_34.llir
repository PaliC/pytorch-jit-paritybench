; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = lshr i32 %7, 4, !dbg !14
  %12 = and i32 %11, 7, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 4096, !dbg !15
  %14 = mul i32 %13, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = shl i32 %13, 20, !dbg !17
  %16 = add i32 %15, %.decomposed
  br label %17, !dbg !18

17:                                               ; preds = %4, %17
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %17 ]
  %18 = phi <4 x float> [ zeroinitializer, %4 ], [ %34, %17 ]
  %19 = trunc i64 %indvars.iv to i32, !dbg !19
  %.tr = or disjoint i32 %12, %19, !dbg !19
  %20 = shl i32 %.tr, 12, !dbg !19
  %21 = add i32 %16, %20, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %29 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !21
  %30 = insertelement <4 x i32> %29, i32 %26, i64 1, !dbg !21
  %31 = insertelement <4 x i32> %30, i32 %27, i64 2, !dbg !21
  %32 = insertelement <4 x i32> %31, i32 %28, i64 3, !dbg !21
  %33 = bitcast <4 x i32> %32 to <4 x float>, !dbg !21
  %34 = fadd <4 x float> %18, %33, !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %35 = icmp samesign ult i64 %indvars.iv, 248, !dbg !18
  br i1 %35, label %17, label %36, !dbg !18

36:                                               ; preds = %17
  %37 = lshr i32 %7, 5, !dbg !12
  %38 = and i32 %7, 63, !dbg !12
  %39 = or disjoint i32 %6, %38, !dbg !13
  %40 = and i32 %7, 16, !dbg !12
  %41 = extractelement <4 x float> %34, i64 0, !dbg !23
  %42 = bitcast float %41 to i32, !dbg !23
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = fadd float %41, %44, !dbg !27
  %46 = extractelement <4 x float> %34, i64 1, !dbg !23
  %47 = bitcast float %46 to i32, !dbg !23
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 16, i32 31), !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = fadd float %46, %49, !dbg !27
  %51 = extractelement <4 x float> %34, i64 2, !dbg !23
  %52 = bitcast float %51 to i32, !dbg !23
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = fadd float %51, %54, !dbg !27
  %56 = extractelement <4 x float> %34, i64 3, !dbg !23
  %57 = bitcast float %56 to i32, !dbg !23
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = fadd float %56, %59, !dbg !27
  %61 = icmp eq i32 %40, 0, !dbg !23
  %62 = and i32 %37, 3, !dbg !23
  %63 = shl nuw nsw i32 %9, 2, !dbg !23
  %64 = or disjoint i32 %63, %62, !dbg !23
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !23
  %66 = bitcast float %45 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %61) #3, !dbg !23
  %67 = or disjoint i32 %63, 4, !dbg !23
  %68 = or disjoint i32 %67, %62, !dbg !23
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !23
  %70 = bitcast float %50 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 %61) #3, !dbg !23
  %71 = or disjoint i32 %63, 8, !dbg !23
  %72 = or disjoint i32 %71, %62, !dbg !23
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !23
  %74 = bitcast float %55 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 %61) #3, !dbg !23
  %75 = or disjoint i32 %63, 12, !dbg !23
  %76 = or disjoint i32 %75, %62, !dbg !23
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !23
  %78 = bitcast float %60 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 %61) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %79 = icmp slt i32 %7, 256, !dbg !23
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !23
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %79) #3, !dbg !23
  %82 = bitcast i32 %81 to float, !dbg !23
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !23
  %84 = bitcast i32 %83 to float, !dbg !23
  %85 = fadd float %82, %84, !dbg !27
  %86 = bitcast float %85 to i32, !dbg !23
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !23
  %88 = bitcast i32 %87 to float, !dbg !23
  %89 = fadd float %85, %88, !dbg !27
  %90 = and i32 %7, 3, !dbg !23
  %91 = icmp eq i32 %90, 0, !dbg !23
  %92 = and i1 %79, %91, !dbg !23
  %93 = bitcast float %89 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %93, i1 %92) #3, !dbg !23
  %94 = getelementptr i8, ptr addrspace(3) %80, i32 512, !dbg !23
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %79) #3, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !23
  %98 = bitcast i32 %97 to float, !dbg !23
  %99 = fadd float %96, %98, !dbg !27
  %100 = bitcast float %99 to i32, !dbg !23
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !23
  %102 = bitcast i32 %101 to float, !dbg !23
  %103 = fadd float %99, %102, !dbg !27
  %104 = bitcast float %103 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %104, i1 %92) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !23
  %106 = load i32, ptr addrspace(3) %105, align 16, !dbg !23
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !23
  %108 = load i32, ptr addrspace(3) %107, align 16, !dbg !23
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !23
  %110 = load i32, ptr addrspace(3) %109, align 16, !dbg !23
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !23
  %112 = load i32, ptr addrspace(3) %111, align 16, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %113, i32 %106, i32 %108, i32 %110, i32 %112, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %38, !dbg !29
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !29
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 2.560000e+02) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %117 = sext i32 %39 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !31
  %119 = and i32 %7, 64, !dbg !32
  %120 = icmp eq i32 %119, 0, !dbg !32
  %121 = bitcast float %116 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %118, i1 %120) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ojoprknxyrg2pes6evjhkfhlrqmz3umcwmfqqxdx5ngnm7ksel.py", directory: "inductor_cache/3o")
!4 = !{ptr @triton_red_fused_mean_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_34", linkageName: "triton_red_fused_mean_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 57, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 49, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 62, scope: !7)
!22 = !DILocation(line: 36, column: 23, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 38, column: 25, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 4, scope: !7)
!31 = !DILocation(line: 42, column: 28, scope: !7)
!32 = !DILocation(line: 42, column: 39, scope: !7)
!33 = !DILocation(line: 42, column: 4, scope: !7)
