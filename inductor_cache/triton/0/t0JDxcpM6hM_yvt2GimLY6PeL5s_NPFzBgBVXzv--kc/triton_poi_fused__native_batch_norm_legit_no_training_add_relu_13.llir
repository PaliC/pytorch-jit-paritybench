; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #4, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #4, !dbg !12
  %13 = mul i32 %12, %11, !dbg !13
  %14 = add i32 %13, %10, !dbg !14
  %15 = shl i32 %14, 10, !dbg !15
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %17 = and i32 %16, 127, !dbg !16
  %18 = or disjoint i32 %17, 128, !dbg !16
  %19 = or disjoint i32 %17, 256, !dbg !16
  %20 = or disjoint i32 %17, 384, !dbg !16
  %21 = or disjoint i32 %15, %17, !dbg !17
  %22 = or disjoint i32 %15, %18, !dbg !17
  %23 = or disjoint i32 %15, %19, !dbg !17
  %24 = or disjoint i32 %15, %20, !dbg !17
  %25 = or disjoint i32 %21, 512, !dbg !17
  %26 = or disjoint i32 %21, 640, !dbg !17
  %27 = or disjoint i32 %21, 768, !dbg !17
  %28 = or disjoint i32 %21, 896, !dbg !17
  %29 = icmp slt i32 %21, 262144, !dbg !18
  %30 = icmp slt i32 %22, 262144, !dbg !18
  %31 = icmp slt i32 %23, 262144, !dbg !18
  %32 = icmp slt i32 %24, 262144, !dbg !18
  %33 = icmp slt i32 %25, 262144, !dbg !18
  %34 = icmp slt i32 %26, 262144, !dbg !18
  %35 = icmp slt i32 %27, 262144, !dbg !18
  %36 = icmp slt i32 %28, 262144, !dbg !18
  %37 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !19
  %38 = icmp slt i32 %37, 16, !dbg !20
  %39 = shl i32 %21, 4, !dbg !21
  %40 = shl i32 %22, 4, !dbg !21
  %41 = shl i32 %23, 4, !dbg !21
  %42 = shl i32 %24, 4, !dbg !21
  %43 = shl i32 %25, 4, !dbg !21
  %44 = shl i32 %26, 4, !dbg !21
  %45 = shl i32 %27, 4, !dbg !21
  %46 = shl i32 %28, 4, !dbg !21
  %47 = add i32 %39, %37, !dbg !22
  %48 = add i32 %40, %37, !dbg !22
  %49 = add i32 %41, %37, !dbg !22
  %50 = add i32 %42, %37, !dbg !22
  %51 = add i32 %37, %43, !dbg !22
  %52 = add i32 %37, %44, !dbg !22
  %53 = add i32 %37, %45, !dbg !22
  %54 = add i32 %37, %46, !dbg !22
  %55 = sext i32 %47 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %48 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %49 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %50 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %51 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %52 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %53 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = sext i32 %54 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = and i1 %38, %29, !dbg !24
  %72 = and i1 %38, %30, !dbg !24
  %73 = and i1 %38, %31, !dbg !24
  %74 = and i1 %38, %32, !dbg !24
  %75 = and i1 %33, %38, !dbg !24
  %76 = and i1 %34, %38, !dbg !24
  %77 = and i1 %35, %38, !dbg !24
  %78 = and i1 %36, %38, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %71) #4, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %72) #4, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %73) #4, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %74) #4, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %75) #4, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %76) #4, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %77) #4, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %78) #4, !dbg !25
  %87 = sext i32 %37 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %38) #4, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %38) #4, !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %38) #4, !dbg !31
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !32
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %38) #4, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !34
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !34
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !34
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %71) #4, !dbg !35
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %72) #4, !dbg !35
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %73) #4, !dbg !35
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %74) #4, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %75) #4, !dbg !35
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %76) #4, !dbg !35
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %77) #4, !dbg !35
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %78) #4, !dbg !35
  %113 = fadd float %92, 0x3EE4F8B580000000, !dbg !36
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %114, 0, !dbg !37
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %115, 0, !dbg !37
  br i1 %.not.i, label %121, label %116, !dbg !37

116:                                              ; preds = %9
  br i1 %.not1.i, label %119, label %117, !dbg !37

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

121:                                              ; preds = %9
  br i1 %.not1.i, label %124, label %122, !dbg !37

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %117, %119, %122, %124
  %.0.i = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !37
  %126 = insertelement <8 x i32> poison, i32 %86, i64 0, !dbg !25
  %127 = insertelement <8 x i32> %126, i32 %85, i64 1, !dbg !25
  %128 = insertelement <8 x i32> %127, i32 %84, i64 2, !dbg !25
  %129 = insertelement <8 x i32> %128, i32 %83, i64 3, !dbg !25
  %130 = insertelement <8 x i32> %129, i32 %82, i64 4, !dbg !25
  %131 = insertelement <8 x i32> %130, i32 %81, i64 5, !dbg !25
  %132 = insertelement <8 x i32> %131, i32 %80, i64 6, !dbg !25
  %133 = insertelement <8 x i32> %132, i32 %79, i64 7, !dbg !25
  %134 = bitcast <8 x i32> %133 to <8 x float>, !dbg !25
  %135 = bitcast i32 %112 to float, !dbg !35
  %136 = bitcast i32 %111 to float, !dbg !35
  %137 = bitcast i32 %110 to float, !dbg !35
  %138 = bitcast i32 %109 to float, !dbg !35
  %139 = bitcast i32 %108 to float, !dbg !35
  %140 = bitcast i32 %107 to float, !dbg !35
  %141 = bitcast i32 %106 to float, !dbg !35
  %142 = bitcast i32 %105 to float, !dbg !35
  %143 = shl i32 %16, 2, !dbg !16
  %144 = and i32 %143, 508, !dbg !16
  %145 = or disjoint i32 %144, %15, !dbg !17
  %146 = or disjoint i32 %145, 512, !dbg !17
  %147 = icmp slt i32 %146, 262144, !dbg !18
  %148 = and i1 %38, %147, !dbg !24
  %149 = icmp slt i32 %145, 262144, !dbg !18
  %150 = and i1 %38, %149, !dbg !24
  %.frozen = freeze i32 %146, !dbg !38
  %151 = sdiv i32 %.frozen, 65536, !dbg !38
  %.frozen15 = freeze i32 %145, !dbg !38
  %152 = sdiv i32 %.frozen15, 65536, !dbg !38
  %153 = mul i32 %151, 65536, !dbg !39
  %.decomposed = sub i32 %.frozen, %153, !dbg !39
  %154 = mul i32 %152, 65536, !dbg !39
  %.decomposed16 = sub i32 %.frozen15, %154, !dbg !39
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %156 = insertelement <8 x i32> poison, i32 %89, i64 0, !dbg !41
  %157 = bitcast <8 x i32> %156 to <8 x float>, !dbg !41
  %158 = shufflevector <8 x float> %157, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !41
  %159 = fsub <8 x float> %134, %158, !dbg !41
  %160 = insertelement <8 x float> poison, float %155, i64 0, !dbg !42
  %161 = shufflevector <8 x float> %160, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !42
  %162 = fmul <8 x float> %159, %161, !dbg !42
  %163 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !43
  %164 = bitcast <8 x i32> %163 to <8 x float>, !dbg !43
  %165 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !43
  %166 = fmul <8 x float> %162, %165, !dbg !43
  %167 = insertelement <8 x i32> poison, i32 %96, i64 0, !dbg !44
  %168 = bitcast <8 x i32> %167 to <8 x float>, !dbg !44
  %169 = shufflevector <8 x float> %168, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !44
  %170 = fadd <8 x float> %166, %169, !dbg !44
  %171 = fcmp olt <8 x float> %170, zeroinitializer, !dbg !45
  %172 = extractelement <8 x i1> %171, i64 7, !dbg !49
  %173 = extractelement <8 x float> %170, i64 7, !dbg !49
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !49
  %175 = extractelement <8 x i1> %171, i64 6, !dbg !49
  %176 = extractelement <8 x float> %170, i64 6, !dbg !49
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !49
  %178 = extractelement <8 x i1> %171, i64 5, !dbg !49
  %179 = extractelement <8 x float> %170, i64 5, !dbg !49
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !49
  %181 = extractelement <8 x i1> %171, i64 4, !dbg !49
  %182 = extractelement <8 x float> %170, i64 4, !dbg !49
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !49
  %184 = extractelement <8 x i1> %171, i64 3, !dbg !49
  %185 = extractelement <8 x float> %170, i64 3, !dbg !49
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !49
  %187 = extractelement <8 x i1> %171, i64 2, !dbg !49
  %188 = extractelement <8 x float> %170, i64 2, !dbg !49
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !49
  %190 = extractelement <8 x i1> %171, i64 1, !dbg !49
  %191 = extractelement <8 x float> %170, i64 1, !dbg !49
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !49
  %193 = extractelement <8 x i1> %171, i64 0, !dbg !49
  %194 = extractelement <8 x float> %170, i64 0, !dbg !49
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !49
  %196 = fadd float %174, %142, !dbg !50
  %197 = fadd float %177, %141, !dbg !50
  %198 = fadd float %180, %140, !dbg !50
  %199 = fadd float %183, %139, !dbg !50
  %200 = fadd float %186, %138, !dbg !50
  %201 = fadd float %189, %137, !dbg !50
  %202 = fadd float %192, %136, !dbg !50
  %203 = fadd float %195, %135, !dbg !50
  %204 = shl i32 %37, 16, !dbg !51
  %205 = add i32 %.decomposed16, %204, !dbg !52
  %206 = add i32 %.decomposed, %204, !dbg !52
  %207 = shl i32 %152, 20, !dbg !53
  %208 = shl i32 %151, 20, !dbg !53
  %209 = add i32 %205, %207, !dbg !54
  %210 = add i32 %206, %208, !dbg !54
  %211 = sext i32 %209 to i64, !dbg !55
  %212 = getelementptr float, ptr addrspace(1) %6, i64 %211, !dbg !55
  %213 = sext i32 %210 to i64, !dbg !55
  %214 = getelementptr float, ptr addrspace(1) %6, i64 %213, !dbg !55
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !56
  %216 = bitcast float %196 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #4, !dbg !56
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !56
  %218 = bitcast float %197 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !56
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !56
  %220 = bitcast float %198 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !56
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !56
  %222 = bitcast float %199 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !56
  %224 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %225 = bitcast float %200 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %225, i1 true) #4, !dbg !56
  %226 = bitcast float %201 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %226, i1 true) #4, !dbg !56
  %227 = bitcast float %202 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %227, i1 true) #4, !dbg !56
  %228 = bitcast float %203 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %228, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %229 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !56
  %.extract = extractelement <4 x i32> %224, i64 0, !dbg !56
  %.extract8 = extractelement <4 x i32> %224, i64 1, !dbg !56
  %.extract9 = extractelement <4 x i32> %224, i64 2, !dbg !56
  %.extract10 = extractelement <4 x i32> %224, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %212, i1 %150) #4, !dbg !56
  %.extract11 = extractelement <4 x i32> %229, i64 0, !dbg !56
  %.extract12 = extractelement <4 x i32> %229, i64 1, !dbg !56
  %.extract13 = extractelement <4 x i32> %229, i64 2, !dbg !56
  %.extract14 = extractelement <4 x i32> %229, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %214, i1 %148) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctj57h5wixnhdqvka4msvjkriqhrxnciu4tcomxcfokgoxgdjul.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 27, column: 21, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 31, scope: !7)
!35 = !DILocation(line: 37, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 26, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 46, column: 19, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 50, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 36, scope: !7)
!52 = !DILocation(line: 52, column: 30, scope: !7)
!53 = !DILocation(line: 52, column: 49, scope: !7)
!54 = !DILocation(line: 52, column: 41, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 52, column: 61, scope: !7)
!57 = !DILocation(line: 52, column: 4, scope: !7)
