; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_90(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 10752, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 4, !dbg !15
  %18 = srem i32 %17, 672, !dbg !16
  %19 = mul i32 %17, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %.frozen7 = freeze i32 %15, !dbg !18
  %20 = sdiv i32 %.frozen7, 2688, !dbg !18
  %21 = sext i32 %18 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #3, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #3, !dbg !26
  %36 = icmp slt i32 %18, 640, !dbg !27
  %37 = mul i32 %20, 2688, !dbg !28
  %srem.decomposed = sub i32 %.frozen7, %37, !dbg !28
  %38 = mul nsw i32 %20, 2560, !dbg !29
  %39 = add nsw i32 %38, %srem.decomposed, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !31
  %42 = and i1 %16, %36, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !33
  %44 = icmp sgt i32 %18, 639, !dbg !34
  %45 = shl nsw i32 %18, 2, !dbg !35
  %46 = shl nsw i32 %20, 7, !dbg !36
  %47 = add nsw i32 %.decomposed, -2560, !dbg !35
  %48 = add nsw i32 %47, %46, !dbg !37
  %49 = add nsw i32 %48, %45, !dbg !38
  %50 = sext i32 %49 to i64, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !39
  %52 = and i1 %16, %44, !dbg !40
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !41
  %54 = fadd float %27, 0x3EE4F8B580000000, !dbg !42
  %55 = fadd float %29, 0x3EE4F8B580000000, !dbg !42
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %56, 0, !dbg !43
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %57, 0, !dbg !43
  br i1 %.not.i, label %63, label %58, !dbg !43

58:                                               ; preds = %9
  br i1 %.not1.i, label %61, label %59, !dbg !43

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

63:                                               ; preds = %9
  br i1 %.not1.i, label %66, label %64, !dbg !43

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !43
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i2 = icmp eq i32 %68, 0, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i5 = icmp eq i32 %69, 0, !dbg !43
  br i1 %.not.i2, label %75, label %70, !dbg !43

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %73, label %71, !dbg !43

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %78, label %76, !dbg !43

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

__nv_sqrtf.exit6:                                 ; preds = %71, %73, %76, %78
  %.0.i4 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !43
  %80 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %81 = extractvalue { i32, i32 } %53, 1, !dbg !41
  %.v1 = select i1 %36, i32 %80, i32 %81, !dbg !44
  %82 = bitcast i32 %.v1 to float, !dbg !44
  %83 = bitcast i32 %24 to float, !dbg !20
  %84 = fsub float %82, %83, !dbg !45
  %85 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %86 = extractvalue { i32, i32 } %53, 0, !dbg !41
  %.v = select i1 %36, i32 %85, i32 %86, !dbg !44
  %87 = bitcast i32 %.v to float, !dbg !44
  %88 = bitcast i32 %23 to float, !dbg !20
  %89 = fsub float %87, %88, !dbg !45
  %90 = bitcast i32 %35 to float, !dbg !26
  %91 = bitcast i32 %34 to float, !dbg !26
  %92 = bitcast i32 %32 to float, !dbg !24
  %93 = bitcast i32 %31 to float, !dbg !24
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !46
  %96 = fmul float %89, %94, !dbg !47
  %97 = fmul float %84, %95, !dbg !47
  %98 = fmul float %96, %93, !dbg !48
  %99 = fmul float %97, %92, !dbg !48
  %100 = fadd float %98, %91, !dbg !49
  %101 = fadd float %99, %90, !dbg !49
  %102 = fcmp olt float %100, 0.000000e+00, !dbg !50
  %103 = fcmp olt float %101, 0.000000e+00, !dbg !50
  %104 = select i1 %102, float 0.000000e+00, float %100, !dbg !54
  %105 = select i1 %103, float 0.000000e+00, float %101, !dbg !54
  %106 = sext i32 %15 to i64, !dbg !55
  %107 = getelementptr float, ptr addrspace(1) %6, i64 %106, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v, i32 %.v1, ptr addrspace(1) %107, i1 %16) #3, !dbg !56
  %108 = getelementptr float, ptr addrspace(1) %7, i64 %106, !dbg !57
  %109 = bitcast float %104 to i32, !dbg !58
  %110 = bitcast float %105 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %16) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwurvsd2atyfy3ehjjo6cemy3egyhczh4deteait6nzp2th6vp53.py", directory: "inductor_cache/wu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_90, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_90, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_90", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_90", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 38, scope: !7)
!36 = !DILocation(line: 41, column: 57, scope: !7)
!37 = !DILocation(line: 41, column: 35, scope: !7)
!38 = !DILocation(line: 41, column: 53, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 69, scope: !7)
!41 = !DILocation(line: 41, column: 62, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 27, scope: !7)
!44 = !DILocation(line: 42, column: 33, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 25, scope: !7)
!56 = !DILocation(line: 56, column: 37, scope: !7)
!57 = !DILocation(line: 57, column: 25, scope: !7)
!58 = !DILocation(line: 57, column: 37, scope: !7)
!59 = !DILocation(line: 57, column: 4, scope: !7)
