; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_div_mean_mse_loss_mul_sub_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = shl i32 %9, 2, !dbg !10
  %13 = and i32 %12, 508, !dbg !10
  %14 = zext nneg i32 %13 to i64, !dbg !11
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !11
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !12
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = bitcast i32 %18 to float, !dbg !12
  %23 = bitcast i32 %19 to float, !dbg !12
  %24 = bitcast i32 %20 to float, !dbg !12
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !13
  %26 = bitcast i32 %25 to float, !dbg !13
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !14
  %28 = bitcast i32 %27 to float, !dbg !14
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !15
  %30 = bitcast i32 %29 to float, !dbg !15
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #3, !dbg !16
  %32 = bitcast i32 %31 to float, !dbg !16
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #3, !dbg !17
  %34 = bitcast i32 %33 to float, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #3, !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = fadd float %21, %22, !dbg !19
  %38 = fadd float %37, %23, !dbg !19
  %39 = fadd float %38, %24, !dbg !19
  %40 = bitcast float %39 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %39, %42, !dbg !19
  %44 = bitcast float %43 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fadd float %43, %46, !dbg !19
  %48 = bitcast float %47 to i32, !dbg !24
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = fadd float %47, %50, !dbg !19
  %52 = bitcast float %51 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = fadd float %51, %54, !dbg !19
  %56 = bitcast float %55 to i32, !dbg !24
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = fadd float %55, %58, !dbg !19
  %60 = icmp eq i32 %10, 0, !dbg !24
  %61 = and i32 %11, 3, !dbg !24
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !24
  %63 = bitcast float %59 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 %60) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %64 = icmp slt i32 %9, 4, !dbg !24
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !24
  %66 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %65, i1 %64) #3, !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = fadd float %67, %69, !dbg !19
  %71 = bitcast float %70 to i32, !dbg !24
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = fadd float %70, %73, !dbg !19
  %75 = and i32 %9, 3, !dbg !24
  %76 = icmp eq i32 %75, 0, !dbg !24
  %77 = and i1 %64, %76, !dbg !24
  %78 = bitcast float %74 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %78, i1 %77) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %80 = fadd float %79, 0.000000e+00, !dbg !25
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float 4.915200e+04) #3, !dbg !29
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float 1.310720e+05) #3, !dbg !30
  %83 = fadd float %81, %82, !dbg !31
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float 6.553600e+04) #3, !dbg !32
  %85 = fmul float %84, 3.125000e-02, !dbg !33
  %86 = fadd float %85, 0.000000e+00, !dbg !34
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float 2.621440e+05) #3, !dbg !35
  %88 = fmul float %87, 6.250000e-02, !dbg !36
  %89 = fadd float %86, %88, !dbg !37
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float 0x4130000000000000) #3, !dbg !38
  %91 = fmul float %90, 1.250000e-01, !dbg !39
  %92 = fadd float %89, %91, !dbg !40
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 0x4150000000000000) #3, !dbg !41
  %94 = fadd float %93, %92, !dbg !42
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 0x4150000000000000) #3, !dbg !43
  %96 = fadd float %95, %94, !dbg !44
  %97 = fmul float %96, 1.000000e+02, !dbg !45
  %98 = fadd float %83, %97, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %urem = and i32 %9, 127, !dbg !48
  %99 = icmp eq i32 %urem, 0, !dbg !48
  %100 = bitcast float %98 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %0, i1 %99) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce6aer4rjlwqzoyr27gbwfc6fgg6ca3bh7nsdfshskhd2i3bzi7l.py", directory: "inductor_cache/e6")
!4 = !{ptr @triton_per_fused_abs_add_div_mean_mse_loss_mul_sub_36, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_mean_mse_loss_mul_sub_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_mean_mse_loss_mul_sub_36", linkageName: "triton_per_fused_abs_add_div_mean_mse_loss_mul_sub_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 19, scope: !7)
!15 = !DILocation(line: 36, column: 20, scope: !7)
!16 = !DILocation(line: 38, column: 20, scope: !7)
!17 = !DILocation(line: 40, column: 20, scope: !7)
!18 = !DILocation(line: 42, column: 20, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 45, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 45, column: 44, scope: !7)
!29 = !DILocation(line: 47, column: 18, scope: !7)
!30 = !DILocation(line: 49, column: 19, scope: !7)
!31 = !DILocation(line: 50, column: 19, scope: !7)
!32 = !DILocation(line: 52, column: 20, scope: !7)
!33 = !DILocation(line: 54, column: 20, scope: !7)
!34 = !DILocation(line: 56, column: 20, scope: !7)
!35 = !DILocation(line: 58, column: 20, scope: !7)
!36 = !DILocation(line: 60, column: 20, scope: !7)
!37 = !DILocation(line: 61, column: 20, scope: !7)
!38 = !DILocation(line: 63, column: 20, scope: !7)
!39 = !DILocation(line: 65, column: 20, scope: !7)
!40 = !DILocation(line: 66, column: 20, scope: !7)
!41 = !DILocation(line: 68, column: 20, scope: !7)
!42 = !DILocation(line: 71, column: 20, scope: !7)
!43 = !DILocation(line: 72, column: 19, scope: !7)
!44 = !DILocation(line: 74, column: 20, scope: !7)
!45 = !DILocation(line: 76, column: 20, scope: !7)
!46 = !DILocation(line: 77, column: 20, scope: !7)
!47 = !DILocation(line: 78, column: 4, scope: !7)
!48 = !DILocation(line: 79, column: 63, scope: !7)
!49 = !DILocation(line: 79, column: 4, scope: !7)
