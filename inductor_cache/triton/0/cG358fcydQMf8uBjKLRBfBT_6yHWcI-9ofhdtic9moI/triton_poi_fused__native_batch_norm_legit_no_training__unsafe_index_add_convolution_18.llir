; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = sdiv i32 %21, 64, !dbg !14
  %23 = srem i32 %22, 32, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %24 = sdiv i32 %.frozen, 8, !dbg !16
  %25 = srem i32 %24, 8, !dbg !17
  %26 = mul i32 %24, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = sext i32 %21 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = sext i32 %23 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !31
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = sext i32 %25 to i64, !dbg !33
  %51 = getelementptr i64, ptr addrspace(1) %7, i64 %50, !dbg !33
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !34
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !34
  %54 = sext i32 %.decomposed to i64, !dbg !35
  %55 = getelementptr i64, ptr addrspace(1) %7, i64 %54, !dbg !35
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !36
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !36
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !40
  %64 = bitcast i32 %63 to float, !dbg !40
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !40
  %66 = bitcast i32 %65 to float, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !43
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !44
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !44
  %73 = fadd float %39, 0x3EE4F8B580000000, !dbg !45
  %74 = fadd float %41, 0x3EE4F8B580000000, !dbg !45
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %75, 0, !dbg !46
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %76, 0, !dbg !46
  br i1 %.not.i, label %82, label %77, !dbg !46

77:                                               ; preds = %15
  br i1 %.not1.i, label %80, label %78, !dbg !46

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

82:                                               ; preds = %15
  br i1 %.not1.i, label %85, label %83, !dbg !46

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !46
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %87, 0, !dbg !46
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !46
  br i1 %.not.i1, label %94, label %89, !dbg !46

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !46

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !46

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !46
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %101 = lshr i64 %52, 61, !dbg !48
  %102 = and i64 %101, 4, !dbg !48
  %103 = add i64 %102, %52, !dbg !48
  %104 = lshr i64 %57, 61, !dbg !49
  %105 = and i64 %104, 4, !dbg !49
  %106 = lshr i64 %58, 61, !dbg !49
  %107 = and i64 %106, 4, !dbg !49
  %108 = shl i64 %103, 2, !dbg !50
  %109 = shl nsw i32 %22, 4, !dbg !51
  %110 = sext i32 %109 to i64, !dbg !52
  %111 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !53
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %105, !dbg !53
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %108, !dbg !53
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %110, !dbg !53
  %115 = getelementptr float, ptr addrspace(1) %8, i64 %58, !dbg !53
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %107, !dbg !53
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %108, !dbg !53
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %110, !dbg !53
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !54
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !54
  %121 = fadd float %64, 0x3EE4F8B580000000, !dbg !55
  %122 = fadd float %66, 0x3EE4F8B580000000, !dbg !55
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i6 = icmp eq i32 %123, 0, !dbg !56
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i9 = icmp eq i32 %124, 0, !dbg !56
  br i1 %.not.i6, label %130, label %125, !dbg !56

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !56

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !56

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

__nv_sqrtf.exit10:                                ; preds = %126, %128, %131, %133
  %.0.i8 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !56
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i11 = icmp eq i32 %135, 0, !dbg !56
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i14 = icmp eq i32 %136, 0, !dbg !56
  br i1 %.not.i11, label %142, label %137, !dbg !56

137:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %140, label %138, !dbg !56

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

142:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %145, label %143, !dbg !56

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

__nv_sqrtf.exit15:                                ; preds = %138, %140, %143, %145
  %.0.i13 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !56
  %147 = bitcast i32 %120 to float, !dbg !54
  %148 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !24
  %149 = insertelement <2 x i32> %148, i32 %61, i64 1, !dbg !24
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !24
  %151 = bitcast i32 %119 to float, !dbg !54
  %152 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %153 = insertelement <2 x i32> %152, i32 %60, i64 1, !dbg !24
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !24
  %155 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %156 = bitcast i32 %155 to float, !dbg !20
  %157 = bitcast i32 %33 to float, !dbg !22
  %158 = fadd float %156, %157, !dbg !57
  %159 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !28
  %160 = insertelement <2 x i32> %159, i32 %69, i64 1, !dbg !28
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !28
  %162 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !30
  %163 = insertelement <2 x i32> %162, i32 %72, i64 1, !dbg !30
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !30
  %165 = extractvalue { i32, i32 } %49, 1, !dbg !32
  %166 = bitcast i32 %165 to float, !dbg !32
  %167 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %168 = bitcast i32 %167 to float, !dbg !20
  %169 = bitcast i32 %32 to float, !dbg !22
  %170 = fadd float %168, %169, !dbg !57
  %171 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !28
  %172 = insertelement <2 x i32> %171, i32 %68, i64 1, !dbg !28
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !28
  %174 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !30
  %175 = insertelement <2 x i32> %174, i32 %71, i64 1, !dbg !30
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !30
  %177 = extractvalue { i32, i32 } %49, 0, !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %181 = insertelement <2 x float> poison, float %170, i64 0, !dbg !59
  %182 = insertelement <2 x float> %181, float %151, i64 1, !dbg !59
  %183 = fsub <2 x float> %182, %154, !dbg !59
  %184 = insertelement <2 x float> poison, float %99, i64 0, !dbg !60
  %185 = insertelement <2 x float> %184, float %179, i64 1, !dbg !60
  %186 = fmul <2 x float> %183, %185, !dbg !60
  %187 = fmul <2 x float> %186, %173, !dbg !61
  %188 = fadd <2 x float> %187, %176, !dbg !62
  %189 = extractelement <2 x float> %188, i64 0, !dbg !63
  %190 = fadd float %189, %178, !dbg !63
  %191 = insertelement <2 x float> poison, float %158, i64 0, !dbg !59
  %192 = insertelement <2 x float> %191, float %147, i64 1, !dbg !59
  %193 = fsub <2 x float> %192, %150, !dbg !59
  %194 = insertelement <2 x float> poison, float %100, i64 0, !dbg !60
  %195 = insertelement <2 x float> %194, float %180, i64 1, !dbg !60
  %196 = fmul <2 x float> %193, %195, !dbg !60
  %197 = fmul <2 x float> %196, %161, !dbg !61
  %198 = fadd <2 x float> %197, %164, !dbg !62
  %199 = extractelement <2 x float> %198, i64 0, !dbg !63
  %200 = fadd float %199, %166, !dbg !63
  %201 = extractelement <2 x float> %188, i64 1, !dbg !64
  %202 = fadd float %190, %201, !dbg !64
  %203 = extractelement <2 x float> %198, i64 1, !dbg !64
  %204 = fadd float %200, %203, !dbg !64
  %205 = bitcast float %170 to i32, !dbg !65
  %206 = bitcast float %158 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %205, i32 %206, ptr addrspace(1) %28, i1 true) #3, !dbg !65
  %207 = getelementptr float, ptr addrspace(1) %13, i64 %27, !dbg !66
  %208 = bitcast float %202 to i32, !dbg !67
  %209 = bitcast float %204 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %208, i32 %209, ptr addrspace(1) %207, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfqhphcfls2spwy27x3avaryzzk3eyggh6ufcokxlgbr3zmrgkkn.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 26, scope: !7)
!47 = !DILocation(line: 48, column: 19, scope: !7)
!48 = !DILocation(line: 58, column: 35, scope: !7)
!49 = !DILocation(line: 61, column: 35, scope: !7)
!50 = !DILocation(line: 62, column: 41, scope: !7)
!51 = !DILocation(line: 62, column: 52, scope: !7)
!52 = !DILocation(line: 62, column: 49, scope: !7)
!53 = !DILocation(line: 62, column: 31, scope: !7)
!54 = !DILocation(line: 62, column: 57, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 27, scope: !7)
!57 = !DILocation(line: 42, column: 18, scope: !7)
!58 = !DILocation(line: 66, column: 19, scope: !7)
!59 = !DILocation(line: 43, column: 18, scope: !7)
!60 = !DILocation(line: 51, column: 19, scope: !7)
!61 = !DILocation(line: 52, column: 20, scope: !7)
!62 = !DILocation(line: 53, column: 20, scope: !7)
!63 = !DILocation(line: 54, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 39, scope: !7)
!66 = !DILocation(line: 73, column: 25, scope: !7)
!67 = !DILocation(line: 73, column: 37, scope: !7)
!68 = !DILocation(line: 73, column: 4, scope: !7)
