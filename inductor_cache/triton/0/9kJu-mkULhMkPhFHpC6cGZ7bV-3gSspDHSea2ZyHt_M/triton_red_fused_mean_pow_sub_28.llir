; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_pow_sub_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %6, !dbg !11
  %7 = shl i32 %.fr4, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 192, !dbg !14
  %13 = sdiv i32 %11, 16, !dbg !15
  %14 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %11, %14, !dbg !16
  %15 = sdiv i32 %11, 48, !dbg !17
  %16 = shl nsw i32 %15, 4, !dbg !18
  %17 = add nsw i32 %16, %.decomposed, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !20
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #3, !dbg !21
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !21
  %25 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !21
  %26 = insertelement <4 x i32> %25, i32 %22, i64 1, !dbg !21
  %27 = insertelement <4 x i32> %26, i32 %23, i64 2, !dbg !21
  %28 = insertelement <4 x i32> %27, i32 %24, i64 3, !dbg !21
  %29 = bitcast <4 x i32> %28 to <4 x float>, !dbg !21
  %30 = shl i32 %13, 11, !dbg !22
  %.mask = and i32 %8, 112
  %31 = add nsw i32 %.decomposed, %.mask
  %32 = add i32 %31, %30
  br i1 %12, label %.split.us, label %.split

.split.us:                                        ; preds = %5, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %5 ]
  %33 = phi <4 x float> [ %50, %.split.us ], [ zeroinitializer, %5 ]
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32, !dbg !23
  %34 = shl nuw nsw i32 %indvars.iv7.tr, 4, !dbg !23
  %35 = add i32 %32, %34, !dbg !23
  %36 = sext i32 %35 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !25
  %44 = insertelement <4 x i32> %43, i32 %40, i64 1, !dbg !25
  %45 = insertelement <4 x i32> %44, i32 %41, i64 2, !dbg !25
  %46 = insertelement <4 x i32> %45, i32 %42, i64 3, !dbg !25
  %47 = bitcast <4 x i32> %46 to <4 x float>, !dbg !25
  %48 = fsub <4 x float> %47, %29, !dbg !26
  %49 = fmul <4 x float> %48, %48, !dbg !27
  %50 = fadd <4 x float> %33, %49, !dbg !28
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !29
  %51 = icmp samesign ult i64 %indvars.iv7, 120, !dbg !29
  br i1 %51, label %.split.us, label %.split2.us, !dbg !29

.split:                                           ; preds = %5
  %52 = sext i32 %32 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %55 = or disjoint i32 %32, 128, !dbg !23
  %56 = sext i32 %55 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %59 = or disjoint i32 %32, 256, !dbg !23
  %60 = sext i32 %59 to i64, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %63 = or disjoint i32 %32, 384, !dbg !23
  %64 = sext i32 %63 to i64, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %67 = or disjoint i32 %32, 512, !dbg !23
  %68 = sext i32 %67 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %71 = or disjoint i32 %32, 640, !dbg !23
  %72 = sext i32 %71 to i64, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !24
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %75 = or disjoint i32 %32, 768, !dbg !23
  %76 = sext i32 %75 to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !24
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %79 = or disjoint i32 %32, 896, !dbg !23
  %80 = sext i32 %79 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !24
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %83 = or disjoint i32 %32, 1024, !dbg !23
  %84 = sext i32 %83 to i64, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !24
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %87 = or disjoint i32 %32, 1152, !dbg !23
  %88 = sext i32 %87 to i64, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !24
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %91 = or disjoint i32 %32, 1280, !dbg !23
  %92 = sext i32 %91 to i64, !dbg !24
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !24
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %95 = or disjoint i32 %32, 1408, !dbg !23
  %96 = sext i32 %95 to i64, !dbg !24
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !24
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %99 = or disjoint i32 %32, 1536, !dbg !23
  %100 = sext i32 %99 to i64, !dbg !24
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !24
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %103 = or disjoint i32 %32, 1664, !dbg !23
  %104 = sext i32 %103 to i64, !dbg !24
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !24
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %107 = or disjoint i32 %32, 1792, !dbg !23
  %108 = sext i32 %107 to i64, !dbg !24
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !24
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  %111 = or disjoint i32 %32, 1920, !dbg !23
  %112 = sext i32 %111 to i64, !dbg !24
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !24
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !25
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us, %.split
  %115 = phi <4 x float> [ zeroinitializer, %.split ], [ %50, %.split.us ], !dbg !12
  %116 = lshr i32 %8, 5, !dbg !12
  %117 = and i32 %8, 63, !dbg !12
  %118 = or disjoint i32 %7, %117, !dbg !13
  %119 = icmp slt i32 %118, 192, !dbg !14
  %120 = and i32 %8, 16, !dbg !12
  %121 = extractelement <4 x float> %115, i64 0, !dbg !30
  %122 = bitcast float %121 to i32, !dbg !30
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !30
  %124 = bitcast i32 %123 to float, !dbg !30
  %125 = fadd float %121, %124, !dbg !34
  %126 = extractelement <4 x float> %115, i64 1, !dbg !30
  %127 = bitcast float %126 to i32, !dbg !30
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !30
  %129 = bitcast i32 %128 to float, !dbg !30
  %130 = fadd float %126, %129, !dbg !34
  %131 = extractelement <4 x float> %115, i64 2, !dbg !30
  %132 = bitcast float %131 to i32, !dbg !30
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !30
  %134 = bitcast i32 %133 to float, !dbg !30
  %135 = fadd float %131, %134, !dbg !34
  %136 = extractelement <4 x float> %115, i64 3, !dbg !30
  %137 = bitcast float %136 to i32, !dbg !30
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !30
  %139 = bitcast i32 %138 to float, !dbg !30
  %140 = fadd float %136, %139, !dbg !34
  %141 = icmp eq i32 %120, 0, !dbg !30
  %142 = and i32 %116, 3, !dbg !30
  %143 = shl nuw nsw i32 %10, 2, !dbg !30
  %144 = or disjoint i32 %143, %142, !dbg !30
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !30
  %146 = bitcast float %125 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 %141) #3, !dbg !30
  %147 = or disjoint i32 %143, 4, !dbg !30
  %148 = or disjoint i32 %147, %142, !dbg !30
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !30
  %150 = bitcast float %130 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 %141) #3, !dbg !30
  %151 = or disjoint i32 %143, 8, !dbg !30
  %152 = or disjoint i32 %151, %142, !dbg !30
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !30
  %154 = bitcast float %135 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 %141) #3, !dbg !30
  %155 = or disjoint i32 %143, 12, !dbg !30
  %156 = or disjoint i32 %155, %142, !dbg !30
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !30
  %158 = bitcast float %140 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %141) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %159 = icmp slt i32 %8, 256, !dbg !30
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !30
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #3, !dbg !30
  %162 = bitcast i32 %161 to float, !dbg !30
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fadd float %162, %164, !dbg !34
  %166 = bitcast float %165 to i32, !dbg !30
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = fadd float %165, %168, !dbg !34
  %170 = and i32 %8, 3, !dbg !30
  %171 = icmp eq i32 %170, 0, !dbg !30
  %172 = and i1 %159, %171, !dbg !30
  %173 = bitcast float %169 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %173, i1 %172) #3, !dbg !30
  %174 = getelementptr i8, ptr addrspace(3) %160, i32 512, !dbg !30
  %175 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %174, i1 %159) #3, !dbg !30
  %176 = bitcast i32 %175 to float, !dbg !30
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !30
  %178 = bitcast i32 %177 to float, !dbg !30
  %179 = fadd float %176, %178, !dbg !34
  %180 = bitcast float %179 to i32, !dbg !30
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !30
  %182 = bitcast i32 %181 to float, !dbg !30
  %183 = fadd float %179, %182, !dbg !34
  %184 = bitcast float %183 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %184, i1 %172) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !30
  %186 = load i32, ptr addrspace(3) %185, align 16, !dbg !30
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !30
  %188 = load i32, ptr addrspace(3) %187, align 16, !dbg !30
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !30
  %190 = load i32, ptr addrspace(3) %189, align 16, !dbg !30
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !30
  %192 = load i32, ptr addrspace(3) %191, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %193, i32 %186, i32 %188, i32 %190, i32 %192, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !36
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !36
  %196 = sext i32 %118 to i64, !dbg !37
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %196, !dbg !37
  %198 = and i32 %8, 64, !dbg !38
  %199 = icmp eq i32 %198, 0, !dbg !38
  %200 = and i1 %199, %119, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %197, i1 %200) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caycyvlhf37nq5z2f4r4lg5vgtbbzfadyjpq7lftnkx6bmbhvdhj.py", directory: "inductor_cache/ay")
!4 = !{ptr @triton_red_fused_mean_pow_sub_28, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_pow_sub_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_pow_sub_28", linkageName: "triton_red_fused_mean_pow_sub_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 38, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 43, scope: !7)
!22 = !DILocation(line: 36, column: 52, scope: !7)
!23 = !DILocation(line: 36, column: 47, scope: !7)
!24 = !DILocation(line: 36, column: 34, scope: !7)
!25 = !DILocation(line: 36, column: 57, scope: !7)
!26 = !DILocation(line: 37, column: 22, scope: !7)
!27 = !DILocation(line: 38, column: 22, scope: !7)
!28 = !DILocation(line: 40, column: 23, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 42, column: 25, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 42, column: 28, scope: !7)
!37 = !DILocation(line: 43, column: 25, scope: !7)
!38 = !DILocation(line: 43, column: 36, scope: !7)
!39 = !DILocation(line: 43, column: 4, scope: !7)
