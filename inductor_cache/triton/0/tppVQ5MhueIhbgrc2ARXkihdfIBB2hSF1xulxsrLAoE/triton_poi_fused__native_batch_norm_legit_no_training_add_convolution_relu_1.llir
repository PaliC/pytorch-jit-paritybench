; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = sdiv i32 %19, 262144, !dbg !14
  %.lhs.trunc = trunc nsw i32 %20 to i16, !dbg !15
  %21 = srem i16 %.lhs.trunc, 16, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = sext i16 %21 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !37
  %59 = fadd float %36, 0x3EE4F8B580000000, !dbg !38
  %60 = fadd float %38, 0x3EE4F8B580000000, !dbg !38
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %61, 0, !dbg !39
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %62, 0, !dbg !39
  br i1 %.not.i, label %68, label %63, !dbg !39

63:                                               ; preds = %13
  br i1 %.not1.i, label %66, label %64, !dbg !39

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

68:                                               ; preds = %13
  br i1 %.not1.i, label %71, label %69, !dbg !39

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !39
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %73, 0, !dbg !39
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %74, 0, !dbg !39
  br i1 %.not.i1, label %80, label %75, !dbg !39

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !39

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !39

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %76, %78, %81, %83
  %.0.i3 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !39
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %87 = fadd float %50, 0x3EE4F8B580000000, !dbg !41
  %88 = fadd float %52, 0x3EE4F8B580000000, !dbg !41
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %89, 0, !dbg !42
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %90, 0, !dbg !42
  br i1 %.not.i6, label %96, label %91, !dbg !42

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !42

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !42

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %92, %94, %97, %99
  %.0.i8 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !42
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %101, 0, !dbg !42
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %102, 0, !dbg !42
  br i1 %.not.i11, label %108, label %103, !dbg !42

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !42

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !42

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %104, %106, %109, %111
  %.0.i13 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !42
  %113 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %114 = bitcast i32 %113 to float, !dbg !17
  %115 = bitcast i32 %28 to float, !dbg !19
  %116 = fadd float %114, %115, !dbg !43
  %117 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %118 = bitcast i32 %117 to float, !dbg !21
  %119 = bitcast i32 %33 to float, !dbg !23
  %120 = fsub float %118, %119, !dbg !44
  %121 = fmul float %120, %86, !dbg !45
  %122 = bitcast i32 %41 to float, !dbg !27
  %123 = fmul float %121, %122, !dbg !46
  %124 = bitcast i32 %44 to float, !dbg !29
  %125 = fadd float %123, %124, !dbg !47
  %126 = fcmp olt float %125, 0.000000e+00, !dbg !48
  %127 = select i1 %126, float 0.000000e+00, float %125, !dbg !52
  %128 = fadd float %116, %127, !dbg !53
  %129 = bitcast i32 %47 to float, !dbg !31
  %130 = fsub float %128, %129, !dbg !54
  %131 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %132 = bitcast i32 %131 to float, !dbg !17
  %133 = bitcast i32 %27 to float, !dbg !19
  %134 = fadd float %132, %133, !dbg !43
  %135 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %136 = bitcast i32 %135 to float, !dbg !21
  %137 = bitcast i32 %32 to float, !dbg !23
  %138 = fsub float %136, %137, !dbg !44
  %139 = fmul float %138, %85, !dbg !45
  %140 = bitcast i32 %40 to float, !dbg !27
  %141 = fmul float %139, %140, !dbg !46
  %142 = bitcast i32 %43 to float, !dbg !29
  %143 = fadd float %141, %142, !dbg !47
  %144 = fcmp olt float %143, 0.000000e+00, !dbg !48
  %145 = select i1 %144, float 0.000000e+00, float %143, !dbg !52
  %146 = fadd float %134, %145, !dbg !53
  %147 = bitcast i32 %46 to float, !dbg !31
  %148 = fsub float %146, %147, !dbg !54
  %149 = bitcast i32 %58 to float, !dbg !37
  %150 = bitcast i32 %57 to float, !dbg !37
  %151 = bitcast i32 %55 to float, !dbg !35
  %152 = bitcast i32 %54 to float, !dbg !35
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !55
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !55
  %155 = fmul float %148, %153, !dbg !56
  %156 = fmul float %130, %154, !dbg !56
  %157 = fmul float %155, %152, !dbg !57
  %158 = fmul float %156, %151, !dbg !57
  %159 = fadd float %157, %150, !dbg !58
  %160 = fadd float %158, %149, !dbg !58
  %161 = fcmp olt float %159, 0.000000e+00, !dbg !59
  %162 = fcmp olt float %160, 0.000000e+00, !dbg !59
  %163 = select i1 %161, float 0.000000e+00, float %159, !dbg !61
  %164 = select i1 %162, float 0.000000e+00, float %160, !dbg !61
  %165 = bitcast float %134 to i32, !dbg !62
  %166 = bitcast float %116 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %23, i1 true) #3, !dbg !62
  %167 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !63
  %168 = bitcast float %163 to i32, !dbg !64
  %169 = bitcast float %164 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %168, i32 %169, ptr addrspace(1) %167, i1 true) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cojfyx3ll5i3t5qbhp7zimf7bwxlssh7kiplediilz2bfqykjlkc.py", directory: "inductor_cache/oj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 31, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 26, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 27, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 50, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 51, column: 19, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !60)
!60 = !DILocation(line: 60, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !60)
!62 = !DILocation(line: 61, column: 39, scope: !7)
!63 = !DILocation(line: 62, column: 28, scope: !7)
!64 = !DILocation(line: 62, column: 40, scope: !7)
!65 = !DILocation(line: 62, column: 4, scope: !7)
