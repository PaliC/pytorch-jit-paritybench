; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = or disjoint i32 %10, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = icmp slt i32 %14, 16, !dbg !14
  %19 = icmp slt i32 %15, 16, !dbg !14
  %20 = icmp slt i32 %16, 16, !dbg !14
  %21 = icmp slt i32 %17, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = and i32 %13, 252, !dbg !17
  %25 = and i32 %11, 255, !dbg !17
  %26 = or disjoint i32 %23, %24, !dbg !18
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = icmp slt i32 %26, 512, !dbg !19
  %29 = icmp slt i32 %27, 512, !dbg !19
  %30 = shl i32 %14, 9, !dbg !20
  %31 = shl i32 %15, 9, !dbg !20
  %32 = shl i32 %16, 9, !dbg !20
  %33 = shl i32 %17, 9, !dbg !20
  %34 = add i32 %26, %30, !dbg !21
  %35 = add i32 %26, %31, !dbg !21
  %36 = add i32 %26, %32, !dbg !21
  %37 = add i32 %26, %33, !dbg !21
  %38 = sext i32 %34 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = sext i32 %35 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %36 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %37 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = and i1 %18, %28, !dbg !23
  %47 = and i1 %19, %28, !dbg !23
  %48 = and i1 %20, %28, !dbg !23
  %49 = and i1 %21, %28, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %46) #4, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %47) #4, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %48) #4, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %49) #4, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !24
  %70 = and i32 %13, 1020, !dbg !24
  %71 = lshr i32 %70, 8, !dbg !24
  %72 = or disjoint i32 %71, %70, !dbg !24
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !24
  %74 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !24
  %75 = or disjoint i32 %70, 1, !dbg !24
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !24
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %75, !dbg !24
  %78 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #4, !dbg !24
  %79 = or disjoint i32 %70, 2, !dbg !24
  %80 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %79, !dbg !24
  %81 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !24
  %82 = or disjoint i32 %70, 3, !dbg !24
  %83 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %82, !dbg !24
  %84 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !24
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %87 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 1028, !dbg !24
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %89 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 2056, !dbg !24
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %91 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 3084, !dbg !24
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %93 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %93, i1 true) #4, !dbg !24
  %94 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %94, i1 true) #4, !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %95, i1 true) #4, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %96, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %97 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %98 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %99 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %100 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %101 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %101, i1 true) #4, !dbg !24
  %102 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %102, i1 true) #4, !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %103, i1 true) #4, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %104, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %105 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %106 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %107 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %108 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %109 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %109, i1 true) #4, !dbg !24
  %110 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %110, i1 true) #4, !dbg !24
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %111, i1 true) #4, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %112, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %113 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %114 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %115 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %116 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %117 = sext i32 %27 to i64, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %29) #4, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !27
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %29) #4, !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %29) #4, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %29) #4, !dbg !32
  %127 = fadd float %122, 0x3EE4F8B580000000, !dbg !33
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %128, 0, !dbg !34
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %129, 0, !dbg !34
  br i1 %.not.i, label %135, label %130, !dbg !34

130:                                              ; preds = %8
  br i1 %.not1.i, label %133, label %131, !dbg !34

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

135:                                              ; preds = %8
  br i1 %.not1.i, label %138, label %136, !dbg !34

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !34
  %140 = lshr i32 %11, 2, !dbg !17
  %141 = and i32 %140, 63, !dbg !17
  %142 = or disjoint i32 %141, %23, !dbg !18
  %143 = or disjoint i32 %142, 192, !dbg !18
  %144 = icmp slt i32 %143, 512, !dbg !19
  %145 = and i32 %13, 12, !dbg !12
  %146 = or disjoint i32 %10, %145, !dbg !13
  %147 = icmp slt i32 %146, 16, !dbg !14
  %148 = and i1 %147, %144, !dbg !23
  %149 = or disjoint i32 %142, 128, !dbg !18
  %150 = icmp slt i32 %149, 512, !dbg !19
  %151 = and i1 %147, %150, !dbg !23
  %152 = or disjoint i32 %142, 64, !dbg !18
  %153 = icmp slt i32 %152, 512, !dbg !19
  %154 = and i1 %147, %153, !dbg !23
  %155 = icmp slt i32 %142, 512, !dbg !19
  %156 = and i1 %147, %155, !dbg !23
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %158 = insertelement <16 x float> poison, float %116, i64 0, !dbg !36
  %159 = insertelement <16 x float> %158, float %115, i64 1, !dbg !36
  %160 = insertelement <16 x float> %159, float %114, i64 2, !dbg !36
  %161 = insertelement <16 x float> %160, float %113, i64 3, !dbg !36
  %162 = insertelement <16 x float> %161, float %108, i64 4, !dbg !36
  %163 = insertelement <16 x float> %162, float %107, i64 5, !dbg !36
  %164 = insertelement <16 x float> %163, float %106, i64 6, !dbg !36
  %165 = insertelement <16 x float> %164, float %105, i64 7, !dbg !36
  %166 = insertelement <16 x float> %165, float %100, i64 8, !dbg !36
  %167 = insertelement <16 x float> %166, float %99, i64 9, !dbg !36
  %168 = insertelement <16 x float> %167, float %98, i64 10, !dbg !36
  %169 = insertelement <16 x float> %168, float %97, i64 11, !dbg !36
  %170 = insertelement <16 x float> %169, float %92, i64 12, !dbg !36
  %171 = insertelement <16 x float> %170, float %90, i64 13, !dbg !36
  %172 = insertelement <16 x float> %171, float %88, i64 14, !dbg !36
  %173 = insertelement <16 x float> %172, float %86, i64 15, !dbg !36
  %174 = insertelement <16 x i32> poison, i32 %119, i64 0, !dbg !36
  %175 = bitcast <16 x i32> %174 to <16 x float>, !dbg !36
  %176 = shufflevector <16 x float> %175, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !36
  %177 = fsub <16 x float> %173, %176, !dbg !36
  %178 = insertelement <16 x float> poison, float %157, i64 0, !dbg !37
  %179 = shufflevector <16 x float> %178, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !37
  %180 = fmul <16 x float> %177, %179, !dbg !37
  %181 = insertelement <16 x i32> poison, i32 %124, i64 0, !dbg !38
  %182 = bitcast <16 x i32> %181 to <16 x float>, !dbg !38
  %183 = shufflevector <16 x float> %182, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %184 = fmul <16 x float> %180, %183, !dbg !38
  %185 = insertelement <16 x i32> poison, i32 %126, i64 0, !dbg !39
  %186 = bitcast <16 x i32> %185 to <16 x float>, !dbg !39
  %187 = shufflevector <16 x float> %186, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %188 = fadd <16 x float> %184, %187, !dbg !39
  %189 = fcmp ogt <16 x float> %188, zeroinitializer, !dbg !40
  %190 = extractelement <16 x float> %188, i64 15, !dbg !41
  %191 = fmul float %190, 0x3FB99999A0000000, !dbg !42
  %192 = extractelement <16 x float> %188, i64 14, !dbg !41
  %193 = fmul float %192, 0x3FB99999A0000000, !dbg !42
  %194 = extractelement <16 x float> %188, i64 13, !dbg !41
  %195 = fmul float %194, 0x3FB99999A0000000, !dbg !42
  %196 = extractelement <16 x float> %188, i64 12, !dbg !41
  %197 = fmul float %196, 0x3FB99999A0000000, !dbg !42
  %198 = extractelement <16 x float> %188, i64 11, !dbg !41
  %199 = fmul float %198, 0x3FB99999A0000000, !dbg !42
  %200 = extractelement <16 x float> %188, i64 10, !dbg !41
  %201 = fmul float %200, 0x3FB99999A0000000, !dbg !42
  %202 = extractelement <16 x float> %188, i64 9, !dbg !41
  %203 = fmul float %202, 0x3FB99999A0000000, !dbg !42
  %204 = extractelement <16 x float> %188, i64 8, !dbg !41
  %205 = fmul float %204, 0x3FB99999A0000000, !dbg !42
  %206 = extractelement <16 x float> %188, i64 7, !dbg !41
  %207 = fmul float %206, 0x3FB99999A0000000, !dbg !42
  %208 = extractelement <16 x float> %188, i64 6, !dbg !41
  %209 = fmul float %208, 0x3FB99999A0000000, !dbg !42
  %210 = extractelement <16 x float> %188, i64 5, !dbg !41
  %211 = fmul float %210, 0x3FB99999A0000000, !dbg !42
  %212 = extractelement <16 x float> %188, i64 4, !dbg !41
  %213 = fmul float %212, 0x3FB99999A0000000, !dbg !42
  %214 = extractelement <16 x float> %188, i64 3, !dbg !41
  %215 = fmul float %214, 0x3FB99999A0000000, !dbg !42
  %216 = extractelement <16 x float> %188, i64 2, !dbg !41
  %217 = fmul float %216, 0x3FB99999A0000000, !dbg !42
  %218 = extractelement <16 x float> %188, i64 1, !dbg !41
  %219 = fmul float %218, 0x3FB99999A0000000, !dbg !42
  %220 = extractelement <16 x float> %188, i64 0, !dbg !41
  %221 = fmul float %220, 0x3FB99999A0000000, !dbg !42
  %222 = extractelement <16 x i1> %189, i64 15, !dbg !41
  %223 = select i1 %222, float %190, float %191, !dbg !41
  %224 = extractelement <16 x i1> %189, i64 14, !dbg !41
  %225 = select i1 %224, float %192, float %193, !dbg !41
  %226 = extractelement <16 x i1> %189, i64 13, !dbg !41
  %227 = select i1 %226, float %194, float %195, !dbg !41
  %228 = extractelement <16 x i1> %189, i64 12, !dbg !41
  %229 = select i1 %228, float %196, float %197, !dbg !41
  %230 = extractelement <16 x i1> %189, i64 11, !dbg !41
  %231 = select i1 %230, float %198, float %199, !dbg !41
  %232 = extractelement <16 x i1> %189, i64 10, !dbg !41
  %233 = select i1 %232, float %200, float %201, !dbg !41
  %234 = extractelement <16 x i1> %189, i64 9, !dbg !41
  %235 = select i1 %234, float %202, float %203, !dbg !41
  %236 = extractelement <16 x i1> %189, i64 8, !dbg !41
  %237 = select i1 %236, float %204, float %205, !dbg !41
  %238 = extractelement <16 x i1> %189, i64 7, !dbg !41
  %239 = select i1 %238, float %206, float %207, !dbg !41
  %240 = extractelement <16 x i1> %189, i64 6, !dbg !41
  %241 = select i1 %240, float %208, float %209, !dbg !41
  %242 = extractelement <16 x i1> %189, i64 5, !dbg !41
  %243 = select i1 %242, float %210, float %211, !dbg !41
  %244 = extractelement <16 x i1> %189, i64 4, !dbg !41
  %245 = select i1 %244, float %212, float %213, !dbg !41
  %246 = extractelement <16 x i1> %189, i64 3, !dbg !41
  %247 = select i1 %246, float %214, float %215, !dbg !41
  %248 = extractelement <16 x i1> %189, i64 2, !dbg !41
  %249 = select i1 %248, float %216, float %217, !dbg !41
  %250 = extractelement <16 x i1> %189, i64 1, !dbg !41
  %251 = select i1 %250, float %218, float %219, !dbg !41
  %252 = extractelement <16 x i1> %189, i64 0, !dbg !41
  %253 = select i1 %252, float %220, float %221, !dbg !41
  %254 = shl i32 %142, 2, !dbg !43
  %255 = shl i32 %152, 2, !dbg !43
  %256 = shl i32 %149, 2, !dbg !43
  %257 = shl i32 %143, 2, !dbg !43
  %258 = shl i32 %146, 9, !dbg !44
  %259 = add i32 %254, %258, !dbg !45
  %260 = add i32 %255, %258, !dbg !45
  %261 = add i32 %256, %258, !dbg !45
  %262 = add i32 %257, %258, !dbg !45
  %263 = sext i32 %259 to i64, !dbg !46
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !46
  %265 = sext i32 %260 to i64, !dbg !46
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !46
  %267 = sext i32 %261 to i64, !dbg !46
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !46
  %269 = sext i32 %262 to i64, !dbg !46
  %270 = getelementptr float, ptr addrspace(1) %5, i64 %269, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %271 = shl i32 %11, 4, !dbg !47
  %272 = and i32 %271, 4080, !dbg !47
  %273 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %272, !dbg !47
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %272, !dbg !47
  %275 = bitcast float %223 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !47
  %276 = or disjoint i32 %272, 1, !dbg !47
  %277 = getelementptr float, ptr addrspace(3) %273, i32 %276, !dbg !47
  %278 = bitcast float %225 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !47
  %279 = or disjoint i32 %272, 2, !dbg !47
  %280 = getelementptr float, ptr addrspace(3) %273, i32 %279, !dbg !47
  %281 = bitcast float %227 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !47
  %282 = or disjoint i32 %272, 3, !dbg !47
  %283 = getelementptr float, ptr addrspace(3) %273, i32 %282, !dbg !47
  %284 = bitcast float %229 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !47
  %285 = or disjoint i32 %272, 4, !dbg !47
  %286 = getelementptr float, ptr addrspace(3) %273, i32 %285, !dbg !47
  %287 = bitcast float %231 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !47
  %288 = or disjoint i32 %272, 5, !dbg !47
  %289 = getelementptr float, ptr addrspace(3) %273, i32 %288, !dbg !47
  %290 = bitcast float %233 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !47
  %291 = or disjoint i32 %272, 6, !dbg !47
  %292 = getelementptr float, ptr addrspace(3) %273, i32 %291, !dbg !47
  %293 = bitcast float %235 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !47
  %294 = or disjoint i32 %272, 7, !dbg !47
  %295 = getelementptr float, ptr addrspace(3) %273, i32 %294, !dbg !47
  %296 = bitcast float %237 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #4, !dbg !47
  %297 = or disjoint i32 %272, 8, !dbg !47
  %298 = getelementptr float, ptr addrspace(3) %273, i32 %297, !dbg !47
  %299 = bitcast float %239 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !47
  %300 = or disjoint i32 %272, 9, !dbg !47
  %301 = getelementptr float, ptr addrspace(3) %273, i32 %300, !dbg !47
  %302 = bitcast float %241 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !47
  %303 = or disjoint i32 %272, 10, !dbg !47
  %304 = getelementptr float, ptr addrspace(3) %273, i32 %303, !dbg !47
  %305 = bitcast float %243 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !47
  %306 = or disjoint i32 %272, 11, !dbg !47
  %307 = getelementptr float, ptr addrspace(3) %273, i32 %306, !dbg !47
  %308 = bitcast float %245 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !47
  %309 = or disjoint i32 %272, 12, !dbg !47
  %310 = getelementptr float, ptr addrspace(3) %273, i32 %309, !dbg !47
  %311 = bitcast float %247 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !47
  %312 = or disjoint i32 %272, 13, !dbg !47
  %313 = getelementptr float, ptr addrspace(3) %273, i32 %312, !dbg !47
  %314 = bitcast float %249 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #4, !dbg !47
  %315 = or disjoint i32 %272, 14, !dbg !47
  %316 = getelementptr float, ptr addrspace(3) %273, i32 %315, !dbg !47
  %317 = bitcast float %251 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !47
  %318 = or disjoint i32 %272, 15, !dbg !47
  %319 = getelementptr float, ptr addrspace(3) %273, i32 %318, !dbg !47
  %320 = bitcast float %253 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %321 = and i32 %11, 252, !dbg !47
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !47
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %70, !dbg !47
  %324 = or disjoint i32 %70, 1024, !dbg !47
  %325 = lshr exact i32 %324, 2, !dbg !47
  %326 = and i32 %325, 508, !dbg !47
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !47
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %324, !dbg !47
  %329 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !47
  %330 = or disjoint i32 %70, 2048, !dbg !47
  %331 = lshr exact i32 %330, 2, !dbg !47
  %332 = and i32 %331, 764, !dbg !47
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %332, !dbg !47
  %334 = getelementptr inbounds float, ptr addrspace(3) %333, i32 %330, !dbg !47
  %335 = load <4 x i32>, ptr addrspace(3) %334, align 16, !dbg !47
  %336 = or disjoint i32 %70, 3072, !dbg !47
  %337 = lshr exact i32 %336, 2, !dbg !47
  %338 = and i32 %337, 1020, !dbg !47
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !47
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %336, !dbg !47
  %341 = load <4 x i32>, ptr addrspace(3) %340, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %323, align 16, !dbg !47
  %342 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 4, !dbg !47
  %.extract20 = load i32, ptr addrspace(3) %342, align 4, !dbg !47
  %343 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 8, !dbg !47
  %.extract21 = load i32, ptr addrspace(3) %343, align 8, !dbg !47
  %344 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 12, !dbg !47
  %.extract22 = load i32, ptr addrspace(3) %344, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %264, i1 %156) #4, !dbg !47
  %.extract23 = extractelement <4 x i32> %329, i64 0, !dbg !47
  %.extract24 = extractelement <4 x i32> %329, i64 1, !dbg !47
  %.extract25 = extractelement <4 x i32> %329, i64 2, !dbg !47
  %.extract26 = extractelement <4 x i32> %329, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %266, i1 %154) #4, !dbg !47
  %.extract27 = extractelement <4 x i32> %335, i64 0, !dbg !47
  %.extract28 = extractelement <4 x i32> %335, i64 1, !dbg !47
  %.extract29 = extractelement <4 x i32> %335, i64 2, !dbg !47
  %.extract30 = extractelement <4 x i32> %335, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %268, i1 %151) #4, !dbg !47
  %.extract31 = extractelement <4 x i32> %341, i64 0, !dbg !47
  %.extract32 = extractelement <4 x i32> %341, i64 1, !dbg !47
  %.extract33 = extractelement <4 x i32> %341, i64 2, !dbg !47
  %.extract34 = extractelement <4 x i32> %341, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %270, i1 %148) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6pp2uhm2yhqy4jjf3ffz7rclx7l2cr5uksddxbwnbe6xw3v3ung.py", directory: "inductor_cache/6p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 32, scope: !7)
!44 = !DILocation(line: 53, column: 42, scope: !7)
!45 = !DILocation(line: 53, column: 37, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 54, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
