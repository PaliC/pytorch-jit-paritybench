; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = and i32 %7, 63, !dbg !11
  %.frozen = freeze i32 %6, !dbg !12
  %11 = sdiv i32 %.frozen, 128, !dbg !12
  %12 = mul i32 %11, 128, !dbg !13
  %.decomposed = sub i32 %.frozen, %12, !dbg !13
  %13 = shl nuw nsw i32 %10, 6, !dbg !14
  %14 = shl nsw i32 %11, 7, !dbg !15
  %15 = or disjoint i32 %14, %10, !dbg !16
  %16 = or disjoint i32 %15, 64, !dbg !16
  %17 = sdiv i32 %15, 64, !dbg !17
  %18 = sdiv i32 %16, 64, !dbg !17
  %19 = srem i32 %17, 64, !dbg !18
  %20 = srem i32 %18, 64, !dbg !18
  %21 = shl nsw i32 %19, 12, !dbg !19
  %22 = shl nsw i32 %20, 12, !dbg !19
  %23 = or disjoint i32 %21, %13, !dbg !20
  %24 = or disjoint i32 %22, %13, !dbg !20
  %25 = shl nsw i32 %.decomposed, 13, !dbg !21
  %26 = add i32 %15, %25, !dbg !22
  %27 = add i32 %16, %25, !dbg !22
  %28 = sdiv i32 %26, 262144, !dbg !23
  %29 = sdiv i32 %27, 262144, !dbg !23
  %30 = shl nsw i32 %28, 18, !dbg !24
  %31 = shl nsw i32 %29, 18, !dbg !24
  %32 = add i32 %23, %30, !dbg !25
  %33 = add i32 %24, %31, !dbg !25
  %34 = sdiv i32 %26, 4096, !dbg !26
  %35 = sdiv i32 %27, 4096, !dbg !26
  %36 = srem i32 %34, 64, !dbg !27
  %37 = srem i32 %35, 64, !dbg !27
  %38 = add i32 %32, %36, !dbg !28
  %39 = add i32 %33, %37, !dbg !28
  %40 = sext i32 %38 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = sext i32 %39 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !32
  %50 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !30
  %51 = insertelement <2 x i32> %50, i32 %45, i64 1, !dbg !30
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !30
  %53 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !32
  %54 = insertelement <2 x i32> %53, i32 %49, i64 1, !dbg !32
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !32
  %56 = fsub <2 x float> %52, %55, !dbg !33
  %57 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %56), !dbg !34
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %58 = fadd <2 x float> %57, %shift, !dbg !35
  %59 = extractelement <2 x float> %58, i64 0, !dbg !35
  %60 = bitcast float %59 to i32, !dbg !40
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !40
  %62 = bitcast i32 %61 to float, !dbg !40
  %63 = fadd float %59, %62, !dbg !35
  %64 = bitcast float %63 to i32, !dbg !40
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !40
  %66 = bitcast i32 %65 to float, !dbg !40
  %67 = fadd float %63, %66, !dbg !35
  %68 = bitcast float %67 to i32, !dbg !40
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !40
  %70 = bitcast i32 %69 to float, !dbg !40
  %71 = fadd float %67, %70, !dbg !35
  %72 = bitcast float %71 to i32, !dbg !40
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !40
  %74 = bitcast i32 %73 to float, !dbg !40
  %75 = fadd float %71, %74, !dbg !35
  %76 = bitcast float %75 to i32, !dbg !40
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !40
  %78 = bitcast i32 %77 to float, !dbg !40
  %79 = fadd float %75, %78, !dbg !35
  %80 = icmp eq i32 %8, 0, !dbg !40
  %81 = and i32 %9, 1, !dbg !40
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !40
  %83 = bitcast float %79 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %80) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %84 = icmp slt i32 %7, 2, !dbg !40
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !40
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %84) #4, !dbg !40
  %87 = bitcast i32 %86 to float, !dbg !40
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !40
  %89 = bitcast i32 %88 to float, !dbg !40
  %90 = fadd float %87, %89, !dbg !35
  %91 = and i32 %7, 1, !dbg !40
  %92 = icmp eq i32 %91, 0, !dbg !40
  %93 = and i1 %84, %92, !dbg !40
  %94 = bitcast float %90 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %94, i1 %93) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %95 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %96 = sext i32 %6 to i64, !dbg !41
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !41
  %98 = icmp eq i32 %10, 0, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %97, i1 %98) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfwdzuz47qjhpv4kh3e3x6dn55agnhqws33db56spewnipwrasv7.py", directory: "inductor_cache/fw")
!4 = !{ptr @triton_per_fused_abs_mean_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_7, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_7", linkageName: "triton_per_fused_abs_mean_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 65, scope: !7)
!16 = !DILocation(line: 33, column: 61, scope: !7)
!17 = !DILocation(line: 33, column: 72, scope: !7)
!18 = !DILocation(line: 33, column: 78, scope: !7)
!19 = !DILocation(line: 33, column: 54, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 113, scope: !7)
!22 = !DILocation(line: 33, column: 108, scope: !7)
!23 = !DILocation(line: 33, column: 120, scope: !7)
!24 = !DILocation(line: 33, column: 93, scope: !7)
!25 = !DILocation(line: 33, column: 85, scope: !7)
!26 = !DILocation(line: 33, column: 160, scope: !7)
!27 = !DILocation(line: 33, column: 168, scope: !7)
!28 = !DILocation(line: 33, column: 132, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 175, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 175, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 23, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 38, column: 24, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 39, column: 25, scope: !7)
!42 = !DILocation(line: 39, column: 36, scope: !7)
!43 = !DILocation(line: 39, column: 4, scope: !7)
