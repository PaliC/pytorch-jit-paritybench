; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 144, !dbg !14
  %16 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %17 = insertelement <2 x i32> %16, i32 %13, i64 1, !dbg !15
  %18 = sdiv <2 x i32> %17, splat (i32 3), !dbg !15
  %19 = shufflevector <2 x i32> %17, <2 x i32> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !16
  %20 = srem <4 x i32> %19, splat (i32 3), !dbg !16
  %21 = sdiv i32 %13, 9, !dbg !17
  %22 = sdiv i32 %14, 9, !dbg !17
  %23 = srem i32 %21, 4, !dbg !18
  %24 = srem i32 %22, 4, !dbg !18
  %25 = icmp sgt <4 x i32> %20, zeroinitializer, !dbg !19
  %shift = shufflevector <4 x i1> %25, <4 x i1> poison, <4 x i32> <i32 poison, i32 3, i32 poison, i32 poison>, !dbg !20
  %26 = and <4 x i1> %25, %shift, !dbg !20
  %27 = extractelement <4 x i1> %26, i64 1, !dbg !20
  %shift6 = shufflevector <4 x i1> %25, <4 x i1> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !20
  %28 = and <4 x i1> %25, %shift6, !dbg !20
  %29 = extractelement <4 x i1> %28, i64 0, !dbg !20
  %30 = extractelement <4 x i32> %20, i64 1, !dbg !21
  %31 = add nsw i32 %30, -3, !dbg !21
  %32 = extractelement <4 x i32> %20, i64 0, !dbg !21
  %33 = add nsw i32 %32, -3, !dbg !21
  %34 = extractelement <4 x i32> %20, i64 3, !dbg !22
  %35 = shl nsw i32 %34, 1, !dbg !22
  %36 = extractelement <4 x i32> %20, i64 2, !dbg !22
  %37 = shl nsw i32 %36, 1, !dbg !22
  %38 = shl nsw i32 %21, 2, !dbg !23
  %39 = shl nsw i32 %22, 2, !dbg !23
  %40 = add nsw i32 %31, %38, !dbg !24
  %41 = add nsw i32 %40, %35, !dbg !25
  %42 = add nsw i32 %33, %39, !dbg !24
  %43 = add nsw i32 %42, %37, !dbg !25
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %15, %27, !dbg !27
  %49 = and i1 %29, %15, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %48, i32 0, i1 %48) #3, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %49, i32 0, i1 %49) #3, !dbg !28
  %52 = sext i32 %23 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !29
  %54 = sext i32 %24 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #3, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %49, i32 0, i1 %49) #3, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %48, i32 0, i1 %48) #3, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %49, i32 0, i1 %49) #3, !dbg !32
  %63 = bitcast i32 %62 to float, !dbg !32
  %64 = fadd float %61, 0x3F50624DE0000000, !dbg !33
  %65 = fadd float %63, 0x3F50624DE0000000, !dbg !33
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %66, 0, !dbg !34
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %67, 0, !dbg !34
  br i1 %.not.i, label %73, label %68, !dbg !34

68:                                               ; preds = %7
  br i1 %.not1.i, label %71, label %69, !dbg !34

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

73:                                               ; preds = %7
  br i1 %.not1.i, label %76, label %74, !dbg !34

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !34
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %78, 0, !dbg !34
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i4 = icmp eq i32 %79, 0, !dbg !34
  br i1 %.not.i1, label %85, label %80, !dbg !34

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !34

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !34

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %81, %83, %86, %88
  %.0.i3 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !34
  %90 = bitcast i32 %51 to float, !dbg !28
  %91 = bitcast i32 %57 to float, !dbg !30
  %92 = fsub float %90, %91, !dbg !35
  %93 = bitcast i32 %50 to float, !dbg !28
  %94 = bitcast i32 %56 to float, !dbg !30
  %95 = fsub float %93, %94, !dbg !35
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %98 = fmul float %95, %96, !dbg !37
  %99 = fmul float %92, %97, !dbg !37
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !38
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !38
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %48, i32 0, i1 %48) #3, !dbg !39
  %103 = bitcast i32 %102 to float, !dbg !39
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %49, i32 0, i1 %49) #3, !dbg !39
  %105 = bitcast i32 %104 to float, !dbg !39
  %106 = fmul float %98, %103, !dbg !40
  %107 = fmul float %99, %105, !dbg !40
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !41
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !41
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %48, i32 0, i1 %48) #3, !dbg !42
  %111 = bitcast i32 %110 to float, !dbg !42
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %49, i32 0, i1 %49) #3, !dbg !42
  %113 = bitcast i32 %112 to float, !dbg !42
  %114 = fadd float %106, %111, !dbg !43
  %115 = fadd float %107, %113, !dbg !43
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !44
  %117 = fcmp olt float %115, 0.000000e+00, !dbg !44
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !48
  %119 = select i1 %117, float 0.000000e+00, float %115, !dbg !48
  %120 = sext i32 %13 to i64, !dbg !49
  %121 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !49
  %122 = bitcast float %118 to i32, !dbg !50
  %123 = select i1 %27, i32 %122, i32 0, !dbg !51
  %124 = bitcast float %119 to i32, !dbg !50
  %125 = select i1 %29, i32 %124, i32 0, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %125, ptr addrspace(1) %121, i1 %15) #3, !dbg !50
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coj6dltygfuz5qj7lkjwq4q7ehsyj6mv6dyibdwdheobjeofqzlz.py", directory: "inductor_cache/oj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 37, scope: !7)
!22 = !DILocation(line: 35, column: 44, scope: !7)
!23 = !DILocation(line: 35, column: 51, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 49, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 63, scope: !7)
!28 = !DILocation(line: 35, column: 56, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 35, scope: !7)
!33 = !DILocation(line: 40, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 27, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 36, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 36, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 52, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 55, column: 25, scope: !7)
!50 = !DILocation(line: 55, column: 37, scope: !7)
!51 = !DILocation(line: 54, column: 34, scope: !7)
!52 = !DILocation(line: 55, column: 4, scope: !7)
