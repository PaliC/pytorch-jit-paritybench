; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_softplus_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 16, !dbg !15
  %16 = mul i32 %15, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl nsw i32 %15, 4, !dbg !17
  %18 = add i32 %17, %.decomposed, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #2, !dbg !20
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !20
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !20
  %24 = icmp eq i32 %9, 64, !dbg !21
  %25 = add i32 %18, -64, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !23
  %28 = and i1 %24, %14, !dbg !24
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #2, !dbg !25
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !25
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !25
  %32 = icmp eq i32 %9, 128, !dbg !26
  %33 = add i32 %18, -128, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !28
  %36 = and i1 %32, %14, !dbg !29
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #2, !dbg !30
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !30
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !30
  %40 = add i32 %18, -192, !dbg !31
  %41 = sext i32 %40 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !33
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %.v = select i1 %32, i32 %38, i32 %44, !dbg !34
  %.v1 = select i1 %32, i32 %39, i32 %45, !dbg !34
  %.v2 = select i1 %24, i32 %30, i32 %.v, !dbg !35
  %.v3 = select i1 %24, i32 %31, i32 %.v1, !dbg !35
  %.v4 = select i1 %14, i32 %22, i32 %.v2, !dbg !36
  %46 = bitcast i32 %.v4 to float, !dbg !36
  %.v5 = select i1 %14, i32 %23, i32 %.v3, !dbg !36
  %47 = bitcast i32 %.v5 to float, !dbg !36
  %48 = icmp slt i32 %13, -15, !dbg !37
  %49 = add i32 %18, 64, !dbg !38
  %50 = sext i32 %49 to i64, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !39
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #2, !dbg !40
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !40
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !40
  %55 = add i32 %13, 15, !dbg !41
  %56 = icmp ult i32 %55, 79, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !42
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !43
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !43
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !44
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #2, !dbg !45
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !45
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !46
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !47
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !47
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !47
  %.v6 = select i1 %24, i32 %63, i32 %67, !dbg !48
  %.v7 = select i1 %24, i32 %64, i32 %68, !dbg !48
  %.v8 = select i1 %56, i32 %59, i32 %.v6, !dbg !49
  %.v9 = select i1 %56, i32 %60, i32 %.v7, !dbg !49
  %.v10 = select i1 %48, i32 %53, i32 %.v8, !dbg !50
  %69 = bitcast i32 %.v10 to float, !dbg !50
  %.v11 = select i1 %48, i32 %54, i32 %.v9, !dbg !50
  %70 = bitcast i32 %.v11 to float, !dbg !50
  %71 = fadd float %46, %69, !dbg !51
  %72 = fadd float %47, %70, !dbg !51
  %73 = icmp slt i32 %13, -79, !dbg !52
  %74 = add i32 %18, 128, !dbg !53
  %75 = sext i32 %74 to i64, !dbg !54
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !54
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #2, !dbg !55
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !55
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !55
  %80 = add i32 %13, 79, !dbg !56
  %81 = icmp ult i32 %80, 64, !dbg !56
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !57
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #2, !dbg !58
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !58
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !58
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !59
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !60
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !60
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !60
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !61
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !62
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !62
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !62
  %.v12 = select i1 %56, i32 %88, i32 %92, !dbg !63
  %.v13 = select i1 %56, i32 %89, i32 %93, !dbg !63
  %.v14 = select i1 %81, i32 %84, i32 %.v12, !dbg !64
  %.v15 = select i1 %81, i32 %85, i32 %.v13, !dbg !64
  %.v16 = select i1 %73, i32 %78, i32 %.v14, !dbg !65
  %94 = bitcast i32 %.v16 to float, !dbg !65
  %.v17 = select i1 %73, i32 %79, i32 %.v15, !dbg !65
  %95 = bitcast i32 %.v17 to float, !dbg !65
  %96 = fadd float %71, %94, !dbg !66
  %97 = fadd float %72, %95, !dbg !66
  %98 = icmp slt i32 %13, -143, !dbg !67
  %99 = add i32 %18, 192, !dbg !68
  %100 = sext i32 %99 to i64, !dbg !69
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !69
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %101, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #2, !dbg !70
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !70
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !70
  %105 = add i32 %13, 143, !dbg !71
  %106 = icmp ult i32 %105, 64, !dbg !71
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !72
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %107, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #2, !dbg !73
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !73
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !73
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !74
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %111, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #2, !dbg !75
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !75
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !75
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !76
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %115, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !77
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !77
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !77
  %.v18 = select i1 %81, i32 %113, i32 %117, !dbg !78
  %.v19 = select i1 %81, i32 %114, i32 %118, !dbg !78
  %.v20 = select i1 %106, i32 %109, i32 %.v18, !dbg !79
  %.v21 = select i1 %106, i32 %110, i32 %.v19, !dbg !79
  %.v22 = select i1 %98, i32 %103, i32 %.v20, !dbg !80
  %119 = bitcast i32 %.v22 to float, !dbg !80
  %.v23 = select i1 %98, i32 %104, i32 %.v21, !dbg !80
  %120 = bitcast i32 %.v23 to float, !dbg !80
  %121 = fadd float %96, %119, !dbg !81
  %122 = fadd float %97, %120, !dbg !81
  %123 = fmul float %121, 0x3FF7154760000000, !dbg !82
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #2, !dbg !82
  %125 = fmul float %122, 0x3FF7154760000000, !dbg !82
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #2, !dbg !82
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not.i = icmp eq i32 %127, 0, !dbg !83
  %128 = tail call float @llvm.nvvm.add.rz.ftz.f(float %124, float 1.000000e+00) #2, !dbg !83
  %129 = tail call float @llvm.nvvm.add.rz.f(float %124, float 1.000000e+00) #2, !dbg !83
  %.01.i = select i1 %.not.i, float %129, float %128, !dbg !83
  %130 = bitcast float %.01.i to i32, !dbg !83
  %131 = add i32 %130, -1061158912, !dbg !83
  %132 = and i32 %131, -8388608, !dbg !83
  %133 = bitcast float %124 to i32, !dbg !83
  %134 = sub i32 %133, %132, !dbg !83
  %135 = bitcast i32 %134 to float, !dbg !83
  %136 = sub i32 1082130432, %132, !dbg !83
  %137 = bitcast i32 %136 to float, !dbg !83
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not14.i = icmp eq i32 %138, 0, !dbg !83
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %137, float -1.000000e+00) #2, !dbg !83
  %140 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %137, float -1.000000e+00) #2, !dbg !83
  %.09.i = select i1 %.not14.i, float %140, float %139, !dbg !83
  %141 = fadd float %.09.i, %135, !dbg !83
  %142 = sitofp i32 %132 to float, !dbg !83
  %143 = fmul float %142, 0x3E80000000000000, !dbg !83
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not15.i = icmp eq i32 %144, 0, !dbg !83
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %141, float 0x3FBB000240000000) #2, !dbg !83
  %146 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %141, float 0x3FBB000240000000) #2, !dbg !83
  %.012.i = select i1 %.not15.i, float %146, float %145, !dbg !83
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not16.i = icmp eq i32 %147, 0, !dbg !83
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %141, float 0xBFC0EF1C00000000) #2, !dbg !83
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %141, float 0xBFC0EF1C00000000) #2, !dbg !83
  %.010.i = select i1 %.not16.i, float %149, float %148, !dbg !83
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not17.i = icmp eq i32 %150, 0, !dbg !83
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %141, float 0x3FC28C8EA0000000) #2, !dbg !83
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %141, float 0x3FC28C8EA0000000) #2, !dbg !83
  %.06.i = select i1 %.not17.i, float %152, float %151, !dbg !83
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not18.i = icmp eq i32 %153, 0, !dbg !83
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %141, float 0xBFC54D1BA0000000) #2, !dbg !83
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %141, float 0xBFC54D1BA0000000) #2, !dbg !83
  %.02.i = select i1 %.not18.i, float %155, float %154, !dbg !83
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not19.i = icmp eq i32 %156, 0, !dbg !83
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %141, float 0x3FC995F3C0000000) #2, !dbg !83
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %141, float 0x3FC995F3C0000000) #2, !dbg !83
  %.0.i = select i1 %.not19.i, float %158, float %157, !dbg !83
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not20.i = icmp eq i32 %159, 0, !dbg !83
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %141, float 0xBFD0000840000000) #2, !dbg !83
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %141, float 0xBFD0000840000000) #2, !dbg !83
  %.011.i = select i1 %.not20.i, float %161, float %160, !dbg !83
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not21.i = icmp eq i32 %162, 0, !dbg !83
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %141, float 0x3FD5555CC0000000) #2, !dbg !83
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %141, float 0x3FD5555CC0000000) #2, !dbg !83
  %.08.i = select i1 %.not21.i, float %164, float %163, !dbg !83
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not22.i = icmp eq i32 %165, 0, !dbg !83
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %141, float -5.000000e-01) #2, !dbg !83
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %141, float -5.000000e-01) #2, !dbg !83
  %.07.i = select i1 %.not22.i, float %167, float %166, !dbg !83
  %168 = fmul float %141, %.07.i, !dbg !83
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not23.i = icmp eq i32 %169, 0, !dbg !83
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %168, float %141, float %141) #2, !dbg !83
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %168, float %141, float %141) #2, !dbg !83
  %.05.i = select i1 %.not23.i, float %171, float %170, !dbg !83
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not24.i = icmp eq i32 %172, 0, !dbg !83
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %143, float 0x3FE62E4300000000, float %.05.i) #2, !dbg !83
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %143, float 0x3FE62E4300000000, float %.05.i) #2, !dbg !83
  %.04.i = select i1 %.not24.i, float %174, float %173, !dbg !83
  %175 = icmp ugt i32 %133, 2139095039, !dbg !83
  br i1 %175, label %176, label %__nv_log1pf.exit, !dbg !83

176:                                              ; preds = %7
  %177 = icmp sgt i32 %133, -1082130432, !dbg !83
  br i1 %177, label %__nv_fmaf_rn.exit.i, label %181, !dbg !83

__nv_fmaf_rn.exit.i:                              ; preds = %176
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not25.i = icmp eq i32 %178, 0, !dbg !83
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %124, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !83
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %124, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !83
  %.03.i = select i1 %.not25.i, float %180, float %179, !dbg !83
  br label %181, !dbg !83

181:                                              ; preds = %__nv_fmaf_rn.exit.i, %176
  %r.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i ], [ %.04.i, %176 ], !dbg !83
  %182 = fcmp oeq float %124, 0.000000e+00, !dbg !83
  %r.1.i = select i1 %182, float -0.000000e+00, float %r.0.i, !dbg !83
  br label %__nv_log1pf.exit, !dbg !83

__nv_log1pf.exit:                                 ; preds = %7, %181
  %r.2.i = phi float [ %r.1.i, %181 ], [ %.04.i, %7 ], !dbg !83
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not.i24 = icmp eq i32 %183, 0, !dbg !83
  %184 = tail call float @llvm.nvvm.add.rz.ftz.f(float %126, float 1.000000e+00) #2, !dbg !83
  %185 = tail call float @llvm.nvvm.add.rz.f(float %126, float 1.000000e+00) #2, !dbg !83
  %.01.i25 = select i1 %.not.i24, float %185, float %184, !dbg !83
  %186 = bitcast float %.01.i25 to i32, !dbg !83
  %187 = add i32 %186, -1061158912, !dbg !83
  %188 = and i32 %187, -8388608, !dbg !83
  %189 = bitcast float %126 to i32, !dbg !83
  %190 = sub i32 %189, %188, !dbg !83
  %191 = bitcast i32 %190 to float, !dbg !83
  %192 = sub i32 1082130432, %188, !dbg !83
  %193 = bitcast i32 %192 to float, !dbg !83
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not14.i26 = icmp eq i32 %194, 0, !dbg !83
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %193, float -1.000000e+00) #2, !dbg !83
  %196 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %193, float -1.000000e+00) #2, !dbg !83
  %.09.i27 = select i1 %.not14.i26, float %196, float %195, !dbg !83
  %197 = fadd float %.09.i27, %191, !dbg !83
  %198 = sitofp i32 %188 to float, !dbg !83
  %199 = fmul float %198, 0x3E80000000000000, !dbg !83
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not15.i28 = icmp eq i32 %200, 0, !dbg !83
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %197, float 0x3FBB000240000000) #2, !dbg !83
  %202 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %197, float 0x3FBB000240000000) #2, !dbg !83
  %.012.i29 = select i1 %.not15.i28, float %202, float %201, !dbg !83
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not16.i30 = icmp eq i32 %203, 0, !dbg !83
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i29, float %197, float 0xBFC0EF1C00000000) #2, !dbg !83
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i29, float %197, float 0xBFC0EF1C00000000) #2, !dbg !83
  %.010.i31 = select i1 %.not16.i30, float %205, float %204, !dbg !83
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not17.i32 = icmp eq i32 %206, 0, !dbg !83
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i31, float %197, float 0x3FC28C8EA0000000) #2, !dbg !83
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i31, float %197, float 0x3FC28C8EA0000000) #2, !dbg !83
  %.06.i33 = select i1 %.not17.i32, float %208, float %207, !dbg !83
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not18.i34 = icmp eq i32 %209, 0, !dbg !83
  %210 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i33, float %197, float 0xBFC54D1BA0000000) #2, !dbg !83
  %211 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i33, float %197, float 0xBFC54D1BA0000000) #2, !dbg !83
  %.02.i35 = select i1 %.not18.i34, float %211, float %210, !dbg !83
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not19.i36 = icmp eq i32 %212, 0, !dbg !83
  %213 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i35, float %197, float 0x3FC995F3C0000000) #2, !dbg !83
  %214 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i35, float %197, float 0x3FC995F3C0000000) #2, !dbg !83
  %.0.i37 = select i1 %.not19.i36, float %214, float %213, !dbg !83
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not20.i38 = icmp eq i32 %215, 0, !dbg !83
  %216 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i37, float %197, float 0xBFD0000840000000) #2, !dbg !83
  %217 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i37, float %197, float 0xBFD0000840000000) #2, !dbg !83
  %.011.i39 = select i1 %.not20.i38, float %217, float %216, !dbg !83
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not21.i40 = icmp eq i32 %218, 0, !dbg !83
  %219 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i39, float %197, float 0x3FD5555CC0000000) #2, !dbg !83
  %220 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i39, float %197, float 0x3FD5555CC0000000) #2, !dbg !83
  %.08.i41 = select i1 %.not21.i40, float %220, float %219, !dbg !83
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not22.i42 = icmp eq i32 %221, 0, !dbg !83
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i41, float %197, float -5.000000e-01) #2, !dbg !83
  %223 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i41, float %197, float -5.000000e-01) #2, !dbg !83
  %.07.i43 = select i1 %.not22.i42, float %223, float %222, !dbg !83
  %224 = fmul float %197, %.07.i43, !dbg !83
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not23.i44 = icmp eq i32 %225, 0, !dbg !83
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %224, float %197, float %197) #2, !dbg !83
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %224, float %197, float %197) #2, !dbg !83
  %.05.i45 = select i1 %.not23.i44, float %227, float %226, !dbg !83
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not24.i46 = icmp eq i32 %228, 0, !dbg !83
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %199, float 0x3FE62E4300000000, float %.05.i45) #2, !dbg !83
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %199, float 0x3FE62E4300000000, float %.05.i45) #2, !dbg !83
  %.04.i47 = select i1 %.not24.i46, float %230, float %229, !dbg !83
  %231 = icmp ugt i32 %189, 2139095039, !dbg !83
  br i1 %231, label %232, label %__nv_log1pf.exit54, !dbg !83

232:                                              ; preds = %__nv_log1pf.exit
  %233 = icmp sgt i32 %189, -1082130432, !dbg !83
  br i1 %233, label %__nv_fmaf_rn.exit.i51, label %237, !dbg !83

__nv_fmaf_rn.exit.i51:                            ; preds = %232
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !83
  %.not25.i52 = icmp eq i32 %234, 0, !dbg !83
  %235 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %126, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !83
  %236 = tail call float @llvm.nvvm.fma.rn.f(float %126, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !83
  %.03.i53 = select i1 %.not25.i52, float %236, float %235, !dbg !83
  br label %237, !dbg !83

237:                                              ; preds = %__nv_fmaf_rn.exit.i51, %232
  %r.0.i49 = phi float [ %.03.i53, %__nv_fmaf_rn.exit.i51 ], [ %.04.i47, %232 ], !dbg !83
  %238 = fcmp oeq float %126, 0.000000e+00, !dbg !83
  %r.1.i50 = select i1 %238, float -0.000000e+00, float %r.0.i49, !dbg !83
  br label %__nv_log1pf.exit54, !dbg !83

__nv_log1pf.exit54:                               ; preds = %__nv_log1pf.exit, %237
  %r.2.i48 = phi float [ %r.1.i50, %237 ], [ %.04.i47, %__nv_log1pf.exit ], !dbg !83
  %239 = fcmp ogt float %122, 2.000000e+01, !dbg !84
  %240 = fcmp ogt float %121, 2.000000e+01, !dbg !84
  %241 = select i1 %240, float %121, float %r.2.i, !dbg !85
  %242 = select i1 %239, float %122, float %r.2.i48, !dbg !85
  %243 = sext i32 %13 to i64, !dbg !86
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !86
  %245 = bitcast float %121 to i32, !dbg !87
  %246 = bitcast float %122 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %245, i32 %246, ptr addrspace(1) %244, i1 %14) #2, !dbg !87
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !88
  %248 = bitcast float %241 to i32, !dbg !89
  %249 = bitcast float %242 to i32, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %248, i32 %249, ptr addrspace(1) %247, i1 %14) #2, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctoamfu75ucoivfamoofdvnxpkwzyqxl5mj3b2gnny6uneqzqpy5.py", directory: "inductor_cache/to")
!4 = !{ptr @triton_poi_fused_softplus_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_softplus_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_softplus_sum_0", linkageName: "triton_poi_fused_softplus_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 60, scope: !7)
!25 = !DILocation(line: 37, column: 53, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 42, column: 36, scope: !7)
!28 = !DILocation(line: 42, column: 31, scope: !7)
!29 = !DILocation(line: 42, column: 61, scope: !7)
!30 = !DILocation(line: 42, column: 53, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 54, scope: !7)
!34 = !DILocation(line: 47, column: 35, scope: !7)
!35 = !DILocation(line: 48, column: 34, scope: !7)
!36 = !DILocation(line: 49, column: 33, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 36, scope: !7)
!39 = !DILocation(line: 53, column: 31, scope: !7)
!40 = !DILocation(line: 53, column: 50, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 57, column: 31, scope: !7)
!43 = !DILocation(line: 57, column: 46, scope: !7)
!44 = !DILocation(line: 61, column: 31, scope: !7)
!45 = !DILocation(line: 61, column: 53, scope: !7)
!46 = !DILocation(line: 64, column: 31, scope: !7)
!47 = !DILocation(line: 64, column: 53, scope: !7)
!48 = !DILocation(line: 65, column: 35, scope: !7)
!49 = !DILocation(line: 66, column: 35, scope: !7)
!50 = !DILocation(line: 67, column: 35, scope: !7)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 71, column: 20, scope: !7)
!53 = !DILocation(line: 72, column: 36, scope: !7)
!54 = !DILocation(line: 72, column: 31, scope: !7)
!55 = !DILocation(line: 72, column: 50, scope: !7)
!56 = !DILocation(line: 75, column: 20, scope: !7)
!57 = !DILocation(line: 76, column: 31, scope: !7)
!58 = !DILocation(line: 76, column: 50, scope: !7)
!59 = !DILocation(line: 80, column: 31, scope: !7)
!60 = !DILocation(line: 80, column: 46, scope: !7)
!61 = !DILocation(line: 83, column: 31, scope: !7)
!62 = !DILocation(line: 83, column: 53, scope: !7)
!63 = !DILocation(line: 84, column: 35, scope: !7)
!64 = !DILocation(line: 85, column: 35, scope: !7)
!65 = !DILocation(line: 86, column: 35, scope: !7)
!66 = !DILocation(line: 87, column: 20, scope: !7)
!67 = !DILocation(line: 90, column: 20, scope: !7)
!68 = !DILocation(line: 91, column: 36, scope: !7)
!69 = !DILocation(line: 91, column: 31, scope: !7)
!70 = !DILocation(line: 91, column: 51, scope: !7)
!71 = !DILocation(line: 94, column: 20, scope: !7)
!72 = !DILocation(line: 95, column: 31, scope: !7)
!73 = !DILocation(line: 95, column: 50, scope: !7)
!74 = !DILocation(line: 99, column: 31, scope: !7)
!75 = !DILocation(line: 99, column: 50, scope: !7)
!76 = !DILocation(line: 102, column: 31, scope: !7)
!77 = !DILocation(line: 102, column: 46, scope: !7)
!78 = !DILocation(line: 103, column: 35, scope: !7)
!79 = !DILocation(line: 104, column: 35, scope: !7)
!80 = !DILocation(line: 105, column: 35, scope: !7)
!81 = !DILocation(line: 106, column: 20, scope: !7)
!82 = !DILocation(line: 111, column: 24, scope: !7)
!83 = !DILocation(line: 112, column: 28, scope: !7)
!84 = !DILocation(line: 110, column: 20, scope: !7)
!85 = !DILocation(line: 114, column: 35, scope: !7)
!86 = !DILocation(line: 115, column: 25, scope: !7)
!87 = !DILocation(line: 115, column: 37, scope: !7)
!88 = !DILocation(line: 116, column: 28, scope: !7)
!89 = !DILocation(line: 116, column: 40, scope: !7)
!90 = !DILocation(line: 116, column: 4, scope: !7)
