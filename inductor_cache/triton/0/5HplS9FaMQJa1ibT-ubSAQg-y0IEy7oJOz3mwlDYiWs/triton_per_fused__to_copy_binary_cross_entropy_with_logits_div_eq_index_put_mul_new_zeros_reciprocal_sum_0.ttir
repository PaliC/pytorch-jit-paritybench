#loc = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":19:0)
#loc1 = loc(unknown)
#loc10 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":37:57)
#loc14 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":42:59)
#loc21 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":54:59)
#loc37 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":67:59)
#loc43 = loc(callsite(#loc1 at #loc10))
#loc46 = loc(callsite(#loc1 at #loc14))
#loc48 = loc(callsite(#loc1 at #loc21))
#loc53 = loc(callsite(#loc1 at #loc37))
module {
  tt.func public @triton_per_fused__to_copy_binary_cross_entropy_with_logits_div_eq_index_put_mul_new_zeros_reciprocal_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>> loc(#loc6)
    %7 = arith.cmpf oeq, %3, %cst_2 : tensor<256xf32> loc(#loc7)
    %8 = arith.extui %7 : tensor<256xi1> to tensor<256xi64> loc(#loc8)
    %9 = "tt.reduce"(%8) <{axis = 0 : i32}> ({
    ^bb0(%arg4: i64 loc(callsite(#loc1 at #loc10)), %arg5: i64 loc(callsite(#loc1 at #loc10))):
      %41 = arith.addi %arg4, %arg5 : i64 loc(#loc55)
      tt.reduce.return %41 : i64 loc(#loc42)
    }) : (tensor<256xi64>) -> i64 loc(#loc42)
    %10 = arith.cmpf oeq, %3, %cst_1 : tensor<256xf32> loc(#loc12)
    %11 = arith.extui %10 : tensor<256xi1> to tensor<256xi64> loc(#loc13)
    %12 = "tt.reduce"(%11) <{axis = 0 : i32}> ({
    ^bb0(%arg4: i64 loc(callsite(#loc1 at #loc14)), %arg5: i64 loc(callsite(#loc1 at #loc14))):
      %41 = arith.addi %arg4, %arg5 : i64 loc(#loc56)
      tt.reduce.return %41 : i64 loc(#loc45)
    }) : (tensor<256xi64>) -> i64 loc(#loc45)
    %13 = arith.sitofp %9 : i64 to f32 loc(#loc15)
    %14 = arith.divf %cst_0, %13 : f32 loc(#loc16)
    %15 = tt.splat %14 : f32 -> tensor<256xf32> loc(#loc17)
    %16 = arith.select %7, %15, %cst_1 : tensor<256xi1>, tensor<256xf32> loc(#loc17)
    %17 = arith.sitofp %12 : i64 to f32 loc(#loc18)
    %18 = arith.divf %cst_0, %17 : f32 loc(#loc19)
    %19 = tt.splat %18 : f32 -> tensor<256xf32> loc(#loc20)
    %20 = arith.select %10, %19, %16 : tensor<256xi1>, tensor<256xf32> loc(#loc20)
    %21 = "tt.reduce"(%20) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc21)), %arg5: f32 loc(callsite(#loc1 at #loc21))):
      %41 = arith.addf %arg4, %arg5 : f32 loc(#loc57)
      tt.reduce.return %41 : f32 loc(#loc47)
    }) : (tensor<256xf32>) -> f32 loc(#loc47)
    %22 = arith.addf %21, %cst : f32 loc(#loc49)
    %23 = arith.subf %cst_2, %3 : tensor<256xf32> loc(#loc24)
    %24 = arith.mulf %23, %6 : tensor<256xf32> loc(#loc25)
    %25 = arith.cmpf olt, %cst_1, %6 : tensor<256xf32> loc(#loc50)
    %26 = arith.select %25, %cst_1, %6 : tensor<256xi1>, tensor<256xf32> loc(#loc51)
    %27 = math.absf %6 : tensor<256xf32> loc(#loc29)
    %28 = arith.subf %cst_1, %27 : tensor<256xf32> loc(#loc30)
    %29 = math.exp %28 : tensor<256xf32> loc(#loc31)
    %30 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc32)
    %31 = arith.subf %26, %30 : tensor<256xf32> loc(#loc33)
    %32 = arith.subf %24, %31 : tensor<256xf32> loc(#loc34)
    %33 = tt.splat %22 : f32 -> tensor<256xf32> loc(#loc35)
    %34 = arith.divf %20, %33 : tensor<256xf32> loc(#loc35)
    %35 = arith.mulf %32, %34 : tensor<256xf32> loc(#loc36)
    %36 = "tt.reduce"(%35) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc37)), %arg5: f32 loc(callsite(#loc1 at #loc37))):
      %41 = arith.addf %arg4, %arg5 : f32 loc(#loc58)
      tt.reduce.return %41 : f32 loc(#loc52)
    }) : (tensor<256xf32>) -> f32 loc(#loc52)
    %37 = arith.addf %36, %cst : f32 loc(#loc54)
    %38 = tt.splat %37 : f32 -> tensor<1xf32> loc(#loc54)
    %39 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc39)
    %40 = tt.splat %39 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc39)
    tt.store %40, %38 : tensor<1x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":27:26)
#loc3 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":31:30)
#loc4 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":31:35)
#loc5 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":32:31)
#loc6 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":32:36)
#loc7 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":34:19)
#loc8 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":35:19)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc12 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":39:19)
#loc13 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":40:19)
#loc15 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":43:20)
#loc16 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":45:20)
#loc17 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":47:34)
#loc18 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":48:21)
#loc19 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":49:20)
#loc20 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":52:34)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc23 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":54:45)
#loc24 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":55:19)
#loc25 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":56:20)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc27 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":57:41)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc29 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":58:24)
#loc30 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":59:13)
#loc31 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":60:24)
#loc32 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":61:28)
#loc33 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":62:20)
#loc34 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":63:20)
#loc35 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":64:20)
#loc36 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":65:20)
#loc38 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":67:45)
#loc39 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":68:28)
#loc40 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":68:63)
#loc41 = loc("inductor_cache/be/cbetowq3fqvitxqyvqyumlwplphxp2bke2a5x4igbtmvzp2rrmet.py":68:4)
#loc42 = loc(callsite(#loc9 at #loc10))
#loc44 = loc(callsite(#loc11 at #loc9))
#loc45 = loc(callsite(#loc9 at #loc14))
#loc47 = loc(callsite(#loc9 at #loc21))
#loc49 = loc(callsite(#loc22 at #loc23))
#loc50 = loc(callsite(#loc26 at #loc27))
#loc51 = loc(callsite(#loc28 at #loc27))
#loc52 = loc(callsite(#loc9 at #loc37))
#loc54 = loc(callsite(#loc22 at #loc38))
#loc55 = loc(callsite(#loc44 at #loc10))
#loc56 = loc(callsite(#loc44 at #loc14))
#loc57 = loc(callsite(#loc44 at #loc21))
#loc58 = loc(callsite(#loc44 at #loc37))
