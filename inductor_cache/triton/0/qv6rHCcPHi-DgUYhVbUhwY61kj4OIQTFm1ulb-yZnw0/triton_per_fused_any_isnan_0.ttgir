#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":19:0)
#loc1 = loc(unknown)
#loc7 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":33:36)
#loc14 = loc(callsite(#loc1 at #loc7))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_any_isnan_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":19:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc3)
    %3 = tt.addptr %2, %1 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc3)
    %4 = tt.load %3 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc4)
    %5 = tt.extern_elementwise %4 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi ne, %5, %cst : tensor<1x64xi32, #blocked> loc(#loc5)
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg3: i1 loc(callsite(#loc1 at #loc7)), %arg4: i1 loc(callsite(#loc1 at #loc7))):
      %14 = arith.ori %arg3, %arg4 : i1 loc(#loc16)
      tt.reduce.return %14 : i1 loc(#loc13)
    }) : (tensor<1x64xi1, #blocked>) -> tensor<1xi1, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %8 = tt.expand_dims %7 {axis = 1 : i32} : tensor<1xi1, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xi1, #blocked> loc(#loc9)
    %9 = tt.addptr %arg1, %c0_i32 : !tt.ptr<i1>, i32 loc(#loc10)
    %10 = tt.bitcast %9 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc11)
    %11 = triton_gpu.convert_layout %8 : tensor<1x1xi1, #blocked> -> tensor<1x1xi1, #blocked1> loc(#loc11)
    %12 = arith.extui %11 : tensor<1x1xi1, #blocked1> to tensor<1x1xi8, #blocked1> loc(#loc11)
    %13 = tt.splat %10 : !tt.ptr<i8> -> tensor<1x1x!tt.ptr<i8>, #blocked1> loc(#loc11)
    tt.store %13, %12 : tensor<1x1x!tt.ptr<i8>, #blocked1> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":26:34)
#loc3 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":30:30)
#loc4 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":30:35)
#loc5 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":31:27)
#loc6 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":232:29)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":227:15)
#loc9 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":33:39)
#loc10 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":34:25)
#loc11 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":34:67)
#loc12 = loc("inductor_cache/gh/cghwd367555ftfxwuqhc7qeqm7ro4uuyg2akwafhm2vwg3v5azci.py":34:4)
#loc13 = loc(callsite(#loc6 at #loc7))
#loc15 = loc(callsite(#loc8 at #loc6))
#loc16 = loc(callsite(#loc15 at #loc7))
