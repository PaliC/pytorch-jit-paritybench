; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = shl i32 %8, 3, !dbg !12
  %14 = and i32 %13, 24, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = or disjoint i32 %15, 16, !dbg !13
  %20 = or disjoint i32 %15, 20, !dbg !13
  %21 = or disjoint i32 %15, 24, !dbg !13
  %22 = or disjoint i32 %15, 28, !dbg !13
  %23 = or disjoint i32 %7, %12, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = icmp slt i32 %15, 256, !dbg !14
  %26 = icmp slt i32 %16, 256, !dbg !14
  %27 = icmp slt i32 %17, 256, !dbg !14
  %28 = icmp slt i32 %18, 256, !dbg !14
  %29 = icmp slt i32 %19, 256, !dbg !14
  %30 = icmp slt i32 %20, 256, !dbg !14
  %31 = icmp slt i32 %21, 256, !dbg !14
  %32 = icmp slt i32 %22, 256, !dbg !14
  %33 = icmp slt i32 %23, 256, !dbg !14
  %34 = icmp slt i32 %24, 256, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %36 = shl i32 %35, 5, !dbg !16
  %37 = and i32 %8, 31, !dbg !17
  %38 = lshr i32 %8, 3, !dbg !17
  %39 = and i32 %38, 15, !dbg !17
  %40 = lshr i32 %8, 2, !dbg !17
  %41 = and i32 %40, 31, !dbg !17
  %42 = or disjoint i32 %36, %37, !dbg !18
  %43 = or disjoint i32 %36, %39, !dbg !18
  %44 = or disjoint i32 %43, 16, !dbg !18
  %45 = or disjoint i32 %36, %41, !dbg !18
  %46 = icmp slt i32 %42, 256, !dbg !19
  %47 = icmp slt i32 %43, 256, !dbg !19
  %48 = icmp slt i32 %44, 256, !dbg !19
  %49 = icmp slt i32 %45, 256, !dbg !19
  %.frozen = freeze i32 %42, !dbg !20
  %50 = sdiv i32 %.frozen, 16, !dbg !20
  %51 = mul i32 %50, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %51, !dbg !21
  %.frozen22 = freeze i32 %23, !dbg !22
  %52 = sdiv i32 %.frozen22, 64, !dbg !22
  %53 = mul i32 %52, 64, !dbg !23
  %.decomposed23 = sub i32 %.frozen22, %53, !dbg !23
  %.frozen24 = freeze i32 %24, !dbg !22
  %54 = sdiv i32 %.frozen24, 64, !dbg !22
  %55 = mul i32 %54, 64, !dbg !23
  %.decomposed25 = sub i32 %.frozen24, %55, !dbg !23
  %56 = shl nsw i32 %50, 1, !dbg !24
  %57 = shl nsw i32 %.decomposed, 1, !dbg !25
  %58 = icmp sgt i32 %.decomposed, 0, !dbg !26
  %59 = shl i32 %50, 6, !dbg !27
  %60 = add i32 %59, %57, !dbg !28
  %61 = add i32 %60, -33, !dbg !29
  %62 = shl i32 %15, 10, !dbg !30
  %63 = shl i32 %16, 10, !dbg !30
  %64 = shl i32 %17, 10, !dbg !30
  %65 = shl i32 %18, 10, !dbg !30
  %66 = shl i32 %19, 10, !dbg !30
  %67 = shl i32 %20, 10, !dbg !30
  %68 = shl i32 %21, 10, !dbg !30
  %69 = shl i32 %22, 10, !dbg !30
  %70 = add i32 %61, %62, !dbg !31
  %71 = add i32 %61, %63, !dbg !31
  %72 = add i32 %61, %64, !dbg !31
  %73 = add i32 %61, %65, !dbg !31
  %74 = add i32 %61, %66, !dbg !31
  %75 = add i32 %61, %67, !dbg !31
  %76 = add i32 %61, %68, !dbg !31
  %77 = add i32 %61, %69, !dbg !31
  %78 = sext i32 %70 to i64, !dbg !32
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !32
  %80 = sext i32 %71 to i64, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !32
  %82 = sext i32 %72 to i64, !dbg !32
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !32
  %84 = sext i32 %73 to i64, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !32
  %86 = sext i32 %74 to i64, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !32
  %88 = sext i32 %75 to i64, !dbg !32
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !32
  %90 = sext i32 %76 to i64, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !32
  %92 = sext i32 %77 to i64, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !32
  %94 = add i32 %42, -16, !dbg !33
  %95 = icmp ult i32 %94, 240, !dbg !33
  %96 = and i1 %95, %58, !dbg !33
  %97 = and i1 %25, %96, !dbg !34
  %98 = and i1 %26, %96, !dbg !34
  %99 = and i1 %27, %96, !dbg !34
  %100 = and i1 %28, %96, !dbg !34
  %101 = and i1 %29, %96, !dbg !34
  %102 = and i1 %30, %96, !dbg !34
  %103 = and i1 %31, %96, !dbg !34
  %104 = and i1 %32, %96, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %97, i32 -8388608, i1 %97) #2, !dbg !35
  %106 = bitcast i32 %105 to float, !dbg !35
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %98, i32 -8388608, i1 %98) #2, !dbg !35
  %108 = bitcast i32 %107 to float, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %99, i32 -8388608, i1 %99) #2, !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %100, i32 -8388608, i1 %100) #2, !dbg !35
  %112 = bitcast i32 %111 to float, !dbg !35
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %101, i32 -8388608, i1 %101) #2, !dbg !35
  %114 = bitcast i32 %113 to float, !dbg !35
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %102, i32 -8388608, i1 %102) #2, !dbg !35
  %116 = bitcast i32 %115 to float, !dbg !35
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %103, i32 -8388608, i1 %103) #2, !dbg !35
  %118 = bitcast i32 %117 to float, !dbg !35
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %104, i32 -8388608, i1 %104) #2, !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = icmp sgt i32 %.decomposed, -1, !dbg !36
  %122 = add i32 %60, -32, !dbg !37
  %123 = add i32 %122, %62, !dbg !38
  %124 = add i32 %122, %63, !dbg !38
  %125 = add i32 %122, %64, !dbg !38
  %126 = add i32 %122, %65, !dbg !38
  %127 = add i32 %122, %66, !dbg !38
  %128 = add i32 %122, %67, !dbg !38
  %129 = add i32 %122, %68, !dbg !38
  %130 = add i32 %122, %69, !dbg !38
  %131 = sext i32 %123 to i64, !dbg !39
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !39
  %133 = sext i32 %124 to i64, !dbg !39
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !39
  %135 = sext i32 %125 to i64, !dbg !39
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !39
  %137 = sext i32 %126 to i64, !dbg !39
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !39
  %139 = sext i32 %127 to i64, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !39
  %141 = sext i32 %128 to i64, !dbg !39
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !39
  %143 = sext i32 %129 to i64, !dbg !39
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !39
  %145 = sext i32 %130 to i64, !dbg !39
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !39
  %147 = and i1 %95, %121, !dbg !40
  %148 = and i1 %25, %147, !dbg !41
  %149 = and i1 %26, %147, !dbg !41
  %150 = and i1 %27, %147, !dbg !41
  %151 = and i1 %28, %147, !dbg !41
  %152 = and i1 %29, %147, !dbg !41
  %153 = and i1 %30, %147, !dbg !41
  %154 = and i1 %31, %147, !dbg !41
  %155 = and i1 %32, %147, !dbg !41
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %148, i32 -8388608, i1 %148) #2, !dbg !42
  %157 = bitcast i32 %156 to float, !dbg !42
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %149, i32 -8388608, i1 %149) #2, !dbg !42
  %159 = bitcast i32 %158 to float, !dbg !42
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %150, i32 -8388608, i1 %150) #2, !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %151, i32 -8388608, i1 %151) #2, !dbg !42
  %163 = bitcast i32 %162 to float, !dbg !42
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %152, i32 -8388608, i1 %152) #2, !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %153, i32 -8388608, i1 %153) #2, !dbg !42
  %167 = bitcast i32 %166 to float, !dbg !42
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %154, i32 -8388608, i1 %154) #2, !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %155, i32 -8388608, i1 %155) #2, !dbg !42
  %171 = bitcast i32 %170 to float, !dbg !42
  %172 = fcmp ogt float %157, %106, !dbg !43
  %173 = fcmp ogt float %159, %108, !dbg !43
  %174 = fcmp ogt float %161, %110, !dbg !43
  %175 = fcmp ogt float %163, %112, !dbg !43
  %176 = fcmp ogt float %165, %114, !dbg !43
  %177 = fcmp ogt float %167, %116, !dbg !43
  %178 = fcmp ogt float %169, %118, !dbg !43
  %179 = fcmp ogt float %171, %120, !dbg !43
  %180 = fcmp uno float %157, 0.000000e+00, !dbg !47
  %181 = fcmp uno float %159, 0.000000e+00, !dbg !47
  %182 = fcmp uno float %161, 0.000000e+00, !dbg !47
  %183 = fcmp uno float %163, 0.000000e+00, !dbg !47
  %184 = fcmp uno float %165, 0.000000e+00, !dbg !47
  %185 = fcmp uno float %167, 0.000000e+00, !dbg !47
  %186 = fcmp uno float %169, 0.000000e+00, !dbg !47
  %187 = fcmp uno float %171, 0.000000e+00, !dbg !47
  %188 = or i1 %172, %180, !dbg !48
  %189 = or i1 %173, %181, !dbg !48
  %190 = or i1 %174, %182, !dbg !48
  %191 = or i1 %175, %183, !dbg !48
  %192 = or i1 %176, %184, !dbg !48
  %193 = or i1 %177, %185, !dbg !48
  %194 = or i1 %178, %186, !dbg !48
  %195 = or i1 %179, %187, !dbg !48
  %196 = select i1 %188, float %157, float %106, !dbg !49
  %197 = select i1 %189, float %159, float %108, !dbg !49
  %198 = select i1 %190, float %161, float %110, !dbg !49
  %199 = select i1 %191, float %163, float %112, !dbg !49
  %200 = select i1 %192, float %165, float %114, !dbg !49
  %201 = select i1 %193, float %167, float %116, !dbg !49
  %202 = select i1 %194, float %169, float %118, !dbg !49
  %203 = select i1 %195, float %171, float %120, !dbg !49
  %204 = or disjoint i32 %57, 1, !dbg !50
  %205 = add i32 %60, -31, !dbg !51
  %206 = add i32 %205, %62, !dbg !52
  %207 = add i32 %205, %63, !dbg !52
  %208 = add i32 %205, %64, !dbg !52
  %209 = add i32 %205, %65, !dbg !52
  %210 = add i32 %205, %66, !dbg !52
  %211 = add i32 %205, %67, !dbg !52
  %212 = add i32 %205, %68, !dbg !52
  %213 = add i32 %205, %69, !dbg !52
  %214 = sext i32 %206 to i64, !dbg !53
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !53
  %216 = sext i32 %207 to i64, !dbg !53
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !53
  %218 = sext i32 %208 to i64, !dbg !53
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !53
  %220 = sext i32 %209 to i64, !dbg !53
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !53
  %222 = sext i32 %210 to i64, !dbg !53
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !53
  %224 = sext i32 %211 to i64, !dbg !53
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !53
  %226 = sext i32 %212 to i64, !dbg !53
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !53
  %228 = sext i32 %213 to i64, !dbg !53
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !53
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %148, i32 -8388608, i1 %148) #2, !dbg !54
  %231 = bitcast i32 %230 to float, !dbg !54
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %149, i32 -8388608, i1 %149) #2, !dbg !54
  %233 = bitcast i32 %232 to float, !dbg !54
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %150, i32 -8388608, i1 %150) #2, !dbg !54
  %235 = bitcast i32 %234 to float, !dbg !54
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %151, i32 -8388608, i1 %151) #2, !dbg !54
  %237 = bitcast i32 %236 to float, !dbg !54
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %152, i32 -8388608, i1 %152) #2, !dbg !54
  %239 = bitcast i32 %238 to float, !dbg !54
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %153, i32 -8388608, i1 %153) #2, !dbg !54
  %241 = bitcast i32 %240 to float, !dbg !54
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %154, i32 -8388608, i1 %154) #2, !dbg !54
  %243 = bitcast i32 %242 to float, !dbg !54
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %155, i32 -8388608, i1 %155) #2, !dbg !54
  %245 = bitcast i32 %244 to float, !dbg !54
  %246 = fcmp olt float %196, %231, !dbg !55
  %247 = fcmp olt float %197, %233, !dbg !55
  %248 = fcmp olt float %198, %235, !dbg !55
  %249 = fcmp olt float %199, %237, !dbg !55
  %250 = fcmp olt float %200, %239, !dbg !55
  %251 = fcmp olt float %201, %241, !dbg !55
  %252 = fcmp olt float %202, %243, !dbg !55
  %253 = fcmp olt float %203, %245, !dbg !55
  %254 = fcmp uno float %231, 0.000000e+00, !dbg !57
  %255 = fcmp uno float %233, 0.000000e+00, !dbg !57
  %256 = fcmp uno float %235, 0.000000e+00, !dbg !57
  %257 = fcmp uno float %237, 0.000000e+00, !dbg !57
  %258 = fcmp uno float %239, 0.000000e+00, !dbg !57
  %259 = fcmp uno float %241, 0.000000e+00, !dbg !57
  %260 = fcmp uno float %243, 0.000000e+00, !dbg !57
  %261 = fcmp uno float %245, 0.000000e+00, !dbg !57
  %262 = or i1 %246, %254, !dbg !58
  %263 = or i1 %247, %255, !dbg !58
  %264 = or i1 %248, %256, !dbg !58
  %265 = or i1 %249, %257, !dbg !58
  %266 = or i1 %250, %258, !dbg !58
  %267 = or i1 %251, %259, !dbg !58
  %268 = or i1 %252, %260, !dbg !58
  %269 = or i1 %253, %261, !dbg !58
  %270 = select i1 %262, float %231, float %196, !dbg !59
  %271 = select i1 %263, float %233, float %197, !dbg !59
  %272 = select i1 %264, float %235, float %198, !dbg !59
  %273 = select i1 %265, float %237, float %199, !dbg !59
  %274 = select i1 %266, float %239, float %200, !dbg !59
  %275 = select i1 %267, float %241, float %201, !dbg !59
  %276 = select i1 %268, float %243, float %202, !dbg !59
  %277 = select i1 %269, float %245, float %203, !dbg !59
  %278 = add i32 %60, -1, !dbg !60
  %279 = add i32 %278, %62, !dbg !61
  %280 = add i32 %278, %63, !dbg !61
  %281 = add i32 %278, %64, !dbg !61
  %282 = add i32 %278, %65, !dbg !61
  %283 = add i32 %278, %66, !dbg !61
  %284 = add i32 %278, %67, !dbg !61
  %285 = add i32 %278, %68, !dbg !61
  %286 = add i32 %278, %69, !dbg !61
  %287 = sext i32 %279 to i64, !dbg !62
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !62
  %289 = sext i32 %280 to i64, !dbg !62
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !62
  %291 = sext i32 %281 to i64, !dbg !62
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !62
  %293 = sext i32 %282 to i64, !dbg !62
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !62
  %295 = sext i32 %283 to i64, !dbg !62
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !62
  %297 = sext i32 %284 to i64, !dbg !62
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !62
  %299 = sext i32 %285 to i64, !dbg !62
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !62
  %301 = sext i32 %286 to i64, !dbg !62
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !62
  %303 = add i32 %42, 15, !dbg !63
  %304 = icmp ult i32 %303, 271, !dbg !63
  %305 = and i1 %304, %58, !dbg !63
  %306 = and i1 %25, %305, !dbg !64
  %307 = and i1 %26, %305, !dbg !64
  %308 = and i1 %27, %305, !dbg !64
  %309 = and i1 %28, %305, !dbg !64
  %310 = and i1 %29, %305, !dbg !64
  %311 = and i1 %30, %305, !dbg !64
  %312 = and i1 %31, %305, !dbg !64
  %313 = and i1 %32, %305, !dbg !64
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %306, i32 -8388608, i1 %306) #2, !dbg !65
  %315 = bitcast i32 %314 to float, !dbg !65
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %307, i32 -8388608, i1 %307) #2, !dbg !65
  %317 = bitcast i32 %316 to float, !dbg !65
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %308, i32 -8388608, i1 %308) #2, !dbg !65
  %319 = bitcast i32 %318 to float, !dbg !65
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %309, i32 -8388608, i1 %309) #2, !dbg !65
  %321 = bitcast i32 %320 to float, !dbg !65
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %310, i32 -8388608, i1 %310) #2, !dbg !65
  %323 = bitcast i32 %322 to float, !dbg !65
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %311, i32 -8388608, i1 %311) #2, !dbg !65
  %325 = bitcast i32 %324 to float, !dbg !65
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %300, i1 %312, i32 -8388608, i1 %312) #2, !dbg !65
  %327 = bitcast i32 %326 to float, !dbg !65
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %313, i32 -8388608, i1 %313) #2, !dbg !65
  %329 = bitcast i32 %328 to float, !dbg !65
  %330 = fcmp olt float %270, %315, !dbg !66
  %331 = fcmp olt float %271, %317, !dbg !66
  %332 = fcmp olt float %272, %319, !dbg !66
  %333 = fcmp olt float %273, %321, !dbg !66
  %334 = fcmp olt float %274, %323, !dbg !66
  %335 = fcmp olt float %275, %325, !dbg !66
  %336 = fcmp olt float %276, %327, !dbg !66
  %337 = fcmp olt float %277, %329, !dbg !66
  %338 = fcmp uno float %315, 0.000000e+00, !dbg !68
  %339 = fcmp uno float %317, 0.000000e+00, !dbg !68
  %340 = fcmp uno float %319, 0.000000e+00, !dbg !68
  %341 = fcmp uno float %321, 0.000000e+00, !dbg !68
  %342 = fcmp uno float %323, 0.000000e+00, !dbg !68
  %343 = fcmp uno float %325, 0.000000e+00, !dbg !68
  %344 = fcmp uno float %327, 0.000000e+00, !dbg !68
  %345 = fcmp uno float %329, 0.000000e+00, !dbg !68
  %346 = or i1 %330, %338, !dbg !69
  %347 = or i1 %331, %339, !dbg !69
  %348 = or i1 %332, %340, !dbg !69
  %349 = or i1 %333, %341, !dbg !69
  %350 = or i1 %334, %342, !dbg !69
  %351 = or i1 %335, %343, !dbg !69
  %352 = or i1 %336, %344, !dbg !69
  %353 = or i1 %337, %345, !dbg !69
  %354 = select i1 %346, float %315, float %270, !dbg !70
  %355 = select i1 %347, float %317, float %271, !dbg !70
  %356 = select i1 %348, float %319, float %272, !dbg !70
  %357 = select i1 %349, float %321, float %273, !dbg !70
  %358 = select i1 %350, float %323, float %274, !dbg !70
  %359 = select i1 %351, float %325, float %275, !dbg !70
  %360 = select i1 %352, float %327, float %276, !dbg !70
  %361 = select i1 %353, float %329, float %277, !dbg !70
  %362 = add i32 %60, %62, !dbg !71
  %363 = add i32 %60, %63, !dbg !71
  %364 = add i32 %60, %64, !dbg !71
  %365 = add i32 %60, %65, !dbg !71
  %366 = add i32 %60, %66, !dbg !71
  %367 = add i32 %60, %67, !dbg !71
  %368 = add i32 %60, %68, !dbg !71
  %369 = add i32 %60, %69, !dbg !71
  %370 = sext i32 %362 to i64, !dbg !72
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !72
  %372 = sext i32 %363 to i64, !dbg !72
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !72
  %374 = sext i32 %364 to i64, !dbg !72
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !72
  %376 = sext i32 %365 to i64, !dbg !72
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !72
  %378 = sext i32 %366 to i64, !dbg !72
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !72
  %380 = sext i32 %367 to i64, !dbg !72
  %381 = getelementptr float, ptr addrspace(1) %0, i64 %380, !dbg !72
  %382 = sext i32 %368 to i64, !dbg !72
  %383 = getelementptr float, ptr addrspace(1) %0, i64 %382, !dbg !72
  %384 = sext i32 %369 to i64, !dbg !72
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !72
  %386 = and i1 %304, %121, !dbg !73
  %387 = and i1 %25, %386, !dbg !74
  %388 = and i1 %26, %386, !dbg !74
  %389 = and i1 %27, %386, !dbg !74
  %390 = and i1 %28, %386, !dbg !74
  %391 = and i1 %29, %386, !dbg !74
  %392 = and i1 %30, %386, !dbg !74
  %393 = and i1 %31, %386, !dbg !74
  %394 = and i1 %32, %386, !dbg !74
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %371, i1 %387, i32 -8388608, i1 %387) #2, !dbg !75
  %396 = bitcast i32 %395 to float, !dbg !75
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %373, i1 %388, i32 -8388608, i1 %388) #2, !dbg !75
  %398 = bitcast i32 %397 to float, !dbg !75
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %389, i32 -8388608, i1 %389) #2, !dbg !75
  %400 = bitcast i32 %399 to float, !dbg !75
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %377, i1 %390, i32 -8388608, i1 %390) #2, !dbg !75
  %402 = bitcast i32 %401 to float, !dbg !75
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %379, i1 %391, i32 -8388608, i1 %391) #2, !dbg !75
  %404 = bitcast i32 %403 to float, !dbg !75
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %381, i1 %392, i32 -8388608, i1 %392) #2, !dbg !75
  %406 = bitcast i32 %405 to float, !dbg !75
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %383, i1 %393, i32 -8388608, i1 %393) #2, !dbg !75
  %408 = bitcast i32 %407 to float, !dbg !75
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %385, i1 %394, i32 -8388608, i1 %394) #2, !dbg !75
  %410 = bitcast i32 %409 to float, !dbg !75
  %411 = fcmp olt float %354, %396, !dbg !76
  %412 = fcmp olt float %355, %398, !dbg !76
  %413 = fcmp olt float %356, %400, !dbg !76
  %414 = fcmp olt float %357, %402, !dbg !76
  %415 = fcmp olt float %358, %404, !dbg !76
  %416 = fcmp olt float %359, %406, !dbg !76
  %417 = fcmp olt float %360, %408, !dbg !76
  %418 = fcmp olt float %361, %410, !dbg !76
  %419 = fcmp uno float %396, 0.000000e+00, !dbg !78
  %420 = fcmp uno float %398, 0.000000e+00, !dbg !78
  %421 = fcmp uno float %400, 0.000000e+00, !dbg !78
  %422 = fcmp uno float %402, 0.000000e+00, !dbg !78
  %423 = fcmp uno float %404, 0.000000e+00, !dbg !78
  %424 = fcmp uno float %406, 0.000000e+00, !dbg !78
  %425 = fcmp uno float %408, 0.000000e+00, !dbg !78
  %426 = fcmp uno float %410, 0.000000e+00, !dbg !78
  %427 = or i1 %411, %419, !dbg !79
  %428 = or i1 %412, %420, !dbg !79
  %429 = or i1 %413, %421, !dbg !79
  %430 = or i1 %414, %422, !dbg !79
  %431 = or i1 %415, %423, !dbg !79
  %432 = or i1 %416, %424, !dbg !79
  %433 = or i1 %417, %425, !dbg !79
  %434 = or i1 %418, %426, !dbg !79
  %435 = select i1 %427, float %396, float %354, !dbg !80
  %436 = select i1 %428, float %398, float %355, !dbg !80
  %437 = select i1 %429, float %400, float %356, !dbg !80
  %438 = select i1 %430, float %402, float %357, !dbg !80
  %439 = select i1 %431, float %404, float %358, !dbg !80
  %440 = select i1 %432, float %406, float %359, !dbg !80
  %441 = select i1 %433, float %408, float %360, !dbg !80
  %442 = select i1 %434, float %410, float %361, !dbg !80
  %443 = add i32 %204, %59, !dbg !81
  %444 = add i32 %443, %62, !dbg !82
  %445 = add i32 %443, %63, !dbg !82
  %446 = add i32 %443, %64, !dbg !82
  %447 = add i32 %443, %65, !dbg !82
  %448 = add i32 %443, %66, !dbg !82
  %449 = add i32 %443, %67, !dbg !82
  %450 = add i32 %443, %68, !dbg !82
  %451 = add i32 %443, %69, !dbg !82
  %452 = sext i32 %444 to i64, !dbg !83
  %453 = getelementptr float, ptr addrspace(1) %0, i64 %452, !dbg !83
  %454 = sext i32 %445 to i64, !dbg !83
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !83
  %456 = sext i32 %446 to i64, !dbg !83
  %457 = getelementptr float, ptr addrspace(1) %0, i64 %456, !dbg !83
  %458 = sext i32 %447 to i64, !dbg !83
  %459 = getelementptr float, ptr addrspace(1) %0, i64 %458, !dbg !83
  %460 = sext i32 %448 to i64, !dbg !83
  %461 = getelementptr float, ptr addrspace(1) %0, i64 %460, !dbg !83
  %462 = sext i32 %449 to i64, !dbg !83
  %463 = getelementptr float, ptr addrspace(1) %0, i64 %462, !dbg !83
  %464 = sext i32 %450 to i64, !dbg !83
  %465 = getelementptr float, ptr addrspace(1) %0, i64 %464, !dbg !83
  %466 = sext i32 %451 to i64, !dbg !83
  %467 = getelementptr float, ptr addrspace(1) %0, i64 %466, !dbg !83
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %453, i1 %387, i32 -8388608, i1 %387) #2, !dbg !84
  %469 = bitcast i32 %468 to float, !dbg !84
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %455, i1 %388, i32 -8388608, i1 %388) #2, !dbg !84
  %471 = bitcast i32 %470 to float, !dbg !84
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %389, i32 -8388608, i1 %389) #2, !dbg !84
  %473 = bitcast i32 %472 to float, !dbg !84
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %459, i1 %390, i32 -8388608, i1 %390) #2, !dbg !84
  %475 = bitcast i32 %474 to float, !dbg !84
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %461, i1 %391, i32 -8388608, i1 %391) #2, !dbg !84
  %477 = bitcast i32 %476 to float, !dbg !84
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %463, i1 %392, i32 -8388608, i1 %392) #2, !dbg !84
  %479 = bitcast i32 %478 to float, !dbg !84
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %465, i1 %393, i32 -8388608, i1 %393) #2, !dbg !84
  %481 = bitcast i32 %480 to float, !dbg !84
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %394, i32 -8388608, i1 %394) #2, !dbg !84
  %483 = bitcast i32 %482 to float, !dbg !84
  %484 = fcmp olt float %435, %469, !dbg !85
  %485 = fcmp olt float %436, %471, !dbg !85
  %486 = fcmp olt float %437, %473, !dbg !85
  %487 = fcmp olt float %438, %475, !dbg !85
  %488 = fcmp olt float %439, %477, !dbg !85
  %489 = fcmp olt float %440, %479, !dbg !85
  %490 = fcmp olt float %441, %481, !dbg !85
  %491 = fcmp olt float %442, %483, !dbg !85
  %492 = fcmp uno float %469, 0.000000e+00, !dbg !87
  %493 = fcmp uno float %471, 0.000000e+00, !dbg !87
  %494 = fcmp uno float %473, 0.000000e+00, !dbg !87
  %495 = fcmp uno float %475, 0.000000e+00, !dbg !87
  %496 = fcmp uno float %477, 0.000000e+00, !dbg !87
  %497 = fcmp uno float %479, 0.000000e+00, !dbg !87
  %498 = fcmp uno float %481, 0.000000e+00, !dbg !87
  %499 = fcmp uno float %483, 0.000000e+00, !dbg !87
  %500 = or i1 %484, %492, !dbg !88
  %501 = or i1 %485, %493, !dbg !88
  %502 = or i1 %486, %494, !dbg !88
  %503 = or i1 %487, %495, !dbg !88
  %504 = or i1 %488, %496, !dbg !88
  %505 = or i1 %489, %497, !dbg !88
  %506 = or i1 %490, %498, !dbg !88
  %507 = or i1 %491, %499, !dbg !88
  %508 = select i1 %500, float %469, float %435, !dbg !89
  %509 = select i1 %501, float %471, float %436, !dbg !89
  %510 = select i1 %502, float %473, float %437, !dbg !89
  %511 = select i1 %503, float %475, float %438, !dbg !89
  %512 = select i1 %504, float %477, float %439, !dbg !89
  %513 = select i1 %505, float %479, float %440, !dbg !89
  %514 = select i1 %506, float %481, float %441, !dbg !89
  %515 = select i1 %507, float %483, float %442, !dbg !89
  %516 = or disjoint i32 %56, 1, !dbg !90
  %517 = icmp sgt i32 %42, -16, !dbg !91
  %518 = icmp slt i32 %516, 32, !dbg !92
  %519 = and i1 %517, %518, !dbg !93
  %520 = and i1 %58, %519, !dbg !94
  %521 = add i32 %60, 31, !dbg !95
  %522 = add i32 %521, %62, !dbg !96
  %523 = add i32 %521, %63, !dbg !96
  %524 = add i32 %521, %64, !dbg !96
  %525 = add i32 %521, %65, !dbg !96
  %526 = add i32 %521, %66, !dbg !96
  %527 = add i32 %521, %67, !dbg !96
  %528 = add i32 %521, %68, !dbg !96
  %529 = add i32 %521, %69, !dbg !96
  %530 = sext i32 %522 to i64, !dbg !97
  %531 = getelementptr float, ptr addrspace(1) %0, i64 %530, !dbg !97
  %532 = sext i32 %523 to i64, !dbg !97
  %533 = getelementptr float, ptr addrspace(1) %0, i64 %532, !dbg !97
  %534 = sext i32 %524 to i64, !dbg !97
  %535 = getelementptr float, ptr addrspace(1) %0, i64 %534, !dbg !97
  %536 = sext i32 %525 to i64, !dbg !97
  %537 = getelementptr float, ptr addrspace(1) %0, i64 %536, !dbg !97
  %538 = sext i32 %526 to i64, !dbg !97
  %539 = getelementptr float, ptr addrspace(1) %0, i64 %538, !dbg !97
  %540 = sext i32 %527 to i64, !dbg !97
  %541 = getelementptr float, ptr addrspace(1) %0, i64 %540, !dbg !97
  %542 = sext i32 %528 to i64, !dbg !97
  %543 = getelementptr float, ptr addrspace(1) %0, i64 %542, !dbg !97
  %544 = sext i32 %529 to i64, !dbg !97
  %545 = getelementptr float, ptr addrspace(1) %0, i64 %544, !dbg !97
  %546 = and i1 %46, %520, !dbg !98
  %547 = and i1 %25, %546, !dbg !99
  %548 = and i1 %26, %546, !dbg !99
  %549 = and i1 %27, %546, !dbg !99
  %550 = and i1 %28, %546, !dbg !99
  %551 = and i1 %29, %546, !dbg !99
  %552 = and i1 %30, %546, !dbg !99
  %553 = and i1 %31, %546, !dbg !99
  %554 = and i1 %32, %546, !dbg !99
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %531, i1 %547, i32 -8388608, i1 %547) #2, !dbg !100
  %556 = bitcast i32 %555 to float, !dbg !100
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %533, i1 %548, i32 -8388608, i1 %548) #2, !dbg !100
  %558 = bitcast i32 %557 to float, !dbg !100
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %535, i1 %549, i32 -8388608, i1 %549) #2, !dbg !100
  %560 = bitcast i32 %559 to float, !dbg !100
  %561 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %537, i1 %550, i32 -8388608, i1 %550) #2, !dbg !100
  %562 = bitcast i32 %561 to float, !dbg !100
  %563 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %539, i1 %551, i32 -8388608, i1 %551) #2, !dbg !100
  %564 = bitcast i32 %563 to float, !dbg !100
  %565 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %541, i1 %552, i32 -8388608, i1 %552) #2, !dbg !100
  %566 = bitcast i32 %565 to float, !dbg !100
  %567 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %543, i1 %553, i32 -8388608, i1 %553) #2, !dbg !100
  %568 = bitcast i32 %567 to float, !dbg !100
  %569 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %545, i1 %554, i32 -8388608, i1 %554) #2, !dbg !100
  %570 = bitcast i32 %569 to float, !dbg !100
  %571 = fcmp olt float %508, %556, !dbg !101
  %572 = fcmp olt float %509, %558, !dbg !101
  %573 = fcmp olt float %510, %560, !dbg !101
  %574 = fcmp olt float %511, %562, !dbg !101
  %575 = fcmp olt float %512, %564, !dbg !101
  %576 = fcmp olt float %513, %566, !dbg !101
  %577 = fcmp olt float %514, %568, !dbg !101
  %578 = fcmp olt float %515, %570, !dbg !101
  %579 = fcmp uno float %556, 0.000000e+00, !dbg !103
  %580 = fcmp uno float %558, 0.000000e+00, !dbg !103
  %581 = fcmp uno float %560, 0.000000e+00, !dbg !103
  %582 = fcmp uno float %562, 0.000000e+00, !dbg !103
  %583 = fcmp uno float %564, 0.000000e+00, !dbg !103
  %584 = fcmp uno float %566, 0.000000e+00, !dbg !103
  %585 = fcmp uno float %568, 0.000000e+00, !dbg !103
  %586 = fcmp uno float %570, 0.000000e+00, !dbg !103
  %587 = or i1 %571, %579, !dbg !104
  %588 = or i1 %572, %580, !dbg !104
  %589 = or i1 %573, %581, !dbg !104
  %590 = or i1 %574, %582, !dbg !104
  %591 = or i1 %575, %583, !dbg !104
  %592 = or i1 %576, %584, !dbg !104
  %593 = or i1 %577, %585, !dbg !104
  %594 = or i1 %578, %586, !dbg !104
  %595 = select i1 %587, float %556, float %508, !dbg !105
  %596 = select i1 %588, float %558, float %509, !dbg !105
  %597 = select i1 %589, float %560, float %510, !dbg !105
  %598 = select i1 %590, float %562, float %511, !dbg !105
  %599 = select i1 %591, float %564, float %512, !dbg !105
  %600 = select i1 %592, float %566, float %513, !dbg !105
  %601 = select i1 %593, float %568, float %514, !dbg !105
  %602 = select i1 %594, float %570, float %515, !dbg !105
  %603 = and i1 %121, %519, !dbg !106
  %604 = add i32 %60, 32, !dbg !107
  %605 = add i32 %604, %62, !dbg !108
  %606 = add i32 %604, %63, !dbg !108
  %607 = add i32 %604, %64, !dbg !108
  %608 = add i32 %604, %65, !dbg !108
  %609 = add i32 %604, %66, !dbg !108
  %610 = add i32 %604, %67, !dbg !108
  %611 = add i32 %604, %68, !dbg !108
  %612 = add i32 %604, %69, !dbg !108
  %613 = sext i32 %605 to i64, !dbg !109
  %614 = getelementptr float, ptr addrspace(1) %0, i64 %613, !dbg !109
  %615 = sext i32 %606 to i64, !dbg !109
  %616 = getelementptr float, ptr addrspace(1) %0, i64 %615, !dbg !109
  %617 = sext i32 %607 to i64, !dbg !109
  %618 = getelementptr float, ptr addrspace(1) %0, i64 %617, !dbg !109
  %619 = sext i32 %608 to i64, !dbg !109
  %620 = getelementptr float, ptr addrspace(1) %0, i64 %619, !dbg !109
  %621 = sext i32 %609 to i64, !dbg !109
  %622 = getelementptr float, ptr addrspace(1) %0, i64 %621, !dbg !109
  %623 = sext i32 %610 to i64, !dbg !109
  %624 = getelementptr float, ptr addrspace(1) %0, i64 %623, !dbg !109
  %625 = sext i32 %611 to i64, !dbg !109
  %626 = getelementptr float, ptr addrspace(1) %0, i64 %625, !dbg !109
  %627 = sext i32 %612 to i64, !dbg !109
  %628 = getelementptr float, ptr addrspace(1) %0, i64 %627, !dbg !109
  %629 = and i1 %46, %603, !dbg !110
  %630 = and i1 %25, %629, !dbg !111
  %631 = and i1 %26, %629, !dbg !111
  %632 = and i1 %27, %629, !dbg !111
  %633 = and i1 %28, %629, !dbg !111
  %634 = and i1 %29, %629, !dbg !111
  %635 = and i1 %30, %629, !dbg !111
  %636 = and i1 %31, %629, !dbg !111
  %637 = and i1 %32, %629, !dbg !111
  %638 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %614, i1 %630, i32 -8388608, i1 %630) #2, !dbg !112
  %639 = bitcast i32 %638 to float, !dbg !112
  %640 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %616, i1 %631, i32 -8388608, i1 %631) #2, !dbg !112
  %641 = bitcast i32 %640 to float, !dbg !112
  %642 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %618, i1 %632, i32 -8388608, i1 %632) #2, !dbg !112
  %643 = bitcast i32 %642 to float, !dbg !112
  %644 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %620, i1 %633, i32 -8388608, i1 %633) #2, !dbg !112
  %645 = bitcast i32 %644 to float, !dbg !112
  %646 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %622, i1 %634, i32 -8388608, i1 %634) #2, !dbg !112
  %647 = bitcast i32 %646 to float, !dbg !112
  %648 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %624, i1 %635, i32 -8388608, i1 %635) #2, !dbg !112
  %649 = bitcast i32 %648 to float, !dbg !112
  %650 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %626, i1 %636, i32 -8388608, i1 %636) #2, !dbg !112
  %651 = bitcast i32 %650 to float, !dbg !112
  %652 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %628, i1 %637, i32 -8388608, i1 %637) #2, !dbg !112
  %653 = bitcast i32 %652 to float, !dbg !112
  %654 = fcmp olt float %595, %639, !dbg !113
  %655 = fcmp olt float %596, %641, !dbg !113
  %656 = fcmp olt float %597, %643, !dbg !113
  %657 = fcmp olt float %598, %645, !dbg !113
  %658 = fcmp olt float %599, %647, !dbg !113
  %659 = fcmp olt float %600, %649, !dbg !113
  %660 = fcmp olt float %601, %651, !dbg !113
  %661 = fcmp olt float %602, %653, !dbg !113
  %662 = fcmp uno float %639, 0.000000e+00, !dbg !115
  %663 = fcmp uno float %641, 0.000000e+00, !dbg !115
  %664 = fcmp uno float %643, 0.000000e+00, !dbg !115
  %665 = fcmp uno float %645, 0.000000e+00, !dbg !115
  %666 = fcmp uno float %647, 0.000000e+00, !dbg !115
  %667 = fcmp uno float %649, 0.000000e+00, !dbg !115
  %668 = fcmp uno float %651, 0.000000e+00, !dbg !115
  %669 = fcmp uno float %653, 0.000000e+00, !dbg !115
  %670 = or i1 %654, %662, !dbg !116
  %671 = or i1 %655, %663, !dbg !116
  %672 = or i1 %656, %664, !dbg !116
  %673 = or i1 %657, %665, !dbg !116
  %674 = or i1 %658, %666, !dbg !116
  %675 = or i1 %659, %667, !dbg !116
  %676 = or i1 %660, %668, !dbg !116
  %677 = or i1 %661, %669, !dbg !116
  %678 = select i1 %670, float %639, float %595, !dbg !117
  %679 = select i1 %671, float %641, float %596, !dbg !117
  %680 = select i1 %672, float %643, float %597, !dbg !117
  %681 = select i1 %673, float %645, float %598, !dbg !117
  %682 = select i1 %674, float %647, float %599, !dbg !117
  %683 = select i1 %675, float %649, float %600, !dbg !117
  %684 = select i1 %676, float %651, float %601, !dbg !117
  %685 = select i1 %677, float %653, float %602, !dbg !117
  %686 = add i32 %60, 33, !dbg !118
  %687 = add i32 %686, %62, !dbg !119
  %688 = add i32 %686, %63, !dbg !119
  %689 = add i32 %686, %64, !dbg !119
  %690 = add i32 %686, %65, !dbg !119
  %691 = add i32 %686, %66, !dbg !119
  %692 = add i32 %686, %67, !dbg !119
  %693 = add i32 %686, %68, !dbg !119
  %694 = add i32 %686, %69, !dbg !119
  %695 = sext i32 %687 to i64, !dbg !120
  %696 = getelementptr float, ptr addrspace(1) %0, i64 %695, !dbg !120
  %697 = sext i32 %688 to i64, !dbg !120
  %698 = getelementptr float, ptr addrspace(1) %0, i64 %697, !dbg !120
  %699 = sext i32 %689 to i64, !dbg !120
  %700 = getelementptr float, ptr addrspace(1) %0, i64 %699, !dbg !120
  %701 = sext i32 %690 to i64, !dbg !120
  %702 = getelementptr float, ptr addrspace(1) %0, i64 %701, !dbg !120
  %703 = sext i32 %691 to i64, !dbg !120
  %704 = getelementptr float, ptr addrspace(1) %0, i64 %703, !dbg !120
  %705 = sext i32 %692 to i64, !dbg !120
  %706 = getelementptr float, ptr addrspace(1) %0, i64 %705, !dbg !120
  %707 = sext i32 %693 to i64, !dbg !120
  %708 = getelementptr float, ptr addrspace(1) %0, i64 %707, !dbg !120
  %709 = sext i32 %694 to i64, !dbg !120
  %710 = getelementptr float, ptr addrspace(1) %0, i64 %709, !dbg !120
  %711 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %696, i1 %630, i32 -8388608, i1 %630) #2, !dbg !121
  %712 = bitcast i32 %711 to float, !dbg !121
  %713 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %698, i1 %631, i32 -8388608, i1 %631) #2, !dbg !121
  %714 = bitcast i32 %713 to float, !dbg !121
  %715 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %700, i1 %632, i32 -8388608, i1 %632) #2, !dbg !121
  %716 = bitcast i32 %715 to float, !dbg !121
  %717 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %702, i1 %633, i32 -8388608, i1 %633) #2, !dbg !121
  %718 = bitcast i32 %717 to float, !dbg !121
  %719 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %704, i1 %634, i32 -8388608, i1 %634) #2, !dbg !121
  %720 = bitcast i32 %719 to float, !dbg !121
  %721 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %706, i1 %635, i32 -8388608, i1 %635) #2, !dbg !121
  %722 = bitcast i32 %721 to float, !dbg !121
  %723 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %708, i1 %636, i32 -8388608, i1 %636) #2, !dbg !121
  %724 = bitcast i32 %723 to float, !dbg !121
  %725 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %710, i1 %637, i32 -8388608, i1 %637) #2, !dbg !121
  %726 = bitcast i32 %725 to float, !dbg !121
  %727 = fcmp olt float %678, %712, !dbg !122
  %728 = fcmp olt float %679, %714, !dbg !122
  %729 = fcmp olt float %680, %716, !dbg !122
  %730 = fcmp olt float %681, %718, !dbg !122
  %731 = fcmp olt float %682, %720, !dbg !122
  %732 = fcmp olt float %683, %722, !dbg !122
  %733 = fcmp olt float %684, %724, !dbg !122
  %734 = fcmp olt float %685, %726, !dbg !122
  %735 = fcmp uno float %712, 0.000000e+00, !dbg !124
  %736 = fcmp uno float %714, 0.000000e+00, !dbg !124
  %737 = fcmp uno float %716, 0.000000e+00, !dbg !124
  %738 = fcmp uno float %718, 0.000000e+00, !dbg !124
  %739 = fcmp uno float %720, 0.000000e+00, !dbg !124
  %740 = fcmp uno float %722, 0.000000e+00, !dbg !124
  %741 = fcmp uno float %724, 0.000000e+00, !dbg !124
  %742 = fcmp uno float %726, 0.000000e+00, !dbg !124
  %743 = or i1 %727, %735, !dbg !125
  %744 = or i1 %728, %736, !dbg !125
  %745 = or i1 %729, %737, !dbg !125
  %746 = or i1 %730, %738, !dbg !125
  %747 = or i1 %731, %739, !dbg !125
  %748 = or i1 %732, %740, !dbg !125
  %749 = or i1 %733, %741, !dbg !125
  %750 = or i1 %734, %742, !dbg !125
  %751 = zext i1 %172 to i8, !dbg !126
  %752 = zext i1 %173 to i8, !dbg !126
  %753 = zext i1 %174 to i8, !dbg !126
  %754 = zext i1 %175 to i8, !dbg !126
  %755 = zext i1 %176 to i8, !dbg !126
  %756 = zext i1 %177 to i8, !dbg !126
  %757 = zext i1 %178 to i8, !dbg !126
  %758 = zext i1 %179 to i8, !dbg !126
  %759 = select i1 %246, i8 2, i8 %751, !dbg !127
  %760 = select i1 %247, i8 2, i8 %752, !dbg !127
  %761 = select i1 %248, i8 2, i8 %753, !dbg !127
  %762 = select i1 %249, i8 2, i8 %754, !dbg !127
  %763 = select i1 %250, i8 2, i8 %755, !dbg !127
  %764 = select i1 %251, i8 2, i8 %756, !dbg !127
  %765 = select i1 %252, i8 2, i8 %757, !dbg !127
  %766 = select i1 %253, i8 2, i8 %758, !dbg !127
  %767 = select i1 %330, i8 3, i8 %759, !dbg !128
  %768 = select i1 %331, i8 3, i8 %760, !dbg !128
  %769 = select i1 %332, i8 3, i8 %761, !dbg !128
  %770 = select i1 %333, i8 3, i8 %762, !dbg !128
  %771 = select i1 %334, i8 3, i8 %763, !dbg !128
  %772 = select i1 %335, i8 3, i8 %764, !dbg !128
  %773 = select i1 %336, i8 3, i8 %765, !dbg !128
  %774 = select i1 %337, i8 3, i8 %766, !dbg !128
  %775 = select i1 %411, i8 4, i8 %767, !dbg !129
  %776 = select i1 %412, i8 4, i8 %768, !dbg !129
  %777 = select i1 %413, i8 4, i8 %769, !dbg !129
  %778 = select i1 %414, i8 4, i8 %770, !dbg !129
  %779 = select i1 %415, i8 4, i8 %771, !dbg !129
  %780 = select i1 %416, i8 4, i8 %772, !dbg !129
  %781 = select i1 %417, i8 4, i8 %773, !dbg !129
  %782 = select i1 %418, i8 4, i8 %774, !dbg !129
  %783 = select i1 %484, i8 5, i8 %775, !dbg !130
  %784 = select i1 %485, i8 5, i8 %776, !dbg !130
  %785 = select i1 %486, i8 5, i8 %777, !dbg !130
  %786 = select i1 %487, i8 5, i8 %778, !dbg !130
  %787 = select i1 %488, i8 5, i8 %779, !dbg !130
  %788 = select i1 %489, i8 5, i8 %780, !dbg !130
  %789 = select i1 %490, i8 5, i8 %781, !dbg !130
  %790 = select i1 %491, i8 5, i8 %782, !dbg !130
  %791 = select i1 %571, i8 6, i8 %783, !dbg !131
  %792 = select i1 %572, i8 6, i8 %784, !dbg !131
  %793 = select i1 %573, i8 6, i8 %785, !dbg !131
  %794 = select i1 %574, i8 6, i8 %786, !dbg !131
  %795 = select i1 %575, i8 6, i8 %787, !dbg !131
  %796 = select i1 %576, i8 6, i8 %788, !dbg !131
  %797 = select i1 %577, i8 6, i8 %789, !dbg !131
  %798 = select i1 %578, i8 6, i8 %790, !dbg !131
  %799 = select i1 %654, i8 7, i8 %791, !dbg !132
  %800 = select i1 %655, i8 7, i8 %792, !dbg !132
  %801 = select i1 %656, i8 7, i8 %793, !dbg !132
  %802 = select i1 %657, i8 7, i8 %794, !dbg !132
  %803 = select i1 %658, i8 7, i8 %795, !dbg !132
  %804 = select i1 %659, i8 7, i8 %796, !dbg !132
  %805 = select i1 %660, i8 7, i8 %797, !dbg !132
  %806 = select i1 %661, i8 7, i8 %798, !dbg !132
  %807 = select i1 %727, i8 8, i8 %799, !dbg !133
  %808 = select i1 %728, i8 8, i8 %800, !dbg !133
  %809 = select i1 %729, i8 8, i8 %801, !dbg !133
  %810 = select i1 %730, i8 8, i8 %802, !dbg !133
  %811 = select i1 %731, i8 8, i8 %803, !dbg !133
  %812 = select i1 %732, i8 8, i8 %804, !dbg !133
  %813 = select i1 %733, i8 8, i8 %805, !dbg !133
  %814 = select i1 %734, i8 8, i8 %806, !dbg !133
  %815 = shl i32 %43, 6, !dbg !134
  %816 = shl i32 %44, 6, !dbg !134
  %817 = shl i32 %45, 6, !dbg !134
  %818 = add i32 %817, %.decomposed25, !dbg !135
  %819 = shl i32 %52, 14, !dbg !136
  %820 = shl i32 %54, 14, !dbg !136
  %821 = add i32 %819, %.decomposed23, !dbg !135
  %822 = add i32 %821, %815, !dbg !137
  %823 = add i32 %821, %816, !dbg !137
  %824 = add i32 %818, %820, !dbg !137
  %825 = sext i32 %822 to i64, !dbg !138
  %826 = getelementptr float, ptr addrspace(1) %1, i64 %825, !dbg !138
  %827 = sext i32 %823 to i64, !dbg !138
  %828 = getelementptr float, ptr addrspace(1) %1, i64 %827, !dbg !138
  %829 = and i1 %33, %47, !dbg !139
  %830 = and i1 %48, %33, !dbg !139
  %831 = and i1 %34, %49, !dbg !139
  %832 = shl i32 %8, 5, !dbg !140
  %833 = and i32 %832, 992, !dbg !140
  %834 = or disjoint i32 %833, %10, !dbg !140
  %835 = and i32 %11, 508, !dbg !140
  %836 = lshr exact i32 %833, 2, !dbg !140
  %837 = lshr exact i32 %833, 3, !dbg !140
  %838 = add nuw nsw i32 %837, %834, !dbg !140
  %839 = zext nneg i32 %838 to i64, !dbg !140
  %840 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %839, !dbg !140
  %841 = bitcast float %678 to i32, !dbg !140
  %842 = select i1 %743, i32 %711, i32 %841, !dbg !141
  %843 = insertelement <1 x i32> poison, i32 %842, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %843, i1 true) #2, !dbg !140
  %844 = or disjoint i32 %834, 4, !dbg !140
  %845 = add nuw nsw i32 %844, %837, !dbg !140
  %846 = zext nneg i32 %845 to i64, !dbg !140
  %847 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %846, !dbg !140
  %848 = bitcast float %679 to i32, !dbg !140
  %849 = select i1 %744, i32 %713, i32 %848, !dbg !141
  %850 = insertelement <1 x i32> poison, i32 %849, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %847, <1 x i32> %850, i1 true) #2, !dbg !140
  %851 = or disjoint i32 %834, 8, !dbg !140
  %852 = add nuw nsw i32 %851, %837, !dbg !140
  %853 = zext nneg i32 %852 to i64, !dbg !140
  %854 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %853, !dbg !140
  %855 = bitcast float %680 to i32, !dbg !140
  %856 = select i1 %745, i32 %715, i32 %855, !dbg !141
  %857 = insertelement <1 x i32> poison, i32 %856, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %854, <1 x i32> %857, i1 true) #2, !dbg !140
  %858 = or disjoint i32 %834, 12, !dbg !140
  %859 = add nuw nsw i32 %858, %837, !dbg !140
  %860 = zext nneg i32 %859 to i64, !dbg !140
  %861 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %860, !dbg !140
  %862 = bitcast float %681 to i32, !dbg !140
  %863 = select i1 %746, i32 %717, i32 %862, !dbg !141
  %864 = insertelement <1 x i32> poison, i32 %863, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %861, <1 x i32> %864, i1 true) #2, !dbg !140
  %865 = or disjoint i32 %834, 16, !dbg !140
  %866 = add nuw nsw i32 %865, %837, !dbg !140
  %867 = zext nneg i32 %866 to i64, !dbg !140
  %868 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %867, !dbg !140
  %869 = bitcast float %682 to i32, !dbg !140
  %870 = select i1 %747, i32 %719, i32 %869, !dbg !141
  %871 = insertelement <1 x i32> poison, i32 %870, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %868, <1 x i32> %871, i1 true) #2, !dbg !140
  %872 = or disjoint i32 %834, 20, !dbg !140
  %873 = add nuw nsw i32 %872, %837, !dbg !140
  %874 = zext nneg i32 %873 to i64, !dbg !140
  %875 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %874, !dbg !140
  %876 = bitcast float %683 to i32, !dbg !140
  %877 = select i1 %748, i32 %721, i32 %876, !dbg !141
  %878 = insertelement <1 x i32> poison, i32 %877, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %875, <1 x i32> %878, i1 true) #2, !dbg !140
  %879 = or disjoint i32 %834, 24, !dbg !140
  %880 = add nuw nsw i32 %879, %837, !dbg !140
  %881 = zext nneg i32 %880 to i64, !dbg !140
  %882 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %881, !dbg !140
  %883 = bitcast float %684 to i32, !dbg !140
  %884 = select i1 %749, i32 %723, i32 %883, !dbg !141
  %885 = insertelement <1 x i32> poison, i32 %884, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %882, <1 x i32> %885, i1 true) #2, !dbg !140
  %886 = or disjoint i32 %834, 28, !dbg !140
  %887 = add nuw nsw i32 %886, %837, !dbg !140
  %888 = zext nneg i32 %887 to i64, !dbg !140
  %889 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %888, !dbg !140
  %890 = bitcast float %685 to i32, !dbg !140
  %891 = select i1 %750, i32 %725, i32 %890, !dbg !141
  %892 = insertelement <1 x i32> poison, i32 %891, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %889, <1 x i32> %892, i1 true) #2, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %893 = lshr i32 %11, 3, !dbg !140
  %894 = and i32 %893, 60, !dbg !140
  %895 = add nuw nsw i32 %894, %835, !dbg !140
  %896 = zext nneg i32 %895 to i64, !dbg !140
  %897 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %896, !dbg !140
  %898 = or disjoint i32 %835, 512, !dbg !140
  %899 = lshr i32 %898, 3, !dbg !140
  %900 = and i32 %899, 124, !dbg !140
  %901 = add nuw nsw i32 %900, %898, !dbg !140
  %902 = zext nneg i32 %901 to i64, !dbg !140
  %903 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %902, !dbg !140
  %904 = load <4 x i32>, ptr addrspace(3) %903, align 16, !dbg !140
  %.extract = load i32, ptr addrspace(3) %897, align 16, !dbg !140
  %905 = getelementptr inbounds i8, ptr addrspace(3) %897, i64 4, !dbg !140
  %.extract15 = load i32, ptr addrspace(3) %905, align 4, !dbg !140
  %906 = getelementptr inbounds i8, ptr addrspace(3) %897, i64 8, !dbg !140
  %.extract16 = load i32, ptr addrspace(3) %906, align 8, !dbg !140
  %907 = getelementptr inbounds i8, ptr addrspace(3) %897, i64 12, !dbg !140
  %.extract17 = load i32, ptr addrspace(3) %907, align 4, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %826, i1 %829) #2, !dbg !140
  %.extract18 = extractelement <4 x i32> %904, i64 0, !dbg !140
  %.extract19 = extractelement <4 x i32> %904, i64 1, !dbg !140
  %.extract20 = extractelement <4 x i32> %904, i64 2, !dbg !140
  %.extract21 = extractelement <4 x i32> %904, i64 3, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %828, i1 %830) #2, !dbg !140
  %908 = sext i32 %824 to i64, !dbg !142
  %909 = getelementptr i8, ptr addrspace(1) %2, i64 %908, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %910 = and i32 %13, 1016, !dbg !143
  %911 = add nuw nsw i32 %836, %834, !dbg !143
  %912 = zext nneg i32 %911 to i64, !dbg !143
  %913 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %912, !dbg !143
  %914 = insertelement <1 x i8> poison, i8 %807, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %913, <1 x i8> %914, i1 true) #2, !dbg !143
  %915 = add nuw nsw i32 %844, %836, !dbg !143
  %916 = zext nneg i32 %915 to i64, !dbg !143
  %917 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %916, !dbg !143
  %918 = insertelement <1 x i8> poison, i8 %808, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %917, <1 x i8> %918, i1 true) #2, !dbg !143
  %919 = add nuw nsw i32 %851, %836, !dbg !143
  %920 = zext nneg i32 %919 to i64, !dbg !143
  %921 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %920, !dbg !143
  %922 = insertelement <1 x i8> poison, i8 %809, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %921, <1 x i8> %922, i1 true) #2, !dbg !143
  %923 = add nuw nsw i32 %858, %836, !dbg !143
  %924 = zext nneg i32 %923 to i64, !dbg !143
  %925 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %924, !dbg !143
  %926 = insertelement <1 x i8> poison, i8 %810, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %925, <1 x i8> %926, i1 true) #2, !dbg !143
  %927 = add nuw nsw i32 %865, %836, !dbg !143
  %928 = zext nneg i32 %927 to i64, !dbg !143
  %929 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %928, !dbg !143
  %930 = insertelement <1 x i8> poison, i8 %811, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %929, <1 x i8> %930, i1 true) #2, !dbg !143
  %931 = add nuw nsw i32 %872, %836, !dbg !143
  %932 = zext nneg i32 %931 to i64, !dbg !143
  %933 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %932, !dbg !143
  %934 = insertelement <1 x i8> poison, i8 %812, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %933, <1 x i8> %934, i1 true) #2, !dbg !143
  %935 = add nuw nsw i32 %879, %836, !dbg !143
  %936 = zext nneg i32 %935 to i64, !dbg !143
  %937 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %936, !dbg !143
  %938 = insertelement <1 x i8> poison, i8 %813, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %937, <1 x i8> %938, i1 true) #2, !dbg !143
  %939 = add nuw nsw i32 %886, %836, !dbg !143
  %940 = zext nneg i32 %939 to i64, !dbg !143
  %941 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %940, !dbg !143
  %942 = insertelement <1 x i8> poison, i8 %814, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %941, <1 x i8> %942, i1 true) #2, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %943 = lshr exact i32 %13, 2, !dbg !143
  %944 = and i32 %943, 248, !dbg !143
  %945 = add nuw nsw i32 %944, %910, !dbg !143
  %946 = zext nneg i32 %945 to i64, !dbg !143
  %947 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %946, !dbg !143
  %948 = load i32, ptr addrspace(3) %947, align 8, !dbg !143
  %949 = getelementptr inbounds i8, ptr addrspace(3) %947, i64 4, !dbg !143
  %950 = load i32, ptr addrspace(3) %949, align 4, !dbg !143
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %948, i32 %950, ptr addrspace(1) %909, i1 %831) #2, !dbg !143
  ret void, !dbg !144
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvzgwtlmdlzqy3xl6bocfbp34fe3s7sptrutcxwjbbxgxkcrty7j.py", directory: "inductor_cache/vz")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 20, scope: !7)
!25 = !DILocation(line: 40, column: 20, scope: !7)
!26 = !DILocation(line: 41, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 49, scope: !7)
!28 = !DILocation(line: 45, column: 39, scope: !7)
!29 = !DILocation(line: 45, column: 46, scope: !7)
!30 = !DILocation(line: 45, column: 59, scope: !7)
!31 = !DILocation(line: 45, column: 54, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 72, scope: !7)
!34 = !DILocation(line: 45, column: 80, scope: !7)
!35 = !DILocation(line: 45, column: 64, scope: !7)
!36 = !DILocation(line: 47, column: 21, scope: !7)
!37 = !DILocation(line: 51, column: 46, scope: !7)
!38 = !DILocation(line: 51, column: 54, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 72, scope: !7)
!41 = !DILocation(line: 51, column: 80, scope: !7)
!42 = !DILocation(line: 51, column: 64, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 52, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 53, column: 16, scope: !7)
!51 = !DILocation(line: 58, column: 46, scope: !7)
!52 = !DILocation(line: 58, column: 54, scope: !7)
!53 = !DILocation(line: 58, column: 31, scope: !7)
!54 = !DILocation(line: 58, column: 64, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 59, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!60 = !DILocation(line: 65, column: 45, scope: !7)
!61 = !DILocation(line: 65, column: 53, scope: !7)
!62 = !DILocation(line: 65, column: 31, scope: !7)
!63 = !DILocation(line: 65, column: 71, scope: !7)
!64 = !DILocation(line: 65, column: 79, scope: !7)
!65 = !DILocation(line: 65, column: 63, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !67)
!67 = !DILocation(line: 66, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !67)
!71 = !DILocation(line: 68, column: 46, scope: !7)
!72 = !DILocation(line: 68, column: 31, scope: !7)
!73 = !DILocation(line: 68, column: 64, scope: !7)
!74 = !DILocation(line: 68, column: 72, scope: !7)
!75 = !DILocation(line: 68, column: 56, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !77)
!77 = !DILocation(line: 69, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !77)
!81 = !DILocation(line: 71, column: 42, scope: !7)
!82 = !DILocation(line: 71, column: 50, scope: !7)
!83 = !DILocation(line: 71, column: 31, scope: !7)
!84 = !DILocation(line: 71, column: 60, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !86)
!86 = !DILocation(line: 72, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !86)
!90 = !DILocation(line: 73, column: 16, scope: !7)
!91 = !DILocation(line: 74, column: 21, scope: !7)
!92 = !DILocation(line: 75, column: 20, scope: !7)
!93 = !DILocation(line: 76, column: 20, scope: !7)
!94 = !DILocation(line: 77, column: 20, scope: !7)
!95 = !DILocation(line: 78, column: 43, scope: !7)
!96 = !DILocation(line: 78, column: 51, scope: !7)
!97 = !DILocation(line: 78, column: 31, scope: !7)
!98 = !DILocation(line: 78, column: 69, scope: !7)
!99 = !DILocation(line: 78, column: 77, scope: !7)
!100 = !DILocation(line: 78, column: 61, scope: !7)
!101 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !102)
!102 = !DILocation(line: 79, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !102)
!106 = !DILocation(line: 80, column: 20, scope: !7)
!107 = !DILocation(line: 81, column: 43, scope: !7)
!108 = !DILocation(line: 81, column: 51, scope: !7)
!109 = !DILocation(line: 81, column: 31, scope: !7)
!110 = !DILocation(line: 81, column: 69, scope: !7)
!111 = !DILocation(line: 81, column: 77, scope: !7)
!112 = !DILocation(line: 81, column: 61, scope: !7)
!113 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !114)
!114 = !DILocation(line: 82, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !114)
!118 = !DILocation(line: 84, column: 43, scope: !7)
!119 = !DILocation(line: 84, column: 51, scope: !7)
!120 = !DILocation(line: 84, column: 31, scope: !7)
!121 = !DILocation(line: 84, column: 61, scope: !7)
!122 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !123)
!123 = !DILocation(line: 85, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !123)
!126 = !DILocation(line: 89, column: 35, scope: !7)
!127 = !DILocation(line: 92, column: 35, scope: !7)
!128 = !DILocation(line: 95, column: 35, scope: !7)
!129 = !DILocation(line: 98, column: 35, scope: !7)
!130 = !DILocation(line: 101, column: 35, scope: !7)
!131 = !DILocation(line: 104, column: 35, scope: !7)
!132 = !DILocation(line: 107, column: 35, scope: !7)
!133 = !DILocation(line: 110, column: 35, scope: !7)
!134 = !DILocation(line: 111, column: 33, scope: !7)
!135 = !DILocation(line: 111, column: 30, scope: !7)
!136 = !DILocation(line: 111, column: 44, scope: !7)
!137 = !DILocation(line: 111, column: 38, scope: !7)
!138 = !DILocation(line: 111, column: 25, scope: !7)
!139 = !DILocation(line: 111, column: 64, scope: !7)
!140 = !DILocation(line: 111, column: 56, scope: !7)
!141 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !123)
!142 = !DILocation(line: 112, column: 25, scope: !7)
!143 = !DILocation(line: 112, column: 56, scope: !7)
!144 = !DILocation(line: 112, column: 4, scope: !7)
