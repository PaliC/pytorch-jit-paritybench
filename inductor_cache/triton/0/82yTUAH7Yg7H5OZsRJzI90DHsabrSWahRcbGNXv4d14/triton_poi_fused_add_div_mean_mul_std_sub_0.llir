; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_mul_std_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = sext i32 %.decomposed to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %12) #3, !dbg !18
  %18 = sext i32 %11 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #3, !dbg !20
  %21 = shl nsw i32 %13, 2, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !23
  %25 = bitcast i32 %24 to float, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = or disjoint i32 %21, 1, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #3, !dbg !26
  %32 = bitcast i32 %31 to float, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #3, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = or disjoint i32 %21, 2, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #3, !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #3, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = or disjoint i32 %21, 3, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #3, !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #3, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !33
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %12) #3, !dbg !34
  %51 = fadd float %25, %32, !dbg !35
  %52 = fadd float %27, %34, !dbg !35
  %53 = fadd float %51, %39, !dbg !36
  %54 = fadd float %52, %41, !dbg !36
  %55 = fadd float %53, %46, !dbg !37
  %56 = fadd float %54, %48, !dbg !37
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 4.000000e+00) #3, !dbg !38
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 4.000000e+00) #3, !dbg !38
  %59 = fsub float %25, %57, !dbg !39
  %60 = fsub float %27, %58, !dbg !39
  %61 = fmul float %59, %59, !dbg !40
  %62 = fmul float %60, %60, !dbg !40
  %63 = fsub float %32, %57, !dbg !41
  %64 = fsub float %34, %58, !dbg !41
  %65 = fmul float %63, %63, !dbg !42
  %66 = fmul float %64, %64, !dbg !42
  %67 = fadd float %61, %65, !dbg !43
  %68 = fadd float %62, %66, !dbg !43
  %69 = fsub float %39, %57, !dbg !44
  %70 = fsub float %41, %58, !dbg !44
  %71 = fmul float %69, %69, !dbg !45
  %72 = fmul float %70, %70, !dbg !45
  %73 = fadd float %71, %67, !dbg !46
  %74 = fadd float %72, %68, !dbg !46
  %75 = fsub float %46, %57, !dbg !47
  %76 = fsub float %48, %58, !dbg !47
  %77 = fmul float %75, %75, !dbg !48
  %78 = fmul float %76, %76, !dbg !48
  %79 = fadd float %77, %73, !dbg !49
  %80 = fadd float %78, %74, !dbg !49
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 3.000000e+00) #3, !dbg !50
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 3.000000e+00) #3, !dbg !50
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i = icmp eq i32 %83, 0, !dbg !51
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i = icmp eq i32 %84, 0, !dbg !51
  br i1 %.not.i, label %90, label %85, !dbg !51

85:                                               ; preds = %5
  br i1 %.not1.i, label %88, label %86, !dbg !51

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

90:                                               ; preds = %5
  br i1 %.not1.i, label %93, label %91, !dbg !51

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !51
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i1 = icmp eq i32 %95, 0, !dbg !51
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !51
  br i1 %.not.i1, label %102, label %97, !dbg !51

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !51

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !51

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !51
  %107 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %108 = bitcast i32 %107 to float, !dbg !20
  %109 = fsub float %108, %58, !dbg !52
  %110 = extractvalue { i32, i32 } %17, 1, !dbg !18
  %111 = bitcast i32 %110 to float, !dbg !18
  %112 = fmul float %109, %111, !dbg !53
  %113 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %114 = bitcast i32 %113 to float, !dbg !20
  %115 = fsub float %114, %57, !dbg !52
  %116 = extractvalue { i32, i32 } %17, 0, !dbg !18
  %117 = bitcast i32 %116 to float, !dbg !18
  %118 = fmul float %115, %117, !dbg !53
  %119 = extractvalue { i32, i32 } %50, 1, !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = extractvalue { i32, i32 } %50, 0, !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !54
  %124 = fadd float %.0.i3, 0x3EB0C6F7A0000000, !dbg !54
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %123) #3, !dbg !55
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %124) #3, !dbg !55
  %127 = fadd float %125, %122, !dbg !56
  %128 = fadd float %126, %120, !dbg !56
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !57
  %130 = bitcast float %127 to i32, !dbg !58
  %131 = bitcast float %128 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %129, i1 %12) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3rdyrbzg7r3i7hh3wz4sutqyzsvo5a42rt36lgpcqaf3thogjun.py", directory: "inductor_cache/3r")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_std_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_std_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_std_sub_0", linkageName: "triton_poi_fused_add_div_mean_mul_std_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 32, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 37, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 31, column: 34, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 32, column: 34, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 41, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 19, scope: !7)
!39 = !DILocation(line: 41, column: 19, scope: !7)
!40 = !DILocation(line: 42, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 27, scope: !7)
!52 = !DILocation(line: 39, column: 19, scope: !7)
!53 = !DILocation(line: 40, column: 19, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 25, scope: !7)
!58 = !DILocation(line: 59, column: 37, scope: !7)
!59 = !DILocation(line: 59, column: 4, scope: !7)
