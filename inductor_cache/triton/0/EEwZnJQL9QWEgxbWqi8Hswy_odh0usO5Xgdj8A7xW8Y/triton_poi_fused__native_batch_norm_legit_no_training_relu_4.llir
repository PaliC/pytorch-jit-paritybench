; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %15, !dbg !16
  %21 = or disjoint i32 %19, %16, !dbg !16
  %.frozen = freeze i32 %17, !dbg !17
  %22 = sdiv i32 %.frozen, 512, !dbg !17
  %23 = mul i32 %22, 512, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = shl i32 %20, 9, !dbg !19
  %25 = shl i32 %21, 9, !dbg !19
  %26 = shl i32 %22, 21, !dbg !20
  %27 = add i32 %26, %.decomposed, !dbg !21
  %28 = add i32 %27, %24, !dbg !22
  %29 = add i32 %27, %25, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !24
  %36 = sext i32 %.decomposed to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %45 = bitcast i32 %41 to float, !dbg !28
  %46 = bitcast i32 %42 to float, !dbg !28
  %47 = bitcast i32 %43 to float, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !32
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !33
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !33
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !33
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !33
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %57, 0, !dbg !34
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %58, 0, !dbg !34
  br i1 %.not.i, label %64, label %59, !dbg !34

59:                                               ; preds = %8
  br i1 %.not1.i, label %62, label %60, !dbg !34

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !34

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !34
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i1 = icmp eq i32 %69, 0, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !34
  br i1 %.not.i1, label %76, label %71, !dbg !34

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !34

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !34

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !34
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i6 = icmp eq i32 %81, 0, !dbg !34
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i9 = icmp eq i32 %82, 0, !dbg !34
  br i1 %.not.i6, label %88, label %83, !dbg !34

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !34

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !34

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %84, %86, %89, %91
  %.0.i8 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !34
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i11 = icmp eq i32 %93, 0, !dbg !34
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i14 = icmp eq i32 %94, 0, !dbg !34
  br i1 %.not.i11, label %100, label %95, !dbg !34

95:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %98, label %96, !dbg !34

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !34

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

__nv_sqrtf.exit15:                                ; preds = %96, %98, %101, %103
  %.0.i13 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %114 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %120 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %121 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !30
  %125 = or disjoint i32 %19, %13, !dbg !16
  %126 = or disjoint i32 %10, %16, !dbg !13
  %127 = or disjoint i32 %10, %15, !dbg !13
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !35
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !35
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !35
  %132 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !26
  %133 = insertelement <4 x i32> %132, i32 %108, i64 1, !dbg !26
  %134 = insertelement <4 x i32> %133, i32 %110, i64 2, !dbg !26
  %135 = insertelement <4 x i32> %134, i32 %112, i64 3, !dbg !26
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !26
  %137 = shufflevector <4 x float> %136, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %138 = insertelement <8 x i32> poison, i32 %105, i64 0, !dbg !24
  %139 = insertelement <8 x i32> %138, i32 %107, i64 1, !dbg !24
  %140 = insertelement <8 x i32> %139, i32 %109, i64 2, !dbg !24
  %141 = insertelement <8 x i32> %140, i32 %111, i64 3, !dbg !24
  %142 = insertelement <8 x i32> %141, i32 %113, i64 4, !dbg !24
  %143 = insertelement <8 x i32> %142, i32 %114, i64 5, !dbg !24
  %144 = insertelement <8 x i32> %143, i32 %115, i64 6, !dbg !24
  %145 = insertelement <8 x i32> %144, i32 %116, i64 7, !dbg !24
  %146 = bitcast <8 x i32> %145 to <8 x float>, !dbg !24
  %147 = fsub <8 x float> %146, %137, !dbg !36
  %148 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !32
  %149 = insertelement <4 x i32> %148, i32 %118, i64 1, !dbg !32
  %150 = insertelement <4 x i32> %149, i32 %119, i64 2, !dbg !32
  %151 = insertelement <4 x i32> %150, i32 %120, i64 3, !dbg !32
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !32
  %153 = shufflevector <4 x float> %152, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %154 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !30
  %155 = insertelement <4 x i32> %154, i32 %122, i64 1, !dbg !30
  %156 = insertelement <4 x i32> %155, i32 %123, i64 2, !dbg !30
  %157 = insertelement <4 x i32> %156, i32 %124, i64 3, !dbg !30
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !30
  %159 = shufflevector <4 x float> %158, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %160 = insertelement <8 x float> poison, float %131, i64 0, !dbg !37
  %161 = insertelement <8 x float> %160, float %130, i64 1, !dbg !37
  %162 = insertelement <8 x float> %161, float %129, i64 2, !dbg !37
  %163 = insertelement <8 x float> %162, float %128, i64 3, !dbg !37
  %164 = shufflevector <8 x float> %163, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !37
  %165 = fmul <8 x float> %147, %164, !dbg !37
  %166 = fmul <8 x float> %165, %159, !dbg !38
  %167 = fadd <8 x float> %166, %153, !dbg !39
  %168 = fcmp olt <8 x float> %167, zeroinitializer, !dbg !40
  %169 = extractelement <8 x i1> %168, i64 7, !dbg !44
  %170 = extractelement <8 x float> %167, i64 7, !dbg !44
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !44
  %172 = extractelement <8 x i1> %168, i64 6, !dbg !44
  %173 = extractelement <8 x float> %167, i64 6, !dbg !44
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !44
  %175 = extractelement <8 x i1> %168, i64 5, !dbg !44
  %176 = extractelement <8 x float> %167, i64 5, !dbg !44
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !44
  %178 = extractelement <8 x i1> %168, i64 4, !dbg !44
  %179 = extractelement <8 x float> %167, i64 4, !dbg !44
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !44
  %181 = extractelement <8 x i1> %168, i64 3, !dbg !44
  %182 = extractelement <8 x float> %167, i64 3, !dbg !44
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !44
  %184 = extractelement <8 x i1> %168, i64 2, !dbg !44
  %185 = extractelement <8 x float> %167, i64 2, !dbg !44
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !44
  %187 = extractelement <8 x i1> %168, i64 1, !dbg !44
  %188 = extractelement <8 x float> %167, i64 1, !dbg !44
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !44
  %190 = extractelement <8 x i1> %168, i64 0, !dbg !44
  %191 = extractelement <8 x float> %167, i64 0, !dbg !44
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !44
  %193 = shl i32 %127, 12, !dbg !45
  %194 = shl i32 %126, 12, !dbg !45
  %195 = add i32 %125, %193, !dbg !46
  %196 = add i32 %125, %194, !dbg !46
  %197 = sext i32 %195 to i64, !dbg !47
  %198 = getelementptr float, ptr addrspace(1) %5, i64 %197, !dbg !47
  %199 = sext i32 %196 to i64, !dbg !47
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !47
  %201 = shl i32 %11, 7, !dbg !48
  %202 = and i32 %201, 896, !dbg !48
  %203 = or disjoint i32 %202, %15, !dbg !48
  %204 = and i32 %12, 508, !dbg !48
  %205 = lshr exact i32 %202, 3, !dbg !48
  %206 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %205, !dbg !48
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %203, !dbg !48
  %208 = bitcast float %171 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #4, !dbg !48
  %209 = or disjoint i32 %203, 32, !dbg !48
  %210 = lshr i32 %209, 5, !dbg !48
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !48
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %209, !dbg !48
  %213 = bitcast float %174 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !48
  %214 = or disjoint i32 %203, 64, !dbg !48
  %215 = lshr i32 %214, 5, !dbg !48
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !48
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !48
  %218 = bitcast float %177 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !48
  %219 = or disjoint i32 %203, 96, !dbg !48
  %220 = lshr i32 %219, 5, !dbg !48
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !48
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !48
  %223 = bitcast float %180 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #4, !dbg !48
  %224 = or disjoint i32 %203, 16, !dbg !48
  %225 = getelementptr float, ptr addrspace(3) %206, i32 %224, !dbg !48
  %226 = bitcast float %183 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !48
  %227 = or disjoint i32 %203, 48, !dbg !48
  %228 = lshr i32 %227, 5, !dbg !48
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !48
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !48
  %231 = bitcast float %186 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !48
  %232 = or disjoint i32 %203, 80, !dbg !48
  %233 = lshr i32 %232, 5, !dbg !48
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !48
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !48
  %236 = bitcast float %189 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !48
  %237 = or disjoint i32 %203, 112, !dbg !48
  %238 = lshr i32 %237, 5, !dbg !48
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !48
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !48
  %241 = bitcast float %192 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %242 = lshr i32 %204, 5, !dbg !48
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !48
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %204, !dbg !48
  %245 = load i32, ptr addrspace(3) %244, align 4, !dbg !48
  %246 = or disjoint i32 %204, 1, !dbg !48
  %247 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %246, !dbg !48
  %248 = load i32, ptr addrspace(3) %247, align 4, !dbg !48
  %249 = or disjoint i32 %204, 2, !dbg !48
  %250 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %249, !dbg !48
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !48
  %252 = or disjoint i32 %204, 3, !dbg !48
  %253 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %252, !dbg !48
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !48
  %255 = or disjoint i32 %204, 512, !dbg !48
  %256 = lshr i32 %255, 5, !dbg !48
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !48
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !48
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !48
  %260 = or disjoint i32 %204, 513, !dbg !48
  %261 = lshr i32 %260, 5, !dbg !48
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !48
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !48
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !48
  %265 = or disjoint i32 %204, 514, !dbg !48
  %266 = lshr i32 %265, 5, !dbg !48
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !48
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !48
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !48
  %270 = or disjoint i32 %204, 515, !dbg !48
  %271 = lshr i32 %270, 5, !dbg !48
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !48
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !48
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %248, i32 %251, i32 %254, ptr addrspace(1) %198, i1 true) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %259, i32 %264, i32 %269, i32 %274, ptr addrspace(1) %200, i1 true) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckenmkwvanuonpizjvto4eeeb44x7vfr433iijck6unjgnkkmfpt.py", directory: "inductor_cache/ke")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 57, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 49, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 50, column: 35, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 47, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
