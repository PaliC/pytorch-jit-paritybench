; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = shl i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %12, 4, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = or disjoint i32 %12, 1, !dbg !18
  %23 = or disjoint i32 %12, 5, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #3, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #3, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = or disjoint i32 %12, 2, !dbg !21
  %33 = or disjoint i32 %12, 6, !dbg !21
  %34 = sext i32 %32 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = sext i32 %33 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #3, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !23
  %41 = bitcast i32 %40 to float, !dbg !23
  %42 = or disjoint i32 %12, 3, !dbg !24
  %43 = or disjoint i32 %12, 7, !dbg !24
  %44 = sext i32 %42 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #3, !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #3, !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fadd float %19, %29, !dbg !27
  %53 = fadd float %21, %31, !dbg !27
  %54 = fadd float %52, %39, !dbg !28
  %55 = fadd float %53, %41, !dbg !28
  %56 = fadd float %54, %49, !dbg !29
  %57 = fadd float %55, %51, !dbg !29
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 4.000000e+00) #3, !dbg !30
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 4.000000e+00) #3, !dbg !30
  %60 = fsub float %19, %58, !dbg !31
  %61 = fsub float %21, %59, !dbg !31
  %62 = fmul float %60, %60, !dbg !32
  %63 = fmul float %61, %61, !dbg !32
  %64 = fsub float %29, %58, !dbg !33
  %65 = fsub float %31, %59, !dbg !33
  %66 = fmul float %64, %64, !dbg !34
  %67 = fmul float %65, %65, !dbg !34
  %68 = fadd float %62, %66, !dbg !35
  %69 = fadd float %63, %67, !dbg !35
  %70 = fsub float %39, %58, !dbg !36
  %71 = fsub float %41, %59, !dbg !36
  %72 = fmul float %70, %70, !dbg !37
  %73 = fmul float %71, %71, !dbg !37
  %74 = fadd float %72, %68, !dbg !38
  %75 = fadd float %73, %69, !dbg !38
  %76 = fsub float %49, %58, !dbg !39
  %77 = fsub float %51, %59, !dbg !39
  %78 = fmul float %76, %76, !dbg !40
  %79 = fmul float %77, %77, !dbg !40
  %80 = fadd float %78, %74, !dbg !41
  %81 = fadd float %79, %75, !dbg !41
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #3, !dbg !42
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 4.000000e+00) #3, !dbg !42
  %84 = fadd float %82, 0x3EE4F8B580000000, !dbg !43
  %85 = fadd float %83, 0x3EE4F8B580000000, !dbg !43
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %86, 0, !dbg !44
  br i1 %.not.i, label %89, label %87, !dbg !44

87:                                               ; preds = %4
  %88 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

89:                                               ; preds = %4
  %90 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %87, %89
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], !dbg !44
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %91, 0, !dbg !44
  br i1 %.not.i1, label %94, label %92, !dbg !44

92:                                               ; preds = %__nv_rsqrtf.exit
  %93 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

94:                                               ; preds = %__nv_rsqrtf.exit
  %95 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

__nv_rsqrtf.exit3:                                ; preds = %92, %94
  %.0.i2 = phi float [ %93, %92 ], [ %95, %94 ], !dbg !44
  %96 = sext i32 %10 to i64, !dbg !45
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !45
  %98 = bitcast float %58 to i32, !dbg !46
  %99 = bitcast float %59 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %98, i32 %99, ptr addrspace(1) %97, i1 %11) #3, !dbg !46
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !47
  %101 = bitcast float %.0.i to i32, !dbg !48
  %102 = bitcast float %.0.i2 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %11) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cen7msolsh5ibtewpx4e44wn6zj3mytq2syxv2wp2yjvrbydkgkb.py", directory: "inductor_cache/en")
!4 = !{ptr @triton_poi_fused_native_layer_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_8", linkageName: "triton_poi_fused_native_layer_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 41, scope: !7)
!27 = !DILocation(line: 29, column: 18, scope: !7)
!28 = !DILocation(line: 30, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 33, column: 18, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 19, scope: !7)
!33 = !DILocation(line: 36, column: 19, scope: !7)
!34 = !DILocation(line: 37, column: 20, scope: !7)
!35 = !DILocation(line: 38, column: 20, scope: !7)
!36 = !DILocation(line: 39, column: 19, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 41, column: 20, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 28, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 49, column: 36, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
