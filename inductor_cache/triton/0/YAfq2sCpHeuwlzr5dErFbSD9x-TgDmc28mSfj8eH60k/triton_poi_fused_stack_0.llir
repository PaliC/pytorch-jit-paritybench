; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 64, !dbg !14
  %14 = mul i32 %13, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = sdiv i32 %12, 16, !dbg !16
  %16 = srem i32 %15, 4, !dbg !17
  %17 = icmp slt i32 %12, 256, !dbg !18
  %18 = shl i32 %13, 7, !dbg !19
  %19 = add i32 %18, %.decomposed, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %17, i32 0, i1 %17) #3, !dbg !22
  %23 = sext i32 %16 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17) #3, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %17, i32 0, i1 %17) #3, !dbg !26
  %28 = bitcast i32 %27 to float, !dbg !26
  %29 = fadd float %28, 0x3EE4F8B580000000, !dbg !27
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %30, 0, !dbg !28
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %31, 0, !dbg !28
  br i1 %.not.i, label %37, label %32, !dbg !28

32:                                               ; preds = %7
  br i1 %.not1.i, label %35, label %33, !dbg !28

33:                                               ; preds = %32
  %34 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %29) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

35:                                               ; preds = %32
  %36 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %29) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

37:                                               ; preds = %7
  br i1 %.not1.i, label %40, label %38, !dbg !28

38:                                               ; preds = %37
  %39 = tail call float @llvm.nvvm.sqrt.rn.f(float %29) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

40:                                               ; preds = %37
  %41 = tail call float @llvm.nvvm.sqrt.approx.f(float %29) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %33, %35, %38, %40
  %.0.i = phi float [ %34, %33 ], [ %36, %35 ], [ %39, %38 ], [ %41, %40 ], !dbg !28
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %17, i32 0, i1 %17) #3, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %17, i32 0, i1 %17) #3, !dbg !33
  %47 = add i32 %19, -448, !dbg !34
  %48 = sext i32 %47 to i64, !dbg !35
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !35
  %50 = and i32 %8, 33554430, !dbg !36
  %51 = icmp eq i32 %50, 2, !dbg !36
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %51, i32 0, i1 %51) #3, !dbg !37
  %53 = add nsw i32 %16, 4, !dbg !38
  %54 = zext nneg i32 %53 to i64, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !39
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %51, i32 0, i1 %51) #3, !dbg !40
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !41
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %51, i32 0, i1 %51) #3, !dbg !42
  %59 = bitcast i32 %58 to float, !dbg !42
  %60 = fadd float %59, 0x3EE4F8B580000000, !dbg !43
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %61, 0, !dbg !44
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !44
  br i1 %.not.i1, label %68, label %63, !dbg !44

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !44

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !44

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !44
  %73 = bitcast i32 %52 to float, !dbg !37
  %74 = bitcast i32 %56 to float, !dbg !40
  %75 = fsub float %73, %74, !dbg !45
  %76 = bitcast i32 %22 to float, !dbg !22
  %77 = bitcast i32 %25 to float, !dbg !24
  %78 = fsub float %76, %77, !dbg !46
  %79 = fmul float %78, %42, !dbg !47
  %80 = bitcast i32 %44 to float, !dbg !31
  %81 = fmul float %79, %80, !dbg !48
  %82 = bitcast i32 %46 to float, !dbg !33
  %83 = fadd float %81, %82, !dbg !49
  %84 = fcmp olt float %83, 0.000000e+00, !dbg !50
  %85 = select i1 %84, float 0.000000e+00, float %83, !dbg !54
  %86 = icmp slt i32 %12, 512, !dbg !55
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !56
  %88 = fmul float %75, %87, !dbg !57
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !58
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %51, i32 0, i1 %51) #3, !dbg !59
  %91 = bitcast i32 %90 to float, !dbg !59
  %92 = fmul float %88, %91, !dbg !60
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !61
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %51, i32 0, i1 %51) #3, !dbg !62
  %95 = bitcast i32 %94 to float, !dbg !62
  %96 = fadd float %92, %95, !dbg !63
  %97 = fcmp olt float %96, 0.000000e+00, !dbg !64
  %98 = select i1 %97, float 0.000000e+00, float %96, !dbg !66
  %99 = select i1 %17, float %85, float %98, !dbg !67
  %100 = sext i32 %12 to i64, !dbg !68
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %100, !dbg !68
  %102 = bitcast float %99 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %101, i1 %86) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clft6pw5dcilguhcqxxssni22lijvthpjsy62wl3yjzpe5f35cjg.py", directory: "inductor_cache/lf")
!4 = !{ptr @triton_poi_fused_stack_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_0", linkageName: "triton_poi_fused_stack_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 27, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 36, scope: !7)
!32 = !DILocation(line: 47, column: 31, scope: !7)
!33 = !DILocation(line: 47, column: 36, scope: !7)
!34 = !DILocation(line: 56, column: 41, scope: !7)
!35 = !DILocation(line: 56, column: 31, scope: !7)
!36 = !DILocation(line: 56, column: 67, scope: !7)
!37 = !DILocation(line: 56, column: 59, scope: !7)
!38 = !DILocation(line: 57, column: 35, scope: !7)
!39 = !DILocation(line: 57, column: 31, scope: !7)
!40 = !DILocation(line: 57, column: 40, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 59, column: 40, scope: !7)
!43 = !DILocation(line: 61, column: 20, scope: !7)
!44 = !DILocation(line: 62, column: 27, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 35, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 50, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 23, column: 21, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 31, scope: !7)
!59 = !DILocation(line: 68, column: 40, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 70, column: 31, scope: !7)
!62 = !DILocation(line: 70, column: 40, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !65)
!65 = !DILocation(line: 73, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !65)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 77, column: 25, scope: !7)
!69 = !DILocation(line: 77, column: 37, scope: !7)
!70 = !DILocation(line: 77, column: 4, scope: !7)
