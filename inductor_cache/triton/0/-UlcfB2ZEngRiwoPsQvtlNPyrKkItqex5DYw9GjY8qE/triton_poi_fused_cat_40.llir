; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 55296, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 384, !dbg !15
  %21 = mul i32 %20, 384, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = icmp slt i32 %.decomposed, 192, !dbg !17
  %23 = mul nsw i32 %20, 192, !dbg !18
  %24 = add nsw i32 %23, %.decomposed, !dbg !19
  %25 = sext i32 %24 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = and i1 %19, %22, !dbg !21
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !22
  %29 = sext i32 %.decomposed to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = bitcast i32 %34 to float, !dbg !26
  %37 = bitcast i32 %35 to float, !dbg !26
  %38 = fadd float %36, 0x3F50624DE0000000, !dbg !27
  %39 = fadd float %37, 0x3F50624DE0000000, !dbg !27
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %40, 0, !dbg !28
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %41, 0, !dbg !28
  br i1 %.not.i, label %47, label %42, !dbg !28

42:                                               ; preds = %12
  br i1 %.not1.i, label %45, label %43, !dbg !28

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

47:                                               ; preds = %12
  br i1 %.not1.i, label %50, label %48, !dbg !28

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !28
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %52, 0, !dbg !28
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !28
  br i1 %.not.i1, label %59, label %54, !dbg !28

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !28

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !28

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !28
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !30
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !31
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !32
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !33
  %70 = icmp sgt i32 %.decomposed, 191, !dbg !34
  %71 = add nsw i32 %.decomposed, -192, !dbg !35
  %72 = add nsw i32 %23, %71, !dbg !36
  %73 = sext i32 %72 to i64, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !37
  %75 = and i1 %19, %70, !dbg !38
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !39
  %77 = sext i32 %71 to i64, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %77, !dbg !40
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !41
  %80 = getelementptr float, ptr addrspace(1) %7, i64 %77, !dbg !42
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %80, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !43
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !43
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !43
  %84 = bitcast i32 %82 to float, !dbg !43
  %85 = bitcast i32 %83 to float, !dbg !43
  %86 = fadd float %84, 0x3F50624DE0000000, !dbg !44
  %87 = fadd float %85, 0x3F50624DE0000000, !dbg !44
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i6 = icmp eq i32 %88, 0, !dbg !45
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i9 = icmp eq i32 %89, 0, !dbg !45
  br i1 %.not.i6, label %95, label %90, !dbg !45

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !45

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !45

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

__nv_sqrtf.exit10:                                ; preds = %91, %93, %96, %98
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !45
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i11 = icmp eq i32 %100, 0, !dbg !45
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i14 = icmp eq i32 %101, 0, !dbg !45
  br i1 %.not.i11, label %107, label %102, !dbg !45

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !45

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !45

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

__nv_sqrtf.exit15:                                ; preds = %103, %105, %108, %110
  %.0.i13 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !45
  %112 = extractvalue { i32, i32 } %76, 1, !dbg !39
  %113 = extractvalue { i32, i32 } %79, 1, !dbg !41
  %114 = extractvalue { i32, i32 } %76, 0, !dbg !39
  %115 = extractvalue { i32, i32 } %79, 0, !dbg !41
  %116 = extractvalue { i32, i32 } %28, 1, !dbg !22
  %117 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %118 = extractvalue { i32, i32 } %67, 1, !dbg !31
  %119 = extractvalue { i32, i32 } %69, 1, !dbg !33
  %120 = extractvalue { i32, i32 } %28, 0, !dbg !22
  %121 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %122 = extractvalue { i32, i32 } %67, 0, !dbg !31
  %123 = extractvalue { i32, i32 } %69, 0, !dbg !33
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %126 = getelementptr float, ptr addrspace(1) %8, i64 %77, !dbg !47
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %126, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !48
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !48
  %129 = extractvalue { i32, i32 } %127, 1, !dbg !48
  %130 = getelementptr float, ptr addrspace(1) %9, i64 %77, !dbg !49
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %130, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !50
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !50
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !50
  %134 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !39
  %135 = insertelement <4 x i32> %134, i32 %114, i64 1, !dbg !39
  %136 = insertelement <4 x i32> %135, i32 %120, i64 2, !dbg !39
  %137 = insertelement <4 x i32> %136, i32 %116, i64 3, !dbg !39
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !39
  %139 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !41
  %140 = insertelement <4 x i32> %139, i32 %115, i64 1, !dbg !41
  %141 = insertelement <4 x i32> %140, i32 %121, i64 2, !dbg !41
  %142 = insertelement <4 x i32> %141, i32 %117, i64 3, !dbg !41
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !41
  %144 = fsub <4 x float> %138, %143, !dbg !51
  %145 = insertelement <4 x float> poison, float %125, i64 0, !dbg !52
  %146 = insertelement <4 x float> %145, float %124, i64 1, !dbg !52
  %147 = insertelement <4 x float> %146, float %64, i64 2, !dbg !52
  %148 = insertelement <4 x float> %147, float %65, i64 3, !dbg !52
  %149 = fmul <4 x float> %144, %148, !dbg !52
  %150 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !48
  %151 = insertelement <4 x i32> %150, i32 %128, i64 1, !dbg !48
  %152 = insertelement <4 x i32> %151, i32 %122, i64 2, !dbg !48
  %153 = insertelement <4 x i32> %152, i32 %118, i64 3, !dbg !48
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !48
  %155 = fmul <4 x float> %149, %154, !dbg !53
  %156 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !50
  %157 = insertelement <4 x i32> %156, i32 %132, i64 1, !dbg !50
  %158 = insertelement <4 x i32> %157, i32 %123, i64 2, !dbg !50
  %159 = insertelement <4 x i32> %158, i32 %119, i64 3, !dbg !50
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !50
  %161 = fadd <4 x float> %155, %160, !dbg !54
  %162 = fcmp olt <4 x float> %161, zeroinitializer, !dbg !55
  %163 = extractelement <4 x i1> %162, i64 3, !dbg !59
  %164 = extractelement <4 x float> %161, i64 3, !dbg !59
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !59
  %166 = extractelement <4 x i1> %162, i64 2, !dbg !59
  %167 = extractelement <4 x float> %161, i64 2, !dbg !59
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !59
  %169 = extractelement <4 x i1> %162, i64 1, !dbg !61
  %170 = extractelement <4 x float> %161, i64 1, !dbg !61
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !61
  %172 = extractelement <4 x i1> %162, i64 0, !dbg !61
  %173 = extractelement <4 x float> %161, i64 0, !dbg !61
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !61
  %175 = select i1 %22, float %168, float %171, !dbg !62
  %176 = select i1 %22, float %165, float %174, !dbg !62
  %177 = sext i32 %18 to i64, !dbg !63
  %178 = getelementptr float, ptr addrspace(1) %10, i64 %177, !dbg !63
  %179 = bitcast float %175 to i32, !dbg !64
  %180 = bitcast float %176 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %178, i1 %19) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csq6wgevqctblfgh6v5da74vnrevieqojm6lznkitt3d6pwhtv5g.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_poi_fused_cat_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_40", linkageName: "triton_poi_fused_cat_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 36, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 55, column: 50, scope: !7)
!36 = !DILocation(line: 55, column: 41, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 64, scope: !7)
!39 = !DILocation(line: 55, column: 56, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 45, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 45, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 27, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 67, column: 31, scope: !7)
!48 = !DILocation(line: 67, column: 45, scope: !7)
!49 = !DILocation(line: 69, column: 31, scope: !7)
!50 = !DILocation(line: 69, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 72, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 49, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 76, column: 25, scope: !7)
!64 = !DILocation(line: 76, column: 37, scope: !7)
!65 = !DILocation(line: 76, column: 4, scope: !7)
