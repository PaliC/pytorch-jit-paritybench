; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30, ptr addrspace(1) %31, ptr addrspace(1) %32, ptr addrspace(1) %33, ptr addrspace(1) %34, ptr addrspace(1) %35, ptr addrspace(1) %36, ptr addrspace(1) %37, ptr addrspace(1) %38, ptr addrspace(1) %39, ptr addrspace(1) %40, i32 %41) local_unnamed_addr !dbg !7 {
  %43 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %44 = shl i32 %43, 7, !dbg !11
  %45 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %46 = and i32 %45, 127, !dbg !12
  %47 = or disjoint i32 %44, %46, !dbg !13
  %.frozen = freeze i32 %47, !dbg !14
  %48 = sdiv i32 %.frozen, 256, !dbg !14
  %49 = mul i32 %48, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %49, !dbg !15
  %50 = srem i32 %48, 2, !dbg !16
  %51 = sdiv i32 %47, 512, !dbg !17
  %52 = srem i32 %51, 2, !dbg !18
  %53 = sdiv i32 %47, 1024, !dbg !19
  %54 = icmp slt i32 %.decomposed, 32, !dbg !20
  %55 = shl nsw i32 %50, 5, !dbg !21
  %56 = mul nsw i32 %52, 96, !dbg !22
  %57 = mul nsw i32 %53, 288, !dbg !23
  %58 = add nsw i32 %56, %57, !dbg !24
  %59 = add nsw i32 %58, %55, !dbg !25
  %60 = add nsw i32 %59, %.decomposed, !dbg !26
  %61 = sext i32 %60 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %54, i32 0, i1 %54) #3, !dbg !28
  %64 = sext i32 %.decomposed to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %54, i32 0, i1 %54) #3, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %54, i32 0, i1 %54) #3, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = fadd float %69, 0x3EE4F8B580000000, !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %71, 0, !dbg !34
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %72, 0, !dbg !34
  br i1 %.not.i, label %78, label %73, !dbg !34

73:                                               ; preds = %42
  br i1 %.not1.i, label %76, label %74, !dbg !34

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

78:                                               ; preds = %42
  br i1 %.not1.i, label %81, label %79, !dbg !34

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !34
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !36
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %54, i32 0, i1 %54) #3, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !38
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %54, i32 0, i1 %54) #3, !dbg !39
  %88 = and i32 %.decomposed, -32, !dbg !40
  %89 = icmp eq i32 %88, 32, !dbg !40
  %90 = add nsw i32 %.decomposed, -32, !dbg !41
  %91 = add nsw i32 %59, %90, !dbg !42
  %92 = sext i32 %91 to i64, !dbg !43
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !43
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %89, i32 0, i1 %89) #3, !dbg !44
  %95 = sext i32 %90 to i64, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !45
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %89, i32 0, i1 %89) #3, !dbg !46
  %98 = getelementptr float, ptr addrspace(1) %7, i64 %95, !dbg !47
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %89, i32 0, i1 %89) #3, !dbg !48
  %100 = bitcast i32 %99 to float, !dbg !48
  %101 = fadd float %100, 0x3EE4F8B580000000, !dbg !49
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i8 = icmp eq i32 %102, 0, !dbg !50
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i11 = icmp eq i32 %103, 0, !dbg !50
  br i1 %.not.i8, label %109, label %104, !dbg !50

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %107, label %105, !dbg !50

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !50
  br label %__nv_sqrtf.exit12, !dbg !50

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !50
  br label %__nv_sqrtf.exit12, !dbg !50

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %112, label %110, !dbg !50

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !50
  br label %__nv_sqrtf.exit12, !dbg !50

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !50
  br label %__nv_sqrtf.exit12, !dbg !50

__nv_sqrtf.exit12:                                ; preds = %105, %107, %110, %112
  %.0.i10 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !50
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !51
  %115 = getelementptr float, ptr addrspace(1) %8, i64 %95, !dbg !52
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %89, i32 0, i1 %89) #3, !dbg !53
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %95, !dbg !54
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %89, i32 0, i1 %89) #3, !dbg !55
  %119 = icmp eq i32 %88, 64, !dbg !56
  %120 = add nsw i32 %.decomposed, -64, !dbg !57
  %121 = add nsw i32 %59, %120, !dbg !58
  %122 = sext i32 %121 to i64, !dbg !59
  %123 = getelementptr float, ptr addrspace(1) %10, i64 %122, !dbg !59
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %119, i32 0, i1 %119) #3, !dbg !60
  %125 = sext i32 %120 to i64, !dbg !61
  %126 = getelementptr float, ptr addrspace(1) %11, i64 %125, !dbg !61
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %119, i32 0, i1 %119) #3, !dbg !62
  %128 = getelementptr float, ptr addrspace(1) %12, i64 %125, !dbg !63
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %119, i32 0, i1 %119) #3, !dbg !64
  %130 = bitcast i32 %129 to float, !dbg !64
  %131 = fadd float %130, 0x3EE4F8B580000000, !dbg !65
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i13 = icmp eq i32 %132, 0, !dbg !66
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i16 = icmp eq i32 %133, 0, !dbg !66
  br i1 %.not.i13, label %139, label %134, !dbg !66

134:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %137, label %135, !dbg !66

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !66
  br label %__nv_sqrtf.exit17, !dbg !66

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !66
  br label %__nv_sqrtf.exit17, !dbg !66

139:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %142, label %140, !dbg !66

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !66
  br label %__nv_sqrtf.exit17, !dbg !66

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !66
  br label %__nv_sqrtf.exit17, !dbg !66

__nv_sqrtf.exit17:                                ; preds = %135, %137, %140, %142
  %.0.i15 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !66
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !67
  %145 = getelementptr float, ptr addrspace(1) %13, i64 %125, !dbg !68
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %119, i32 0, i1 %119) #3, !dbg !69
  %147 = getelementptr float, ptr addrspace(1) %14, i64 %125, !dbg !70
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %119, i32 0, i1 %119) #3, !dbg !71
  %149 = icmp eq i32 %88, 96, !dbg !72
  %150 = add nsw i32 %.decomposed, -96, !dbg !73
  %151 = add nsw i32 %59, %150, !dbg !74
  %152 = sext i32 %151 to i64, !dbg !75
  %153 = getelementptr float, ptr addrspace(1) %15, i64 %152, !dbg !75
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %149, i32 0, i1 %149) #3, !dbg !76
  %155 = sext i32 %150 to i64, !dbg !77
  %156 = getelementptr float, ptr addrspace(1) %16, i64 %155, !dbg !77
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %149, i32 0, i1 %149) #3, !dbg !78
  %158 = getelementptr float, ptr addrspace(1) %17, i64 %155, !dbg !79
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %149, i32 0, i1 %149) #3, !dbg !80
  %160 = bitcast i32 %159 to float, !dbg !80
  %161 = fadd float %160, 0x3EE4F8B580000000, !dbg !81
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !82
  %.not.i18 = icmp eq i32 %162, 0, !dbg !82
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !82
  %.not1.i21 = icmp eq i32 %163, 0, !dbg !82
  br i1 %.not.i18, label %169, label %164, !dbg !82

164:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %167, label %165, !dbg !82

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !82
  br label %__nv_sqrtf.exit22, !dbg !82

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !82
  br label %__nv_sqrtf.exit22, !dbg !82

169:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %172, label %170, !dbg !82

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !82
  br label %__nv_sqrtf.exit22, !dbg !82

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !82
  br label %__nv_sqrtf.exit22, !dbg !82

__nv_sqrtf.exit22:                                ; preds = %165, %167, %170, %172
  %.0.i20 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !82
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !83
  %175 = getelementptr float, ptr addrspace(1) %18, i64 %155, !dbg !84
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %149, i32 0, i1 %149) #3, !dbg !85
  %177 = getelementptr float, ptr addrspace(1) %19, i64 %155, !dbg !86
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %149, i32 0, i1 %149) #3, !dbg !87
  %179 = icmp eq i32 %88, 128, !dbg !88
  %180 = add nsw i32 %.decomposed, -128, !dbg !89
  %181 = add nsw i32 %59, %180, !dbg !90
  %182 = sext i32 %181 to i64, !dbg !91
  %183 = getelementptr float, ptr addrspace(1) %20, i64 %182, !dbg !91
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %179, i32 0, i1 %179) #3, !dbg !92
  %185 = sext i32 %180 to i64, !dbg !93
  %186 = getelementptr float, ptr addrspace(1) %21, i64 %185, !dbg !93
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %179, i32 0, i1 %179) #3, !dbg !94
  %188 = getelementptr float, ptr addrspace(1) %22, i64 %185, !dbg !95
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %179, i32 0, i1 %179) #3, !dbg !96
  %190 = bitcast i32 %189 to float, !dbg !96
  %191 = fadd float %190, 0x3EE4F8B580000000, !dbg !97
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i23 = icmp eq i32 %192, 0, !dbg !98
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i26 = icmp eq i32 %193, 0, !dbg !98
  br i1 %.not.i23, label %199, label %194, !dbg !98

194:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %197, label %195, !dbg !98

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

199:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %202, label %200, !dbg !98

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

__nv_sqrtf.exit27:                                ; preds = %195, %197, %200, %202
  %.0.i25 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !98
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !99
  %205 = getelementptr float, ptr addrspace(1) %23, i64 %185, !dbg !100
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %179, i32 0, i1 %179) #3, !dbg !101
  %207 = getelementptr float, ptr addrspace(1) %24, i64 %185, !dbg !102
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %179, i32 0, i1 %179) #3, !dbg !103
  %209 = icmp eq i32 %88, 160, !dbg !104
  %210 = add nsw i32 %.decomposed, -160, !dbg !105
  %211 = add nsw i32 %59, %210, !dbg !106
  %212 = sext i32 %211 to i64, !dbg !107
  %213 = getelementptr float, ptr addrspace(1) %25, i64 %212, !dbg !107
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %209, i32 0, i1 %209) #3, !dbg !108
  %215 = sext i32 %210 to i64, !dbg !109
  %216 = getelementptr float, ptr addrspace(1) %26, i64 %215, !dbg !109
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %209, i32 0, i1 %209) #3, !dbg !110
  %218 = getelementptr float, ptr addrspace(1) %27, i64 %215, !dbg !111
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %209, i32 0, i1 %209) #3, !dbg !112
  %220 = bitcast i32 %219 to float, !dbg !112
  %221 = fadd float %220, 0x3EE4F8B580000000, !dbg !113
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !114
  %.not.i28 = icmp eq i32 %222, 0, !dbg !114
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !114
  %.not1.i31 = icmp eq i32 %223, 0, !dbg !114
  br i1 %.not.i28, label %229, label %224, !dbg !114

224:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %227, label %225, !dbg !114

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !114
  br label %__nv_sqrtf.exit32, !dbg !114

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !114
  br label %__nv_sqrtf.exit32, !dbg !114

229:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %232, label %230, !dbg !114

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !114
  br label %__nv_sqrtf.exit32, !dbg !114

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !114
  br label %__nv_sqrtf.exit32, !dbg !114

__nv_sqrtf.exit32:                                ; preds = %225, %227, %230, %232
  %.0.i30 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !114
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !115
  %235 = getelementptr float, ptr addrspace(1) %28, i64 %215, !dbg !116
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %209, i32 0, i1 %209) #3, !dbg !117
  %237 = getelementptr float, ptr addrspace(1) %29, i64 %215, !dbg !118
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %209, i32 0, i1 %209) #3, !dbg !119
  %239 = icmp eq i32 %88, 192, !dbg !120
  %240 = add nsw i32 %.decomposed, -192, !dbg !121
  %241 = add nsw i32 %59, %240, !dbg !122
  %242 = sext i32 %241 to i64, !dbg !123
  %243 = getelementptr float, ptr addrspace(1) %30, i64 %242, !dbg !123
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %239, i32 0, i1 %239) #3, !dbg !124
  %245 = sext i32 %240 to i64, !dbg !125
  %246 = getelementptr float, ptr addrspace(1) %31, i64 %245, !dbg !125
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %239, i32 0, i1 %239) #3, !dbg !126
  %248 = getelementptr float, ptr addrspace(1) %32, i64 %245, !dbg !127
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %239, i32 0, i1 %239) #3, !dbg !128
  %250 = bitcast i32 %249 to float, !dbg !128
  %251 = fadd float %250, 0x3EE4F8B580000000, !dbg !129
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !130
  %.not.i33 = icmp eq i32 %252, 0, !dbg !130
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !130
  %.not1.i36 = icmp eq i32 %253, 0, !dbg !130
  br i1 %.not.i33, label %259, label %254, !dbg !130

254:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %257, label %255, !dbg !130

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #3, !dbg !130
  br label %__nv_sqrtf.exit37, !dbg !130

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #3, !dbg !130
  br label %__nv_sqrtf.exit37, !dbg !130

259:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %262, label %260, !dbg !130

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #3, !dbg !130
  br label %__nv_sqrtf.exit37, !dbg !130

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #3, !dbg !130
  br label %__nv_sqrtf.exit37, !dbg !130

__nv_sqrtf.exit37:                                ; preds = %255, %257, %260, %262
  %.0.i35 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !130
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !131
  %265 = getelementptr float, ptr addrspace(1) %33, i64 %245, !dbg !132
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %239, i32 0, i1 %239) #3, !dbg !133
  %267 = getelementptr float, ptr addrspace(1) %34, i64 %245, !dbg !134
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %239, i32 0, i1 %239) #3, !dbg !135
  %269 = icmp sgt i32 %.decomposed, 223, !dbg !136
  %270 = add nsw i32 %.decomposed, -224, !dbg !137
  %271 = add nsw i32 %59, %270, !dbg !138
  %272 = sext i32 %271 to i64, !dbg !139
  %273 = getelementptr float, ptr addrspace(1) %35, i64 %272, !dbg !139
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %269, i32 0, i1 %269) #3, !dbg !140
  %275 = sext i32 %270 to i64, !dbg !141
  %276 = getelementptr float, ptr addrspace(1) %36, i64 %275, !dbg !141
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %269, i32 0, i1 %269) #3, !dbg !142
  %278 = getelementptr float, ptr addrspace(1) %37, i64 %275, !dbg !143
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %269, i32 0, i1 %269) #3, !dbg !144
  %280 = bitcast i32 %279 to float, !dbg !144
  %281 = fadd float %280, 0x3EE4F8B580000000, !dbg !145
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !146
  %.not.i38 = icmp eq i32 %282, 0, !dbg !146
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !146
  %.not1.i41 = icmp eq i32 %283, 0, !dbg !146
  br i1 %.not.i38, label %289, label %284, !dbg !146

284:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %287, label %285, !dbg !146

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #3, !dbg !146
  br label %__nv_sqrtf.exit42, !dbg !146

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #3, !dbg !146
  br label %__nv_sqrtf.exit42, !dbg !146

289:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %292, label %290, !dbg !146

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #3, !dbg !146
  br label %__nv_sqrtf.exit42, !dbg !146

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #3, !dbg !146
  br label %__nv_sqrtf.exit42, !dbg !146

__nv_sqrtf.exit42:                                ; preds = %285, %287, %290, %292
  %.0.i40 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !146
  %294 = insertelement <8 x i32> poison, i32 %274, i64 0, !dbg !140
  %295 = insertelement <8 x i32> %294, i32 %63, i64 1, !dbg !140
  %296 = insertelement <8 x i32> %295, i32 %94, i64 2, !dbg !140
  %297 = insertelement <8 x i32> %296, i32 %124, i64 3, !dbg !140
  %298 = insertelement <8 x i32> %297, i32 %154, i64 4, !dbg !140
  %299 = insertelement <8 x i32> %298, i32 %184, i64 5, !dbg !140
  %300 = insertelement <8 x i32> %299, i32 %214, i64 6, !dbg !140
  %301 = insertelement <8 x i32> %300, i32 %244, i64 7, !dbg !140
  %302 = bitcast <8 x i32> %301 to <8 x float>, !dbg !140
  %303 = insertelement <8 x i32> poison, i32 %277, i64 0, !dbg !142
  %304 = insertelement <8 x i32> %303, i32 %66, i64 1, !dbg !142
  %305 = insertelement <8 x i32> %304, i32 %97, i64 2, !dbg !142
  %306 = insertelement <8 x i32> %305, i32 %127, i64 3, !dbg !142
  %307 = insertelement <8 x i32> %306, i32 %157, i64 4, !dbg !142
  %308 = insertelement <8 x i32> %307, i32 %187, i64 5, !dbg !142
  %309 = insertelement <8 x i32> %308, i32 %217, i64 6, !dbg !142
  %310 = insertelement <8 x i32> %309, i32 %247, i64 7, !dbg !142
  %311 = bitcast <8 x i32> %310 to <8 x float>, !dbg !142
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !147
  %313 = getelementptr float, ptr addrspace(1) %38, i64 %275, !dbg !148
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %269, i32 0, i1 %269) #3, !dbg !149
  %315 = getelementptr float, ptr addrspace(1) %39, i64 %275, !dbg !150
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %269, i32 0, i1 %269) #3, !dbg !151
  %317 = fsub <8 x float> %302, %311, !dbg !152
  %318 = insertelement <8 x float> poison, float %312, i64 0, !dbg !153
  %319 = insertelement <8 x float> %318, float %83, i64 1, !dbg !153
  %320 = insertelement <8 x float> %319, float %114, i64 2, !dbg !153
  %321 = insertelement <8 x float> %320, float %144, i64 3, !dbg !153
  %322 = insertelement <8 x float> %321, float %174, i64 4, !dbg !153
  %323 = insertelement <8 x float> %322, float %204, i64 5, !dbg !153
  %324 = insertelement <8 x float> %323, float %234, i64 6, !dbg !153
  %325 = insertelement <8 x float> %324, float %264, i64 7, !dbg !153
  %326 = fmul <8 x float> %317, %325, !dbg !153
  %327 = insertelement <8 x i32> poison, i32 %314, i64 0, !dbg !149
  %328 = insertelement <8 x i32> %327, i32 %85, i64 1, !dbg !149
  %329 = insertelement <8 x i32> %328, i32 %116, i64 2, !dbg !149
  %330 = insertelement <8 x i32> %329, i32 %146, i64 3, !dbg !149
  %331 = insertelement <8 x i32> %330, i32 %176, i64 4, !dbg !149
  %332 = insertelement <8 x i32> %331, i32 %206, i64 5, !dbg !149
  %333 = insertelement <8 x i32> %332, i32 %236, i64 6, !dbg !149
  %334 = insertelement <8 x i32> %333, i32 %266, i64 7, !dbg !149
  %335 = bitcast <8 x i32> %334 to <8 x float>, !dbg !149
  %336 = fmul <8 x float> %326, %335, !dbg !154
  %337 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !151
  %338 = insertelement <8 x i32> %337, i32 %87, i64 1, !dbg !151
  %339 = insertelement <8 x i32> %338, i32 %118, i64 2, !dbg !151
  %340 = insertelement <8 x i32> %339, i32 %148, i64 3, !dbg !151
  %341 = insertelement <8 x i32> %340, i32 %178, i64 4, !dbg !151
  %342 = insertelement <8 x i32> %341, i32 %208, i64 5, !dbg !151
  %343 = insertelement <8 x i32> %342, i32 %238, i64 6, !dbg !151
  %344 = insertelement <8 x i32> %343, i32 %268, i64 7, !dbg !151
  %345 = bitcast <8 x i32> %344 to <8 x float>, !dbg !151
  %346 = fadd <8 x float> %336, %345, !dbg !155
  %347 = fcmp ole <8 x float> %346, zeroinitializer, !dbg !156
  %348 = select <8 x i1> %347, <8 x float> zeroinitializer, <8 x float> %346, !dbg !156
  %349 = extractelement <8 x float> %348, i64 7, !dbg !160
  %350 = fcmp uno float %349, 0.000000e+00, !dbg !160
  %351 = fcmp olt <8 x float> %348, splat (float 6.000000e+00), !dbg !162
  %352 = extractelement <8 x i1> %351, i64 7, !dbg !164
  %353 = or i1 %352, %350, !dbg !164
  %354 = select i1 %353, float %349, float 6.000000e+00, !dbg !165
  %355 = extractelement <8 x float> %348, i64 6, !dbg !166
  %356 = fcmp uno float %355, 0.000000e+00, !dbg !166
  %357 = extractelement <8 x i1> %351, i64 6, !dbg !168
  %358 = or i1 %357, %356, !dbg !168
  %359 = select i1 %358, float %355, float 6.000000e+00, !dbg !169
  %360 = extractelement <8 x float> %348, i64 5, !dbg !170
  %361 = fcmp uno float %360, 0.000000e+00, !dbg !170
  %362 = extractelement <8 x i1> %351, i64 5, !dbg !172
  %363 = or i1 %362, %361, !dbg !172
  %364 = select i1 %363, float %360, float 6.000000e+00, !dbg !173
  %365 = extractelement <8 x float> %348, i64 4, !dbg !174
  %366 = fcmp uno float %365, 0.000000e+00, !dbg !174
  %367 = extractelement <8 x i1> %351, i64 4, !dbg !176
  %368 = or i1 %367, %366, !dbg !176
  %369 = select i1 %368, float %365, float 6.000000e+00, !dbg !177
  %370 = extractelement <8 x float> %348, i64 3, !dbg !178
  %371 = fcmp uno float %370, 0.000000e+00, !dbg !178
  %372 = extractelement <8 x i1> %351, i64 3, !dbg !180
  %373 = or i1 %372, %371, !dbg !180
  %374 = select i1 %373, float %370, float 6.000000e+00, !dbg !181
  %375 = extractelement <8 x float> %348, i64 2, !dbg !182
  %376 = fcmp uno float %375, 0.000000e+00, !dbg !182
  %377 = extractelement <8 x i1> %351, i64 2, !dbg !184
  %378 = or i1 %377, %376, !dbg !184
  %379 = select i1 %378, float %375, float 6.000000e+00, !dbg !185
  %380 = extractelement <8 x float> %348, i64 1, !dbg !186
  %381 = fcmp uno float %380, 0.000000e+00, !dbg !186
  %382 = extractelement <8 x i1> %351, i64 1, !dbg !188
  %383 = or i1 %382, %381, !dbg !188
  %384 = select i1 %383, float %380, float 6.000000e+00, !dbg !189
  %385 = extractelement <8 x float> %348, i64 0, !dbg !190
  %386 = fcmp uno float %385, 0.000000e+00, !dbg !190
  %387 = extractelement <8 x i1> %351, i64 0, !dbg !191
  %388 = or i1 %387, %386, !dbg !191
  %389 = select i1 %388, float %385, float 6.000000e+00, !dbg !192
  %390 = select i1 %269, float %389, float 0.000000e+00, !dbg !193
  %391 = select i1 %239, float %354, float %390, !dbg !194
  %392 = select i1 %209, float %359, float %391, !dbg !194
  %393 = select i1 %179, float %364, float %392, !dbg !194
  %394 = select i1 %149, float %369, float %393, !dbg !194
  %395 = select i1 %119, float %374, float %394, !dbg !194
  %396 = select i1 %89, float %379, float %395, !dbg !194
  %397 = select i1 %54, float %384, float %396, !dbg !194
  %398 = sext i32 %47 to i64, !dbg !195
  %399 = getelementptr float, ptr addrspace(1) %40, i64 %398, !dbg !195
  %400 = bitcast float %397 to i32, !dbg !196
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %399, i1 true) #3, !dbg !196
  ret void, !dbg !197
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77qmvtup2yv2c5q7rjog4l4u2o6j3jf4aixe7fwginmclysjkq4.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_poi_fused_cat_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_48", linkageName: "triton_poi_fused_cat_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 33, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 46, scope: !7)
!26 = !DILocation(line: 34, column: 56, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 62, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 35, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 27, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 31, scope: !7)
!37 = !DILocation(line: 46, column: 36, scope: !7)
!38 = !DILocation(line: 48, column: 31, scope: !7)
!39 = !DILocation(line: 48, column: 36, scope: !7)
!40 = !DILocation(line: 59, column: 20, scope: !7)
!41 = !DILocation(line: 60, column: 65, scope: !7)
!42 = !DILocation(line: 60, column: 57, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 60, column: 71, scope: !7)
!45 = !DILocation(line: 61, column: 31, scope: !7)
!46 = !DILocation(line: 61, column: 44, scope: !7)
!47 = !DILocation(line: 63, column: 31, scope: !7)
!48 = !DILocation(line: 63, column: 44, scope: !7)
!49 = !DILocation(line: 65, column: 20, scope: !7)
!50 = !DILocation(line: 66, column: 27, scope: !7)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 72, column: 31, scope: !7)
!53 = !DILocation(line: 72, column: 44, scope: !7)
!54 = !DILocation(line: 74, column: 31, scope: !7)
!55 = !DILocation(line: 74, column: 44, scope: !7)
!56 = !DILocation(line: 85, column: 20, scope: !7)
!57 = !DILocation(line: 86, column: 66, scope: !7)
!58 = !DILocation(line: 86, column: 58, scope: !7)
!59 = !DILocation(line: 86, column: 32, scope: !7)
!60 = !DILocation(line: 86, column: 72, scope: !7)
!61 = !DILocation(line: 87, column: 32, scope: !7)
!62 = !DILocation(line: 87, column: 45, scope: !7)
!63 = !DILocation(line: 89, column: 32, scope: !7)
!64 = !DILocation(line: 89, column: 45, scope: !7)
!65 = !DILocation(line: 91, column: 20, scope: !7)
!66 = !DILocation(line: 92, column: 27, scope: !7)
!67 = !DILocation(line: 94, column: 20, scope: !7)
!68 = !DILocation(line: 98, column: 32, scope: !7)
!69 = !DILocation(line: 98, column: 45, scope: !7)
!70 = !DILocation(line: 100, column: 32, scope: !7)
!71 = !DILocation(line: 100, column: 45, scope: !7)
!72 = !DILocation(line: 111, column: 20, scope: !7)
!73 = !DILocation(line: 112, column: 66, scope: !7)
!74 = !DILocation(line: 112, column: 58, scope: !7)
!75 = !DILocation(line: 112, column: 32, scope: !7)
!76 = !DILocation(line: 112, column: 72, scope: !7)
!77 = !DILocation(line: 113, column: 32, scope: !7)
!78 = !DILocation(line: 113, column: 45, scope: !7)
!79 = !DILocation(line: 115, column: 32, scope: !7)
!80 = !DILocation(line: 115, column: 45, scope: !7)
!81 = !DILocation(line: 117, column: 20, scope: !7)
!82 = !DILocation(line: 118, column: 27, scope: !7)
!83 = !DILocation(line: 120, column: 20, scope: !7)
!84 = !DILocation(line: 124, column: 32, scope: !7)
!85 = !DILocation(line: 124, column: 45, scope: !7)
!86 = !DILocation(line: 126, column: 32, scope: !7)
!87 = !DILocation(line: 126, column: 45, scope: !7)
!88 = !DILocation(line: 137, column: 22, scope: !7)
!89 = !DILocation(line: 138, column: 68, scope: !7)
!90 = !DILocation(line: 138, column: 59, scope: !7)
!91 = !DILocation(line: 138, column: 33, scope: !7)
!92 = !DILocation(line: 138, column: 74, scope: !7)
!93 = !DILocation(line: 139, column: 33, scope: !7)
!94 = !DILocation(line: 139, column: 47, scope: !7)
!95 = !DILocation(line: 141, column: 33, scope: !7)
!96 = !DILocation(line: 141, column: 47, scope: !7)
!97 = !DILocation(line: 143, column: 22, scope: !7)
!98 = !DILocation(line: 144, column: 28, scope: !7)
!99 = !DILocation(line: 146, column: 22, scope: !7)
!100 = !DILocation(line: 150, column: 33, scope: !7)
!101 = !DILocation(line: 150, column: 47, scope: !7)
!102 = !DILocation(line: 152, column: 33, scope: !7)
!103 = !DILocation(line: 152, column: 47, scope: !7)
!104 = !DILocation(line: 163, column: 22, scope: !7)
!105 = !DILocation(line: 164, column: 68, scope: !7)
!106 = !DILocation(line: 164, column: 59, scope: !7)
!107 = !DILocation(line: 164, column: 33, scope: !7)
!108 = !DILocation(line: 164, column: 74, scope: !7)
!109 = !DILocation(line: 165, column: 33, scope: !7)
!110 = !DILocation(line: 165, column: 47, scope: !7)
!111 = !DILocation(line: 167, column: 33, scope: !7)
!112 = !DILocation(line: 167, column: 47, scope: !7)
!113 = !DILocation(line: 169, column: 22, scope: !7)
!114 = !DILocation(line: 170, column: 28, scope: !7)
!115 = !DILocation(line: 172, column: 22, scope: !7)
!116 = !DILocation(line: 176, column: 33, scope: !7)
!117 = !DILocation(line: 176, column: 47, scope: !7)
!118 = !DILocation(line: 178, column: 33, scope: !7)
!119 = !DILocation(line: 178, column: 47, scope: !7)
!120 = !DILocation(line: 189, column: 22, scope: !7)
!121 = !DILocation(line: 190, column: 68, scope: !7)
!122 = !DILocation(line: 190, column: 59, scope: !7)
!123 = !DILocation(line: 190, column: 33, scope: !7)
!124 = !DILocation(line: 190, column: 74, scope: !7)
!125 = !DILocation(line: 191, column: 33, scope: !7)
!126 = !DILocation(line: 191, column: 47, scope: !7)
!127 = !DILocation(line: 193, column: 33, scope: !7)
!128 = !DILocation(line: 193, column: 47, scope: !7)
!129 = !DILocation(line: 195, column: 22, scope: !7)
!130 = !DILocation(line: 196, column: 28, scope: !7)
!131 = !DILocation(line: 198, column: 22, scope: !7)
!132 = !DILocation(line: 202, column: 33, scope: !7)
!133 = !DILocation(line: 202, column: 47, scope: !7)
!134 = !DILocation(line: 204, column: 33, scope: !7)
!135 = !DILocation(line: 204, column: 47, scope: !7)
!136 = !DILocation(line: 212, column: 21, scope: !7)
!137 = !DILocation(line: 215, column: 68, scope: !7)
!138 = !DILocation(line: 215, column: 59, scope: !7)
!139 = !DILocation(line: 215, column: 33, scope: !7)
!140 = !DILocation(line: 215, column: 74, scope: !7)
!141 = !DILocation(line: 216, column: 33, scope: !7)
!142 = !DILocation(line: 216, column: 47, scope: !7)
!143 = !DILocation(line: 218, column: 33, scope: !7)
!144 = !DILocation(line: 218, column: 47, scope: !7)
!145 = !DILocation(line: 220, column: 22, scope: !7)
!146 = !DILocation(line: 221, column: 28, scope: !7)
!147 = !DILocation(line: 223, column: 22, scope: !7)
!148 = !DILocation(line: 227, column: 33, scope: !7)
!149 = !DILocation(line: 227, column: 47, scope: !7)
!150 = !DILocation(line: 229, column: 33, scope: !7)
!151 = !DILocation(line: 229, column: 47, scope: !7)
!152 = !DILocation(line: 217, column: 22, scope: !7)
!153 = !DILocation(line: 226, column: 22, scope: !7)
!154 = !DILocation(line: 228, column: 22, scope: !7)
!155 = !DILocation(line: 230, column: 22, scope: !7)
!156 = !DILocation(line: 121, column: 29, scope: !157, inlinedAt: !159)
!157 = distinct !DILexicalBlockFile(scope: !7, file: !158, discriminator: 0)
!158 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!159 = !DILocation(line: 232, column: 44, scope: !7)
!160 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !161)
!161 = !DILocation(line: 209, column: 44, scope: !7)
!162 = !DILocation(line: 110, column: 15, scope: !157, inlinedAt: !163)
!163 = !DILocation(line: 234, column: 44, scope: !7)
!164 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !161)
!165 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !161)
!166 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !167)
!167 = !DILocation(line: 183, column: 44, scope: !7)
!168 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !167)
!169 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !167)
!170 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !171)
!171 = !DILocation(line: 157, column: 44, scope: !7)
!172 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !171)
!173 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !171)
!174 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !175)
!175 = !DILocation(line: 131, column: 44, scope: !7)
!176 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !175)
!177 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !175)
!178 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !179)
!179 = !DILocation(line: 105, column: 42, scope: !7)
!180 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !179)
!181 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !179)
!182 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !183)
!183 = !DILocation(line: 79, column: 42, scope: !7)
!184 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !183)
!185 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !183)
!186 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !187)
!187 = !DILocation(line: 53, column: 42, scope: !7)
!188 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !187)
!189 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !187)
!190 = !DILocation(line: 112, column: 21, scope: !157, inlinedAt: !163)
!191 = !DILocation(line: 112, column: 16, scope: !157, inlinedAt: !163)
!192 = !DILocation(line: 113, column: 29, scope: !157, inlinedAt: !163)
!193 = !DILocation(line: 236, column: 38, scope: !7)
!194 = !DILocation(line: 0, scope: !7)
!195 = !DILocation(line: 244, column: 25, scope: !7)
!196 = !DILocation(line: 244, column: 38, scope: !7)
!197 = !DILocation(line: 244, column: 4, scope: !7)
