; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 2, !dbg !12
  %27 = and i32 %26, 508, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %30 = or disjoint i32 %28, 2, !dbg !13
  %31 = or disjoint i32 %28, 3, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %32 = sdiv i32 %.frozen, 16, !dbg !14
  %33 = srem i32 %32, 768, !dbg !15
  %34 = mul i32 %32, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %34, !dbg !16
  %35 = srem i32 %29, 16, !dbg !16
  %36 = srem i32 %30, 16, !dbg !16
  %37 = srem i32 %31, 16, !dbg !16
  %38 = sdiv i32 %28, 12288, !dbg !17
  %39 = icmp slt i32 %33, 192, !dbg !18
  %40 = mul nsw i32 %.decomposed, 192, !dbg !19
  %41 = mul nsw i32 %35, 192, !dbg !19
  %42 = mul nsw i32 %36, 192, !dbg !19
  %43 = mul nsw i32 %37, 192, !dbg !19
  %44 = mul nsw i32 %38, 3072, !dbg !20
  %45 = add nsw i32 %40, %44, !dbg !21
  %46 = add nsw i32 %44, %41, !dbg !21
  %47 = add nsw i32 %44, %42, !dbg !21
  %48 = add nsw i32 %44, %43, !dbg !21
  %49 = add nsw i32 %45, %33, !dbg !22
  %50 = add nsw i32 %46, %33, !dbg !22
  %51 = add nsw i32 %47, %33, !dbg !22
  %52 = add nsw i32 %48, %33, !dbg !22
  %53 = sext i32 %49 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %50 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %51 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %52 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %39, i32 0, i1 %39) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %39, i32 0, i1 %39) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %39, i32 0, i1 %39) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %39, i32 0, i1 %39) #3, !dbg !24
  %65 = sext i32 %33 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %39, i32 0, i1 %39) #3, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %39, i32 0, i1 %39) #3, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %39, i32 0, i1 %39) #3, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %39, i32 0, i1 %39) #3, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %39, i32 0, i1 %39) #3, !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %39, i32 0, i1 %39) #3, !dbg !28
  %75 = bitcast i32 %74 to float, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %39, i32 0, i1 %39) #3, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %39, i32 0, i1 %39) #3, !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = fadd float %73, 0x3EE4F8B580000000, !dbg !29
  %81 = fadd float %75, 0x3EE4F8B580000000, !dbg !29
  %82 = fadd float %77, 0x3EE4F8B580000000, !dbg !29
  %83 = fadd float %79, 0x3EE4F8B580000000, !dbg !29
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %84, 0, !dbg !30
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %85, 0, !dbg !30
  br i1 %.not.i, label %91, label %86, !dbg !30

86:                                               ; preds = %22
  br i1 %.not1.i, label %89, label %87, !dbg !30

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

91:                                               ; preds = %22
  br i1 %.not1.i, label %94, label %92, !dbg !30

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !30
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %96, 0, !dbg !30
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %97, 0, !dbg !30
  br i1 %.not.i1, label %103, label %98, !dbg !30

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !30

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !30

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %99, %101, %104, %106
  %.0.i3 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !30
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %108, 0, !dbg !30
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %109, 0, !dbg !30
  br i1 %.not.i6, label %115, label %110, !dbg !30

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !30

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

115:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %118, label %116, !dbg !30

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %111, %113, %116, %118
  %.0.i8 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !30
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %120, 0, !dbg !30
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %121, 0, !dbg !30
  br i1 %.not.i11, label %127, label %122, !dbg !30

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !30

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

127:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %130, label %128, !dbg !30

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %123, %125, %128, %130
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !30
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !32
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %39, i32 0, i1 %39) #3, !dbg !33
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %39, i32 0, i1 %39) #3, !dbg !33
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %39, i32 0, i1 %39) #3, !dbg !33
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %39, i32 0, i1 %39) #3, !dbg !33
  %141 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !34
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %39, i32 0, i1 %39) #3, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %39, i32 0, i1 %39) #3, !dbg !35
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %39, i32 0, i1 %39) #3, !dbg !35
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %39, i32 0, i1 %39) #3, !dbg !35
  %146 = add nsw i32 %33, -192, !dbg !36
  %147 = icmp ult i32 %146, 192, !dbg !36
  %148 = add nsw i32 %45, %146, !dbg !37
  %149 = add nsw i32 %46, %146, !dbg !37
  %150 = add nsw i32 %47, %146, !dbg !37
  %151 = add nsw i32 %48, %146, !dbg !37
  %152 = sext i32 %148 to i64, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !38
  %154 = sext i32 %149 to i64, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %5, i64 %154, !dbg !38
  %156 = sext i32 %150 to i64, !dbg !38
  %157 = getelementptr float, ptr addrspace(1) %5, i64 %156, !dbg !38
  %158 = sext i32 %151 to i64, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %5, i64 %158, !dbg !38
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %147, i32 0, i1 %147) #3, !dbg !39
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %147, i32 0, i1 %147) #3, !dbg !39
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %147, i32 0, i1 %147) #3, !dbg !39
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %147, i32 0, i1 %147) #3, !dbg !39
  %164 = sext i32 %146 to i64, !dbg !40
  %165 = getelementptr float, ptr addrspace(1) %6, i64 %164, !dbg !40
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %147, i32 0, i1 %147) #3, !dbg !41
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %147, i32 0, i1 %147) #3, !dbg !41
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %147, i32 0, i1 %147) #3, !dbg !41
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %147, i32 0, i1 %147) #3, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %7, i64 %164, !dbg !42
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %147, i32 0, i1 %147) #3, !dbg !43
  %172 = bitcast i32 %171 to float, !dbg !43
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %147, i32 0, i1 %147) #3, !dbg !43
  %174 = bitcast i32 %173 to float, !dbg !43
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %147, i32 0, i1 %147) #3, !dbg !43
  %176 = bitcast i32 %175 to float, !dbg !43
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %147, i32 0, i1 %147) #3, !dbg !43
  %178 = bitcast i32 %177 to float, !dbg !43
  %179 = fadd float %172, 0x3EE4F8B580000000, !dbg !44
  %180 = fadd float %174, 0x3EE4F8B580000000, !dbg !44
  %181 = fadd float %176, 0x3EE4F8B580000000, !dbg !44
  %182 = fadd float %178, 0x3EE4F8B580000000, !dbg !44
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i16 = icmp eq i32 %183, 0, !dbg !45
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i19 = icmp eq i32 %184, 0, !dbg !45
  br i1 %.not.i16, label %190, label %185, !dbg !45

185:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %188, label %186, !dbg !45

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

190:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %193, label %191, !dbg !45

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %186, %188, %191, %193
  %.0.i18 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !45
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i21 = icmp eq i32 %195, 0, !dbg !45
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i24 = icmp eq i32 %196, 0, !dbg !45
  br i1 %.not.i21, label %202, label %197, !dbg !45

197:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %200, label %198, !dbg !45

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

202:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %205, label %203, !dbg !45

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

__nv_sqrtf.exit25:                                ; preds = %198, %200, %203, %205
  %.0.i23 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !45
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i26 = icmp eq i32 %207, 0, !dbg !45
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i29 = icmp eq i32 %208, 0, !dbg !45
  br i1 %.not.i26, label %214, label %209, !dbg !45

209:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %212, label %210, !dbg !45

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

214:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %217, label %215, !dbg !45

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

__nv_sqrtf.exit30:                                ; preds = %210, %212, %215, %217
  %.0.i28 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !45
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i31 = icmp eq i32 %219, 0, !dbg !45
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i34 = icmp eq i32 %220, 0, !dbg !45
  br i1 %.not.i31, label %226, label %221, !dbg !45

221:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %224, label %222, !dbg !45

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

226:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %229, label %227, !dbg !45

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

__nv_sqrtf.exit35:                                ; preds = %222, %224, %227, %229
  %.0.i33 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !45
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !46
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !46
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !46
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !46
  %235 = getelementptr float, ptr addrspace(1) %8, i64 %164, !dbg !47
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %147, i32 0, i1 %147) #3, !dbg !48
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %147, i32 0, i1 %147) #3, !dbg !48
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %147, i32 0, i1 %147) #3, !dbg !48
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %147, i32 0, i1 %147) #3, !dbg !48
  %240 = getelementptr float, ptr addrspace(1) %9, i64 %164, !dbg !49
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %147, i32 0, i1 %147) #3, !dbg !50
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %147, i32 0, i1 %147) #3, !dbg !50
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %147, i32 0, i1 %147) #3, !dbg !50
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %147, i32 0, i1 %147) #3, !dbg !50
  %245 = add nsw i32 %33, -384, !dbg !51
  %246 = icmp ult i32 %245, 192, !dbg !51
  %247 = add nsw i32 %45, %245, !dbg !52
  %248 = add nsw i32 %46, %245, !dbg !52
  %249 = add nsw i32 %47, %245, !dbg !52
  %250 = add nsw i32 %48, %245, !dbg !52
  %251 = sext i32 %247 to i64, !dbg !53
  %252 = getelementptr float, ptr addrspace(1) %10, i64 %251, !dbg !53
  %253 = sext i32 %248 to i64, !dbg !53
  %254 = getelementptr float, ptr addrspace(1) %10, i64 %253, !dbg !53
  %255 = sext i32 %249 to i64, !dbg !53
  %256 = getelementptr float, ptr addrspace(1) %10, i64 %255, !dbg !53
  %257 = sext i32 %250 to i64, !dbg !53
  %258 = getelementptr float, ptr addrspace(1) %10, i64 %257, !dbg !53
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %246, i32 0, i1 %246) #3, !dbg !54
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %246, i32 0, i1 %246) #3, !dbg !54
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %246, i32 0, i1 %246) #3, !dbg !54
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %246, i32 0, i1 %246) #3, !dbg !54
  %263 = sext i32 %245 to i64, !dbg !55
  %264 = getelementptr float, ptr addrspace(1) %11, i64 %263, !dbg !55
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %246, i32 0, i1 %246) #3, !dbg !56
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %246, i32 0, i1 %246) #3, !dbg !56
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %246, i32 0, i1 %246) #3, !dbg !56
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %246, i32 0, i1 %246) #3, !dbg !56
  %269 = getelementptr float, ptr addrspace(1) %12, i64 %263, !dbg !57
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %246, i32 0, i1 %246) #3, !dbg !58
  %271 = bitcast i32 %270 to float, !dbg !58
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %246, i32 0, i1 %246) #3, !dbg !58
  %273 = bitcast i32 %272 to float, !dbg !58
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %246, i32 0, i1 %246) #3, !dbg !58
  %275 = bitcast i32 %274 to float, !dbg !58
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %246, i32 0, i1 %246) #3, !dbg !58
  %277 = bitcast i32 %276 to float, !dbg !58
  %278 = fadd float %271, 0x3EE4F8B580000000, !dbg !59
  %279 = fadd float %273, 0x3EE4F8B580000000, !dbg !59
  %280 = fadd float %275, 0x3EE4F8B580000000, !dbg !59
  %281 = fadd float %277, 0x3EE4F8B580000000, !dbg !59
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i36 = icmp eq i32 %282, 0, !dbg !60
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i39 = icmp eq i32 %283, 0, !dbg !60
  br i1 %.not.i36, label %289, label %284, !dbg !60

284:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %287, label %285, !dbg !60

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

289:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %292, label %290, !dbg !60

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #3, !dbg !60
  br label %__nv_sqrtf.exit40, !dbg !60

__nv_sqrtf.exit40:                                ; preds = %285, %287, %290, %292
  %.0.i38 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !60
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i41 = icmp eq i32 %294, 0, !dbg !60
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i44 = icmp eq i32 %295, 0, !dbg !60
  br i1 %.not.i41, label %301, label %296, !dbg !60

296:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %299, label %297, !dbg !60

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

301:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %304, label %302, !dbg !60

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

__nv_sqrtf.exit45:                                ; preds = %297, %299, %302, %304
  %.0.i43 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !60
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i46 = icmp eq i32 %306, 0, !dbg !60
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i49 = icmp eq i32 %307, 0, !dbg !60
  br i1 %.not.i46, label %313, label %308, !dbg !60

308:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %311, label %309, !dbg !60

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

313:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %316, label %314, !dbg !60

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

__nv_sqrtf.exit50:                                ; preds = %309, %311, %314, %316
  %.0.i48 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !60
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i51 = icmp eq i32 %318, 0, !dbg !60
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i54 = icmp eq i32 %319, 0, !dbg !60
  br i1 %.not.i51, label %325, label %320, !dbg !60

320:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %323, label %321, !dbg !60

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

325:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %328, label %326, !dbg !60

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

__nv_sqrtf.exit55:                                ; preds = %321, %323, %326, %328
  %.0.i53 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !60
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !61
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !61
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !61
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !61
  %334 = getelementptr float, ptr addrspace(1) %13, i64 %263, !dbg !62
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %246, i32 0, i1 %246) #3, !dbg !63
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %246, i32 0, i1 %246) #3, !dbg !63
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %246, i32 0, i1 %246) #3, !dbg !63
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %246, i32 0, i1 %246) #3, !dbg !63
  %339 = getelementptr float, ptr addrspace(1) %14, i64 %263, !dbg !64
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %246, i32 0, i1 %246) #3, !dbg !65
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %246, i32 0, i1 %246) #3, !dbg !65
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %246, i32 0, i1 %246) #3, !dbg !65
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %246, i32 0, i1 %246) #3, !dbg !65
  %344 = icmp sgt i32 %33, 575, !dbg !66
  %345 = add nsw i32 %33, -576, !dbg !67
  %346 = add nsw i32 %45, %345, !dbg !68
  %347 = add nsw i32 %46, %345, !dbg !68
  %348 = add nsw i32 %47, %345, !dbg !68
  %349 = add nsw i32 %48, %345, !dbg !68
  %350 = sext i32 %346 to i64, !dbg !69
  %351 = getelementptr float, ptr addrspace(1) %15, i64 %350, !dbg !69
  %352 = sext i32 %347 to i64, !dbg !69
  %353 = getelementptr float, ptr addrspace(1) %15, i64 %352, !dbg !69
  %354 = sext i32 %348 to i64, !dbg !69
  %355 = getelementptr float, ptr addrspace(1) %15, i64 %354, !dbg !69
  %356 = sext i32 %349 to i64, !dbg !69
  %357 = getelementptr float, ptr addrspace(1) %15, i64 %356, !dbg !69
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %344, i32 0, i1 %344) #3, !dbg !70
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %344, i32 0, i1 %344) #3, !dbg !70
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %344, i32 0, i1 %344) #3, !dbg !70
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %344, i32 0, i1 %344) #3, !dbg !70
  %362 = sext i32 %345 to i64, !dbg !71
  %363 = getelementptr float, ptr addrspace(1) %16, i64 %362, !dbg !71
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %344, i32 0, i1 %344) #3, !dbg !72
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %344, i32 0, i1 %344) #3, !dbg !72
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %344, i32 0, i1 %344) #3, !dbg !72
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %344, i32 0, i1 %344) #3, !dbg !72
  %368 = getelementptr float, ptr addrspace(1) %17, i64 %362, !dbg !73
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %344, i32 0, i1 %344) #3, !dbg !74
  %370 = bitcast i32 %369 to float, !dbg !74
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %344, i32 0, i1 %344) #3, !dbg !74
  %372 = bitcast i32 %371 to float, !dbg !74
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %344, i32 0, i1 %344) #3, !dbg !74
  %374 = bitcast i32 %373 to float, !dbg !74
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %344, i32 0, i1 %344) #3, !dbg !74
  %376 = bitcast i32 %375 to float, !dbg !74
  %377 = fadd float %370, 0x3EE4F8B580000000, !dbg !75
  %378 = fadd float %372, 0x3EE4F8B580000000, !dbg !75
  %379 = fadd float %374, 0x3EE4F8B580000000, !dbg !75
  %380 = fadd float %376, 0x3EE4F8B580000000, !dbg !75
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i56 = icmp eq i32 %381, 0, !dbg !76
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i59 = icmp eq i32 %382, 0, !dbg !76
  br i1 %.not.i56, label %388, label %383, !dbg !76

383:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %386, label %384, !dbg !76

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %377) #3, !dbg !76
  br label %__nv_sqrtf.exit60, !dbg !76

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %377) #3, !dbg !76
  br label %__nv_sqrtf.exit60, !dbg !76

388:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %391, label %389, !dbg !76

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.f(float %377) #3, !dbg !76
  br label %__nv_sqrtf.exit60, !dbg !76

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.f(float %377) #3, !dbg !76
  br label %__nv_sqrtf.exit60, !dbg !76

__nv_sqrtf.exit60:                                ; preds = %384, %386, %389, %391
  %.0.i58 = phi float [ %385, %384 ], [ %387, %386 ], [ %390, %389 ], [ %392, %391 ], !dbg !76
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i61 = icmp eq i32 %393, 0, !dbg !76
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i64 = icmp eq i32 %394, 0, !dbg !76
  br i1 %.not.i61, label %400, label %395, !dbg !76

395:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %398, label %396, !dbg !76

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %378) #3, !dbg !76
  br label %__nv_sqrtf.exit65, !dbg !76

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %378) #3, !dbg !76
  br label %__nv_sqrtf.exit65, !dbg !76

400:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %403, label %401, !dbg !76

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.f(float %378) #3, !dbg !76
  br label %__nv_sqrtf.exit65, !dbg !76

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.f(float %378) #3, !dbg !76
  br label %__nv_sqrtf.exit65, !dbg !76

__nv_sqrtf.exit65:                                ; preds = %396, %398, %401, %403
  %.0.i63 = phi float [ %397, %396 ], [ %399, %398 ], [ %402, %401 ], [ %404, %403 ], !dbg !76
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i66 = icmp eq i32 %405, 0, !dbg !76
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i69 = icmp eq i32 %406, 0, !dbg !76
  br i1 %.not.i66, label %412, label %407, !dbg !76

407:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %410, label %408, !dbg !76

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %379) #3, !dbg !76
  br label %__nv_sqrtf.exit70, !dbg !76

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %379) #3, !dbg !76
  br label %__nv_sqrtf.exit70, !dbg !76

412:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %415, label %413, !dbg !76

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %379) #3, !dbg !76
  br label %__nv_sqrtf.exit70, !dbg !76

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %379) #3, !dbg !76
  br label %__nv_sqrtf.exit70, !dbg !76

__nv_sqrtf.exit70:                                ; preds = %408, %410, %413, %415
  %.0.i68 = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !76
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i71 = icmp eq i32 %417, 0, !dbg !76
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i74 = icmp eq i32 %418, 0, !dbg !76
  br i1 %.not.i71, label %424, label %419, !dbg !76

419:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %422, label %420, !dbg !76

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %380) #3, !dbg !76
  br label %__nv_sqrtf.exit75, !dbg !76

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %380) #3, !dbg !76
  br label %__nv_sqrtf.exit75, !dbg !76

424:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %427, label %425, !dbg !76

425:                                              ; preds = %424
  %426 = tail call float @llvm.nvvm.sqrt.rn.f(float %380) #3, !dbg !76
  br label %__nv_sqrtf.exit75, !dbg !76

427:                                              ; preds = %424
  %428 = tail call float @llvm.nvvm.sqrt.approx.f(float %380) #3, !dbg !76
  br label %__nv_sqrtf.exit75, !dbg !76

__nv_sqrtf.exit75:                                ; preds = %420, %422, %425, %427
  %.0.i73 = phi float [ %421, %420 ], [ %423, %422 ], [ %426, %425 ], [ %428, %427 ], !dbg !76
  %429 = insertelement <16 x i32> poison, i32 %361, i64 0, !dbg !70
  %430 = insertelement <16 x i32> %429, i32 %360, i64 1, !dbg !70
  %431 = insertelement <16 x i32> %430, i32 %359, i64 2, !dbg !70
  %432 = insertelement <16 x i32> %431, i32 %358, i64 3, !dbg !70
  %433 = insertelement <16 x i32> %432, i32 %61, i64 4, !dbg !70
  %434 = insertelement <16 x i32> %433, i32 %62, i64 5, !dbg !70
  %435 = insertelement <16 x i32> %434, i32 %63, i64 6, !dbg !70
  %436 = insertelement <16 x i32> %435, i32 %64, i64 7, !dbg !70
  %437 = insertelement <16 x i32> %436, i32 %160, i64 8, !dbg !70
  %438 = insertelement <16 x i32> %437, i32 %161, i64 9, !dbg !70
  %439 = insertelement <16 x i32> %438, i32 %162, i64 10, !dbg !70
  %440 = insertelement <16 x i32> %439, i32 %163, i64 11, !dbg !70
  %441 = insertelement <16 x i32> %440, i32 %259, i64 12, !dbg !70
  %442 = insertelement <16 x i32> %441, i32 %260, i64 13, !dbg !70
  %443 = insertelement <16 x i32> %442, i32 %261, i64 14, !dbg !70
  %444 = insertelement <16 x i32> %443, i32 %262, i64 15, !dbg !70
  %445 = bitcast <16 x i32> %444 to <16 x float>, !dbg !70
  %446 = insertelement <16 x i32> poison, i32 %367, i64 0, !dbg !72
  %447 = insertelement <16 x i32> %446, i32 %366, i64 1, !dbg !72
  %448 = insertelement <16 x i32> %447, i32 %365, i64 2, !dbg !72
  %449 = insertelement <16 x i32> %448, i32 %364, i64 3, !dbg !72
  %450 = insertelement <16 x i32> %449, i32 %67, i64 4, !dbg !72
  %451 = insertelement <16 x i32> %450, i32 %68, i64 5, !dbg !72
  %452 = insertelement <16 x i32> %451, i32 %69, i64 6, !dbg !72
  %453 = insertelement <16 x i32> %452, i32 %70, i64 7, !dbg !72
  %454 = insertelement <16 x i32> %453, i32 %166, i64 8, !dbg !72
  %455 = insertelement <16 x i32> %454, i32 %167, i64 9, !dbg !72
  %456 = insertelement <16 x i32> %455, i32 %168, i64 10, !dbg !72
  %457 = insertelement <16 x i32> %456, i32 %169, i64 11, !dbg !72
  %458 = insertelement <16 x i32> %457, i32 %265, i64 12, !dbg !72
  %459 = insertelement <16 x i32> %458, i32 %266, i64 13, !dbg !72
  %460 = insertelement <16 x i32> %459, i32 %267, i64 14, !dbg !72
  %461 = insertelement <16 x i32> %460, i32 %268, i64 15, !dbg !72
  %462 = bitcast <16 x i32> %461 to <16 x float>, !dbg !72
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !77
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !77
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !77
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !77
  %467 = getelementptr float, ptr addrspace(1) %18, i64 %362, !dbg !78
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %344, i32 0, i1 %344) #3, !dbg !79
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %344, i32 0, i1 %344) #3, !dbg !79
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %344, i32 0, i1 %344) #3, !dbg !79
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %344, i32 0, i1 %344) #3, !dbg !79
  %472 = getelementptr float, ptr addrspace(1) %19, i64 %362, !dbg !80
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %344, i32 0, i1 %344) #3, !dbg !81
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %344, i32 0, i1 %344) #3, !dbg !81
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %344, i32 0, i1 %344) #3, !dbg !81
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %344, i32 0, i1 %344) #3, !dbg !81
  %477 = fsub <16 x float> %445, %462, !dbg !82
  %478 = insertelement <16 x float> poison, float %466, i64 0, !dbg !83
  %479 = insertelement <16 x float> %478, float %465, i64 1, !dbg !83
  %480 = insertelement <16 x float> %479, float %464, i64 2, !dbg !83
  %481 = insertelement <16 x float> %480, float %463, i64 3, !dbg !83
  %482 = insertelement <16 x float> %481, float %132, i64 4, !dbg !83
  %483 = insertelement <16 x float> %482, float %133, i64 5, !dbg !83
  %484 = insertelement <16 x float> %483, float %134, i64 6, !dbg !83
  %485 = insertelement <16 x float> %484, float %135, i64 7, !dbg !83
  %486 = insertelement <16 x float> %485, float %231, i64 8, !dbg !83
  %487 = insertelement <16 x float> %486, float %232, i64 9, !dbg !83
  %488 = insertelement <16 x float> %487, float %233, i64 10, !dbg !83
  %489 = insertelement <16 x float> %488, float %234, i64 11, !dbg !83
  %490 = insertelement <16 x float> %489, float %330, i64 12, !dbg !83
  %491 = insertelement <16 x float> %490, float %331, i64 13, !dbg !83
  %492 = insertelement <16 x float> %491, float %332, i64 14, !dbg !83
  %493 = insertelement <16 x float> %492, float %333, i64 15, !dbg !83
  %494 = fmul <16 x float> %477, %493, !dbg !83
  %495 = insertelement <16 x i32> poison, i32 %471, i64 0, !dbg !79
  %496 = insertelement <16 x i32> %495, i32 %470, i64 1, !dbg !79
  %497 = insertelement <16 x i32> %496, i32 %469, i64 2, !dbg !79
  %498 = insertelement <16 x i32> %497, i32 %468, i64 3, !dbg !79
  %499 = insertelement <16 x i32> %498, i32 %137, i64 4, !dbg !79
  %500 = insertelement <16 x i32> %499, i32 %138, i64 5, !dbg !79
  %501 = insertelement <16 x i32> %500, i32 %139, i64 6, !dbg !79
  %502 = insertelement <16 x i32> %501, i32 %140, i64 7, !dbg !79
  %503 = insertelement <16 x i32> %502, i32 %236, i64 8, !dbg !79
  %504 = insertelement <16 x i32> %503, i32 %237, i64 9, !dbg !79
  %505 = insertelement <16 x i32> %504, i32 %238, i64 10, !dbg !79
  %506 = insertelement <16 x i32> %505, i32 %239, i64 11, !dbg !79
  %507 = insertelement <16 x i32> %506, i32 %335, i64 12, !dbg !79
  %508 = insertelement <16 x i32> %507, i32 %336, i64 13, !dbg !79
  %509 = insertelement <16 x i32> %508, i32 %337, i64 14, !dbg !79
  %510 = insertelement <16 x i32> %509, i32 %338, i64 15, !dbg !79
  %511 = bitcast <16 x i32> %510 to <16 x float>, !dbg !79
  %512 = fmul <16 x float> %494, %511, !dbg !84
  %513 = insertelement <16 x i32> poison, i32 %476, i64 0, !dbg !81
  %514 = insertelement <16 x i32> %513, i32 %475, i64 1, !dbg !81
  %515 = insertelement <16 x i32> %514, i32 %474, i64 2, !dbg !81
  %516 = insertelement <16 x i32> %515, i32 %473, i64 3, !dbg !81
  %517 = insertelement <16 x i32> %516, i32 %142, i64 4, !dbg !81
  %518 = insertelement <16 x i32> %517, i32 %143, i64 5, !dbg !81
  %519 = insertelement <16 x i32> %518, i32 %144, i64 6, !dbg !81
  %520 = insertelement <16 x i32> %519, i32 %145, i64 7, !dbg !81
  %521 = insertelement <16 x i32> %520, i32 %241, i64 8, !dbg !81
  %522 = insertelement <16 x i32> %521, i32 %242, i64 9, !dbg !81
  %523 = insertelement <16 x i32> %522, i32 %243, i64 10, !dbg !81
  %524 = insertelement <16 x i32> %523, i32 %244, i64 11, !dbg !81
  %525 = insertelement <16 x i32> %524, i32 %340, i64 12, !dbg !81
  %526 = insertelement <16 x i32> %525, i32 %341, i64 13, !dbg !81
  %527 = insertelement <16 x i32> %526, i32 %342, i64 14, !dbg !81
  %528 = insertelement <16 x i32> %527, i32 %343, i64 15, !dbg !81
  %529 = bitcast <16 x i32> %528 to <16 x float>, !dbg !81
  %530 = fadd <16 x float> %512, %529, !dbg !85
  %531 = fcmp olt <16 x float> %530, zeroinitializer, !dbg !86
  %532 = extractelement <16 x i1> %531, i64 15, !dbg !90
  %533 = extractelement <16 x float> %530, i64 15, !dbg !90
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !90
  %535 = extractelement <16 x i1> %531, i64 14, !dbg !90
  %536 = extractelement <16 x float> %530, i64 14, !dbg !90
  %537 = select i1 %535, float 0.000000e+00, float %536, !dbg !90
  %538 = extractelement <16 x i1> %531, i64 13, !dbg !90
  %539 = extractelement <16 x float> %530, i64 13, !dbg !90
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !90
  %541 = extractelement <16 x i1> %531, i64 12, !dbg !90
  %542 = extractelement <16 x float> %530, i64 12, !dbg !90
  %543 = select i1 %541, float 0.000000e+00, float %542, !dbg !90
  %544 = extractelement <16 x i1> %531, i64 11, !dbg !92
  %545 = extractelement <16 x float> %530, i64 11, !dbg !92
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !92
  %547 = extractelement <16 x i1> %531, i64 10, !dbg !92
  %548 = extractelement <16 x float> %530, i64 10, !dbg !92
  %549 = select i1 %547, float 0.000000e+00, float %548, !dbg !92
  %550 = extractelement <16 x i1> %531, i64 9, !dbg !92
  %551 = extractelement <16 x float> %530, i64 9, !dbg !92
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !92
  %553 = extractelement <16 x i1> %531, i64 8, !dbg !92
  %554 = extractelement <16 x float> %530, i64 8, !dbg !92
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !92
  %556 = extractelement <16 x i1> %531, i64 7, !dbg !94
  %557 = extractelement <16 x float> %530, i64 7, !dbg !94
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !94
  %559 = extractelement <16 x i1> %531, i64 6, !dbg !94
  %560 = extractelement <16 x float> %530, i64 6, !dbg !94
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !94
  %562 = extractelement <16 x i1> %531, i64 5, !dbg !94
  %563 = extractelement <16 x float> %530, i64 5, !dbg !94
  %564 = select i1 %562, float 0.000000e+00, float %563, !dbg !94
  %565 = extractelement <16 x i1> %531, i64 4, !dbg !94
  %566 = extractelement <16 x float> %530, i64 4, !dbg !94
  %567 = select i1 %565, float 0.000000e+00, float %566, !dbg !94
  %568 = extractelement <16 x i1> %531, i64 3, !dbg !96
  %569 = extractelement <16 x float> %530, i64 3, !dbg !96
  %570 = select i1 %568, float 0.000000e+00, float %569, !dbg !96
  %571 = extractelement <16 x i1> %531, i64 2, !dbg !96
  %572 = extractelement <16 x float> %530, i64 2, !dbg !96
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !96
  %574 = extractelement <16 x i1> %531, i64 1, !dbg !96
  %575 = extractelement <16 x float> %530, i64 1, !dbg !96
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !96
  %577 = extractelement <16 x i1> %531, i64 0, !dbg !96
  %578 = extractelement <16 x float> %530, i64 0, !dbg !96
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !96
  %580 = select i1 %344, float %570, float 0.000000e+00, !dbg !97
  %581 = select i1 %344, float %573, float 0.000000e+00, !dbg !97
  %582 = select i1 %344, float %576, float 0.000000e+00, !dbg !97
  %583 = select i1 %344, float %579, float 0.000000e+00, !dbg !97
  %584 = select i1 %246, float %543, float %580, !dbg !98
  %585 = select i1 %246, float %540, float %581, !dbg !98
  %586 = select i1 %246, float %537, float %582, !dbg !98
  %587 = select i1 %246, float %534, float %583, !dbg !98
  %588 = select i1 %147, float %555, float %584, !dbg !98
  %589 = select i1 %147, float %552, float %585, !dbg !98
  %590 = select i1 %147, float %549, float %586, !dbg !98
  %591 = select i1 %147, float %546, float %587, !dbg !98
  %592 = select i1 %39, float %567, float %588, !dbg !98
  %593 = select i1 %39, float %564, float %589, !dbg !98
  %594 = select i1 %39, float %561, float %590, !dbg !98
  %595 = select i1 %39, float %558, float %591, !dbg !98
  %596 = sext i32 %28 to i64, !dbg !99
  %597 = getelementptr float, ptr addrspace(1) %20, i64 %596, !dbg !99
  %598 = bitcast float %592 to i32, !dbg !100
  %599 = bitcast float %593 to i32, !dbg !100
  %600 = bitcast float %594 to i32, !dbg !100
  %601 = bitcast float %595 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %598, i32 %599, i32 %600, i32 %601, ptr addrspace(1) %597, i1 true) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz4o2cjpyqrmkogjky22hhq24fqmsxdafggvqrb3g5smw263uemr.py", directory: "inductor_cache/z4")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 56, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 56, column: 20, scope: !7)
!37 = !DILocation(line: 57, column: 51, scope: !7)
!38 = !DILocation(line: 57, column: 31, scope: !7)
!39 = !DILocation(line: 57, column: 66, scope: !7)
!40 = !DILocation(line: 58, column: 31, scope: !7)
!41 = !DILocation(line: 58, column: 45, scope: !7)
!42 = !DILocation(line: 60, column: 31, scope: !7)
!43 = !DILocation(line: 60, column: 45, scope: !7)
!44 = !DILocation(line: 62, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 27, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 69, column: 45, scope: !7)
!49 = !DILocation(line: 71, column: 31, scope: !7)
!50 = !DILocation(line: 71, column: 45, scope: !7)
!51 = !DILocation(line: 80, column: 20, scope: !7)
!52 = !DILocation(line: 81, column: 52, scope: !7)
!53 = !DILocation(line: 81, column: 32, scope: !7)
!54 = !DILocation(line: 81, column: 67, scope: !7)
!55 = !DILocation(line: 82, column: 32, scope: !7)
!56 = !DILocation(line: 82, column: 46, scope: !7)
!57 = !DILocation(line: 84, column: 32, scope: !7)
!58 = !DILocation(line: 84, column: 46, scope: !7)
!59 = !DILocation(line: 86, column: 20, scope: !7)
!60 = !DILocation(line: 87, column: 27, scope: !7)
!61 = !DILocation(line: 89, column: 20, scope: !7)
!62 = !DILocation(line: 93, column: 32, scope: !7)
!63 = !DILocation(line: 93, column: 46, scope: !7)
!64 = !DILocation(line: 95, column: 32, scope: !7)
!65 = !DILocation(line: 95, column: 46, scope: !7)
!66 = !DILocation(line: 101, column: 20, scope: !7)
!67 = !DILocation(line: 104, column: 61, scope: !7)
!68 = !DILocation(line: 104, column: 52, scope: !7)
!69 = !DILocation(line: 104, column: 32, scope: !7)
!70 = !DILocation(line: 104, column: 67, scope: !7)
!71 = !DILocation(line: 105, column: 32, scope: !7)
!72 = !DILocation(line: 105, column: 46, scope: !7)
!73 = !DILocation(line: 107, column: 32, scope: !7)
!74 = !DILocation(line: 107, column: 46, scope: !7)
!75 = !DILocation(line: 109, column: 20, scope: !7)
!76 = !DILocation(line: 110, column: 27, scope: !7)
!77 = !DILocation(line: 112, column: 20, scope: !7)
!78 = !DILocation(line: 116, column: 32, scope: !7)
!79 = !DILocation(line: 116, column: 46, scope: !7)
!80 = !DILocation(line: 118, column: 32, scope: !7)
!81 = !DILocation(line: 118, column: 46, scope: !7)
!82 = !DILocation(line: 106, column: 20, scope: !7)
!83 = !DILocation(line: 115, column: 20, scope: !7)
!84 = !DILocation(line: 117, column: 20, scope: !7)
!85 = !DILocation(line: 119, column: 20, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 121, column: 42, scope: !7)
!90 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !91)
!91 = !DILocation(line: 98, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !93)
!93 = !DILocation(line: 74, column: 42, scope: !7)
!94 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !95)
!95 = !DILocation(line: 50, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!97 = !DILocation(line: 123, column: 35, scope: !7)
!98 = !DILocation(line: 0, scope: !7)
!99 = !DILocation(line: 127, column: 25, scope: !7)
!100 = !DILocation(line: 127, column: 37, scope: !7)
!101 = !DILocation(line: 127, column: 4, scope: !7)
