; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_linalg_vector_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = and i32 %4, 63, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !11
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !12
  %11 = bitcast i32 %10 to float, !dbg !12
  %12 = or disjoint i32 %7, 64, !dbg !13
  %13 = zext nneg i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #5, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = or disjoint i32 %7, 128, !dbg !16
  %18 = zext nneg i32 %17 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = or disjoint i32 %7, 192, !dbg !19
  %23 = zext nneg i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = fmul float %11, %11, !dbg !22
  %28 = bitcast float %27 to i32, !dbg !23
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = fadd float %27, %30, !dbg !27
  %32 = bitcast float %31 to i32, !dbg !23
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = fadd float %31, %34, !dbg !27
  %36 = bitcast float %35 to i32, !dbg !23
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = fadd float %35, %38, !dbg !27
  %40 = bitcast float %39 to i32, !dbg !23
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = fadd float %39, %42, !dbg !27
  %44 = bitcast float %43 to i32, !dbg !23
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !23
  %46 = bitcast i32 %45 to float, !dbg !23
  %47 = fadd float %43, %46, !dbg !27
  %48 = icmp eq i32 %5, 0, !dbg !23
  %49 = and i32 %6, 1, !dbg !23
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %49, !dbg !23
  %51 = bitcast float %47 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 %48) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %52 = icmp slt i32 %4, 2, !dbg !23
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %4, !dbg !23
  %54 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %52) #5, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fadd float %55, %57, !dbg !27
  %59 = and i32 %4, 1, !dbg !23
  %60 = icmp eq i32 %59, 0, !dbg !23
  %61 = and i1 %52, %60, !dbg !23
  %62 = bitcast float %58 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %62, i1 %61) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %63 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %64 = fmul float %16, %16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %65 = bitcast float %64 to i32, !dbg !30
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = fadd float %64, %67, !dbg !32
  %69 = bitcast float %68 to i32, !dbg !30
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = fadd float %68, %71, !dbg !32
  %73 = bitcast float %72 to i32, !dbg !30
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = fadd float %72, %75, !dbg !32
  %77 = bitcast float %76 to i32, !dbg !30
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = fadd float %76, %79, !dbg !32
  %81 = bitcast float %80 to i32, !dbg !30
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = fadd float %80, %83, !dbg !32
  %85 = bitcast float %84 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %85, i1 %48) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %52) #5, !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = fadd float %87, %89, !dbg !32
  %91 = bitcast float %90 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %91, i1 %61) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %93 = fmul float %21, %21, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %94 = bitcast float %93 to i32, !dbg !34
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = fadd float %93, %96, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !34
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !34
  %100 = bitcast i32 %99 to float, !dbg !34
  %101 = fadd float %97, %100, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = fadd float %101, %104, !dbg !36
  %106 = bitcast float %105 to i32, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fadd float %105, %108, !dbg !36
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !36
  %114 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %114, i1 %48) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %52) #5, !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = fadd float %116, %118, !dbg !36
  %120 = bitcast float %119 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %120, i1 %61) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %121 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %122 = fmul float %26, %26, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %123 = bitcast float %122 to i32, !dbg !38
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !38
  %125 = bitcast i32 %124 to float, !dbg !38
  %126 = fadd float %122, %125, !dbg !40
  %127 = bitcast float %126 to i32, !dbg !38
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !38
  %129 = bitcast i32 %128 to float, !dbg !38
  %130 = fadd float %126, %129, !dbg !40
  %131 = bitcast float %130 to i32, !dbg !38
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !38
  %133 = bitcast i32 %132 to float, !dbg !38
  %134 = fadd float %130, %133, !dbg !40
  %135 = bitcast float %134 to i32, !dbg !38
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !38
  %137 = bitcast i32 %136 to float, !dbg !38
  %138 = fadd float %134, %137, !dbg !40
  %139 = bitcast float %138 to i32, !dbg !38
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !38
  %141 = bitcast i32 %140 to float, !dbg !38
  %142 = fadd float %138, %141, !dbg !40
  %143 = bitcast float %142 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %143, i1 %48) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %144 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %52) #5, !dbg !38
  %145 = bitcast i32 %144 to float, !dbg !38
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !38
  %147 = bitcast i32 %146 to float, !dbg !38
  %148 = fadd float %145, %147, !dbg !40
  %149 = bitcast float %148 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %149, i1 %61) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %151, 0, !dbg !41
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %152, 0, !dbg !41
  br i1 %.not.i, label %158, label %153, !dbg !41

153:                                              ; preds = %3
  br i1 %.not1.i, label %156, label %154, !dbg !41

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

158:                                              ; preds = %3
  br i1 %.not1.i, label %161, label %159, !dbg !41

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %154, %156, %159, %161
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !41
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i1 = icmp eq i32 %163, 0, !dbg !42
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i4 = icmp eq i32 %164, 0, !dbg !42
  br i1 %.not.i1, label %170, label %165, !dbg !42

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %168, label %166, !dbg !42

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

170:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %173, label %171, !dbg !42

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %166, %168, %171, %173
  %.0.i3 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !42
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i6 = icmp eq i32 %175, 0, !dbg !43
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i9 = icmp eq i32 %176, 0, !dbg !43
  br i1 %.not.i6, label %182, label %177, !dbg !43

177:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %180, label %178, !dbg !43

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

182:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %185, label %183, !dbg !43

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %178, %180, %183, %185
  %.0.i8 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !43
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i11 = icmp eq i32 %187, 0, !dbg !44
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i14 = icmp eq i32 %188, 0, !dbg !44
  br i1 %.not.i11, label %194, label %189, !dbg !44

189:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %192, label %190, !dbg !44

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

194:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %197, label %195, !dbg !44

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %190, %192, %195, %197
  %.0.i13 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !44
  %199 = fadd float %.0.i, %.0.i3, !dbg !45
  %200 = fadd float %199, %.0.i8, !dbg !46
  %201 = fadd float %200, %.0.i13, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %202 = icmp eq i32 %7, 0, !dbg !49
  %203 = bitcast float %201 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %0, i1 %202) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfus57u4isxxkvvjwxql3lrwlduivi6fdejyoeyzu7fiyckfmyep.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_per_fused_add_linalg_vector_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_linalg_vector_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_linalg_vector_norm_0", linkageName: "triton_per_fused_add_linalg_vector_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 40, scope: !7)
!16 = !DILocation(line: 32, column: 37, scope: !7)
!17 = !DILocation(line: 32, column: 31, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 37, scope: !7)
!20 = !DILocation(line: 33, column: 31, scope: !7)
!21 = !DILocation(line: 33, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !31)
!31 = !DILocation(line: 39, column: 24, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 42, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !39)
!39 = !DILocation(line: 45, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 27, scope: !7)
!43 = !DILocation(line: 49, column: 27, scope: !7)
!44 = !DILocation(line: 51, column: 27, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
!49 = !DILocation(line: 54, column: 71, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
