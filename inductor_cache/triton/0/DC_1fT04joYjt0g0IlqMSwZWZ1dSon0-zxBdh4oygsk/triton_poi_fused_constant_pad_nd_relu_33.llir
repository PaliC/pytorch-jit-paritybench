; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 2, !dbg !13
  %11 = or disjoint i32 %9, 512, !dbg !13
  %12 = or disjoint i32 %9, 514, !dbg !13
  %13 = icmp slt i32 %9, 92160, !dbg !14
  %14 = icmp slt i32 %11, 92160, !dbg !14
  %15 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !15
  %16 = insertelement <4 x i32> %15, i32 %11, i64 1, !dbg !15
  %17 = insertelement <4 x i32> %16, i32 %10, i64 2, !dbg !15
  %18 = insertelement <4 x i32> %17, i32 %9, i64 3, !dbg !15
  %.frozen = freeze <4 x i32> %18, !dbg !15
  %19 = sdiv <4 x i32> %.frozen, splat (i32 10), !dbg !15
  %20 = srem <4 x i32> %19, splat (i32 9), !dbg !16
  %21 = mul <4 x i32> %19, splat (i32 10), !dbg !17
  %.decomposed = sub <4 x i32> %.frozen, %21, !dbg !17
  %22 = sdiv i32 %9, 90, !dbg !18
  %23 = sdiv i32 %10, 90, !dbg !18
  %24 = sdiv i32 %11, 90, !dbg !18
  %25 = sdiv i32 %12, 90, !dbg !18
  %26 = icmp sgt <4 x i32> %20, zeroinitializer, !dbg !19
  %27 = add nsw <4 x i32> %.decomposed, splat (i32 -1), !dbg !20
  %28 = icmp ult <4 x i32> %27, splat (i32 8), !dbg !20
  %29 = and <4 x i1> %26, %28, !dbg !20
  %30 = extractelement <4 x i1> %29, i64 3, !dbg !20
  %31 = and <4 x i1> %26, %28, !dbg !20
  %32 = extractelement <4 x i1> %31, i64 2, !dbg !20
  %33 = and <4 x i1> %26, %28, !dbg !20
  %34 = extractelement <4 x i1> %33, i64 1, !dbg !20
  %35 = and <4 x i1> %26, %28, !dbg !20
  %36 = extractelement <4 x i1> %35, i64 0, !dbg !20
  %37 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !13
  %38 = shufflevector <4 x i32> %37, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %39 = or disjoint <4 x i32> %38, <i32 515, i32 513, i32 3, i32 1>, !dbg !13
  %40 = srem <4 x i32> %39, splat (i32 10), !dbg !17
  %41 = icmp ult <4 x i32> %40, splat (i32 9), !dbg !20
  %42 = and <4 x i1> %41, %26, !dbg !20
  %43 = extractelement <4 x i1> %42, i64 3, !dbg !20
  %44 = and <4 x i1> %41, %26, !dbg !20
  %45 = extractelement <4 x i1> %44, i64 2, !dbg !20
  %46 = and <4 x i1> %41, %26, !dbg !20
  %47 = extractelement <4 x i1> %46, i64 1, !dbg !20
  %48 = and <4 x i1> %41, %26, !dbg !20
  %49 = extractelement <4 x i1> %48, i64 0, !dbg !20
  %50 = extractelement <4 x i32> %20, i64 3, !dbg !21
  %51 = shl nsw i32 %50, 3, !dbg !21
  %52 = extractelement <4 x i32> %20, i64 2, !dbg !21
  %53 = shl nsw i32 %52, 3, !dbg !21
  %54 = extractelement <4 x i32> %20, i64 1, !dbg !21
  %55 = shl nsw i32 %54, 3, !dbg !21
  %56 = extractelement <4 x i32> %20, i64 0, !dbg !21
  %57 = shl nsw i32 %56, 3, !dbg !21
  %58 = shl nsw i32 %22, 6, !dbg !22
  %59 = shl nsw i32 %23, 6, !dbg !22
  %60 = shl nsw i32 %24, 6, !dbg !22
  %61 = shl nsw i32 %25, 6, !dbg !22
  %62 = add nsw i32 %58, -9, !dbg !23
  %63 = extractelement <4 x i32> %.decomposed, i64 3, !dbg !24
  %64 = add nsw i32 %62, %63, !dbg !24
  %65 = add nsw i32 %64, %51, !dbg !25
  %66 = extractelement <4 x i32> %40, i64 3, !dbg !24
  %67 = add nsw i32 %62, %66, !dbg !24
  %68 = add nsw i32 %67, %51, !dbg !25
  %69 = add nsw i32 %59, -9, !dbg !23
  %70 = extractelement <4 x i32> %.decomposed, i64 2, !dbg !24
  %71 = add nsw i32 %69, %70, !dbg !24
  %72 = add nsw i32 %71, %53, !dbg !25
  %73 = extractelement <4 x i32> %40, i64 2, !dbg !24
  %74 = add nsw i32 %69, %73, !dbg !24
  %75 = add nsw i32 %74, %53, !dbg !25
  %76 = add nsw i32 %60, -9, !dbg !23
  %77 = extractelement <4 x i32> %.decomposed, i64 1, !dbg !24
  %78 = add nsw i32 %76, %77, !dbg !24
  %79 = add nsw i32 %78, %55, !dbg !25
  %80 = extractelement <4 x i32> %40, i64 1, !dbg !24
  %81 = add nsw i32 %76, %80, !dbg !24
  %82 = add nsw i32 %81, %55, !dbg !25
  %83 = add nsw i32 %61, -9, !dbg !23
  %84 = extractelement <4 x i32> %.decomposed, i64 0, !dbg !24
  %85 = add nsw i32 %83, %84, !dbg !24
  %86 = add nsw i32 %85, %57, !dbg !25
  %87 = extractelement <4 x i32> %40, i64 0, !dbg !24
  %88 = add nsw i32 %83, %87, !dbg !24
  %89 = add nsw i32 %88, %57, !dbg !25
  %90 = sext i32 %65 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !26
  %92 = sext i32 %68 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !26
  %94 = sext i32 %72 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !26
  %96 = sext i32 %75 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !26
  %98 = sext i32 %79 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = sext i32 %82 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !26
  %102 = sext i32 %86 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !26
  %104 = sext i32 %89 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !26
  %106 = and i1 %13, %30, !dbg !27
  %107 = and i1 %13, %43, !dbg !27
  %108 = and i1 %32, %13, !dbg !27
  %109 = and i1 %45, %13, !dbg !27
  %110 = and i1 %14, %34, !dbg !27
  %111 = and i1 %14, %47, !dbg !27
  %112 = and i1 %14, %36, !dbg !27
  %113 = and i1 %14, %49, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %106, i32 0, i1 %106) #1, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %107, i32 0, i1 %107) #1, !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %108, i32 0, i1 %108) #1, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %109, i32 0, i1 %109) #1, !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %110, i32 0, i1 %110) #1, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %111, i32 0, i1 %111) #1, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %112, i32 0, i1 %112) #1, !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %113, i32 0, i1 %113) #1, !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = fcmp olt float %115, 0.000000e+00, !dbg !29
  %131 = fcmp olt float %117, 0.000000e+00, !dbg !29
  %132 = fcmp olt float %119, 0.000000e+00, !dbg !29
  %133 = fcmp olt float %121, 0.000000e+00, !dbg !29
  %134 = fcmp olt float %123, 0.000000e+00, !dbg !29
  %135 = fcmp olt float %125, 0.000000e+00, !dbg !29
  %136 = fcmp olt float %127, 0.000000e+00, !dbg !29
  %137 = fcmp olt float %129, 0.000000e+00, !dbg !29
  %138 = select i1 %130, float 0.000000e+00, float %115, !dbg !33
  %139 = select i1 %131, float 0.000000e+00, float %117, !dbg !33
  %140 = select i1 %132, float 0.000000e+00, float %119, !dbg !33
  %141 = select i1 %133, float 0.000000e+00, float %121, !dbg !33
  %142 = select i1 %134, float 0.000000e+00, float %123, !dbg !33
  %143 = select i1 %135, float 0.000000e+00, float %125, !dbg !33
  %144 = select i1 %136, float 0.000000e+00, float %127, !dbg !33
  %145 = select i1 %137, float 0.000000e+00, float %129, !dbg !33
  %146 = sext i32 %9 to i64, !dbg !34
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !34
  %148 = sext i32 %11 to i64, !dbg !34
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !34
  %150 = bitcast float %138 to i32, !dbg !35
  %151 = select i1 %30, i32 %150, i32 0, !dbg !36
  %152 = bitcast float %139 to i32, !dbg !35
  %153 = select i1 %43, i32 %152, i32 0, !dbg !36
  %154 = bitcast float %140 to i32, !dbg !35
  %155 = select i1 %32, i32 %154, i32 0, !dbg !36
  %156 = bitcast float %141 to i32, !dbg !35
  %157 = select i1 %45, i32 %156, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %153, i32 %155, i32 %157, ptr addrspace(1) %147, i1 %13) #1, !dbg !35
  %158 = bitcast float %142 to i32, !dbg !35
  %159 = select i1 %34, i32 %158, i32 0, !dbg !36
  %160 = bitcast float %143 to i32, !dbg !35
  %161 = select i1 %47, i32 %160, i32 0, !dbg !36
  %162 = bitcast float %144 to i32, !dbg !35
  %163 = select i1 %36, i32 %162, i32 0, !dbg !36
  %164 = bitcast float %145 to i32, !dbg !35
  %165 = select i1 %49, i32 %164, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %161, i32 %163, i32 %165, ptr addrspace(1) %149, i1 %14) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceme3vaifz7i6vlft3ycst5qhhtgszovs4ycixzxrqnd4mnm2mve.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_33", linkageName: "triton_poi_fused_constant_pad_nd_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 36, column: 18, scope: !7)
!21 = !DILocation(line: 37, column: 44, scope: !7)
!22 = !DILocation(line: 37, column: 52, scope: !7)
!23 = !DILocation(line: 37, column: 37, scope: !7)
!24 = !DILocation(line: 37, column: 42, scope: !7)
!25 = !DILocation(line: 37, column: 49, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 64, scope: !7)
!28 = !DILocation(line: 37, column: 57, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 39, column: 42, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 42, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 34, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
