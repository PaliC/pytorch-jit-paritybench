#loc = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":19:0)
#loc1 = loc(unknown)
#loc33 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":62:26)
#loc42 = loc(callsite(#loc1 at #loc33))
module {
  tt.func public @triton_per_fused_add_mse_loss_mul_pow_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<1.600000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.0572522879> : tensor<1x16xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.0286261439> : tensor<1x16xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.010734804> : tensor<1x16xf32> loc(#loc1)
    %cst_3 = arith.constant dense<3.35462624E-4> : tensor<1x16xf32> loc(#loc1)
    %cst_4 = arith.constant dense<0.00268370099> : tensor<1x16xf32> loc(#loc1)
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc3)
    %2 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc4)
    %3 = tt.addptr %2, %1 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc4)
    %4 = tt.load %3 : tensor<1x16x!tt.ptr<f32>> loc(#loc5)
    %5 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc6)
    %6 = tt.addptr %5, %1 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc6)
    %7 = tt.load %6 : tensor<1x16x!tt.ptr<f32>> loc(#loc7)
    %8 = arith.mulf %4, %cst_4 : tensor<1x16xf32> loc(#loc8)
    %9 = arith.addf %8, %cst_3 : tensor<1x16xf32> loc(#loc9)
    %10 = arith.mulf %4, %4 : tensor<1x16xf32> loc(#loc10)
    %11 = arith.mulf %10, %cst_2 : tensor<1x16xf32> loc(#loc11)
    %12 = arith.addf %9, %11 : tensor<1x16xf32> loc(#loc12)
    %13 = arith.mulf %10, %4 : tensor<1x16xf32> loc(#loc13)
    %14 = arith.mulf %13, %cst_1 : tensor<1x16xf32> loc(#loc14)
    %15 = arith.addf %12, %14 : tensor<1x16xf32> loc(#loc15)
    %16 = arith.mulf %10, %10 : tensor<1x16xf32> loc(#loc16)
    %17 = arith.mulf %16, %cst_0 : tensor<1x16xf32> loc(#loc17)
    %18 = arith.addf %15, %17 : tensor<1x16xf32> loc(#loc18)
    %19 = arith.mulf %7, %cst_4 : tensor<1x16xf32> loc(#loc19)
    %20 = arith.addf %19, %cst_3 : tensor<1x16xf32> loc(#loc20)
    %21 = arith.mulf %7, %7 : tensor<1x16xf32> loc(#loc21)
    %22 = arith.mulf %21, %cst_2 : tensor<1x16xf32> loc(#loc22)
    %23 = arith.addf %20, %22 : tensor<1x16xf32> loc(#loc23)
    %24 = arith.mulf %21, %7 : tensor<1x16xf32> loc(#loc24)
    %25 = arith.mulf %24, %cst_1 : tensor<1x16xf32> loc(#loc25)
    %26 = arith.addf %23, %25 : tensor<1x16xf32> loc(#loc26)
    %27 = arith.mulf %21, %21 : tensor<1x16xf32> loc(#loc27)
    %28 = arith.mulf %27, %cst_0 : tensor<1x16xf32> loc(#loc28)
    %29 = arith.addf %26, %28 : tensor<1x16xf32> loc(#loc29)
    %30 = arith.subf %18, %29 : tensor<1x16xf32> loc(#loc30)
    %31 = arith.mulf %30, %30 : tensor<1x16xf32> loc(#loc31)
    %32 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc33)), %arg5: f32 loc(callsite(#loc1 at #loc33))):
      %37 = arith.addf %arg4, %arg5 : f32 loc(#loc44)
      tt.reduce.return %37 : f32 loc(#loc41)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc41)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc35)
    %34 = arith.divf %33, %cst : tensor<1x1xf32> loc(#loc36)
    gpu.barrier loc(#loc37)
    %35 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc38)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc38)
    tt.store %36, %34 : tensor<1x1x!tt.ptr<f32>> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":26:26)
#loc3 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":26:34)
#loc4 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":30:34)
#loc5 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":30:39)
#loc6 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":31:31)
#loc7 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":31:36)
#loc8 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":33:18)
#loc9 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":35:18)
#loc10 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":36:18)
#loc11 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":38:18)
#loc12 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":39:18)
#loc13 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":40:18)
#loc14 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":42:19)
#loc15 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":43:19)
#loc16 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":44:19)
#loc17 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":46:20)
#loc18 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":47:20)
#loc19 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":48:20)
#loc20 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":49:19)
#loc21 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":50:20)
#loc22 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":51:20)
#loc23 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":52:20)
#loc24 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":53:20)
#loc25 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":54:20)
#loc26 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":55:20)
#loc27 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":56:20)
#loc28 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":57:20)
#loc29 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":58:20)
#loc30 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":59:20)
#loc31 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":60:20)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc35 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":62:29)
#loc36 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":64:20)
#loc37 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":65:4)
#loc38 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":66:28)
#loc39 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":66:71)
#loc40 = loc("inductor_cache/ur/cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py":66:4)
#loc41 = loc(callsite(#loc32 at #loc33))
#loc43 = loc(callsite(#loc34 at #loc32))
#loc44 = loc(callsite(#loc43 at #loc33))
