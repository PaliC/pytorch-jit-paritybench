; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_add_mse_loss_mul_pow_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr float, ptr addrspace(1) %0, i64 %7, !dbg !11
  %9 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !12
  %10 = getelementptr float, ptr addrspace(1) %2, i64 %7, !dbg !13
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !12
  %13 = insertelement <2 x i32> %12, i32 %11, i64 1, !dbg !12
  %14 = bitcast <2 x i32> %13 to <2 x float>, !dbg !12
  %15 = fmul <2 x float> %14, splat (float 0x3F65FC2100000000), !dbg !15
  %16 = fadd <2 x float> %15, splat (float 0x3F35FC2100000000), !dbg !16
  %17 = fmul <2 x float> %14, %14, !dbg !17
  %18 = fmul <2 x float> %17, splat (float 0x3F85FC2100000000), !dbg !18
  %19 = fadd <2 x float> %16, %18, !dbg !19
  %20 = fmul <2 x float> %17, %14, !dbg !20
  %21 = fmul <2 x float> %20, splat (float 0x3F9D502C00000000), !dbg !21
  %22 = fadd <2 x float> %19, %21, !dbg !22
  %23 = fmul <2 x float> %17, %17, !dbg !23
  %24 = fmul <2 x float> %23, splat (float 0x3FAD502C00000000), !dbg !24
  %25 = fadd <2 x float> %24, %22, !dbg !25
  %shift = shufflevector <2 x float> %25, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %26 = fsub <2 x float> %25, %shift, !dbg !26
  %27 = fmul <2 x float> %26, %26, !dbg !27
  %28 = extractelement <2 x float> %27, i64 0, !dbg !27
  %29 = bitcast float %28 to i32, !dbg !28
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 8, i32 31), !dbg !28
  %31 = bitcast i32 %30 to float, !dbg !28
  %32 = fadd float %28, %31, !dbg !32
  %33 = bitcast float %32 to i32, !dbg !28
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 4, i32 31), !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = fadd float %32, %35, !dbg !32
  %37 = bitcast float %36 to i32, !dbg !28
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 2, i32 31), !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = fadd float %36, %39, !dbg !32
  %41 = bitcast float %40 to i32, !dbg !28
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 1, i32 31), !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = fadd float %40, %43, !dbg !32
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 1.600000e+01) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %46 = and i32 %5, 63, !dbg !36
  %47 = icmp eq i32 %46, 0, !dbg !36
  %48 = bitcast float %45 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %48, ptr addrspace(1) %1, i1 %47) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cur5nvyopol34h7se3mfo2mlv6idtgnpplbhsyk6ksj3erir6rlf.py", directory: "inductor_cache/ur")
!4 = !{ptr @triton_per_fused_add_mse_loss_mul_pow_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_mul_pow_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_mul_pow_1", linkageName: "triton_per_fused_add_mse_loss_mul_pow_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 34, scope: !7)
!12 = !DILocation(line: 30, column: 39, scope: !7)
!13 = !DILocation(line: 31, column: 31, scope: !7)
!14 = !DILocation(line: 31, column: 36, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 35, column: 18, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 38, column: 18, scope: !7)
!19 = !DILocation(line: 39, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 18, scope: !7)
!21 = !DILocation(line: 42, column: 19, scope: !7)
!22 = !DILocation(line: 43, column: 19, scope: !7)
!23 = !DILocation(line: 44, column: 19, scope: !7)
!24 = !DILocation(line: 46, column: 20, scope: !7)
!25 = !DILocation(line: 47, column: 20, scope: !7)
!26 = !DILocation(line: 59, column: 20, scope: !7)
!27 = !DILocation(line: 60, column: 20, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 62, column: 26, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 64, column: 20, scope: !7)
!35 = !DILocation(line: 65, column: 4, scope: !7)
!36 = !DILocation(line: 66, column: 71, scope: !7)
!37 = !DILocation(line: 66, column: 4, scope: !7)
