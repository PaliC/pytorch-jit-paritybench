; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 1536, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 16, !dbg !15
  %21 = srem i32 %20, 24, !dbg !16
  %22 = mul i32 %20, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %.frozen7 = freeze i32 %18, !dbg !18
  %23 = sdiv i32 %.frozen7, 384, !dbg !18
  %24 = icmp slt i32 %21, 4, !dbg !19
  %25 = mul i32 %23, 384, !dbg !20
  %srem.decomposed = sub i32 %.frozen7, %25, !dbg !20
  %26 = shl nsw i32 %23, 6, !dbg !21
  %27 = add nsw i32 %26, %srem.decomposed, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = and i1 %19, %24, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !25
  %32 = and i32 %21, -4, !dbg !26
  %33 = icmp eq i32 %32, 4, !dbg !26
  %34 = shl nsw i32 %21, 4, !dbg !27
  %35 = add nsw i32 %26, %.decomposed, !dbg !27
  %36 = add nsw i32 %35, -64, !dbg !28
  %37 = add nsw i32 %36, %34, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !30
  %40 = and i1 %19, %33, !dbg !31
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !32
  %42 = icmp eq i32 %32, 8, !dbg !33
  %43 = add nsw i32 %35, -128, !dbg !34
  %44 = add nsw i32 %43, %34, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !36
  %47 = and i1 %19, %42, !dbg !37
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !38
  %49 = icmp eq i32 %32, 12, !dbg !39
  %50 = add nsw i32 %35, -192, !dbg !40
  %51 = add nsw i32 %50, %34, !dbg !41
  %52 = sext i32 %51 to i64, !dbg !42
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !42
  %54 = and i1 %19, %49, !dbg !43
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !44
  %56 = icmp eq i32 %32, 16, !dbg !45
  %57 = add nsw i32 %35, -256, !dbg !46
  %58 = add nsw i32 %57, %34, !dbg !47
  %59 = sext i32 %58 to i64, !dbg !48
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !48
  %61 = and i1 %19, %56, !dbg !49
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #3, !dbg !50
  %63 = icmp sgt i32 %21, 19, !dbg !51
  %64 = add nsw i32 %21, -20, !dbg !52
  %65 = shl nsw i32 %64, 4, !dbg !53
  %66 = add nsw i32 %35, %65, !dbg !54
  %67 = sext i32 %66 to i64, !dbg !55
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !55
  %69 = and i1 %19, %63, !dbg !56
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !57
  %71 = sext i32 %64 to i64, !dbg !58
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %71, !dbg !58
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %69, i32 0, i1 %69) #3, !dbg !59
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %69, i32 0, i1 %69) #3, !dbg !59
  %75 = getelementptr float, ptr addrspace(1) %7, i64 %71, !dbg !60
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %69, i32 0, i1 %69) #3, !dbg !61
  %77 = bitcast i32 %76 to float, !dbg !61
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %69, i32 0, i1 %69) #3, !dbg !61
  %79 = bitcast i32 %78 to float, !dbg !61
  %80 = fadd float %77, 0x3EE4F8B580000000, !dbg !62
  %81 = fadd float %79, 0x3EE4F8B580000000, !dbg !62
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i = icmp eq i32 %82, 0, !dbg !63
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i = icmp eq i32 %83, 0, !dbg !63
  br i1 %.not.i, label %89, label %84, !dbg !63

84:                                               ; preds = %12
  br i1 %.not1.i, label %87, label %85, !dbg !63

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

89:                                               ; preds = %12
  br i1 %.not1.i, label %92, label %90, !dbg !63

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !63
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i2 = icmp eq i32 %94, 0, !dbg !63
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i5 = icmp eq i32 %95, 0, !dbg !63
  br i1 %.not.i2, label %101, label %96, !dbg !63

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %99, label %97, !dbg !63

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit6, !dbg !63

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit6, !dbg !63

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %104, label %102, !dbg !63

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit6, !dbg !63

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit6, !dbg !63

__nv_sqrtf.exit6:                                 ; preds = %97, %99, %102, %104
  %.0.i4 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !63
  %106 = extractvalue { i32, i32 } %70, 1, !dbg !57
  %107 = bitcast i32 %106 to float, !dbg !57
  %108 = bitcast i32 %74 to float, !dbg !59
  %109 = fsub float %107, %108, !dbg !64
  %110 = extractvalue { i32, i32 } %70, 0, !dbg !57
  %111 = bitcast i32 %110 to float, !dbg !57
  %112 = bitcast i32 %73 to float, !dbg !59
  %113 = fsub float %111, %112, !dbg !64
  %114 = extractvalue { i32, i32 } %62, 1, !dbg !50
  %115 = extractvalue { i32, i32 } %62, 0, !dbg !50
  %116 = extractvalue { i32, i32 } %55, 1, !dbg !44
  %117 = extractvalue { i32, i32 } %55, 0, !dbg !44
  %118 = extractvalue { i32, i32 } %48, 1, !dbg !38
  %119 = extractvalue { i32, i32 } %48, 0, !dbg !38
  %120 = extractvalue { i32, i32 } %41, 1, !dbg !32
  %121 = extractvalue { i32, i32 } %41, 0, !dbg !32
  %122 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %123 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !65
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !65
  %126 = fmul float %113, %124, !dbg !66
  %127 = fmul float %109, %125, !dbg !66
  %128 = getelementptr float, ptr addrspace(1) %8, i64 %71, !dbg !67
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %69, i32 0, i1 %69) #3, !dbg !68
  %130 = bitcast i32 %129 to float, !dbg !68
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %69, i32 0, i1 %69) #3, !dbg !68
  %132 = bitcast i32 %131 to float, !dbg !68
  %133 = fmul float %126, %130, !dbg !69
  %134 = fmul float %127, %132, !dbg !69
  %135 = getelementptr float, ptr addrspace(1) %9, i64 %71, !dbg !70
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %69, i32 0, i1 %69) #3, !dbg !71
  %137 = bitcast i32 %136 to float, !dbg !71
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %69, i32 0, i1 %69) #3, !dbg !71
  %139 = bitcast i32 %138 to float, !dbg !71
  %140 = fadd float %133, %137, !dbg !72
  %141 = fadd float %134, %139, !dbg !72
  %.inv = fcmp ole float %140, 0.000000e+00, !dbg !73
  %142 = select i1 %.inv, float 0.000000e+00, float %140, !dbg !73
  %.inv1 = fcmp ole float %141, 0.000000e+00, !dbg !73
  %143 = select i1 %.inv1, float 0.000000e+00, float %141, !dbg !73
  %144 = fcmp olt float %142, 6.000000e+00, !dbg !77
  %145 = fcmp olt float %143, 6.000000e+00, !dbg !77
  %146 = fcmp uno float %142, 0.000000e+00, !dbg !79
  %147 = fcmp uno float %143, 0.000000e+00, !dbg !79
  %148 = or i1 %144, %146, !dbg !80
  %149 = or i1 %145, %147, !dbg !80
  %150 = sext i32 %18 to i64, !dbg !81
  %151 = getelementptr float, ptr addrspace(1) %10, i64 %150, !dbg !81
  %152 = bitcast float %142 to i32, !dbg !82
  %153 = select i1 %148, i32 %152, i32 1086324736, !dbg !83
  %154 = select i1 %63, i32 %153, i32 0, !dbg !84
  %155 = select i1 %56, i32 %115, i32 %154, !dbg !85
  %156 = select i1 %49, i32 %117, i32 %155, !dbg !86
  %157 = select i1 %42, i32 %119, i32 %156, !dbg !87
  %158 = select i1 %33, i32 %121, i32 %157, !dbg !88
  %159 = select i1 %24, i32 %123, i32 %158, !dbg !89
  %160 = bitcast float %143 to i32, !dbg !82
  %161 = select i1 %149, i32 %160, i32 1086324736, !dbg !83
  %162 = select i1 %63, i32 %161, i32 0, !dbg !84
  %163 = select i1 %56, i32 %114, i32 %162, !dbg !85
  %164 = select i1 %49, i32 %116, i32 %163, !dbg !86
  %165 = select i1 %42, i32 %118, i32 %164, !dbg !87
  %166 = select i1 %33, i32 %120, i32 %165, !dbg !88
  %167 = select i1 %24, i32 %122, i32 %166, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %167, ptr addrspace(1) %151, i1 %19) #3, !dbg !82
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbs6lrtfctzgmpxc3p6u7j6fbr5sh7ra6afot2vgbdrngvsnjayg.py", directory: "inductor_cache/bs")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 40, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 53, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 68, scope: !7)
!32 = !DILocation(line: 38, column: 61, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 36, scope: !7)
!35 = !DILocation(line: 43, column: 53, scope: !7)
!36 = !DILocation(line: 43, column: 31, scope: !7)
!37 = !DILocation(line: 43, column: 69, scope: !7)
!38 = !DILocation(line: 43, column: 61, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 36, scope: !7)
!41 = !DILocation(line: 48, column: 54, scope: !7)
!42 = !DILocation(line: 48, column: 31, scope: !7)
!43 = !DILocation(line: 48, column: 70, scope: !7)
!44 = !DILocation(line: 48, column: 62, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 36, scope: !7)
!47 = !DILocation(line: 53, column: 54, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 70, scope: !7)
!50 = !DILocation(line: 53, column: 62, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 48, scope: !7)
!53 = !DILocation(line: 57, column: 40, scope: !7)
!54 = !DILocation(line: 57, column: 54, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 70, scope: !7)
!57 = !DILocation(line: 57, column: 62, scope: !7)
!58 = !DILocation(line: 58, column: 31, scope: !7)
!59 = !DILocation(line: 58, column: 44, scope: !7)
!60 = !DILocation(line: 60, column: 31, scope: !7)
!61 = !DILocation(line: 60, column: 44, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 27, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 31, scope: !7)
!68 = !DILocation(line: 69, column: 44, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 31, scope: !7)
!71 = !DILocation(line: 71, column: 44, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 74, column: 42, scope: !7)
!77 = !DILocation(line: 110, column: 15, scope: !74, inlinedAt: !78)
!78 = !DILocation(line: 76, column: 42, scope: !7)
!79 = !DILocation(line: 112, column: 21, scope: !74, inlinedAt: !78)
!80 = !DILocation(line: 112, column: 16, scope: !74, inlinedAt: !78)
!81 = !DILocation(line: 84, column: 25, scope: !7)
!82 = !DILocation(line: 84, column: 37, scope: !7)
!83 = !DILocation(line: 113, column: 29, scope: !74, inlinedAt: !78)
!84 = !DILocation(line: 78, column: 35, scope: !7)
!85 = !DILocation(line: 79, column: 35, scope: !7)
!86 = !DILocation(line: 80, column: 35, scope: !7)
!87 = !DILocation(line: 81, column: 35, scope: !7)
!88 = !DILocation(line: 82, column: 34, scope: !7)
!89 = !DILocation(line: 83, column: 33, scope: !7)
!90 = !DILocation(line: 84, column: 4, scope: !7)
