; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = srem i32 %10, 1024, !dbg !12
  %14 = shl i32 %10, 6, !dbg !13
  %15 = or disjoint i32 %14, %12, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !16
  %19 = sext i32 %13 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !24
  %29 = fadd float %24, 0x3EE4F8B580000000, !dbg !25
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i = icmp eq i32 %30, 0, !dbg !26
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i = icmp eq i32 %31, 0, !dbg !26
  br i1 %.not.i, label %37, label %32, !dbg !26

32:                                               ; preds = %9
  br i1 %.not1.i, label %35, label %33, !dbg !26

33:                                               ; preds = %32
  %34 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %29) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

35:                                               ; preds = %32
  %36 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %29) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

37:                                               ; preds = %9
  br i1 %.not1.i, label %40, label %38, !dbg !26

38:                                               ; preds = %37
  %39 = tail call float @llvm.nvvm.sqrt.rn.f(float %29) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

40:                                               ; preds = %37
  %41 = tail call float @llvm.nvvm.sqrt.approx.f(float %29) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %33, %35, %38, %40
  %.0.i = phi float [ %34, %33 ], [ %36, %35 ], [ %39, %38 ], [ %41, %40 ], !dbg !26
  %42 = bitcast i32 %18 to float, !dbg !16
  %43 = bitcast i32 %21 to float, !dbg !18
  %44 = fsub float %42, %43, !dbg !27
  %45 = bitcast i32 %28 to float, !dbg !24
  %46 = bitcast i32 %26 to float, !dbg !22
  %47 = lshr i32 %11, 5, !dbg !11
  %48 = and i32 %11, 31, !dbg !11
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !28
  %50 = fmul float %44, %49, !dbg !29
  %51 = fmul float %50, %46, !dbg !30
  %52 = fadd float %51, %45, !dbg !31
  %53 = fcmp ogt float %52, 0.000000e+00, !dbg !32
  %54 = fmul float %52, 0x3FC99999A0000000, !dbg !33
  %55 = select i1 %53, float %52, float %54, !dbg !34
  %56 = bitcast float %55 to i32, !dbg !35
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 16, i32 31), !dbg !35
  %58 = bitcast i32 %57 to float, !dbg !35
  %59 = fcmp ogt float %55, %58, !dbg !39
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !41
  %61 = or i1 %59, %60, !dbg !42
  %62 = select i1 %61, float %55, float %58, !dbg !43
  %63 = bitcast float %62 to i32, !dbg !35
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !35
  %65 = bitcast i32 %64 to float, !dbg !35
  %66 = fcmp ogt float %62, %65, !dbg !39
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !41
  %68 = or i1 %66, %67, !dbg !42
  %69 = select i1 %68, float %62, float %65, !dbg !43
  %70 = bitcast float %69 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fcmp ogt float %69, %72, !dbg !39
  %74 = fcmp uno float %69, 0.000000e+00, !dbg !41
  %75 = or i1 %73, %74, !dbg !42
  %76 = select i1 %75, float %69, float %72, !dbg !43
  %77 = bitcast float %76 to i32, !dbg !35
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = fcmp ogt float %76, %79, !dbg !39
  %81 = fcmp uno float %76, 0.000000e+00, !dbg !41
  %82 = or i1 %80, %81, !dbg !42
  %83 = select i1 %82, float %76, float %79, !dbg !43
  %84 = bitcast float %83 to i32, !dbg !35
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !35
  %86 = bitcast i32 %85 to float, !dbg !35
  %87 = fcmp ogt float %83, %86, !dbg !39
  %88 = fcmp uno float %83, 0.000000e+00, !dbg !41
  %89 = or i1 %87, %88, !dbg !42
  %90 = icmp eq i32 %48, 0, !dbg !35
  %91 = and i32 %47, 1, !dbg !35
  %92 = zext nneg i32 %91 to i64, !dbg !35
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !35
  %94 = select i1 %89, i32 %84, i32 %85, !dbg !43
  %95 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %95, i1 %90) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %96 = icmp slt i32 %11, 2, !dbg !35
  %97 = sext i32 %11 to i64, !dbg !35
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i64 %97, !dbg !35
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %96) #5, !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !35
  %102 = bitcast i32 %101 to float, !dbg !35
  %103 = fcmp ogt float %100, %102, !dbg !39
  %104 = fcmp uno float %100, 0.000000e+00, !dbg !41
  %105 = or i1 %104, %103, !dbg !42
  %106 = and i32 %11, 1, !dbg !35
  %107 = icmp eq i32 %106, 0, !dbg !35
  %108 = and i1 %96, %107, !dbg !35
  %109 = select i1 %105, i32 %99, i32 %101, !dbg !43
  %110 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %110, i1 %108) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %111 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 16, i32 31), !dbg !44
  %113 = bitcast i32 %112 to float, !dbg !44
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %12, i32 16, i32 31), !dbg !44
  %115 = fcmp ogt float %55, %113, !dbg !46
  %116 = fcmp oeq float %55, %113, !dbg !47
  %117 = fcmp uno float %113, 0.000000e+00, !dbg !48
  %118 = xor i1 %117, true, !dbg !49
  %119 = and i1 %60, %118, !dbg !50
  %120 = or i1 %115, %119, !dbg !51
  %121 = and i1 %60, %117, !dbg !52
  %122 = or i1 %116, %121, !dbg !53
  %123 = icmp slt i32 %12, %114, !dbg !54
  %124 = and i1 %123, %122, !dbg !55
  %125 = or i1 %120, %124, !dbg !56
  %126 = select i1 %125, float %55, float %113, !dbg !57
  %127 = select i1 %125, i32 %12, i32 %114, !dbg !58
  %128 = bitcast float %126 to i32, !dbg !44
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !44
  %130 = bitcast i32 %129 to float, !dbg !44
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !44
  %132 = fcmp ogt float %126, %130, !dbg !46
  %133 = fcmp oeq float %126, %130, !dbg !47
  %134 = fcmp uno float %126, 0.000000e+00, !dbg !59
  %135 = fcmp uno float %130, 0.000000e+00, !dbg !48
  %136 = xor i1 %135, true, !dbg !49
  %137 = and i1 %134, %136, !dbg !50
  %138 = or i1 %132, %137, !dbg !51
  %139 = and i1 %135, %134, !dbg !52
  %140 = or i1 %133, %139, !dbg !53
  %141 = icmp slt i32 %127, %131, !dbg !54
  %142 = and i1 %141, %140, !dbg !55
  %143 = or i1 %138, %142, !dbg !56
  %144 = select i1 %143, float %126, float %130, !dbg !57
  %145 = select i1 %143, i32 %127, i32 %131, !dbg !58
  %146 = bitcast float %144 to i32, !dbg !44
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !44
  %148 = bitcast i32 %147 to float, !dbg !44
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !44
  %150 = fcmp ogt float %144, %148, !dbg !46
  %151 = fcmp oeq float %144, %148, !dbg !47
  %152 = fcmp uno float %144, 0.000000e+00, !dbg !59
  %153 = fcmp uno float %148, 0.000000e+00, !dbg !48
  %154 = xor i1 %153, true, !dbg !49
  %155 = and i1 %152, %154, !dbg !50
  %156 = or i1 %150, %155, !dbg !51
  %157 = and i1 %153, %152, !dbg !52
  %158 = or i1 %151, %157, !dbg !53
  %159 = icmp slt i32 %145, %149, !dbg !54
  %160 = and i1 %159, %158, !dbg !55
  %161 = or i1 %156, %160, !dbg !56
  %162 = select i1 %161, float %144, float %148, !dbg !57
  %163 = select i1 %161, i32 %145, i32 %149, !dbg !58
  %164 = bitcast float %162 to i32, !dbg !44
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 2, i32 31), !dbg !44
  %166 = bitcast i32 %165 to float, !dbg !44
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !44
  %168 = fcmp ogt float %162, %166, !dbg !46
  %169 = fcmp oeq float %162, %166, !dbg !47
  %170 = fcmp uno float %162, 0.000000e+00, !dbg !59
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !48
  %172 = xor i1 %171, true, !dbg !49
  %173 = and i1 %170, %172, !dbg !50
  %174 = or i1 %168, %173, !dbg !51
  %175 = and i1 %171, %170, !dbg !52
  %176 = or i1 %169, %175, !dbg !53
  %177 = icmp slt i32 %163, %167, !dbg !54
  %178 = and i1 %177, %176, !dbg !55
  %179 = or i1 %174, %178, !dbg !56
  %180 = select i1 %179, float %162, float %166, !dbg !57
  %181 = select i1 %179, i32 %163, i32 %167, !dbg !58
  %182 = bitcast float %180 to i32, !dbg !44
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !44
  %184 = bitcast i32 %183 to float, !dbg !44
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !44
  %186 = fcmp ogt float %180, %184, !dbg !46
  %187 = fcmp oeq float %180, %184, !dbg !47
  %188 = fcmp uno float %180, 0.000000e+00, !dbg !59
  %189 = fcmp uno float %184, 0.000000e+00, !dbg !48
  %190 = xor i1 %189, true, !dbg !49
  %191 = and i1 %188, %190, !dbg !50
  %192 = or i1 %186, %191, !dbg !51
  %193 = and i1 %189, %188, !dbg !52
  %194 = or i1 %187, %193, !dbg !53
  %195 = icmp slt i32 %181, %185, !dbg !54
  %196 = and i1 %195, %194, !dbg !55
  %197 = or i1 %192, %196, !dbg !56
  %198 = select i1 %197, i32 %181, i32 %185, !dbg !58
  %199 = select i1 %197, i32 %182, i32 %183, !dbg !57
  %200 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %200, i1 %90) #5, !dbg !44
  %201 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %92, !dbg !44
  %202 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 %90) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %203 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %96) #5, !dbg !44
  %204 = bitcast i32 %203 to float, !dbg !44
  %205 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %97, !dbg !44
  %206 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %205, i1 %96) #5, !dbg !44
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !44
  %208 = bitcast i32 %207 to float, !dbg !44
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !44
  %210 = fcmp ogt float %204, %208, !dbg !46
  %211 = fcmp oeq float %204, %208, !dbg !47
  %212 = fcmp uno float %204, 0.000000e+00, !dbg !59
  %213 = fcmp uno float %208, 0.000000e+00, !dbg !48
  %214 = xor i1 %213, true, !dbg !49
  %215 = and i1 %212, %214, !dbg !50
  %216 = or i1 %210, %215, !dbg !51
  %217 = and i1 %212, %213, !dbg !52
  %218 = or i1 %211, %217, !dbg !53
  %219 = icmp slt i32 %206, %209, !dbg !54
  %220 = and i1 %219, %218, !dbg !55
  %221 = or i1 %216, %220, !dbg !56
  %222 = select i1 %221, i32 %206, i32 %209, !dbg !58
  %223 = select i1 %221, i32 %203, i32 %207, !dbg !57
  %224 = insertelement <1 x i32> poison, i32 %223, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %224, i1 %108) #5, !dbg !44
  %225 = insertelement <1 x i32> poison, i32 %222, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %225, i1 %108) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %226 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), align 8, !dbg !44
  %227 = sext i32 %10 to i64, !dbg !60
  %228 = getelementptr float, ptr addrspace(1) %5, i64 %227, !dbg !60
  %229 = icmp eq i32 %12, 0, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %228, i1 %229) #5, !dbg !61
  %230 = getelementptr i64, ptr addrspace(1) %6, i64 %227, !dbg !62
  %231 = sext i32 %226 to i64, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %231, ptr addrspace(1) %230, i1 %229) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c56myxijulxrfxlcyl7fteri2mrlsb3ztldnjth35itvlytjfmif.py", directory: "inductor_cache/56")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 38, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 39, column: 18, scope: !7)
!26 = !DILocation(line: 40, column: 26, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 18, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 20, scope: !7)
!31 = !DILocation(line: 47, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 35, scope: !7)
!35 = !DILocation(line: 131, column: 29, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 54, column: 39, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !38)
!42 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !38)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !38)
!44 = !DILocation(line: 173, column: 42, scope: !36, inlinedAt: !45)
!45 = !DILocation(line: 56, column: 71, scope: !7)
!46 = !DILocation(line: 152, column: 21, scope: !40, inlinedAt: !45)
!47 = !DILocation(line: 153, column: 23, scope: !40, inlinedAt: !45)
!48 = !DILocation(line: 156, column: 29, scope: !40, inlinedAt: !45)
!49 = !DILocation(line: 157, column: 32, scope: !40, inlinedAt: !45)
!50 = !DILocation(line: 157, column: 28, scope: !40, inlinedAt: !45)
!51 = !DILocation(line: 157, column: 16, scope: !40, inlinedAt: !45)
!52 = !DILocation(line: 159, column: 29, scope: !40, inlinedAt: !45)
!53 = !DILocation(line: 159, column: 17, scope: !40, inlinedAt: !45)
!54 = !DILocation(line: 162, column: 31, scope: !40, inlinedAt: !45)
!55 = !DILocation(line: 162, column: 21, scope: !40, inlinedAt: !45)
!56 = !DILocation(line: 162, column: 12, scope: !40, inlinedAt: !45)
!57 = !DILocation(line: 163, column: 35, scope: !40, inlinedAt: !45)
!58 = !DILocation(line: 163, column: 69, scope: !40, inlinedAt: !45)
!59 = !DILocation(line: 155, column: 29, scope: !40, inlinedAt: !45)
!60 = !DILocation(line: 58, column: 25, scope: !7)
!61 = !DILocation(line: 58, column: 37, scope: !7)
!62 = !DILocation(line: 59, column: 25, scope: !7)
!63 = !DILocation(line: 59, column: 37, scope: !7)
!64 = !DILocation(line: 59, column: 4, scope: !7)
