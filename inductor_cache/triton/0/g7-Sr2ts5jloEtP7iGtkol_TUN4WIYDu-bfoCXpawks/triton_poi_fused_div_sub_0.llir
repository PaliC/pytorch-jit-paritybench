; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 64, !dbg !12
  %13 = lshr i32 %11, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %.lobit = lshr exact i32 %12, 6, !dbg !12
  %15 = or disjoint i32 %10, %14, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = or disjoint i32 %10, %.lobit, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 4, !dbg !13
  %20 = or disjoint i32 %17, 6, !dbg !13
  %21 = or disjoint i32 %17, 8, !dbg !13
  %22 = or disjoint i32 %17, 10, !dbg !13
  %23 = or disjoint i32 %17, 12, !dbg !13
  %24 = or disjoint i32 %17, 14, !dbg !13
  %25 = icmp slt i32 %15, 12, !dbg !14
  %26 = icmp slt i32 %16, 12, !dbg !14
  %27 = icmp slt i32 %17, 12, !dbg !14
  %28 = icmp slt i32 %18, 12, !dbg !14
  %29 = icmp slt i32 %19, 12, !dbg !14
  %30 = icmp slt i32 %20, 12, !dbg !14
  %31 = icmp slt i32 %21, 12, !dbg !14
  %32 = icmp slt i32 %22, 12, !dbg !14
  %33 = icmp slt i32 %10, 0, !dbg !14
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %35 = shl i32 %34, 6, !dbg !16
  %36 = shl i32 %11, 2, !dbg !17
  %37 = and i32 %36, 60, !dbg !17
  %38 = and i32 %11, 63, !dbg !17
  %39 = or disjoint i32 %35, %37, !dbg !18
  %40 = or disjoint i32 %35, %38, !dbg !18
  %41 = srem i32 %15, 3, !dbg !19
  %42 = srem i32 %16, 3, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %43 = sdiv i32 %.frozen, 3, !dbg !20
  %44 = mul i32 %43, 3, !dbg !19
  %.decomposed = sub i32 %.frozen, %44, !dbg !19
  %.frozen3 = freeze i32 %18, !dbg !20
  %45 = sdiv i32 %.frozen3, 3, !dbg !20
  %46 = mul i32 %45, 3, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %46, !dbg !19
  %.frozen5 = freeze i32 %19, !dbg !20
  %47 = sdiv i32 %.frozen5, 3, !dbg !20
  %48 = mul i32 %47, 3, !dbg !19
  %.decomposed6 = sub i32 %.frozen5, %48, !dbg !19
  %.frozen7 = freeze i32 %20, !dbg !20
  %49 = sdiv i32 %.frozen7, 3, !dbg !20
  %50 = mul i32 %49, 3, !dbg !19
  %.decomposed8 = sub i32 %.frozen7, %50, !dbg !19
  %.frozen9 = freeze i32 %21, !dbg !20
  %51 = sdiv i32 %.frozen9, 3, !dbg !20
  %52 = mul i32 %51, 3, !dbg !19
  %.decomposed10 = sub i32 %.frozen9, %52, !dbg !19
  %.frozen11 = freeze i32 %22, !dbg !20
  %53 = sdiv i32 %.frozen11, 3, !dbg !20
  %54 = mul i32 %53, 3, !dbg !19
  %.decomposed12 = sub i32 %.frozen11, %54, !dbg !19
  %.frozen13 = freeze i32 %23, !dbg !20
  %55 = sdiv i32 %.frozen13, 3, !dbg !20
  %56 = mul i32 %55, 3, !dbg !19
  %.decomposed14 = sub i32 %.frozen13, %56, !dbg !19
  %.frozen15 = freeze i32 %24, !dbg !20
  %57 = sdiv i32 %.frozen15, 3, !dbg !20
  %58 = mul i32 %57, 3, !dbg !19
  %.decomposed16 = sub i32 %.frozen15, %58, !dbg !19
  %59 = shl i32 %15, 18, !dbg !21
  %60 = shl i32 %16, 18, !dbg !21
  %61 = add i32 %39, %59, !dbg !22
  %62 = add i32 %39, %60, !dbg !22
  %63 = sext i32 %61 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %62 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %25) #2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %26) #2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = sext i32 %41 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !25
  %87 = sext i32 %42 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #2, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #2, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #2, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #2, !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #2, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #2, !dbg !26
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #2, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #2, !dbg !26
  %98 = bitcast i32 %97 to float, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !27
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %25) #2, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %25) #2, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %25) #2, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %25) #2, !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %26) #2, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %26) #2, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %26) #2, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %26) #2, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !29
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %25) #2, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !30
  %118 = bitcast i32 %114 to float, !dbg !30
  %119 = bitcast i32 %115 to float, !dbg !30
  %120 = bitcast i32 %116 to float, !dbg !30
  %121 = bitcast i32 %117 to float, !dbg !30
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %26) #2, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !30
  %127 = bitcast i32 %123 to float, !dbg !30
  %128 = bitcast i32 %124 to float, !dbg !30
  %129 = bitcast i32 %125 to float, !dbg !30
  %130 = bitcast i32 %126 to float, !dbg !30
  %131 = fsub float %72, %93, !dbg !31
  %132 = fsub float %73, %93, !dbg !31
  %133 = fsub float %74, %93, !dbg !31
  %134 = fsub float %75, %93, !dbg !31
  %135 = fsub float %81, %98, !dbg !31
  %136 = fsub float %82, %98, !dbg !31
  %137 = fsub float %83, %98, !dbg !31
  %138 = fsub float %84, %98, !dbg !31
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %105) #2, !dbg !32
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %105) #2, !dbg !32
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %105) #2, !dbg !32
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %105) #2, !dbg !32
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %110) #2, !dbg !32
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %110) #2, !dbg !32
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %110) #2, !dbg !32
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %110) #2, !dbg !32
  %147 = fsub float %118, %93, !dbg !33
  %148 = fsub float %119, %93, !dbg !33
  %149 = fsub float %120, %93, !dbg !33
  %150 = fsub float %121, %93, !dbg !33
  %151 = fsub float %127, %98, !dbg !33
  %152 = fsub float %128, %98, !dbg !33
  %153 = fsub float %129, %98, !dbg !33
  %154 = fsub float %130, %98, !dbg !33
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %105) #2, !dbg !34
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %105) #2, !dbg !34
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %105) #2, !dbg !34
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %105) #2, !dbg !34
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %110) #2, !dbg !34
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %110) #2, !dbg !34
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %110) #2, !dbg !34
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %110) #2, !dbg !34
  %163 = mul i32 %40, 3, !dbg !35
  %164 = add i32 %163, %.decomposed, !dbg !36
  %165 = mul i32 %43, 786432, !dbg !37
  %166 = mul i32 %45, 786432, !dbg !37
  %167 = mul i32 %47, 786432, !dbg !37
  %168 = mul i32 %49, 786432, !dbg !37
  %169 = mul i32 %51, 786432, !dbg !37
  %170 = mul i32 %53, 786432, !dbg !37
  %171 = mul i32 %55, 786432, !dbg !37
  %172 = mul i32 %57, 786432, !dbg !37
  %173 = add i32 %164, %165, !dbg !38
  %174 = add i32 %166, %.decomposed4, !dbg !36
  %175 = add i32 %174, %163, !dbg !38
  %176 = add i32 %167, %.decomposed6, !dbg !36
  %177 = add i32 %176, %163, !dbg !38
  %178 = add i32 %168, %.decomposed8, !dbg !36
  %179 = add i32 %178, %163, !dbg !38
  %180 = add i32 %169, %.decomposed10, !dbg !36
  %181 = add i32 %180, %163, !dbg !38
  %182 = add i32 %170, %.decomposed12, !dbg !36
  %183 = add i32 %182, %163, !dbg !38
  %184 = add i32 %171, %.decomposed14, !dbg !36
  %185 = add i32 %184, %163, !dbg !38
  %186 = add i32 %172, %.decomposed16, !dbg !36
  %187 = add i32 %186, %163, !dbg !38
  %188 = sext i32 %173 to i64, !dbg !39
  %189 = getelementptr float, ptr addrspace(1) %4, i64 %188, !dbg !39
  %190 = sext i32 %175 to i64, !dbg !39
  %191 = getelementptr float, ptr addrspace(1) %4, i64 %190, !dbg !39
  %192 = sext i32 %177 to i64, !dbg !39
  %193 = getelementptr float, ptr addrspace(1) %4, i64 %192, !dbg !39
  %194 = sext i32 %179 to i64, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %4, i64 %194, !dbg !39
  %196 = sext i32 %181 to i64, !dbg !39
  %197 = getelementptr float, ptr addrspace(1) %4, i64 %196, !dbg !39
  %198 = sext i32 %183 to i64, !dbg !39
  %199 = getelementptr float, ptr addrspace(1) %4, i64 %198, !dbg !39
  %200 = sext i32 %185 to i64, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !39
  %202 = sext i32 %187 to i64, !dbg !39
  %203 = getelementptr float, ptr addrspace(1) %4, i64 %202, !dbg !39
  %204 = and i32 %36, 192, !dbg !40
  %205 = shl nuw nsw i32 %12, 2, !dbg !40
  %206 = or disjoint i32 %204, %205, !dbg !40
  %207 = or disjoint i32 %206, %37, !dbg !40
  %208 = and i32 %11, 127, !dbg !40
  %209 = lshr exact i32 %206, 4, !dbg !40
  %210 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %209, !dbg !40
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %207, !dbg !40
  %212 = bitcast float %139 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !40
  %213 = or disjoint i32 %207, 1, !dbg !40
  %214 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %213, !dbg !40
  %215 = bitcast float %140 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !40
  %216 = or disjoint i32 %207, 2, !dbg !40
  %217 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %216, !dbg !40
  %218 = bitcast float %141 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !40
  %219 = or disjoint i32 %207, 3, !dbg !40
  %220 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %219, !dbg !40
  %221 = bitcast float %142 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %222 = lshr i32 %208, 6, !dbg !40
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !40
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %208, !dbg !40
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !40
  %226 = or disjoint i32 %208, 128, !dbg !40
  %227 = lshr i32 %226, 6, !dbg !40
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !40
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %226, !dbg !40
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !40
  %231 = or disjoint i32 %208, 256, !dbg !40
  %232 = lshr i32 %231, 6, !dbg !40
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !40
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %231, !dbg !40
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !40
  %236 = or disjoint i32 %208, 384, !dbg !40
  %237 = lshr i32 %236, 6, !dbg !40
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !40
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !40
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %241 = bitcast float %143 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %241, i1 true) #2, !dbg !40
  %242 = bitcast float %144 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %242, i1 true) #2, !dbg !40
  %243 = bitcast float %145 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %243, i1 true) #2, !dbg !40
  %244 = bitcast float %146 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %244, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %245 = load i32, ptr addrspace(3) %224, align 4, !dbg !40
  %246 = load i32, ptr addrspace(3) %229, align 4, !dbg !40
  %247 = load i32, ptr addrspace(3) %234, align 4, !dbg !40
  %248 = load i32, ptr addrspace(3) %239, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %189, i1 %27) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %230, ptr addrspace(1) %191, i1 %28) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %193, i1 %29) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %195, i1 %30) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %245, ptr addrspace(1) %197, i1 %31) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %246, ptr addrspace(1) %199, i1 %32) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %201, i1 %33) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %248, ptr addrspace(1) %203, i1 %33) #2, !dbg !40
  %249 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !41
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %190, !dbg !41
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %192, !dbg !41
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !41
  %253 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !41
  %254 = getelementptr float, ptr addrspace(1) %5, i64 %198, !dbg !41
  %255 = getelementptr float, ptr addrspace(1) %5, i64 %200, !dbg !41
  %256 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %257 = bitcast float %155 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %257, i1 true) #2, !dbg !42
  %258 = bitcast float %156 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %258, i1 true) #2, !dbg !42
  %259 = bitcast float %157 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %259, i1 true) #2, !dbg !42
  %260 = bitcast float %158 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %260, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %261 = load i32, ptr addrspace(3) %224, align 4, !dbg !42
  %262 = load i32, ptr addrspace(3) %229, align 4, !dbg !42
  %263 = load i32, ptr addrspace(3) %234, align 4, !dbg !42
  %264 = load i32, ptr addrspace(3) %239, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %265 = bitcast float %159 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %265, i1 true) #2, !dbg !42
  %266 = bitcast float %160 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %266, i1 true) #2, !dbg !42
  %267 = bitcast float %161 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %267, i1 true) #2, !dbg !42
  %268 = bitcast float %162 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %268, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %269 = load i32, ptr addrspace(3) %224, align 4, !dbg !42
  %270 = load i32, ptr addrspace(3) %229, align 4, !dbg !42
  %271 = load i32, ptr addrspace(3) %234, align 4, !dbg !42
  %272 = load i32, ptr addrspace(3) %239, align 4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %261, ptr addrspace(1) %249, i1 %27) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %262, ptr addrspace(1) %250, i1 %28) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %263, ptr addrspace(1) %251, i1 %29) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %264, ptr addrspace(1) %252, i1 %30) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %253, i1 %31) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %254, i1 %32) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %271, ptr addrspace(1) %255, i1 %33) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %256, i1 %33) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyri5puopb75qgsijlw6g7o2ivyk66amgsv7mjoi5oswinzn3ooj.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_div_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_0", linkageName: "triton_poi_fused_div_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 47, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 32, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 44, scope: !7)
!38 = !DILocation(line: 40, column: 37, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 25, scope: !7)
!42 = !DILocation(line: 41, column: 55, scope: !7)
!43 = !DILocation(line: 41, column: 4, scope: !7)
