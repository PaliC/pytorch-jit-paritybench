; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %12, !dbg !16
  %20 = or disjoint i32 %18, %13, !dbg !16
  %21 = or disjoint i32 %18, %10, !dbg !16
  %22 = icmp slt i32 %19, 64, !dbg !17
  %23 = icmp slt i32 %20, 64, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %25 = sdiv i32 %.frozen, 256, !dbg !18
  %26 = mul i32 %25, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %19, 8, !dbg !20
  %28 = shl i32 %20, 8, !dbg !20
  %29 = shl i32 %25, 14, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %30, %27, !dbg !23
  %32 = add i32 %30, %28, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = bitcast i32 %39 to float, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = sext i32 %.decomposed to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = fadd float %42, %62, !dbg !28
  %67 = fadd float %43, %63, !dbg !28
  %68 = fadd float %44, %64, !dbg !28
  %69 = fadd float %45, %65, !dbg !28
  %70 = fadd float %51, %62, !dbg !28
  %71 = fadd float %52, %63, !dbg !28
  %72 = fadd float %53, %64, !dbg !28
  %73 = fadd float %54, %65, !dbg !28
  %74 = shl i32 %15, 6, !dbg !29
  %75 = shl i32 %16, 6, !dbg !29
  %76 = add i32 %21, %74, !dbg !30
  %77 = add i32 %21, %75, !dbg !30
  %78 = sext i32 %76 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !31
  %80 = sext i32 %77 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !31
  %82 = shl i32 %8, 7, !dbg !32
  %83 = and i32 %82, 896, !dbg !32
  %84 = or disjoint i32 %83, %12, !dbg !32
  %85 = and i32 %9, 508, !dbg !32
  %86 = lshr exact i32 %83, 5, !dbg !32
  %87 = add nuw nsw i32 %86, %84, !dbg !32
  %88 = zext nneg i32 %87 to i64, !dbg !32
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %88, !dbg !32
  %90 = bitcast float %66 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !32
  %91 = or disjoint i32 %84, 32, !dbg !32
  %92 = lshr i32 %91, 5, !dbg !32
  %93 = add nuw nsw i32 %92, %91, !dbg !32
  %94 = zext nneg i32 %93 to i64, !dbg !32
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !32
  %96 = bitcast float %67 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !32
  %97 = or disjoint i32 %84, 64, !dbg !32
  %98 = lshr i32 %97, 5, !dbg !32
  %99 = add nuw nsw i32 %98, %97, !dbg !32
  %100 = zext nneg i32 %99 to i64, !dbg !32
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !32
  %102 = bitcast float %68 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !32
  %103 = or disjoint i32 %84, 96, !dbg !32
  %104 = lshr i32 %103, 5, !dbg !32
  %105 = add nuw nsw i32 %104, %103, !dbg !32
  %106 = zext nneg i32 %105 to i64, !dbg !32
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !32
  %108 = bitcast float %69 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !32
  %109 = or disjoint i32 %84, 16, !dbg !32
  %110 = add nuw nsw i32 %109, %86, !dbg !32
  %111 = zext nneg i32 %110 to i64, !dbg !32
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !32
  %113 = bitcast float %70 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !32
  %114 = or disjoint i32 %84, 48, !dbg !32
  %115 = lshr i32 %114, 5, !dbg !32
  %116 = add nuw nsw i32 %115, %114, !dbg !32
  %117 = zext nneg i32 %116 to i64, !dbg !32
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !32
  %119 = bitcast float %71 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !32
  %120 = or disjoint i32 %84, 80, !dbg !32
  %121 = lshr i32 %120, 5, !dbg !32
  %122 = add nuw nsw i32 %121, %120, !dbg !32
  %123 = zext nneg i32 %122 to i64, !dbg !32
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !32
  %125 = bitcast float %72 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !32
  %126 = or disjoint i32 %84, 112, !dbg !32
  %127 = lshr i32 %126, 5, !dbg !32
  %128 = add nuw nsw i32 %127, %126, !dbg !32
  %129 = zext nneg i32 %128 to i64, !dbg !32
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !32
  %131 = bitcast float %73 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %132 = lshr i32 %85, 5, !dbg !32
  %133 = add nuw nsw i32 %132, %85, !dbg !32
  %134 = zext nneg i32 %133 to i64, !dbg !32
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !32
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !32
  %137 = or disjoint i32 %85, 1, !dbg !32
  %138 = add nuw nsw i32 %137, %132, !dbg !32
  %139 = zext nneg i32 %138 to i64, !dbg !32
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !32
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !32
  %142 = or disjoint i32 %85, 2, !dbg !32
  %143 = add nuw nsw i32 %142, %132, !dbg !32
  %144 = zext nneg i32 %143 to i64, !dbg !32
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !32
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !32
  %147 = or disjoint i32 %85, 3, !dbg !32
  %148 = add nuw nsw i32 %147, %132, !dbg !32
  %149 = zext nneg i32 %148 to i64, !dbg !32
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !32
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !32
  %152 = or disjoint i32 %85, 512, !dbg !32
  %153 = lshr i32 %152, 5, !dbg !32
  %154 = add nuw nsw i32 %153, %152, !dbg !32
  %155 = zext nneg i32 %154 to i64, !dbg !32
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %155, !dbg !32
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !32
  %158 = or disjoint i32 %85, 513, !dbg !32
  %159 = lshr i32 %158, 5, !dbg !32
  %160 = add nuw nsw i32 %159, %158, !dbg !32
  %161 = zext nneg i32 %160 to i64, !dbg !32
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %161, !dbg !32
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !32
  %164 = or disjoint i32 %85, 514, !dbg !32
  %165 = lshr i32 %164, 5, !dbg !32
  %166 = add nuw nsw i32 %165, %164, !dbg !32
  %167 = zext nneg i32 %166 to i64, !dbg !32
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %167, !dbg !32
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !32
  %170 = or disjoint i32 %85, 515, !dbg !32
  %171 = lshr i32 %170, 5, !dbg !32
  %172 = add nuw nsw i32 %171, %170, !dbg !32
  %173 = zext nneg i32 %172 to i64, !dbg !32
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %173, !dbg !32
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %141, i32 %146, i32 %151, ptr addrspace(1) %79, i1 %24) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %163, i32 %169, i32 %175, ptr addrspace(1) %81, i1 %24) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coyf3auhbbg6ubttfkqrhj2fvnasrvqfmveqmmhbxuhgcg763irl.py", directory: "inductor_cache/oy")
!4 = !{ptr @triton_poi_fused_convolution_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_34", linkageName: "triton_poi_fused_convolution_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 33, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
