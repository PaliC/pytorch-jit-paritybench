; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 3, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 3, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 16, !dbg !14
  %20 = shl i32 %15, 1, !dbg !15
  %21 = and i32 %20, 14, !dbg !15
  %22 = srem i32 %18, 4, !dbg !16
  %23 = shl i32 %18, 4, !dbg !17
  %24 = or disjoint i32 %23, %21, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %28 = sext i32 %22 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #5, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #5, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %19) #5, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %19) #5, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #5, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #5, !dbg !28
  %42 = sext i32 %18 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !32
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !33
  %49 = fadd float %35, 0x3EE4F8B580000000, !dbg !34
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i1 = icmp eq i32 %52, 0, !dbg !35
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !35
  br i1 %.not.i1, label %59, label %54, !dbg !35

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !35

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !35

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !35
  %64 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %65 = bitcast i32 %64 to float, !dbg !20
  %66 = bitcast i32 %31 to float, !dbg !22
  %67 = fsub float %65, %66, !dbg !36
  %68 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %69 = bitcast i32 %68 to float, !dbg !20
  %70 = fsub float %69, %66, !dbg !36
  %71 = bitcast i32 %48 to float, !dbg !33
  %72 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %73 = bitcast i32 %72 to float, !dbg !32
  %74 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = bitcast i32 %45 to float, !dbg !30
  %77 = bitcast i32 %41 to float, !dbg !28
  %78 = bitcast i32 %38 to float, !dbg !26
  %79 = and i32 %15, 7, !dbg !12
  %80 = or disjoint i32 %14, %79, !dbg !13
  %81 = icmp slt i32 %80, 16, !dbg !14
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !37
  %83 = fmul float %70, %82, !dbg !38
  %84 = fmul float %67, %82, !dbg !38
  %85 = fmul float %83, %78, !dbg !39
  %86 = fmul float %84, %78, !dbg !39
  %87 = fadd float %85, %77, !dbg !40
  %88 = fadd float %86, %77, !dbg !40
  %89 = fsub float 0.000000e+00, %76, !dbg !41
  %90 = fmul float %89, 0x3FF7154760000000, !dbg !45
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #5, !dbg !45
  %92 = fadd float %91, 1.000000e+00, !dbg !46
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #5, !dbg !47
  %94 = fmul float %93, %87, !dbg !48
  %95 = fmul float %93, %88, !dbg !48
  %96 = fadd float %94, %75, !dbg !49
  %97 = fadd float %95, %73, !dbg !49
  %98 = fcmp ogt float %96, 0.000000e+00, !dbg !50
  %99 = fcmp ogt float %97, 0.000000e+00, !dbg !50
  %100 = fmul float %96, %71, !dbg !51
  %101 = fmul float %97, %71, !dbg !51
  %102 = select i1 %98, float %96, float %100, !dbg !52
  %103 = select i1 %99, float %97, float %101, !dbg !52
  %104 = fadd float %87, %88, !dbg !53
  %105 = select i1 %19, float %104, float 0.000000e+00, !dbg !53
  %106 = bitcast float %105 to i32, !dbg !56
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !56
  %108 = bitcast i32 %107 to float, !dbg !56
  %109 = fadd float %105, %108, !dbg !53
  %110 = bitcast float %109 to i32, !dbg !56
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !56
  %112 = bitcast i32 %111 to float, !dbg !56
  %113 = fadd float %109, %112, !dbg !53
  %114 = bitcast float %113 to i32, !dbg !56
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !56
  %116 = bitcast i32 %115 to float, !dbg !56
  %117 = fadd float %113, %116, !dbg !53
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !57
  %119 = bitcast float %117 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !57
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !57
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 1.600000e+01) #5, !dbg !57
  %123 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !58
  %124 = bitcast float %96 to i32, !dbg !59
  %125 = bitcast float %97 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 %19) #5, !dbg !59
  %126 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !60
  %127 = bitcast float %102 to i32, !dbg !61
  %128 = bitcast float %103 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %19) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %129 = sext i32 %80 to i64, !dbg !63
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !63
  %131 = and i32 %15, 56, !dbg !64
  %132 = icmp eq i32 %131, 0, !dbg !64
  %133 = bitcast float %122 to i32, !dbg !64
  %134 = and i1 %132, %81, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %130, i1 %134) #5, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccts5db37metfuqqepils4c4jyg3xbtfo4pdbuis34gzltdj34jt.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2", linkageName: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 39, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 46, column: 18, scope: !7)
!38 = !DILocation(line: 49, column: 19, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 52, column: 23, scope: !7)
!45 = !DILocation(line: 47, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 20, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 47, column: 16, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 35, scope: !7)
!53 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !55)
!54 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!55 = !DILocation(line: 61, column: 26, scope: !7)
!56 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !55)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 25, scope: !7)
!59 = !DILocation(line: 64, column: 45, scope: !7)
!60 = !DILocation(line: 65, column: 25, scope: !7)
!61 = !DILocation(line: 65, column: 45, scope: !7)
!62 = !DILocation(line: 66, column: 4, scope: !7)
!63 = !DILocation(line: 67, column: 28, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 67, column: 4, scope: !7)
