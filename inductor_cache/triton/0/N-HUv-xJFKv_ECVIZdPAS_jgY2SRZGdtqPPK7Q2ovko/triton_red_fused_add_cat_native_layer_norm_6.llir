; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_cat_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
.peel.next:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 3, !dbg !12
  %16 = and i32 %14, 63, !dbg !12
  %17 = lshr i32 %14, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, 68, !dbg !14
  %22 = icmp slt i32 %20, 68, !dbg !14
  %23 = lshr i32 %14, 6, !dbg !15
  %24 = and i32 %23, 3, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %25 = sdiv i32 %.frozen, 17, !dbg !16
  %26 = mul i32 %25, 17, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %27 = srem i32 %20, 17, !dbg !17
  %28 = mul nsw i32 %27, 768, !dbg !18
  %29 = icmp slt i32 %27, 1, !dbg !19
  %30 = icmp sgt i32 %.decomposed, 0, !dbg !20
  %31 = icmp sgt i32 %27, 0, !dbg !20
  %32 = mul i32 %25, 12288, !dbg !21
  %33 = trunc nsw i32 %.decomposed to i8, !dbg !22
  %.lhs.trunc = add nsw i8 %33, -1, !dbg !22
  %34 = srem i8 %.lhs.trunc, 16, !dbg !22
  %.sext = sext i8 %34 to i32, !dbg !22
  %35 = mul i32 %20, 768, !dbg !23
  %36 = and i1 %22, %29
  %37 = add i32 %32, %.sext
  %38 = and i1 %21, %30
  %39 = and i1 %22, %31
  %40 = shl i32 %14, 2
  %41 = and i32 %40, 252
  %42 = or disjoint i32 %41, %24
  %43 = and i32 %14, 255
  %44 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %41
  %45 = getelementptr float, ptr addrspace(3) %44, i32 %42
  %46 = lshr i32 %43, 2
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46
  %48 = getelementptr inbounds float, ptr addrspace(3) %47, i32 %43
  %49 = zext nneg i32 %15 to i64, !dbg !24
  %50 = sext i32 %28 to i64, !dbg !24
  %51 = or disjoint i64 %49, %50, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %22, i32 0, i1 %22) #5, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %36, i32 0, i1 %36) #5, !dbg !29
  %56 = shl nuw nsw i32 %24, 4, !dbg !30
  %57 = add i32 %37, %56, !dbg !31
  %58 = sext i32 %57 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %38, i32 0, i1 %38) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %61 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %61, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %62 = load float, ptr addrspace(3) %48, align 4, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %39, i32 0, i1 %39) #5, !dbg !35
  %65 = bitcast i32 %55 to float, !dbg !29
  %66 = bitcast i32 %64 to float, !dbg !35
  %67 = fadd float %62, %66, !dbg !36
  %68 = select i1 %29, float %65, float %67, !dbg !37
  %69 = or disjoint i32 %15, %35, !dbg !38
  %70 = sext i32 %69 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %70, !dbg !39
  %72 = bitcast float %68 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %71, i1 %22) #5, !dbg !40
  %73 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !41
  %74 = bitcast i32 %53 to float, !dbg !27
  %75 = fadd float %68, %74, !dbg !42
  %76 = select i1 %22, float %75, float 0.000000e+00, !dbg !43
  %invariant.gep = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !24
  br label %77, !dbg !24

77:                                               ; preds = %.peel.next, %77
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %77 ]
  %78 = phi float [ %73, %.peel.next ], [ %110, %77 ]
  %79 = phi float [ 0.000000e+00, %.peel.next ], [ %109, %77 ]
  %80 = phi float [ %76, %.peel.next ], [ %108, %77 ]
  %81 = or disjoint i64 %indvars.iv, %49, !dbg !44
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %81, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep, i1 %22, i32 0, i1 %22) #5, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %36, i32 0, i1 %36) #5, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = trunc i64 %indvars.iv to i32, !dbg !31
  %.tr = or disjoint i32 %24, %86, !dbg !31
  %87 = shl i32 %.tr, 4, !dbg !31
  %88 = add i32 %37, %87, !dbg !31
  %89 = sext i32 %88 to i64, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %38, i32 0, i1 %38) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %92 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %92, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %93 = load float, ptr addrspace(3) %48, align 4, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %39, i32 0, i1 %39) #5, !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fadd float %93, %96, !dbg !36
  %98 = select i1 %29, float %85, float %97, !dbg !37
  %99 = bitcast i32 %82 to float, !dbg !27
  %100 = fadd float %98, %99, !dbg !42
  %101 = fsub float %100, %80, !dbg !45
  %102 = fadd float %78, 1.000000e+00, !dbg !49
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %102) #5, !dbg !50
  %104 = fadd float %80, %103, !dbg !51
  %105 = fsub float %100, %104, !dbg !52
  %106 = fmul float %101, %105, !dbg !53
  %107 = fadd float %79, %106, !dbg !54
  %108 = select i1 %22, float %104, float %80, !dbg !43
  %109 = select i1 %22, float %107, float %79, !dbg !55
  %110 = select i1 %22, float %102, float %78, !dbg !41
  %111 = trunc nuw nsw i64 %81 to i32, !dbg !38
  %112 = add i32 %35, %111, !dbg !38
  %113 = sext i32 %112 to i64, !dbg !39
  %114 = getelementptr float, ptr addrspace(1) %7, i64 %113, !dbg !39
  %115 = bitcast float %98 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %114, i1 %22) #5, !dbg !40
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !24
  %116 = icmp samesign ult i64 %indvars.iv, 764, !dbg !24
  br i1 %116, label %77, label %.loopexit, !dbg !24, !llvm.loop !56

.loopexit:                                        ; preds = %77
  %117 = bitcast float %108 to i32, !dbg !58
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !58
  %119 = bitcast i32 %118 to float, !dbg !58
  %120 = bitcast float %109 to i32, !dbg !58
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !58
  %122 = bitcast i32 %121 to float, !dbg !58
  %123 = bitcast float %110 to i32, !dbg !58
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !58
  %125 = bitcast i32 %124 to float, !dbg !58
  %126 = fsub float %119, %108, !dbg !60
  %127 = fadd float %110, %125, !dbg !62
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !63
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %127) #5, !dbg !64
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !65
  %131 = fmul float %126, %130, !dbg !66
  %132 = fadd float %108, %131, !dbg !67
  %133 = fadd float %109, %122, !dbg !68
  %134 = fmul float %126, %126, !dbg !69
  %135 = fmul float %110, %134, !dbg !70
  %136 = fmul float %135, %130, !dbg !71
  %137 = fadd float %133, %136, !dbg !72
  %138 = bitcast float %132 to i32, !dbg !58
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !58
  %140 = bitcast i32 %139 to float, !dbg !58
  %141 = bitcast float %137 to i32, !dbg !58
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !58
  %143 = bitcast i32 %142 to float, !dbg !58
  %144 = bitcast float %127 to i32, !dbg !58
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !58
  %146 = bitcast i32 %145 to float, !dbg !58
  %147 = fsub float %140, %132, !dbg !60
  %148 = fadd float %127, %146, !dbg !62
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !63
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %148) #5, !dbg !64
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !65
  %152 = fmul float %147, %151, !dbg !66
  %153 = fadd float %132, %152, !dbg !67
  %154 = fadd float %137, %143, !dbg !68
  %155 = fmul float %147, %147, !dbg !69
  %156 = fmul float %127, %155, !dbg !70
  %157 = fmul float %151, %156, !dbg !71
  %158 = fadd float %154, %157, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !73
  %160 = bitcast float %153 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !73
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %163 = bitcast float %158 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %163, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %164 = load float, ptr addrspace(3) %161, align 4, !dbg !74
  %165 = sext i32 %19 to i64, !dbg !75
  %166 = getelementptr float, ptr addrspace(1) %8, i64 %165, !dbg !75
  %167 = and i32 %14, 192, !dbg !76
  %168 = icmp eq i32 %167, 0, !dbg !76
  %169 = and i1 %168, %21, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %166, i1 %169) #5, !dbg !76
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 7.680000e+02) #5, !dbg !77
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 7.680000e+02) #5, !dbg !77
  %172 = fadd float %170, 0x3EE4F8B580000000, !dbg !78
  %173 = fadd float %171, 0x3EE4F8B580000000, !dbg !78
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i = icmp eq i32 %174, 0, !dbg !74
  br i1 %.not.i, label %177, label %175, !dbg !74

175:                                              ; preds = %.loopexit
  %176 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %172), !dbg !74
  br label %__nv_rsqrtf.exit, !dbg !74

177:                                              ; preds = %.loopexit
  %178 = tail call float @llvm.nvvm.rsqrt.approx.f(float %172), !dbg !74
  br label %__nv_rsqrtf.exit, !dbg !74

__nv_rsqrtf.exit:                                 ; preds = %175, %177
  %.0.i = phi float [ %176, %175 ], [ %178, %177 ], !dbg !74
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i6 = icmp eq i32 %179, 0, !dbg !74
  br i1 %.not.i6, label %182, label %180, !dbg !74

180:                                              ; preds = %__nv_rsqrtf.exit
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !74
  br label %__nv_rsqrtf.exit8, !dbg !74

182:                                              ; preds = %__nv_rsqrtf.exit
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !74
  br label %__nv_rsqrtf.exit8, !dbg !74

__nv_rsqrtf.exit8:                                ; preds = %180, %182
  %.0.i7 = phi float [ %181, %180 ], [ %183, %182 ], !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !80
  %185 = bitcast float %.0.i to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %184, i1 %169) #5, !dbg !81
  %invariant.gep19 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !82
  br label %186, !dbg !82

186:                                              ; preds = %__nv_rsqrtf.exit8, %186
  %indvars.iv14 = phi i64 [ 0, %__nv_rsqrtf.exit8 ], [ %indvars.iv.next15, %186 ]
  %187 = or disjoint i64 %indvars.iv14, %49, !dbg !83
  %188 = trunc nuw nsw i64 %187 to i32, !dbg !84
  %189 = add i32 %35, %188, !dbg !84
  %190 = sext i32 %189 to i64, !dbg !85
  %191 = getelementptr float, ptr addrspace(1) %7, i64 %190, !dbg !85
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %22, i32 0, i1 %22) #5, !dbg !86
  %193 = bitcast i32 %192 to float, !dbg !86
  %gep20 = getelementptr float, ptr addrspace(1) %invariant.gep19, i64 %187, !dbg !87
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep20, i1 %22, i32 0, i1 %22) #5, !dbg !88
  %195 = bitcast i32 %194 to float, !dbg !88
  %196 = getelementptr float, ptr addrspace(1) %5, i64 %187, !dbg !89
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 true, i32 0, i1 true) #5, !dbg !90
  %198 = bitcast i32 %197 to float, !dbg !90
  %199 = getelementptr float, ptr addrspace(1) %6, i64 %187, !dbg !91
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 true, i32 0, i1 true) #5, !dbg !92
  %201 = bitcast i32 %200 to float, !dbg !92
  %202 = fadd float %193, %195, !dbg !93
  %203 = fsub float %202, %153, !dbg !94
  %204 = fmul float %.0.i7, %203, !dbg !95
  %205 = fmul float %204, %198, !dbg !96
  %206 = fadd float %205, %201, !dbg !97
  %207 = getelementptr float, ptr addrspace(1) %9, i64 %190, !dbg !98
  %208 = bitcast float %206 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %207, i1 %22) #5, !dbg !99
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 4, !dbg !82
  %209 = icmp samesign ult i64 %indvars.iv14, 764, !dbg !82
  br i1 %209, label %186, label %210, !dbg !82

210:                                              ; preds = %186
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu4lf52tjilpns5v26o6pj24w37gxw2m7zkwrvpjaim2yrhgjew6.py", directory: "inductor_cache/u4")
!4 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_cat_native_layer_norm_6", linkageName: "triton_red_fused_add_cat_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 44, scope: !7)
!19 = !DILocation(line: 41, column: 22, scope: !7)
!20 = !DILocation(line: 43, column: 23, scope: !7)
!21 = !DILocation(line: 46, column: 48, scope: !7)
!22 = !DILocation(line: 46, column: 69, scope: !7)
!23 = !DILocation(line: 60, column: 38, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 49, scope: !7)
!28 = !DILocation(line: 42, column: 34, scope: !7)
!29 = !DILocation(line: 42, column: 74, scope: !7)
!30 = !DILocation(line: 46, column: 37, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 34, scope: !7)
!33 = !DILocation(line: 46, column: 76, scope: !7)
!34 = !DILocation(line: 47, column: 35, scope: !7)
!35 = !DILocation(line: 47, column: 75, scope: !7)
!36 = !DILocation(line: 48, column: 23, scope: !7)
!37 = !DILocation(line: 51, column: 37, scope: !7)
!38 = !DILocation(line: 60, column: 34, scope: !7)
!39 = !DILocation(line: 60, column: 29, scope: !7)
!40 = !DILocation(line: 60, column: 50, scope: !7)
!41 = !DILocation(line: 59, column: 66, scope: !7)
!42 = !DILocation(line: 52, column: 24, scope: !7)
!43 = !DILocation(line: 57, column: 62, scope: !7)
!44 = !DILocation(line: 33, column: 27, scope: !7)
!45 = !DILocation(line: 183, column: 24, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 55, column: 55, scope: !7)
!49 = !DILocation(line: 184, column: 30, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 185, column: 34, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 185, column: 26, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 186, column: 39, scope: !46, inlinedAt: !48)
!53 = !DILocation(line: 186, column: 31, scope: !46, inlinedAt: !48)
!54 = !DILocation(line: 186, column: 22, scope: !46, inlinedAt: !48)
!55 = !DILocation(line: 58, column: 58, scope: !7)
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.peeled.count", i32 1}
!58 = !DILocation(line: 204, column: 46, scope: !46, inlinedAt: !59)
!59 = !DILocation(line: 62, column: 44, scope: !7)
!60 = !DILocation(line: 192, column: 21, scope: !61, inlinedAt: !59)
!61 = distinct !DILexicalBlockFile(scope: !46, file: !47, discriminator: 0)
!62 = !DILocation(line: 193, column: 28, scope: !61, inlinedAt: !59)
!63 = !DILocation(line: 194, column: 39, scope: !61, inlinedAt: !59)
!64 = !DILocation(line: 194, column: 60, scope: !61, inlinedAt: !59)
!65 = !DILocation(line: 194, column: 49, scope: !61, inlinedAt: !59)
!66 = !DILocation(line: 196, column: 25, scope: !61, inlinedAt: !59)
!67 = !DILocation(line: 196, column: 17, scope: !61, inlinedAt: !59)
!68 = !DILocation(line: 197, column: 15, scope: !61, inlinedAt: !59)
!69 = !DILocation(line: 197, column: 30, scope: !61, inlinedAt: !59)
!70 = !DILocation(line: 197, column: 38, scope: !61, inlinedAt: !59)
!71 = !DILocation(line: 197, column: 49, scope: !61, inlinedAt: !59)
!72 = !DILocation(line: 197, column: 22, scope: !61, inlinedAt: !59)
!73 = !DILocation(line: 64, column: 22, scope: !7)
!74 = !DILocation(line: 72, column: 28, scope: !7)
!75 = !DILocation(line: 67, column: 25, scope: !7)
!76 = !DILocation(line: 67, column: 37, scope: !7)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 73, column: 4, scope: !7)
!80 = !DILocation(line: 74, column: 28, scope: !7)
!81 = !DILocation(line: 74, column: 40, scope: !7)
!82 = !DILocation(line: 75, column: 36, scope: !7)
!83 = !DILocation(line: 76, column: 27, scope: !7)
!84 = !DILocation(line: 79, column: 41, scope: !7)
!85 = !DILocation(line: 79, column: 36, scope: !7)
!86 = !DILocation(line: 79, column: 50, scope: !7)
!87 = !DILocation(line: 80, column: 35, scope: !7)
!88 = !DILocation(line: 80, column: 49, scope: !7)
!89 = !DILocation(line: 81, column: 35, scope: !7)
!90 = !DILocation(line: 81, column: 40, scope: !7)
!91 = !DILocation(line: 82, column: 35, scope: !7)
!92 = !DILocation(line: 82, column: 40, scope: !7)
!93 = !DILocation(line: 83, column: 24, scope: !7)
!94 = !DILocation(line: 84, column: 24, scope: !7)
!95 = !DILocation(line: 85, column: 24, scope: !7)
!96 = !DILocation(line: 86, column: 24, scope: !7)
!97 = !DILocation(line: 87, column: 24, scope: !7)
!98 = !DILocation(line: 88, column: 29, scope: !7)
!99 = !DILocation(line: 88, column: 50, scope: !7)
!100 = !DILocation(line: 75, column: 4, scope: !7)
