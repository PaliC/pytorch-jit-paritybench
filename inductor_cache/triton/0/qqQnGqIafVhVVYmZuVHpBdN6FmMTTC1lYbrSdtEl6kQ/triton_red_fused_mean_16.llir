; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr4, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 512, !dbg !14
  %12 = lshr i32 %7, 4, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = sdiv i32 %10, 64, !dbg !16
  %15 = mul i32 %14, 6080
  %16 = add i32 %15, %10
  br i1 %11, label %.split.us, label %.split.preheader

.split.preheader:                                 ; preds = %4
  %17 = shl nuw nsw i32 %13, 6, !dbg !17
  %18 = add i32 %16, %17, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %22 = shl nuw nsw i32 %13, 6, !dbg !17
  %23 = or disjoint i32 %22, 512, !dbg !17
  %24 = add i32 %16, %23, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %28 = shl nuw nsw i32 %13, 6, !dbg !17
  %29 = or disjoint i32 %28, 1024, !dbg !17
  %30 = add i32 %16, %29, !dbg !18
  %31 = sext i32 %30 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %34 = shl nuw nsw i32 %13, 6, !dbg !17
  %35 = or disjoint i32 %34, 1536, !dbg !17
  %36 = add i32 %16, %35, !dbg !18
  %37 = sext i32 %36 to i64, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %40 = shl nuw nsw i32 %13, 6, !dbg !17
  %41 = or disjoint i32 %40, 2048, !dbg !17
  %42 = add i32 %16, %41, !dbg !18
  %43 = sext i32 %42 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %46 = shl nuw nsw i32 %13, 6, !dbg !17
  %47 = or disjoint i32 %46, 2560, !dbg !17
  %48 = add i32 %16, %47, !dbg !18
  %49 = sext i32 %48 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %52 = shl nuw nsw i32 %13, 6, !dbg !17
  %53 = or disjoint i32 %52, 3072, !dbg !17
  %54 = add i32 %16, %53, !dbg !18
  %55 = sext i32 %54 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %58 = shl nuw nsw i32 %13, 6, !dbg !17
  %59 = or disjoint i32 %58, 3584, !dbg !17
  %60 = add i32 %16, %59, !dbg !18
  %61 = sext i32 %60 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %64 = shl nuw nsw i32 %13, 6, !dbg !17
  %65 = or disjoint i32 %64, 4096, !dbg !17
  %66 = add i32 %16, %65, !dbg !18
  %67 = sext i32 %66 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !19
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %70 = shl nuw nsw i32 %13, 6, !dbg !17
  %71 = or disjoint i32 %70, 4608, !dbg !17
  %72 = add i32 %16, %71, !dbg !18
  %73 = sext i32 %72 to i64, !dbg !19
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !19
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %76 = shl nuw nsw i32 %13, 6, !dbg !17
  %77 = or disjoint i32 %76, 5120, !dbg !17
  %78 = add i32 %16, %77, !dbg !18
  %79 = sext i32 %78 to i64, !dbg !19
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !19
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %82 = shl nuw nsw i32 %13, 6, !dbg !17
  %83 = or disjoint i32 %82, 5632, !dbg !17
  %84 = add i32 %16, %83, !dbg !18
  %85 = sext i32 %84 to i64, !dbg !19
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !19
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  br label %.split2.us, !dbg !12

.split.us:                                        ; preds = %4
  %88 = shl nuw nsw i32 %13, 6, !dbg !18
  %89 = add i32 %16, %88, !dbg !18
  %90 = sext i32 %89 to i64, !dbg !19
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !19
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !20
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !20
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !20
  %97 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !20
  %98 = insertelement <4 x i32> %97, i32 %94, i64 1, !dbg !20
  %99 = insertelement <4 x i32> %98, i32 %95, i64 2, !dbg !20
  %100 = insertelement <4 x i32> %99, i32 %96, i64 3, !dbg !20
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !20
  %102 = fadd <4 x float> %101, zeroinitializer, !dbg !21
  %.tr.1 = shl nuw nsw i32 %13, 6, !dbg !18
  %103 = or disjoint i32 %.tr.1, 512, !dbg !18
  %104 = add i32 %16, %103, !dbg !18
  %105 = sext i32 %104 to i64, !dbg !19
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !19
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !20
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !20
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !20
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !20
  %112 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !20
  %113 = insertelement <4 x i32> %112, i32 %109, i64 1, !dbg !20
  %114 = insertelement <4 x i32> %113, i32 %110, i64 2, !dbg !20
  %115 = insertelement <4 x i32> %114, i32 %111, i64 3, !dbg !20
  %116 = bitcast <4 x i32> %115 to <4 x float>, !dbg !20
  %117 = fadd <4 x float> %102, %116, !dbg !21
  %.tr.2 = shl nuw nsw i32 %13, 6, !dbg !18
  %118 = or disjoint i32 %.tr.2, 1024, !dbg !18
  %119 = add i32 %16, %118, !dbg !18
  %120 = sext i32 %119 to i64, !dbg !19
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !19
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !20
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !20
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !20
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !20
  %127 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !20
  %128 = insertelement <4 x i32> %127, i32 %124, i64 1, !dbg !20
  %129 = insertelement <4 x i32> %128, i32 %125, i64 2, !dbg !20
  %130 = insertelement <4 x i32> %129, i32 %126, i64 3, !dbg !20
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !20
  %132 = fadd <4 x float> %117, %131, !dbg !21
  %.tr.3 = shl nuw nsw i32 %13, 6, !dbg !18
  %133 = or disjoint i32 %.tr.3, 1536, !dbg !18
  %134 = add i32 %16, %133, !dbg !18
  %135 = sext i32 %134 to i64, !dbg !19
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !19
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !20
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !20
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !20
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !20
  %142 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !20
  %143 = insertelement <4 x i32> %142, i32 %139, i64 1, !dbg !20
  %144 = insertelement <4 x i32> %143, i32 %140, i64 2, !dbg !20
  %145 = insertelement <4 x i32> %144, i32 %141, i64 3, !dbg !20
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !20
  %147 = fadd <4 x float> %132, %146, !dbg !21
  %.tr.4 = shl nuw nsw i32 %13, 6, !dbg !18
  %148 = or disjoint i32 %.tr.4, 2048, !dbg !18
  %149 = add i32 %16, %148, !dbg !18
  %150 = sext i32 %149 to i64, !dbg !19
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !19
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !20
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !20
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !20
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !20
  %157 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !20
  %158 = insertelement <4 x i32> %157, i32 %154, i64 1, !dbg !20
  %159 = insertelement <4 x i32> %158, i32 %155, i64 2, !dbg !20
  %160 = insertelement <4 x i32> %159, i32 %156, i64 3, !dbg !20
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !20
  %162 = fadd <4 x float> %147, %161, !dbg !21
  %.tr.5 = shl nuw nsw i32 %13, 6, !dbg !18
  %163 = or disjoint i32 %.tr.5, 2560, !dbg !18
  %164 = add i32 %16, %163, !dbg !18
  %165 = sext i32 %164 to i64, !dbg !19
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !19
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !20
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !20
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !20
  %172 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !20
  %173 = insertelement <4 x i32> %172, i32 %169, i64 1, !dbg !20
  %174 = insertelement <4 x i32> %173, i32 %170, i64 2, !dbg !20
  %175 = insertelement <4 x i32> %174, i32 %171, i64 3, !dbg !20
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !20
  %177 = fadd <4 x float> %162, %176, !dbg !21
  %.tr.6 = shl nuw nsw i32 %13, 6, !dbg !18
  %178 = or disjoint i32 %.tr.6, 3072, !dbg !18
  %179 = add i32 %16, %178, !dbg !18
  %180 = sext i32 %179 to i64, !dbg !19
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !19
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !20
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !20
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !20
  %187 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !20
  %188 = insertelement <4 x i32> %187, i32 %184, i64 1, !dbg !20
  %189 = insertelement <4 x i32> %188, i32 %185, i64 2, !dbg !20
  %190 = insertelement <4 x i32> %189, i32 %186, i64 3, !dbg !20
  %191 = bitcast <4 x i32> %190 to <4 x float>, !dbg !20
  %192 = fadd <4 x float> %177, %191, !dbg !21
  %.tr.7 = shl nuw nsw i32 %13, 6, !dbg !18
  %193 = or disjoint i32 %.tr.7, 3584, !dbg !18
  %194 = add i32 %16, %193, !dbg !18
  %195 = sext i32 %194 to i64, !dbg !19
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !19
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !20
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !20
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !20
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !20
  %202 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !20
  %203 = insertelement <4 x i32> %202, i32 %199, i64 1, !dbg !20
  %204 = insertelement <4 x i32> %203, i32 %200, i64 2, !dbg !20
  %205 = insertelement <4 x i32> %204, i32 %201, i64 3, !dbg !20
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !20
  %207 = fadd <4 x float> %192, %206, !dbg !21
  %.tr.8 = shl nuw nsw i32 %13, 6, !dbg !18
  %208 = or disjoint i32 %.tr.8, 4096, !dbg !18
  %209 = add i32 %16, %208, !dbg !18
  %210 = sext i32 %209 to i64, !dbg !19
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !19
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %211, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !20
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !20
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !20
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !20
  %217 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !20
  %218 = insertelement <4 x i32> %217, i32 %214, i64 1, !dbg !20
  %219 = insertelement <4 x i32> %218, i32 %215, i64 2, !dbg !20
  %220 = insertelement <4 x i32> %219, i32 %216, i64 3, !dbg !20
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !20
  %222 = fadd <4 x float> %207, %221, !dbg !21
  %.tr.9 = shl nuw nsw i32 %13, 6, !dbg !18
  %223 = or disjoint i32 %.tr.9, 4608, !dbg !18
  %224 = add i32 %16, %223, !dbg !18
  %225 = sext i32 %224 to i64, !dbg !19
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !19
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !20
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !20
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !20
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !20
  %232 = insertelement <4 x i32> poison, i32 %228, i64 0, !dbg !20
  %233 = insertelement <4 x i32> %232, i32 %229, i64 1, !dbg !20
  %234 = insertelement <4 x i32> %233, i32 %230, i64 2, !dbg !20
  %235 = insertelement <4 x i32> %234, i32 %231, i64 3, !dbg !20
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !20
  %237 = fadd <4 x float> %222, %236, !dbg !21
  %.tr.10 = shl nuw nsw i32 %13, 6, !dbg !18
  %238 = or disjoint i32 %.tr.10, 5120, !dbg !18
  %239 = add i32 %16, %238, !dbg !18
  %240 = sext i32 %239 to i64, !dbg !19
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !19
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %241, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !20
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !20
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !20
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !20
  %247 = insertelement <4 x i32> poison, i32 %243, i64 0, !dbg !20
  %248 = insertelement <4 x i32> %247, i32 %244, i64 1, !dbg !20
  %249 = insertelement <4 x i32> %248, i32 %245, i64 2, !dbg !20
  %250 = insertelement <4 x i32> %249, i32 %246, i64 3, !dbg !20
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !20
  %252 = fadd <4 x float> %237, %251, !dbg !21
  %.tr.11 = shl nuw nsw i32 %13, 6, !dbg !18
  %253 = or disjoint i32 %.tr.11, 5632, !dbg !18
  %254 = add i32 %16, %253, !dbg !18
  %255 = sext i32 %254 to i64, !dbg !19
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !19
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %256, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !20
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !20
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !20
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !20
  %262 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !20
  %263 = insertelement <4 x i32> %262, i32 %259, i64 1, !dbg !20
  %264 = insertelement <4 x i32> %263, i32 %260, i64 2, !dbg !20
  %265 = insertelement <4 x i32> %264, i32 %261, i64 3, !dbg !20
  %266 = bitcast <4 x i32> %265 to <4 x float>, !dbg !20
  %267 = fadd <4 x float> %252, %266, !dbg !21
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us, %.split.preheader
  %268 = phi <4 x float> [ zeroinitializer, %.split.preheader ], [ %267, %.split.us ], !dbg !12
  %269 = lshr i32 %7, 5, !dbg !12
  %270 = and i32 %7, 63, !dbg !12
  %271 = or disjoint i32 %6, %270, !dbg !13
  %272 = icmp slt i32 %271, 512, !dbg !14
  %273 = and i32 %7, 16, !dbg !12
  %274 = extractelement <4 x float> %268, i64 0, !dbg !22
  %275 = bitcast float %274 to i32, !dbg !22
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 16, i32 31), !dbg !22
  %277 = bitcast i32 %276 to float, !dbg !22
  %278 = fadd float %274, %277, !dbg !26
  %279 = extractelement <4 x float> %268, i64 1, !dbg !22
  %280 = bitcast float %279 to i32, !dbg !22
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 16, i32 31), !dbg !22
  %282 = bitcast i32 %281 to float, !dbg !22
  %283 = fadd float %279, %282, !dbg !26
  %284 = extractelement <4 x float> %268, i64 2, !dbg !22
  %285 = bitcast float %284 to i32, !dbg !22
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 16, i32 31), !dbg !22
  %287 = bitcast i32 %286 to float, !dbg !22
  %288 = fadd float %284, %287, !dbg !26
  %289 = extractelement <4 x float> %268, i64 3, !dbg !22
  %290 = bitcast float %289 to i32, !dbg !22
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 16, i32 31), !dbg !22
  %292 = bitcast i32 %291 to float, !dbg !22
  %293 = fadd float %289, %292, !dbg !26
  %294 = icmp eq i32 %273, 0, !dbg !22
  %295 = and i32 %269, 3, !dbg !22
  %296 = shl nuw nsw i32 %9, 2, !dbg !22
  %297 = or disjoint i32 %296, %295, !dbg !22
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !22
  %299 = bitcast float %278 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 %294) #3, !dbg !22
  %300 = or disjoint i32 %296, 4, !dbg !22
  %301 = or disjoint i32 %300, %295, !dbg !22
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !22
  %303 = bitcast float %283 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 %294) #3, !dbg !22
  %304 = or disjoint i32 %296, 8, !dbg !22
  %305 = or disjoint i32 %304, %295, !dbg !22
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !22
  %307 = bitcast float %288 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 %294) #3, !dbg !22
  %308 = or disjoint i32 %296, 12, !dbg !22
  %309 = or disjoint i32 %308, %295, !dbg !22
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !22
  %311 = bitcast float %293 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 %294) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %312 = icmp slt i32 %7, 256, !dbg !22
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !22
  %314 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %313, i1 %312) #3, !dbg !22
  %315 = bitcast i32 %314 to float, !dbg !22
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !22
  %317 = bitcast i32 %316 to float, !dbg !22
  %318 = fadd float %315, %317, !dbg !26
  %319 = bitcast float %318 to i32, !dbg !22
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !22
  %321 = bitcast i32 %320 to float, !dbg !22
  %322 = fadd float %318, %321, !dbg !26
  %323 = and i32 %7, 3, !dbg !22
  %324 = icmp eq i32 %323, 0, !dbg !22
  %325 = and i1 %312, %324, !dbg !22
  %326 = bitcast float %322 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %326, i1 %325) #3, !dbg !22
  %327 = getelementptr i8, ptr addrspace(3) %313, i32 512, !dbg !22
  %328 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %327, i1 %312) #3, !dbg !22
  %329 = bitcast i32 %328 to float, !dbg !22
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !22
  %331 = bitcast i32 %330 to float, !dbg !22
  %332 = fadd float %329, %331, !dbg !26
  %333 = bitcast float %332 to i32, !dbg !22
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 1, i32 31), !dbg !22
  %335 = bitcast i32 %334 to float, !dbg !22
  %336 = fadd float %332, %335, !dbg !26
  %337 = bitcast float %336 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %337, i1 %325) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !22
  %339 = load i32, ptr addrspace(3) %338, align 16, !dbg !22
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %300, !dbg !22
  %341 = load i32, ptr addrspace(3) %340, align 16, !dbg !22
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !22
  %343 = load i32, ptr addrspace(3) %342, align 16, !dbg !22
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !22
  %345 = load i32, ptr addrspace(3) %344, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %346, i32 %339, i32 %341, i32 %343, i32 %345, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !28
  %348 = load i32, ptr addrspace(3) %347, align 4, !dbg !28
  %349 = sext i32 %271 to i64, !dbg !29
  %350 = getelementptr float, ptr addrspace(1) %1, i64 %349, !dbg !29
  %351 = and i32 %7, 64, !dbg !30
  %352 = icmp eq i32 %351, 0, !dbg !30
  %353 = and i1 %352, %272, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %348, ptr addrspace(1) %350, i1 %353) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crix5odxfywvmh2syrbzfv2bxszqym6tztzssz4vnjoxx34hieuy.py", directory: "inductor_cache/ri")
!4 = !{ptr @triton_red_fused_mean_16, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_16", linkageName: "triton_red_fused_mean_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 42, scope: !7)
!18 = !DILocation(line: 34, column: 47, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 57, scope: !7)
!21 = !DILocation(line: 36, column: 23, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 38, column: 25, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 38, column: 28, scope: !7)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
