; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 508, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %.frozen = freeze i32 %23, !dbg !14
  %25 = sdiv i32 %.frozen, 4096, !dbg !14
  %.frozen41 = freeze i32 %24, !dbg !14
  %26 = sdiv i32 %.frozen41, 4096, !dbg !14
  %27 = srem i32 %25, 384, !dbg !15
  %28 = srem i32 %26, 384, !dbg !15
  %.frozen43 = freeze i32 %23, !dbg !16
  %29 = sdiv i32 %.frozen43, 1572864, !dbg !16
  %.frozen44 = freeze i32 %24, !dbg !16
  %30 = sdiv i32 %.frozen44, 1572864, !dbg !16
  %31 = mul i32 %25, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = mul i32 %26, 4096, !dbg !17
  %.decomposed42 = sub i32 %.frozen41, %32, !dbg !17
  %33 = icmp slt i32 %27, 64, !dbg !18
  %34 = icmp slt i32 %28, 64, !dbg !18
  %35 = mul i32 %29, 1572864, !dbg !19
  %srem.decomposed = sub i32 %.frozen43, %35, !dbg !19
  %36 = mul i32 %30, 1572864, !dbg !19
  %srem1.decomposed = sub i32 %.frozen44, %36, !dbg !19
  %37 = shl nsw i32 %29, 18, !dbg !20
  %38 = shl nsw i32 %30, 18, !dbg !20
  %39 = add nsw i32 %37, %srem.decomposed, !dbg !21
  %40 = add nsw i32 %38, %srem1.decomposed, !dbg !21
  %41 = sext i32 %39 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %40 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !23
  %47 = and i32 %27, -64, !dbg !24
  %48 = icmp eq i32 %47, 64, !dbg !24
  %49 = and i32 %28, -64, !dbg !24
  %50 = icmp eq i32 %49, 64, !dbg !24
  %51 = shl nsw i32 %29, 20, !dbg !25
  %52 = shl nsw i32 %30, 20, !dbg !25
  %53 = add nsw i32 %srem.decomposed, -262144, !dbg !26
  %54 = add nsw i32 %53, %51, !dbg !27
  %55 = add nsw i32 %srem1.decomposed, -262144, !dbg !26
  %56 = add nsw i32 %55, %52, !dbg !27
  %57 = sext i32 %54 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !28
  %59 = sext i32 %56 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !29
  %63 = icmp eq i32 %47, 128, !dbg !30
  %64 = icmp eq i32 %49, 128, !dbg !30
  %65 = mul nsw i32 %29, 1310720, !dbg !31
  %66 = mul nsw i32 %30, 1310720, !dbg !31
  %67 = add nsw i32 %srem.decomposed, -524288, !dbg !32
  %68 = add nsw i32 %67, %65, !dbg !33
  %69 = add nsw i32 %srem1.decomposed, -524288, !dbg !32
  %70 = add nsw i32 %69, %66, !dbg !33
  %71 = sext i32 %68 to i64, !dbg !34
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !34
  %73 = sext i32 %70 to i64, !dbg !34
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !34
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !35
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !35
  %77 = icmp eq i32 %47, 192, !dbg !36
  %78 = icmp eq i32 %49, 192, !dbg !36
  %79 = add nsw i32 %27, -192, !dbg !37
  %80 = add nsw i32 %28, -192, !dbg !37
  %81 = shl nsw i32 %79, 12, !dbg !38
  %82 = shl nsw i32 %80, 12, !dbg !38
  %83 = add nsw i32 %37, %.decomposed, !dbg !39
  %84 = add nsw i32 %83, %81, !dbg !40
  %85 = add nsw i32 %38, %.decomposed42, !dbg !39
  %86 = add nsw i32 %85, %82, !dbg !40
  %87 = sext i32 %84 to i64, !dbg !41
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !41
  %89 = sext i32 %86 to i64, !dbg !41
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !41
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #3, !dbg !42
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #3, !dbg !42
  %93 = sext i32 %79 to i64, !dbg !43
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !43
  %95 = sext i32 %80 to i64, !dbg !43
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !43
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %77, i32 0, i1 %77) #3, !dbg !44
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %77, i32 0, i1 %77) #3, !dbg !44
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %77, i32 0, i1 %77) #3, !dbg !44
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %77, i32 0, i1 %77) #3, !dbg !44
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %78, i32 0, i1 %78) #3, !dbg !44
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %78, i32 0, i1 %78) #3, !dbg !44
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %78, i32 0, i1 %78) #3, !dbg !44
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %78, i32 0, i1 %78) #3, !dbg !44
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !45
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !45
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %77, i32 0, i1 %77) #3, !dbg !46
  %108 = bitcast i32 %107 to float, !dbg !46
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %77, i32 0, i1 %77) #3, !dbg !46
  %110 = bitcast i32 %109 to float, !dbg !46
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %77, i32 0, i1 %77) #3, !dbg !46
  %112 = bitcast i32 %111 to float, !dbg !46
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %77, i32 0, i1 %77) #3, !dbg !46
  %114 = bitcast i32 %113 to float, !dbg !46
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %78, i32 0, i1 %78) #3, !dbg !46
  %116 = bitcast i32 %115 to float, !dbg !46
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %78, i32 0, i1 %78) #3, !dbg !46
  %118 = bitcast i32 %117 to float, !dbg !46
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %78, i32 0, i1 %78) #3, !dbg !46
  %120 = bitcast i32 %119 to float, !dbg !46
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %78, i32 0, i1 %78) #3, !dbg !46
  %122 = bitcast i32 %121 to float, !dbg !46
  %123 = fadd float %108, 0x3EE4F8B580000000, !dbg !47
  %124 = fadd float %110, 0x3EE4F8B580000000, !dbg !47
  %125 = fadd float %112, 0x3EE4F8B580000000, !dbg !47
  %126 = fadd float %114, 0x3EE4F8B580000000, !dbg !47
  %127 = fadd float %116, 0x3EE4F8B580000000, !dbg !47
  %128 = fadd float %118, 0x3EE4F8B580000000, !dbg !47
  %129 = fadd float %120, 0x3EE4F8B580000000, !dbg !47
  %130 = fadd float %122, 0x3EE4F8B580000000, !dbg !47
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %131, 0, !dbg !48
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %132, 0, !dbg !48
  br i1 %.not.i, label %138, label %133, !dbg !48

133:                                              ; preds = %17
  br i1 %.not1.i, label %136, label %134, !dbg !48

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

138:                                              ; preds = %17
  br i1 %.not1.i, label %141, label %139, !dbg !48

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %134, %136, %139, %141
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !48
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i2 = icmp eq i32 %143, 0, !dbg !48
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i5 = icmp eq i32 %144, 0, !dbg !48
  br i1 %.not.i2, label %150, label %145, !dbg !48

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %148, label %146, !dbg !48

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !48
  br label %__nv_sqrtf.exit6, !dbg !48

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !48
  br label %__nv_sqrtf.exit6, !dbg !48

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %153, label %151, !dbg !48

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !48
  br label %__nv_sqrtf.exit6, !dbg !48

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !48
  br label %__nv_sqrtf.exit6, !dbg !48

__nv_sqrtf.exit6:                                 ; preds = %146, %148, %151, %153
  %.0.i4 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !48
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i7 = icmp eq i32 %155, 0, !dbg !48
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i10 = icmp eq i32 %156, 0, !dbg !48
  br i1 %.not.i7, label %162, label %157, !dbg !48

157:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %160, label %158, !dbg !48

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !48
  br label %__nv_sqrtf.exit11, !dbg !48

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !48
  br label %__nv_sqrtf.exit11, !dbg !48

162:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %165, label %163, !dbg !48

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !48
  br label %__nv_sqrtf.exit11, !dbg !48

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !48
  br label %__nv_sqrtf.exit11, !dbg !48

__nv_sqrtf.exit11:                                ; preds = %158, %160, %163, %165
  %.0.i9 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !48
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i12 = icmp eq i32 %167, 0, !dbg !48
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i15 = icmp eq i32 %168, 0, !dbg !48
  br i1 %.not.i12, label %174, label %169, !dbg !48

169:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %172, label %170, !dbg !48

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !48
  br label %__nv_sqrtf.exit16, !dbg !48

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !48
  br label %__nv_sqrtf.exit16, !dbg !48

174:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %177, label %175, !dbg !48

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !48
  br label %__nv_sqrtf.exit16, !dbg !48

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !48
  br label %__nv_sqrtf.exit16, !dbg !48

__nv_sqrtf.exit16:                                ; preds = %170, %172, %175, %177
  %.0.i14 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !48
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i17 = icmp eq i32 %179, 0, !dbg !48
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i20 = icmp eq i32 %180, 0, !dbg !48
  br i1 %.not.i17, label %186, label %181, !dbg !48

181:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %184, label %182, !dbg !48

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !48
  br label %__nv_sqrtf.exit21, !dbg !48

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !48
  br label %__nv_sqrtf.exit21, !dbg !48

186:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %189, label %187, !dbg !48

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !48
  br label %__nv_sqrtf.exit21, !dbg !48

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !48
  br label %__nv_sqrtf.exit21, !dbg !48

__nv_sqrtf.exit21:                                ; preds = %182, %184, %187, %189
  %.0.i19 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !48
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i22 = icmp eq i32 %191, 0, !dbg !48
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i25 = icmp eq i32 %192, 0, !dbg !48
  br i1 %.not.i22, label %198, label %193, !dbg !48

193:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %196, label %194, !dbg !48

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !48
  br label %__nv_sqrtf.exit26, !dbg !48

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !48
  br label %__nv_sqrtf.exit26, !dbg !48

198:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %201, label %199, !dbg !48

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !48
  br label %__nv_sqrtf.exit26, !dbg !48

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !48
  br label %__nv_sqrtf.exit26, !dbg !48

__nv_sqrtf.exit26:                                ; preds = %194, %196, %199, %201
  %.0.i24 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !48
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i27 = icmp eq i32 %203, 0, !dbg !48
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i30 = icmp eq i32 %204, 0, !dbg !48
  br i1 %.not.i27, label %210, label %205, !dbg !48

205:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %208, label %206, !dbg !48

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !48
  br label %__nv_sqrtf.exit31, !dbg !48

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !48
  br label %__nv_sqrtf.exit31, !dbg !48

210:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %213, label %211, !dbg !48

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !48
  br label %__nv_sqrtf.exit31, !dbg !48

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !48
  br label %__nv_sqrtf.exit31, !dbg !48

__nv_sqrtf.exit31:                                ; preds = %206, %208, %211, %213
  %.0.i29 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !48
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i32 = icmp eq i32 %215, 0, !dbg !48
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i35 = icmp eq i32 %216, 0, !dbg !48
  br i1 %.not.i32, label %222, label %217, !dbg !48

217:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %220, label %218, !dbg !48

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !48
  br label %__nv_sqrtf.exit36, !dbg !48

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !48
  br label %__nv_sqrtf.exit36, !dbg !48

222:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %225, label %223, !dbg !48

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !48
  br label %__nv_sqrtf.exit36, !dbg !48

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !48
  br label %__nv_sqrtf.exit36, !dbg !48

__nv_sqrtf.exit36:                                ; preds = %218, %220, %223, %225
  %.0.i34 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !48
  %227 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !42
  %228 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !44
  %229 = insertelement <8 x i32> %228, i32 %103, i64 1, !dbg !44
  %230 = insertelement <8 x i32> %229, i32 %102, i64 2, !dbg !44
  %231 = insertelement <8 x i32> %230, i32 %101, i64 3, !dbg !44
  %232 = insertelement <8 x i32> %231, i32 %100, i64 4, !dbg !44
  %233 = insertelement <8 x i32> %232, i32 %99, i64 5, !dbg !44
  %234 = insertelement <8 x i32> %233, i32 %98, i64 6, !dbg !44
  %235 = insertelement <8 x i32> %234, i32 %97, i64 7, !dbg !44
  %236 = bitcast <8 x i32> %235 to <8 x float>, !dbg !44
  %237 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !42
  %238 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !42
  %239 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !42
  %240 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !42
  %241 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !42
  %242 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !42
  %243 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !42
  %244 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !35
  %245 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !35
  %247 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !35
  %249 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !35
  %250 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !35
  %251 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !35
  %252 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !29
  %253 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !29
  %254 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !29
  %255 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !29
  %256 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !29
  %257 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !29
  %258 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !29
  %259 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !29
  %260 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %261 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %262 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %263 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %264 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %265 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %266 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %267 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %268 = or disjoint i32 %23, 2, !dbg !13
  %269 = srem i32 %268, 64, !dbg !49
  %.frozen45 = freeze i32 %23, !dbg !50
  %270 = sdiv i32 %.frozen45, 64, !dbg !50
  %271 = mul i32 %270, 64, !dbg !49
  %.decomposed46 = sub i32 %.frozen45, %271, !dbg !49
  %272 = sdiv i32 %24, 64, !dbg !50
  %273 = srem i32 %272, 64, !dbg !51
  %274 = srem i32 %270, 64, !dbg !51
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !52
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !52
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !52
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !52
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !52
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !52
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !52
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !52
  %283 = getelementptr float, ptr addrspace(1) %6, i64 %93, !dbg !53
  %284 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !53
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %77, i32 0, i1 %77) #3, !dbg !54
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %77, i32 0, i1 %77) #3, !dbg !54
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %77, i32 0, i1 %77) #3, !dbg !54
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %77, i32 0, i1 %77) #3, !dbg !54
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %78, i32 0, i1 %78) #3, !dbg !54
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %78, i32 0, i1 %78) #3, !dbg !54
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %78, i32 0, i1 %78) #3, !dbg !54
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %78, i32 0, i1 %78) #3, !dbg !54
  %293 = getelementptr float, ptr addrspace(1) %7, i64 %93, !dbg !55
  %294 = getelementptr float, ptr addrspace(1) %7, i64 %95, !dbg !55
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %77, i32 0, i1 %77) #3, !dbg !56
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %77, i32 0, i1 %77) #3, !dbg !56
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %77, i32 0, i1 %77) #3, !dbg !56
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %77, i32 0, i1 %77) #3, !dbg !56
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %78, i32 0, i1 %78) #3, !dbg !56
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %78, i32 0, i1 %78) #3, !dbg !56
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %78, i32 0, i1 %78) #3, !dbg !56
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %78, i32 0, i1 %78) #3, !dbg !56
  %303 = insertelement <8 x i32> poison, i32 %227, i64 0, !dbg !42
  %304 = insertelement <8 x i32> %303, i32 %237, i64 1, !dbg !42
  %305 = insertelement <8 x i32> %304, i32 %238, i64 2, !dbg !42
  %306 = insertelement <8 x i32> %305, i32 %239, i64 3, !dbg !42
  %307 = insertelement <8 x i32> %306, i32 %240, i64 4, !dbg !42
  %308 = insertelement <8 x i32> %307, i32 %241, i64 5, !dbg !42
  %309 = insertelement <8 x i32> %308, i32 %242, i64 6, !dbg !42
  %310 = insertelement <8 x i32> %309, i32 %243, i64 7, !dbg !42
  %311 = bitcast <8 x i32> %310 to <8 x float>, !dbg !42
  %312 = fsub <8 x float> %311, %236, !dbg !57
  %313 = insertelement <8 x float> poison, float %282, i64 0, !dbg !58
  %314 = insertelement <8 x float> %313, float %281, i64 1, !dbg !58
  %315 = insertelement <8 x float> %314, float %280, i64 2, !dbg !58
  %316 = insertelement <8 x float> %315, float %279, i64 3, !dbg !58
  %317 = insertelement <8 x float> %316, float %278, i64 4, !dbg !58
  %318 = insertelement <8 x float> %317, float %277, i64 5, !dbg !58
  %319 = insertelement <8 x float> %318, float %276, i64 6, !dbg !58
  %320 = insertelement <8 x float> %319, float %275, i64 7, !dbg !58
  %321 = fmul <8 x float> %312, %320, !dbg !58
  %322 = insertelement <8 x i32> poison, i32 %292, i64 0, !dbg !54
  %323 = insertelement <8 x i32> %322, i32 %291, i64 1, !dbg !54
  %324 = insertelement <8 x i32> %323, i32 %290, i64 2, !dbg !54
  %325 = insertelement <8 x i32> %324, i32 %289, i64 3, !dbg !54
  %326 = insertelement <8 x i32> %325, i32 %288, i64 4, !dbg !54
  %327 = insertelement <8 x i32> %326, i32 %287, i64 5, !dbg !54
  %328 = insertelement <8 x i32> %327, i32 %286, i64 6, !dbg !54
  %329 = insertelement <8 x i32> %328, i32 %285, i64 7, !dbg !54
  %330 = bitcast <8 x i32> %329 to <8 x float>, !dbg !54
  %331 = fmul <8 x float> %321, %330, !dbg !59
  %332 = insertelement <8 x i32> poison, i32 %302, i64 0, !dbg !56
  %333 = insertelement <8 x i32> %332, i32 %301, i64 1, !dbg !56
  %334 = insertelement <8 x i32> %333, i32 %300, i64 2, !dbg !56
  %335 = insertelement <8 x i32> %334, i32 %299, i64 3, !dbg !56
  %336 = insertelement <8 x i32> %335, i32 %298, i64 4, !dbg !56
  %337 = insertelement <8 x i32> %336, i32 %297, i64 5, !dbg !56
  %338 = insertelement <8 x i32> %337, i32 %296, i64 6, !dbg !56
  %339 = insertelement <8 x i32> %338, i32 %295, i64 7, !dbg !56
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !56
  %341 = fadd <8 x float> %331, %340, !dbg !60
  %342 = fcmp olt <8 x float> %341, zeroinitializer, !dbg !61
  %343 = extractelement <8 x i1> %342, i64 7, !dbg !65
  %344 = extractelement <8 x float> %341, i64 7, !dbg !65
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !65
  %346 = extractelement <8 x i1> %342, i64 6, !dbg !65
  %347 = extractelement <8 x float> %341, i64 6, !dbg !65
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !65
  %349 = extractelement <8 x i1> %342, i64 5, !dbg !65
  %350 = extractelement <8 x float> %341, i64 5, !dbg !65
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !65
  %352 = extractelement <8 x i1> %342, i64 4, !dbg !65
  %353 = extractelement <8 x float> %341, i64 4, !dbg !65
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !65
  %355 = extractelement <8 x i1> %342, i64 3, !dbg !65
  %356 = extractelement <8 x float> %341, i64 3, !dbg !65
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !65
  %358 = extractelement <8 x i1> %342, i64 2, !dbg !65
  %359 = extractelement <8 x float> %341, i64 2, !dbg !65
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !65
  %361 = extractelement <8 x i1> %342, i64 1, !dbg !65
  %362 = extractelement <8 x float> %341, i64 1, !dbg !65
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !65
  %364 = extractelement <8 x i1> %342, i64 0, !dbg !65
  %365 = extractelement <8 x float> %341, i64 0, !dbg !65
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !65
  %367 = icmp sgt i32 %27, 255, !dbg !66
  %368 = icmp sgt i32 %28, 255, !dbg !66
  %369 = add nsw i32 %27, -256, !dbg !67
  %370 = add nsw i32 %28, -256, !dbg !67
  %371 = shl nsw i32 %369, 12, !dbg !68
  %372 = shl nsw i32 %370, 12, !dbg !68
  %373 = shl nsw i32 %29, 19, !dbg !69
  %374 = shl nsw i32 %30, 19, !dbg !69
  %375 = add nsw i32 %373, %.decomposed, !dbg !70
  %376 = add nsw i32 %375, %371, !dbg !71
  %377 = add nsw i32 %374, %.decomposed42, !dbg !70
  %378 = add nsw i32 %377, %372, !dbg !71
  %379 = sext i32 %376 to i64, !dbg !72
  %380 = getelementptr float, ptr addrspace(1) %8, i64 %379, !dbg !72
  %381 = sext i32 %378 to i64, !dbg !72
  %382 = getelementptr float, ptr addrspace(1) %8, i64 %381, !dbg !72
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %380, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !73
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !73
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !73
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !73
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !73
  %388 = bitcast i32 %384 to float, !dbg !73
  %389 = bitcast i32 %385 to float, !dbg !73
  %390 = bitcast i32 %386 to float, !dbg !73
  %391 = bitcast i32 %387 to float, !dbg !73
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %368, i32 0, i1 %368, i32 0, i1 %368, i32 0, i1 %368, i32 0, i1 %368) #3, !dbg !73
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !73
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !73
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !73
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !73
  %397 = bitcast i32 %393 to float, !dbg !73
  %398 = bitcast i32 %394 to float, !dbg !73
  %399 = bitcast i32 %395 to float, !dbg !73
  %400 = bitcast i32 %396 to float, !dbg !73
  %401 = sext i32 %274 to i64, !dbg !74
  %402 = getelementptr i64, ptr addrspace(1) %9, i64 %401, !dbg !74
  %403 = sext i32 %273 to i64, !dbg !74
  %404 = getelementptr i64, ptr addrspace(1) %9, i64 %403, !dbg !74
  %405 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %402, i1 %367, i1 %367) #3, !dbg !75
  %406 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %402, i1 %367, i1 %367) #3, !dbg !75
  %407 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %402, i1 %367, i1 %367) #3, !dbg !75
  %408 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %402, i1 %367, i1 %367) #3, !dbg !75
  %409 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %404, i1 %368, i1 %368) #3, !dbg !75
  %410 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %404, i1 %368, i1 %368) #3, !dbg !75
  %411 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %404, i1 %368, i1 %368) #3, !dbg !75
  %412 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %404, i1 %368, i1 %368) #3, !dbg !75
  %413 = lshr i64 %405, 58, !dbg !76
  %414 = and i64 %413, 32, !dbg !76
  %415 = add i64 %414, %405, !dbg !76
  %416 = lshr i64 %409, 58, !dbg !76
  %417 = and i64 %416, 32, !dbg !76
  %418 = add i64 %417, %409, !dbg !76
  %419 = sext i32 %.decomposed46 to i64, !dbg !77
  %420 = getelementptr i64, ptr addrspace(1) %10, i64 %419, !dbg !77
  %421 = sext i32 %269 to i64, !dbg !77
  %422 = getelementptr i64, ptr addrspace(1) %10, i64 %421, !dbg !77
  %423 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %420, i1 %367, i1 %367, i1 %367) #3, !dbg !78
  %424 = extractvalue { i64, i64 } %423, 0, !dbg !78
  %425 = extractvalue { i64, i64 } %423, 1, !dbg !78
  %426 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %422, i1 %367, i1 %367, i1 %367) #3, !dbg !78
  %427 = extractvalue { i64, i64 } %426, 0, !dbg !78
  %428 = extractvalue { i64, i64 } %426, 1, !dbg !78
  %429 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %420, i1 %368, i1 %368, i1 %368) #3, !dbg !78
  %430 = extractvalue { i64, i64 } %429, 0, !dbg !78
  %431 = extractvalue { i64, i64 } %429, 1, !dbg !78
  %432 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %422, i1 %368, i1 %368, i1 %368) #3, !dbg !78
  %433 = extractvalue { i64, i64 } %432, 0, !dbg !78
  %434 = extractvalue { i64, i64 } %432, 1, !dbg !78
  %435 = lshr i64 %424, 58, !dbg !79
  %436 = and i64 %435, 32, !dbg !79
  %437 = lshr i64 %425, 58, !dbg !79
  %438 = and i64 %437, 32, !dbg !79
  %439 = lshr i64 %427, 58, !dbg !79
  %440 = and i64 %439, 32, !dbg !79
  %441 = lshr i64 %428, 58, !dbg !79
  %442 = and i64 %441, 32, !dbg !79
  %443 = lshr i64 %430, 58, !dbg !79
  %444 = and i64 %443, 32, !dbg !79
  %445 = lshr i64 %431, 58, !dbg !79
  %446 = and i64 %445, 32, !dbg !79
  %447 = lshr i64 %433, 58, !dbg !79
  %448 = and i64 %447, 32, !dbg !79
  %449 = lshr i64 %434, 58, !dbg !79
  %450 = and i64 %449, 32, !dbg !79
  %451 = shl i64 %415, 5, !dbg !80
  %452 = shl i64 %418, 5, !dbg !80
  %453 = shl nsw i32 %369, 10, !dbg !81
  %454 = shl nsw i32 %370, 10, !dbg !81
  %455 = sext i32 %453 to i64, !dbg !82
  %456 = sext i32 %454 to i64, !dbg !82
  %457 = shl nsw i32 %29, 17, !dbg !83
  %458 = shl nsw i32 %30, 17, !dbg !83
  %459 = sext i32 %457 to i64, !dbg !84
  %460 = sext i32 %458 to i64, !dbg !84
  %461 = getelementptr float, ptr addrspace(1) %11, i64 %424, !dbg !85
  %462 = getelementptr float, ptr addrspace(1) %461, i64 %436, !dbg !85
  %463 = getelementptr float, ptr addrspace(1) %462, i64 %451, !dbg !85
  %464 = getelementptr float, ptr addrspace(1) %463, i64 %455, !dbg !85
  %465 = getelementptr float, ptr addrspace(1) %464, i64 %459, !dbg !85
  %466 = getelementptr float, ptr addrspace(1) %11, i64 %425, !dbg !85
  %467 = getelementptr float, ptr addrspace(1) %466, i64 %438, !dbg !85
  %468 = getelementptr float, ptr addrspace(1) %467, i64 %451, !dbg !85
  %469 = getelementptr float, ptr addrspace(1) %468, i64 %455, !dbg !85
  %470 = getelementptr float, ptr addrspace(1) %469, i64 %459, !dbg !85
  %471 = getelementptr float, ptr addrspace(1) %11, i64 %427, !dbg !85
  %472 = getelementptr float, ptr addrspace(1) %471, i64 %440, !dbg !85
  %473 = getelementptr float, ptr addrspace(1) %472, i64 %451, !dbg !85
  %474 = getelementptr float, ptr addrspace(1) %473, i64 %455, !dbg !85
  %475 = getelementptr float, ptr addrspace(1) %474, i64 %459, !dbg !85
  %476 = getelementptr float, ptr addrspace(1) %11, i64 %428, !dbg !85
  %477 = getelementptr float, ptr addrspace(1) %476, i64 %442, !dbg !85
  %478 = getelementptr float, ptr addrspace(1) %477, i64 %451, !dbg !85
  %479 = getelementptr float, ptr addrspace(1) %478, i64 %455, !dbg !85
  %480 = getelementptr float, ptr addrspace(1) %479, i64 %459, !dbg !85
  %481 = getelementptr float, ptr addrspace(1) %11, i64 %430, !dbg !85
  %482 = getelementptr float, ptr addrspace(1) %481, i64 %444, !dbg !85
  %483 = getelementptr float, ptr addrspace(1) %482, i64 %452, !dbg !85
  %484 = getelementptr float, ptr addrspace(1) %483, i64 %456, !dbg !85
  %485 = getelementptr float, ptr addrspace(1) %484, i64 %460, !dbg !85
  %486 = getelementptr float, ptr addrspace(1) %11, i64 %431, !dbg !85
  %487 = getelementptr float, ptr addrspace(1) %486, i64 %446, !dbg !85
  %488 = getelementptr float, ptr addrspace(1) %487, i64 %452, !dbg !85
  %489 = getelementptr float, ptr addrspace(1) %488, i64 %456, !dbg !85
  %490 = getelementptr float, ptr addrspace(1) %489, i64 %460, !dbg !85
  %491 = getelementptr float, ptr addrspace(1) %11, i64 %433, !dbg !85
  %492 = getelementptr float, ptr addrspace(1) %491, i64 %448, !dbg !85
  %493 = getelementptr float, ptr addrspace(1) %492, i64 %452, !dbg !85
  %494 = getelementptr float, ptr addrspace(1) %493, i64 %456, !dbg !85
  %495 = getelementptr float, ptr addrspace(1) %494, i64 %460, !dbg !85
  %496 = getelementptr float, ptr addrspace(1) %11, i64 %434, !dbg !85
  %497 = getelementptr float, ptr addrspace(1) %496, i64 %450, !dbg !85
  %498 = getelementptr float, ptr addrspace(1) %497, i64 %452, !dbg !85
  %499 = getelementptr float, ptr addrspace(1) %498, i64 %456, !dbg !85
  %500 = getelementptr float, ptr addrspace(1) %499, i64 %460, !dbg !85
  %501 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %465, i1 %367, i32 0, i1 %367) #3, !dbg !86
  %502 = bitcast i32 %501 to float, !dbg !86
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %470, i1 %367, i32 0, i1 %367) #3, !dbg !86
  %504 = bitcast i32 %503 to float, !dbg !86
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %475, i1 %367, i32 0, i1 %367) #3, !dbg !86
  %506 = bitcast i32 %505 to float, !dbg !86
  %507 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %480, i1 %367, i32 0, i1 %367) #3, !dbg !86
  %508 = bitcast i32 %507 to float, !dbg !86
  %509 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %485, i1 %368, i32 0, i1 %368) #3, !dbg !86
  %510 = bitcast i32 %509 to float, !dbg !86
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %490, i1 %368, i32 0, i1 %368) #3, !dbg !86
  %512 = bitcast i32 %511 to float, !dbg !86
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %495, i1 %368, i32 0, i1 %368) #3, !dbg !86
  %514 = bitcast i32 %513 to float, !dbg !86
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %500, i1 %368, i32 0, i1 %368) #3, !dbg !86
  %516 = bitcast i32 %515 to float, !dbg !86
  %517 = getelementptr i64, ptr addrspace(1) %12, i64 %419, !dbg !87
  %518 = getelementptr i64, ptr addrspace(1) %12, i64 %421, !dbg !87
  %519 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %517, i1 %367, i1 %367, i1 %367) #3, !dbg !88
  %520 = extractvalue { i64, i64 } %519, 0, !dbg !88
  %521 = extractvalue { i64, i64 } %519, 1, !dbg !88
  %522 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %518, i1 %367, i1 %367, i1 %367) #3, !dbg !88
  %523 = extractvalue { i64, i64 } %522, 0, !dbg !88
  %524 = extractvalue { i64, i64 } %522, 1, !dbg !88
  %525 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %517, i1 %368, i1 %368, i1 %368) #3, !dbg !88
  %526 = extractvalue { i64, i64 } %525, 0, !dbg !88
  %527 = extractvalue { i64, i64 } %525, 1, !dbg !88
  %528 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %518, i1 %368, i1 %368, i1 %368) #3, !dbg !88
  %529 = extractvalue { i64, i64 } %528, 0, !dbg !88
  %530 = extractvalue { i64, i64 } %528, 1, !dbg !88
  %531 = lshr i64 %520, 58, !dbg !89
  %532 = and i64 %531, 32, !dbg !89
  %533 = lshr i64 %521, 58, !dbg !89
  %534 = and i64 %533, 32, !dbg !89
  %535 = lshr i64 %523, 58, !dbg !89
  %536 = and i64 %535, 32, !dbg !89
  %537 = lshr i64 %524, 58, !dbg !89
  %538 = and i64 %537, 32, !dbg !89
  %539 = lshr i64 %526, 58, !dbg !89
  %540 = and i64 %539, 32, !dbg !89
  %541 = lshr i64 %527, 58, !dbg !89
  %542 = and i64 %541, 32, !dbg !89
  %543 = lshr i64 %529, 58, !dbg !89
  %544 = and i64 %543, 32, !dbg !89
  %545 = lshr i64 %530, 58, !dbg !89
  %546 = and i64 %545, 32, !dbg !89
  %547 = getelementptr float, ptr addrspace(1) %11, i64 %520, !dbg !90
  %548 = getelementptr float, ptr addrspace(1) %547, i64 %532, !dbg !90
  %549 = getelementptr float, ptr addrspace(1) %548, i64 %451, !dbg !90
  %550 = getelementptr float, ptr addrspace(1) %549, i64 %455, !dbg !90
  %551 = getelementptr float, ptr addrspace(1) %550, i64 %459, !dbg !90
  %552 = getelementptr float, ptr addrspace(1) %11, i64 %521, !dbg !90
  %553 = getelementptr float, ptr addrspace(1) %552, i64 %534, !dbg !90
  %554 = getelementptr float, ptr addrspace(1) %553, i64 %451, !dbg !90
  %555 = getelementptr float, ptr addrspace(1) %554, i64 %455, !dbg !90
  %556 = getelementptr float, ptr addrspace(1) %555, i64 %459, !dbg !90
  %557 = getelementptr float, ptr addrspace(1) %11, i64 %523, !dbg !90
  %558 = getelementptr float, ptr addrspace(1) %557, i64 %536, !dbg !90
  %559 = getelementptr float, ptr addrspace(1) %558, i64 %451, !dbg !90
  %560 = getelementptr float, ptr addrspace(1) %559, i64 %455, !dbg !90
  %561 = getelementptr float, ptr addrspace(1) %560, i64 %459, !dbg !90
  %562 = getelementptr float, ptr addrspace(1) %11, i64 %524, !dbg !90
  %563 = getelementptr float, ptr addrspace(1) %562, i64 %538, !dbg !90
  %564 = getelementptr float, ptr addrspace(1) %563, i64 %451, !dbg !90
  %565 = getelementptr float, ptr addrspace(1) %564, i64 %455, !dbg !90
  %566 = getelementptr float, ptr addrspace(1) %565, i64 %459, !dbg !90
  %567 = getelementptr float, ptr addrspace(1) %11, i64 %526, !dbg !90
  %568 = getelementptr float, ptr addrspace(1) %567, i64 %540, !dbg !90
  %569 = getelementptr float, ptr addrspace(1) %568, i64 %452, !dbg !90
  %570 = getelementptr float, ptr addrspace(1) %569, i64 %456, !dbg !90
  %571 = getelementptr float, ptr addrspace(1) %570, i64 %460, !dbg !90
  %572 = getelementptr float, ptr addrspace(1) %11, i64 %527, !dbg !90
  %573 = getelementptr float, ptr addrspace(1) %572, i64 %542, !dbg !90
  %574 = getelementptr float, ptr addrspace(1) %573, i64 %452, !dbg !90
  %575 = getelementptr float, ptr addrspace(1) %574, i64 %456, !dbg !90
  %576 = getelementptr float, ptr addrspace(1) %575, i64 %460, !dbg !90
  %577 = getelementptr float, ptr addrspace(1) %11, i64 %529, !dbg !90
  %578 = getelementptr float, ptr addrspace(1) %577, i64 %544, !dbg !90
  %579 = getelementptr float, ptr addrspace(1) %578, i64 %452, !dbg !90
  %580 = getelementptr float, ptr addrspace(1) %579, i64 %456, !dbg !90
  %581 = getelementptr float, ptr addrspace(1) %580, i64 %460, !dbg !90
  %582 = getelementptr float, ptr addrspace(1) %11, i64 %530, !dbg !90
  %583 = getelementptr float, ptr addrspace(1) %582, i64 %546, !dbg !90
  %584 = getelementptr float, ptr addrspace(1) %583, i64 %452, !dbg !90
  %585 = getelementptr float, ptr addrspace(1) %584, i64 %456, !dbg !90
  %586 = getelementptr float, ptr addrspace(1) %585, i64 %460, !dbg !90
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %551, i1 %367, i32 0, i1 %367) #3, !dbg !91
  %588 = bitcast i32 %587 to float, !dbg !91
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %556, i1 %367, i32 0, i1 %367) #3, !dbg !91
  %590 = bitcast i32 %589 to float, !dbg !91
  %591 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %561, i1 %367, i32 0, i1 %367) #3, !dbg !91
  %592 = bitcast i32 %591 to float, !dbg !91
  %593 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %566, i1 %367, i32 0, i1 %367) #3, !dbg !91
  %594 = bitcast i32 %593 to float, !dbg !91
  %595 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %571, i1 %368, i32 0, i1 %368) #3, !dbg !91
  %596 = bitcast i32 %595 to float, !dbg !91
  %597 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %368, i32 0, i1 %368) #3, !dbg !91
  %598 = bitcast i32 %597 to float, !dbg !91
  %599 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %581, i1 %368, i32 0, i1 %368) #3, !dbg !91
  %600 = bitcast i32 %599 to float, !dbg !91
  %601 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %368, i32 0, i1 %368) #3, !dbg !91
  %602 = bitcast i32 %601 to float, !dbg !91
  %603 = fsub float %588, %502, !dbg !92
  %604 = fsub float %590, %504, !dbg !92
  %605 = fsub float %592, %506, !dbg !92
  %606 = fsub float %594, %508, !dbg !92
  %607 = fsub float %596, %510, !dbg !92
  %608 = fsub float %598, %512, !dbg !92
  %609 = fsub float %600, %514, !dbg !92
  %610 = fsub float %602, %516, !dbg !92
  %611 = getelementptr float, ptr addrspace(1) %13, i64 %419, !dbg !93
  %612 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %611, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367, i32 0, i1 %367) #3, !dbg !94
  %613 = extractvalue { i32, i32, i32, i32 } %612, 0, !dbg !94
  %614 = extractvalue { i32, i32, i32, i32 } %612, 1, !dbg !94
  %615 = extractvalue { i32, i32, i32, i32 } %612, 2, !dbg !94
  %616 = extractvalue { i32, i32, i32, i32 } %612, 3, !dbg !94
  %617 = bitcast i32 %613 to float, !dbg !94
  %618 = bitcast i32 %614 to float, !dbg !94
  %619 = bitcast i32 %615 to float, !dbg !94
  %620 = bitcast i32 %616 to float, !dbg !94
  %621 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %611, i1 %368, i32 0, i1 %368, i32 0, i1 %368, i32 0, i1 %368, i32 0, i1 %368) #3, !dbg !94
  %622 = extractvalue { i32, i32, i32, i32 } %621, 0, !dbg !94
  %623 = extractvalue { i32, i32, i32, i32 } %621, 1, !dbg !94
  %624 = extractvalue { i32, i32, i32, i32 } %621, 2, !dbg !94
  %625 = extractvalue { i32, i32, i32, i32 } %621, 3, !dbg !94
  %626 = bitcast i32 %622 to float, !dbg !94
  %627 = bitcast i32 %623 to float, !dbg !94
  %628 = bitcast i32 %624 to float, !dbg !94
  %629 = bitcast i32 %625 to float, !dbg !94
  %630 = fmul float %603, %617, !dbg !95
  %631 = fmul float %604, %618, !dbg !95
  %632 = fmul float %605, %619, !dbg !95
  %633 = fmul float %606, %620, !dbg !95
  %634 = fmul float %607, %626, !dbg !95
  %635 = fmul float %608, %627, !dbg !95
  %636 = fmul float %609, %628, !dbg !95
  %637 = fmul float %610, %629, !dbg !95
  %638 = fadd float %630, %502, !dbg !96
  %639 = fadd float %631, %504, !dbg !96
  %640 = fadd float %632, %506, !dbg !96
  %641 = fadd float %633, %508, !dbg !96
  %642 = fadd float %634, %510, !dbg !96
  %643 = fadd float %635, %512, !dbg !96
  %644 = fadd float %636, %514, !dbg !96
  %645 = fadd float %637, %516, !dbg !96
  %646 = fsub float %638, %388, !dbg !97
  %647 = fsub float %639, %389, !dbg !97
  %648 = fsub float %640, %390, !dbg !97
  %649 = fsub float %641, %391, !dbg !97
  %650 = fsub float %642, %397, !dbg !97
  %651 = fsub float %643, %398, !dbg !97
  %652 = fsub float %644, %399, !dbg !97
  %653 = fsub float %645, %400, !dbg !97
  %654 = getelementptr float, ptr addrspace(1) %14, i64 %401, !dbg !98
  %655 = getelementptr float, ptr addrspace(1) %14, i64 %403, !dbg !98
  %656 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %654, i1 %367, i32 0, i1 %367) #3, !dbg !99
  %657 = bitcast i32 %656 to float, !dbg !99
  %658 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %654, i1 %367, i32 0, i1 %367) #3, !dbg !99
  %659 = bitcast i32 %658 to float, !dbg !99
  %660 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %654, i1 %367, i32 0, i1 %367) #3, !dbg !99
  %661 = bitcast i32 %660 to float, !dbg !99
  %662 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %654, i1 %367, i32 0, i1 %367) #3, !dbg !99
  %663 = bitcast i32 %662 to float, !dbg !99
  %664 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %655, i1 %368, i32 0, i1 %368) #3, !dbg !99
  %665 = bitcast i32 %664 to float, !dbg !99
  %666 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %655, i1 %368, i32 0, i1 %368) #3, !dbg !99
  %667 = bitcast i32 %666 to float, !dbg !99
  %668 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %655, i1 %368, i32 0, i1 %368) #3, !dbg !99
  %669 = bitcast i32 %668 to float, !dbg !99
  %670 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %655, i1 %368, i32 0, i1 %368) #3, !dbg !99
  %671 = bitcast i32 %670 to float, !dbg !99
  %672 = fmul float %646, %657, !dbg !100
  %673 = fmul float %647, %659, !dbg !100
  %674 = fmul float %648, %661, !dbg !100
  %675 = fmul float %649, %663, !dbg !100
  %676 = fmul float %650, %665, !dbg !100
  %677 = fmul float %651, %667, !dbg !100
  %678 = fmul float %652, %669, !dbg !100
  %679 = fmul float %653, %671, !dbg !100
  %680 = fadd float %672, %388, !dbg !101
  %681 = fadd float %673, %389, !dbg !101
  %682 = fadd float %674, %390, !dbg !101
  %683 = fadd float %675, %391, !dbg !101
  %684 = fadd float %676, %397, !dbg !101
  %685 = fadd float %677, %398, !dbg !101
  %686 = fadd float %678, %399, !dbg !101
  %687 = fadd float %679, %400, !dbg !101
  %688 = select i1 %367, float %680, float 0.000000e+00, !dbg !102
  %689 = select i1 %367, float %681, float 0.000000e+00, !dbg !102
  %690 = select i1 %367, float %682, float 0.000000e+00, !dbg !102
  %691 = select i1 %367, float %683, float 0.000000e+00, !dbg !102
  %692 = select i1 %368, float %684, float 0.000000e+00, !dbg !102
  %693 = select i1 %368, float %685, float 0.000000e+00, !dbg !102
  %694 = select i1 %368, float %686, float 0.000000e+00, !dbg !102
  %695 = select i1 %368, float %687, float 0.000000e+00, !dbg !102
  %696 = select i1 %77, float %345, float %688, !dbg !103
  %697 = select i1 %77, float %348, float %689, !dbg !103
  %698 = select i1 %77, float %351, float %690, !dbg !103
  %699 = select i1 %77, float %354, float %691, !dbg !103
  %700 = select i1 %78, float %357, float %692, !dbg !103
  %701 = select i1 %78, float %360, float %693, !dbg !103
  %702 = select i1 %78, float %363, float %694, !dbg !103
  %703 = select i1 %78, float %366, float %695, !dbg !103
  %704 = sext i32 %23 to i64, !dbg !104
  %705 = getelementptr float, ptr addrspace(1) %15, i64 %704, !dbg !104
  %706 = sext i32 %24 to i64, !dbg !104
  %707 = getelementptr float, ptr addrspace(1) %15, i64 %706, !dbg !104
  %708 = bitcast float %696 to i32, !dbg !105
  %709 = select i1 %63, i32 %251, i32 %708, !dbg !106
  %710 = select i1 %48, i32 %259, i32 %709, !dbg !107
  %711 = select i1 %33, i32 %267, i32 %710, !dbg !108
  %712 = bitcast float %697 to i32, !dbg !105
  %713 = select i1 %63, i32 %250, i32 %712, !dbg !106
  %714 = select i1 %48, i32 %258, i32 %713, !dbg !107
  %715 = select i1 %33, i32 %266, i32 %714, !dbg !108
  %716 = bitcast float %698 to i32, !dbg !105
  %717 = select i1 %63, i32 %249, i32 %716, !dbg !106
  %718 = select i1 %48, i32 %257, i32 %717, !dbg !107
  %719 = select i1 %33, i32 %265, i32 %718, !dbg !108
  %720 = bitcast float %699 to i32, !dbg !105
  %721 = select i1 %63, i32 %248, i32 %720, !dbg !106
  %722 = select i1 %48, i32 %256, i32 %721, !dbg !107
  %723 = select i1 %33, i32 %264, i32 %722, !dbg !108
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %711, i32 %715, i32 %719, i32 %723, ptr addrspace(1) %705, i1 true) #3, !dbg !105
  %724 = bitcast float %700 to i32, !dbg !105
  %725 = select i1 %64, i32 %247, i32 %724, !dbg !106
  %726 = select i1 %50, i32 %255, i32 %725, !dbg !107
  %727 = select i1 %34, i32 %263, i32 %726, !dbg !108
  %728 = bitcast float %701 to i32, !dbg !105
  %729 = select i1 %64, i32 %246, i32 %728, !dbg !106
  %730 = select i1 %50, i32 %254, i32 %729, !dbg !107
  %731 = select i1 %34, i32 %262, i32 %730, !dbg !108
  %732 = bitcast float %702 to i32, !dbg !105
  %733 = select i1 %64, i32 %245, i32 %732, !dbg !106
  %734 = select i1 %50, i32 %253, i32 %733, !dbg !107
  %735 = select i1 %34, i32 %261, i32 %734, !dbg !108
  %736 = bitcast float %703 to i32, !dbg !105
  %737 = select i1 %64, i32 %244, i32 %736, !dbg !106
  %738 = select i1 %50, i32 %252, i32 %737, !dbg !107
  %739 = select i1 %34, i32 %260, i32 %738, !dbg !108
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %727, i32 %731, i32 %735, i32 %739, ptr addrspace(1) %707, i1 true) #3, !dbg !105
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cem4z3rf6x4d5xzgi7oyfckoqse63fdcugrmt7brny7ydq65nkfb.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused_cat_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_40", linkageName: "triton_poi_fused_cat_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 54, scope: !7)
!21 = !DILocation(line: 35, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 59, scope: !7)
!24 = !DILocation(line: 39, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 64, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 40, column: 56, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 69, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 65, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 45, column: 57, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 70, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 51, scope: !7)
!38 = !DILocation(line: 50, column: 42, scope: !7)
!39 = !DILocation(line: 50, column: 36, scope: !7)
!40 = !DILocation(line: 50, column: 57, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 69, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 45, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 45, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 27, scope: !7)
!49 = !DILocation(line: 28, column: 19, scope: !7)
!50 = !DILocation(line: 27, column: 21, scope: !7)
!51 = !DILocation(line: 27, column: 27, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 31, scope: !7)
!54 = !DILocation(line: 62, column: 45, scope: !7)
!55 = !DILocation(line: 64, column: 31, scope: !7)
!56 = !DILocation(line: 64, column: 45, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 67, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 70, column: 20, scope: !7)
!67 = !DILocation(line: 73, column: 51, scope: !7)
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 73, column: 64, scope: !7)
!70 = !DILocation(line: 73, column: 36, scope: !7)
!71 = !DILocation(line: 73, column: 57, scope: !7)
!72 = !DILocation(line: 73, column: 31, scope: !7)
!73 = !DILocation(line: 73, column: 69, scope: !7)
!74 = !DILocation(line: 74, column: 31, scope: !7)
!75 = !DILocation(line: 74, column: 36, scope: !7)
!76 = !DILocation(line: 78, column: 35, scope: !7)
!77 = !DILocation(line: 79, column: 32, scope: !7)
!78 = !DILocation(line: 79, column: 37, scope: !7)
!79 = !DILocation(line: 82, column: 35, scope: !7)
!80 = !DILocation(line: 83, column: 43, scope: !7)
!81 = !DILocation(line: 83, column: 57, scope: !7)
!82 = !DILocation(line: 83, column: 51, scope: !7)
!83 = !DILocation(line: 83, column: 79, scope: !7)
!84 = !DILocation(line: 83, column: 72, scope: !7)
!85 = !DILocation(line: 83, column: 32, scope: !7)
!86 = !DILocation(line: 83, column: 84, scope: !7)
!87 = !DILocation(line: 84, column: 32, scope: !7)
!88 = !DILocation(line: 84, column: 37, scope: !7)
!89 = !DILocation(line: 87, column: 35, scope: !7)
!90 = !DILocation(line: 88, column: 32, scope: !7)
!91 = !DILocation(line: 88, column: 84, scope: !7)
!92 = !DILocation(line: 89, column: 20, scope: !7)
!93 = !DILocation(line: 90, column: 32, scope: !7)
!94 = !DILocation(line: 90, column: 37, scope: !7)
!95 = !DILocation(line: 91, column: 20, scope: !7)
!96 = !DILocation(line: 92, column: 20, scope: !7)
!97 = !DILocation(line: 93, column: 20, scope: !7)
!98 = !DILocation(line: 94, column: 32, scope: !7)
!99 = !DILocation(line: 94, column: 37, scope: !7)
!100 = !DILocation(line: 95, column: 20, scope: !7)
!101 = !DILocation(line: 96, column: 20, scope: !7)
!102 = !DILocation(line: 98, column: 35, scope: !7)
!103 = !DILocation(line: 0, scope: !7)
!104 = !DILocation(line: 103, column: 25, scope: !7)
!105 = !DILocation(line: 103, column: 37, scope: !7)
!106 = !DILocation(line: 100, column: 35, scope: !7)
!107 = !DILocation(line: 101, column: 34, scope: !7)
!108 = !DILocation(line: 102, column: 33, scope: !7)
!109 = !DILocation(line: 103, column: 4, scope: !7)
