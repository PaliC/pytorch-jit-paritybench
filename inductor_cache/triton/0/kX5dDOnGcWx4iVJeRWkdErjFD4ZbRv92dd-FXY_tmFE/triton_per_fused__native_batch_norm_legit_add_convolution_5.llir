; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 3, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 7, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = icmp slt i32 %18, 16, !dbg !14
  %20 = shl i32 %14, 1, !dbg !15
  %21 = and i32 %20, 14, !dbg !15
  %22 = srem i32 %18, 4, !dbg !16
  %23 = shl i32 %18, 4, !dbg !17
  %24 = or disjoint i32 %23, %21, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = sext i32 %22 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #5, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #5, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %39 = sext i32 %18 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %19) #5, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %19) #5, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !30
  %50 = fadd float %30, %36, !dbg !31
  %51 = fadd float %31, %36, !dbg !31
  %52 = fadd float %50, %51, !dbg !32
  %53 = select i1 %19, float %52, float 0.000000e+00, !dbg !32
  %54 = bitcast float %53 to i32, !dbg !37
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !37
  %56 = bitcast i32 %55 to float, !dbg !37
  %57 = fadd float %53, %56, !dbg !32
  %58 = bitcast float %57 to i32, !dbg !37
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !37
  %60 = bitcast i32 %59 to float, !dbg !37
  %61 = fadd float %57, %60, !dbg !32
  %62 = bitcast float %61 to i32, !dbg !37
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = fadd float %61, %64, !dbg !32
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !38
  %67 = bitcast float %65 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !38
  %69 = load float, ptr addrspace(3) %68, align 4, !dbg !38
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !38
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 1.600000e+01) #5, !dbg !38
  %72 = fsub float %50, %71, !dbg !39
  %73 = fsub float %51, %71, !dbg !39
  %74 = fmul float %72, %72, !dbg !40
  %75 = fmul float %73, %73, !dbg !40
  %76 = fadd float %74, %75, !dbg !41
  %77 = select i1 %19, float %76, float 0.000000e+00, !dbg !41
  %78 = bitcast float %77 to i32, !dbg !43
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !43
  %80 = bitcast i32 %79 to float, !dbg !43
  %81 = fadd float %77, %80, !dbg !41
  %82 = bitcast float %81 to i32, !dbg !43
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !43
  %84 = bitcast i32 %83 to float, !dbg !43
  %85 = fadd float %81, %84, !dbg !41
  %86 = bitcast float %85 to i32, !dbg !43
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !43
  %88 = bitcast i32 %87 to float, !dbg !43
  %89 = fadd float %85, %88, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %90 = bitcast float %89 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %90, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %91 = load float, ptr addrspace(3) %68, align 4, !dbg !44
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 1.600000e+01) #5, !dbg !45
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.600000e+01) #5, !dbg !45
  %94 = fadd float %92, 0x3EE4F8B580000000, !dbg !46
  %95 = fadd float %93, 0x3EE4F8B580000000, !dbg !46
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %96, 0, !dbg !44
  br i1 %.not.i, label %99, label %97, !dbg !44

97:                                               ; preds = %11
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

99:                                               ; preds = %11
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %97, %99
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], !dbg !44
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i4 = icmp eq i32 %102, 0, !dbg !44
  br i1 %.not.i4, label %105, label %103, !dbg !44

103:                                              ; preds = %__nv_rsqrtf.exit
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

__nv_rsqrtf.exit6:                                ; preds = %103, %105
  %.0.i5 = phi float [ %104, %103 ], [ %106, %105 ], !dbg !44
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #5, !dbg !47
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.600000e+01) #5, !dbg !47
  %109 = fadd float %108, 0x3EE4F8B580000000, !dbg !48
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i10 = icmp eq i32 %111, 0, !dbg !49
  br i1 %.not.i10, label %114, label %112, !dbg !49

112:                                              ; preds = %__nv_rsqrtf.exit6
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %109), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

114:                                              ; preds = %__nv_rsqrtf.exit6
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %109), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

__nv_rsqrtf.exit12:                               ; preds = %112, %114
  %.0.i11 = phi float [ %113, %112 ], [ %115, %114 ], !dbg !49
  %116 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %117 = bitcast i32 %116 to float, !dbg !24
  %118 = bitcast i32 %42 to float, !dbg !26
  %119 = fsub float %117, %118, !dbg !50
  %120 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %121 = bitcast i32 %120 to float, !dbg !24
  %122 = fsub float %121, %118, !dbg !50
  %123 = fmul float %73, %.0.i5, !dbg !51
  %124 = fmul float %72, %.0.i5, !dbg !51
  %125 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %126 = bitcast i32 %125 to float, !dbg !30
  %127 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = or disjoint i32 %13, %17, !dbg !13
  %130 = icmp slt i32 %129, 16, !dbg !14
  %131 = fmul float %122, %.0.i11, !dbg !52
  %132 = fmul float %119, %.0.i11, !dbg !52
  %133 = fadd float %131, %128, !dbg !53
  %134 = fadd float %132, %126, !dbg !53
  %135 = fadd float %124, %133, !dbg !54
  %136 = fadd float %123, %134, !dbg !54
  %137 = bitcast float %50 to i32, !dbg !55
  %138 = bitcast float %51 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %137, i32 %138, ptr addrspace(1) %26, i1 %19) #5, !dbg !55
  %139 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !56
  %140 = bitcast float %135 to i32, !dbg !57
  %141 = bitcast float %136 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %140, i32 %141, ptr addrspace(1) %139, i1 %19) #5, !dbg !57
  %142 = sext i32 %129 to i64, !dbg !58
  %143 = getelementptr float, ptr addrspace(1) %8, i64 %142, !dbg !58
  %144 = and i32 %14, 56, !dbg !59
  %145 = icmp eq i32 %144, 0, !dbg !59
  %146 = bitcast float %.0.i to i32, !dbg !59
  %147 = and i1 %145, %130, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %143, i1 %147) #5, !dbg !59
  %148 = getelementptr float, ptr addrspace(1) %6, i64 %142, !dbg !60
  %149 = bitcast float %70 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %148, i1 %147) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py", directory: "inductor_cache/6z")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_5", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 43, column: 24, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 19, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !42)
!42 = !DILocation(line: 51, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 57, column: 28, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 28, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 47, scope: !7)
!56 = !DILocation(line: 67, column: 25, scope: !7)
!57 = !DILocation(line: 67, column: 45, scope: !7)
!58 = !DILocation(line: 68, column: 25, scope: !7)
!59 = !DILocation(line: 68, column: 37, scope: !7)
!60 = !DILocation(line: 69, column: 25, scope: !7)
!61 = !DILocation(line: 69, column: 37, scope: !7)
!62 = !DILocation(line: 69, column: 4, scope: !7)
