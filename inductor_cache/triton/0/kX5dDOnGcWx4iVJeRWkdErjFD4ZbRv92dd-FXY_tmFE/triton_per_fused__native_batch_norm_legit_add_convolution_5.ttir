#loc = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0)
#loc1 = loc(unknown)
#loc28 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":43:24)
#loc35 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":51:26)
#loc57 = loc(callsite(#loc1 at #loc28))
#loc60 = loc(callsite(#loc1 at #loc35))
module {
  tt.func public @triton_per_fused__native_batch_norm_legit_add_convolution_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<8x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.600000e+01> : tensor<8x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<8x16xf32> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<8x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_3 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc9)
    %9 = arith.remsi %5, %cst_2 : tensor<8x1xi32> loc(#loc10)
    %10 = arith.muli %5, %cst_3 : tensor<8x1xi32> loc(#loc11)
    %11 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<8x16xi32> loc(#loc12)
    %12 = tt.broadcast %10 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc12)
    %13 = arith.addi %11, %12 : tensor<8x16xi32> loc(#loc12)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc13)
    %15 = tt.addptr %14, %13 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc13)
    %16 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x16xi1> loc(#loc14)
    %17 = tt.load %15, %16, %cst_1 : tensor<8x16x!tt.ptr<f32>> loc(#loc14)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc15)
    %19 = tt.addptr %18, %9 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc15)
    %20 = tt.load %19, %6 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>> loc(#loc16)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc17)
    %22 = tt.addptr %21, %13 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc17)
    %23 = tt.load %22, %16, %cst_1 : tensor<8x16x!tt.ptr<f32>> loc(#loc18)
    %24 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc19)
    %25 = tt.addptr %24, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc19)
    %26 = tt.load %25, %6 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>> loc(#loc20)
    %27 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc21)
    %28 = tt.addptr %27, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc21)
    %29 = tt.load %28, %6 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>> loc(#loc22)
    %30 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc23)
    %31 = tt.addptr %30, %13 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc23)
    %32 = tt.load %31, %16, %cst_1 : tensor<8x16x!tt.ptr<f32>> loc(#loc24)
    %33 = tt.broadcast %20 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc25)
    %34 = arith.addf %17, %33 : tensor<8x16xf32> loc(#loc25)
    %35 = arith.select %16, %34, %cst_1 : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc26)
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc28)), %arg12: f32 loc(callsite(#loc1 at #loc28))):
      %65 = arith.addf %arg11, %arg12 : f32 loc(#loc61)
      tt.reduce.return %65 : f32 loc(#loc56)
    }) : (tensor<8x16xf32>) -> tensor<8xf32> loc(#loc56)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc30)
    %38 = arith.divf %37, %cst_0 : tensor<8x1xf32> loc(#loc31)
    %39 = tt.broadcast %38 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc32)
    %40 = arith.subf %34, %39 : tensor<8x16xf32> loc(#loc32)
    %41 = arith.mulf %40, %40 : tensor<8x16xf32> loc(#loc33)
    %42 = arith.select %16, %41, %cst_1 : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc34)
    %43 = "tt.reduce"(%42) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc35)), %arg12: f32 loc(callsite(#loc1 at #loc35))):
      %65 = arith.addf %arg11, %arg12 : f32 loc(#loc62)
      tt.reduce.return %65 : f32 loc(#loc59)
    }) : (tensor<8x16xf32>) -> tensor<8xf32> loc(#loc59)
    %44 = tt.expand_dims %43 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc36)
    %45 = arith.divf %44, %cst_0 : tensor<8x1xf32> loc(#loc37)
    %46 = arith.addf %45, %cst : tensor<8x1xf32> loc(#loc38)
    %47 = tt.extern_elementwise %46 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32>) -> tensor<8x1xf32> loc(#loc39)
    %48 = tt.broadcast %47 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc40)
    %49 = arith.mulf %40, %48 : tensor<8x16xf32> loc(#loc40)
    %50 = tt.broadcast %26 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc41)
    %51 = arith.subf %23, %50 : tensor<8x16xf32> loc(#loc41)
    %52 = arith.divf %29, %cst_0 : tensor<8x1xf32> loc(#loc42)
    %53 = arith.addf %52, %cst : tensor<8x1xf32> loc(#loc43)
    %54 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32>) -> tensor<8x1xf32> loc(#loc44)
    %55 = tt.broadcast %54 : tensor<8x1xf32> -> tensor<8x16xf32> loc(#loc45)
    %56 = arith.mulf %51, %55 : tensor<8x16xf32> loc(#loc45)
    %57 = arith.addf %56, %32 : tensor<8x16xf32> loc(#loc46)
    %58 = arith.addf %49, %57 : tensor<8x16xf32> loc(#loc47)
    tt.store %15, %34, %16 : tensor<8x16x!tt.ptr<f32>> loc(#loc48)
    %59 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc49)
    %60 = tt.addptr %59, %13 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc49)
    tt.store %60, %58, %16 : tensor<8x16x!tt.ptr<f32>> loc(#loc50)
    %61 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc51)
    %62 = tt.addptr %61, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc51)
    tt.store %62, %47, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc52)
    %63 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc53)
    %64 = tt.addptr %63, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc53)
    tt.store %64, %38, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":23:28)
#loc3 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":23:33)
#loc4 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":24:36)
#loc5 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":24:44)
#loc6 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":24:23)
#loc7 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":25:21)
#loc8 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":26:26)
#loc9 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":26:34)
#loc10 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":31:19)
#loc11 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":32:42)
#loc12 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":32:39)
#loc13 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":32:34)
#loc14 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":32:47)
#loc15 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":33:30)
#loc16 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":33:35)
#loc17 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":34:31)
#loc18 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":34:44)
#loc19 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":35:31)
#loc20 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":35:36)
#loc21 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":36:31)
#loc22 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":36:36)
#loc23 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":37:31)
#loc24 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":37:44)
#loc25 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":38:18)
#loc26 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":42:33)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc30 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":43:27)
#loc31 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":46:19)
#loc32 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":47:19)
#loc33 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":48:20)
#loc34 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":50:35)
#loc36 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":51:29)
#loc37 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":54:20)
#loc38 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":56:20)
#loc39 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":57:28)
#loc40 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":58:20)
#loc41 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":59:20)
#loc42 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":60:20)
#loc43 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":61:20)
#loc44 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":62:28)
#loc45 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":63:20)
#loc46 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":64:20)
#loc47 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":65:20)
#loc48 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":66:47)
#loc49 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":67:25)
#loc50 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":67:45)
#loc51 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":68:25)
#loc52 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":68:37)
#loc53 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":69:25)
#loc54 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":69:37)
#loc55 = loc("inductor_cache/6z/c6znozbfv6lgti2nknqes4in4opiqmoksmtbv5mrc3l7ms35xjrs.py":69:4)
#loc56 = loc(callsite(#loc27 at #loc28))
#loc58 = loc(callsite(#loc29 at #loc27))
#loc59 = loc(callsite(#loc27 at #loc35))
#loc61 = loc(callsite(#loc58 at #loc28))
#loc62 = loc(callsite(#loc58 at #loc35))
