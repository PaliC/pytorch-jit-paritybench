; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 64, !dbg !14
  %14 = mul i32 %13, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %12, 64, !dbg !15
  %16 = srem i32 %13, 16, !dbg !16
  %17 = sdiv i32 %11, 1024, !dbg !17
  %18 = icmp slt i32 %.decomposed, 16, !dbg !18
  %19 = shl nsw i32 %.decomposed, 4, !dbg !19
  %20 = shl nsw i32 %15, 4, !dbg !19
  %21 = shl nsw i32 %17, 9, !dbg !20
  %22 = add nsw i32 %21, %16, !dbg !21
  %23 = add nsw i32 %22, %19, !dbg !22
  %24 = add nsw i32 %21, %20, !dbg !21
  %25 = add nsw i32 %24, %16, !dbg !22
  %26 = sext i32 %23 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = sext i32 %25 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %18, i32 0, i1 %18) #1, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18) #1, !dbg !24
  %32 = and i32 %.decomposed, -16, !dbg !25
  %33 = icmp eq i32 %32, 16, !dbg !25
  %34 = add nsw i32 %16, 256, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %37 = icmp eq i32 %32, 32, !dbg !28
  %38 = add nsw i32 %.decomposed, -32, !dbg !29
  %39 = shl nsw i32 %38, 4, !dbg !30
  %40 = add nsw i32 %34, %21, !dbg !31
  %41 = add nsw i32 %40, %39, !dbg !32
  %42 = add nsw i32 %40, -512, !dbg !31
  %43 = add nsw i32 %42, %20, !dbg !32
  %44 = sext i32 %41 to i64, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !33
  %46 = sext i32 %43 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %37, i32 0, i1 %37) #1, !dbg !34
  %49 = bitcast i32 %48 to float, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %37, i32 0, i1 %37) #1, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = shl nsw i32 %13, 4, !dbg !35
  %53 = add nsw i32 %52, %38, !dbg !36
  %54 = sext i32 %53 to i64, !dbg !37
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !37
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !38
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !38
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !38
  %59 = bitcast i32 %57 to float, !dbg !38
  %60 = bitcast i32 %58 to float, !dbg !38
  %61 = fsub float 0.000000e+00, %59, !dbg !39
  %62 = fsub float 0.000000e+00, %60, !dbg !39
  %63 = fmul float %61, 0x3FF7154760000000, !dbg !43
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #1, !dbg !43
  %65 = fmul float %62, 0x3FF7154760000000, !dbg !43
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #1, !dbg !43
  %67 = fadd float %64, 1.000000e+00, !dbg !44
  %68 = fadd float %66, 1.000000e+00, !dbg !44
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %67) #1, !dbg !45
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %68) #1, !dbg !45
  %71 = fmul float %69, %59, !dbg !46
  %72 = fmul float %70, %60, !dbg !46
  %73 = fadd float %71, %49, !dbg !47
  %74 = fadd float %72, %51, !dbg !47
  %75 = icmp sgt i32 %.decomposed, 47, !dbg !48
  %76 = add nsw i32 %.decomposed, -48, !dbg !49
  %77 = shl nsw i32 %76, 4, !dbg !50
  %78 = add nsw i32 %40, %77, !dbg !51
  %79 = add nsw i32 %40, -768, !dbg !52
  %80 = add nsw i32 %79, %20, !dbg !51
  %81 = sext i32 %78 to i64, !dbg !53
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !53
  %83 = sext i32 %80 to i64, !dbg !53
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !53
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %75, i32 0, i1 %75) #1, !dbg !54
  %86 = bitcast i32 %85 to float, !dbg !54
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %75, i32 0, i1 %75) #1, !dbg !54
  %88 = bitcast i32 %87 to float, !dbg !54
  %89 = add nsw i32 %52, %76, !dbg !55
  %90 = sext i32 %89 to i64, !dbg !56
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !56
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !57
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !57
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !57
  %95 = bitcast i32 %93 to float, !dbg !57
  %96 = bitcast i32 %94 to float, !dbg !57
  %97 = fsub float 0.000000e+00, %95, !dbg !58
  %98 = fsub float 0.000000e+00, %96, !dbg !58
  %99 = fmul float %97, 0x3FF7154760000000, !dbg !60
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #1, !dbg !60
  %101 = fmul float %98, 0x3FF7154760000000, !dbg !60
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #1, !dbg !60
  %103 = fadd float %100, 1.000000e+00, !dbg !61
  %104 = fadd float %102, 1.000000e+00, !dbg !61
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %103) #1, !dbg !62
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #1, !dbg !62
  %107 = fmul float %105, %95, !dbg !63
  %108 = fmul float %106, %96, !dbg !63
  %109 = fadd float %107, %86, !dbg !64
  %110 = fadd float %108, %88, !dbg !64
  %111 = select i1 %75, float %109, float 0.000000e+00, !dbg !65
  %112 = select i1 %75, float %110, float 0.000000e+00, !dbg !65
  %113 = select i1 %37, float %73, float %111, !dbg !66
  %114 = select i1 %37, float %74, float %112, !dbg !66
  %115 = sext i32 %11 to i64, !dbg !67
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !67
  %117 = bitcast float %113 to i32, !dbg !68
  %118 = select i1 %33, i32 %35, i32 %117, !dbg !69
  %119 = select i1 %18, i32 %30, i32 %118, !dbg !70
  %120 = bitcast float %114 to i32, !dbg !68
  %121 = select i1 %33, i32 %36, i32 %120, !dbg !69
  %122 = select i1 %18, i32 %31, i32 %121, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %122, ptr addrspace(1) %116, i1 true) #1, !dbg !68
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqdx4zxjzlnaugkkbtatz5aeptblygohxobgn72ilnnefmtihbh.py", directory: "inductor_cache/iq")
!4 = !{ptr @triton_poi_fused_cat_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_29", linkageName: "triton_poi_fused_cat_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 18, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 45, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 54, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 37, scope: !7)
!27 = !DILocation(line: 39, column: 69, scope: !7)
!28 = !DILocation(line: 43, column: 20, scope: !7)
!29 = !DILocation(line: 44, column: 54, scope: !7)
!30 = !DILocation(line: 44, column: 46, scope: !7)
!31 = !DILocation(line: 44, column: 42, scope: !7)
!32 = !DILocation(line: 44, column: 60, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 69, scope: !7)
!35 = !DILocation(line: 45, column: 34, scope: !7)
!36 = !DILocation(line: 45, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 54, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 46, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 54, scope: !7)
!50 = !DILocation(line: 54, column: 46, scope: !7)
!51 = !DILocation(line: 54, column: 60, scope: !7)
!52 = !DILocation(line: 54, column: 42, scope: !7)
!53 = !DILocation(line: 54, column: 31, scope: !7)
!54 = !DILocation(line: 54, column: 69, scope: !7)
!55 = !DILocation(line: 55, column: 40, scope: !7)
!56 = !DILocation(line: 55, column: 31, scope: !7)
!57 = !DILocation(line: 55, column: 54, scope: !7)
!58 = !DILocation(line: 47, column: 30, scope: !40, inlinedAt: !59)
!59 = !DILocation(line: 56, column: 23, scope: !7)
!60 = !DILocation(line: 47, column: 29, scope: !40, inlinedAt: !59)
!61 = !DILocation(line: 47, column: 20, scope: !40, inlinedAt: !59)
!62 = !DILocation(line: 47, column: 16, scope: !40, inlinedAt: !59)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 60, column: 35, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 64, column: 25, scope: !7)
!68 = !DILocation(line: 64, column: 37, scope: !7)
!69 = !DILocation(line: 62, column: 34, scope: !7)
!70 = !DILocation(line: 63, column: 33, scope: !7)
!71 = !DILocation(line: 64, column: 4, scope: !7)
