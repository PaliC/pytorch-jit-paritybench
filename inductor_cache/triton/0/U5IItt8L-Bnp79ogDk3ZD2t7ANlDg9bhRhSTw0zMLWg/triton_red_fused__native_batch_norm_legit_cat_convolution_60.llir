; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_cat_convolution_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 256, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %10, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %.frozen = freeze i32 %8, !dbg !13
  %14 = sdiv i32 %.frozen, 64, !dbg !13
  %15 = mul i32 %14, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %15, !dbg !14
  %16 = sext i32 %.decomposed to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %22 = shl i32 %8, 12, !dbg !17
  %23 = or disjoint i32 %22, %13
  %24 = sext i32 %23 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !19
  %27 = bitcast i32 %21 to float, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = fadd float %27, %29, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = fadd float %27, %32, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = fadd float %27, %35, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = fadd float %27, %38, !dbg !20
  %40 = select i1 %9, float %39, float 0.000000e+00, !dbg !21
  %41 = select i1 %9, float %36, float 0.000000e+00, !dbg !21
  %42 = select i1 %9, float %33, float 0.000000e+00, !dbg !21
  %43 = select i1 %9, float %30, float 0.000000e+00, !dbg !21
  %44 = bitcast float %39 to i32, !dbg !22
  %45 = bitcast float %36 to i32, !dbg !22
  %46 = bitcast float %33 to i32, !dbg !22
  %47 = bitcast float %30 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %44, i32 %45, i32 %46, i32 %47, ptr addrspace(1) %25, i1 %9) #5, !dbg !22
  %48 = or disjoint i32 %23, 2048, !dbg !23
  %49 = sext i32 %48 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !19
  %56 = bitcast i32 %52 to float, !dbg !19
  %57 = bitcast i32 %53 to float, !dbg !19
  %58 = bitcast i32 %54 to float, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = fadd float %27, %56, !dbg !20
  %61 = fadd float %27, %57, !dbg !20
  %62 = fadd float %27, %58, !dbg !20
  %63 = fadd float %27, %59, !dbg !20
  %64 = fsub float %60, %40, !dbg !24
  %65 = fsub float %61, %41, !dbg !24
  %66 = fsub float %62, %42, !dbg !24
  %67 = fsub float %63, %43, !dbg !24
  %68 = select i1 %9, float 2.000000e+00, float 1.000000e+00, !dbg !28
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %68) #5, !dbg !29
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %68) #5, !dbg !29
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %68) #5, !dbg !29
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %68) #5, !dbg !29
  %73 = fadd float %40, %69, !dbg !30
  %74 = fsub float %60, %73, !dbg !31
  %75 = fmul float %64, %74, !dbg !32
  %76 = fadd float %75, 0.000000e+00, !dbg !33
  %77 = fadd float %41, %70, !dbg !30
  %78 = fsub float %61, %77, !dbg !31
  %79 = fmul float %65, %78, !dbg !32
  %80 = fadd float %79, 0.000000e+00, !dbg !33
  %81 = fadd float %42, %71, !dbg !30
  %82 = fsub float %62, %81, !dbg !31
  %83 = fmul float %66, %82, !dbg !32
  %84 = fadd float %83, 0.000000e+00, !dbg !33
  %85 = fadd float %43, %72, !dbg !30
  %86 = fsub float %63, %85, !dbg !31
  %87 = fmul float %67, %86, !dbg !32
  %88 = fadd float %87, 0.000000e+00, !dbg !33
  %89 = select i1 %9, float %73, float 0.000000e+00, !dbg !21
  %90 = select i1 %9, float %77, float 0.000000e+00, !dbg !21
  %91 = select i1 %9, float %81, float 0.000000e+00, !dbg !21
  %92 = select i1 %9, float %85, float 0.000000e+00, !dbg !21
  %93 = select i1 %9, float %84, float 0.000000e+00, !dbg !34
  %94 = select i1 %9, float %88, float 0.000000e+00, !dbg !34
  %95 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %96 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %97 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %98 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %99 = bitcast float %60 to i32, !dbg !22
  %100 = bitcast float %61 to i32, !dbg !22
  %101 = bitcast float %62 to i32, !dbg !22
  %102 = bitcast float %63 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %50, i1 %9) #5, !dbg !22
  %103 = lshr i32 %10, 5, !dbg !12
  %104 = fsub float %90, %89, !dbg !35
  %105 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !38
  %106 = fcmp oeq float %105, 0.000000e+00, !dbg !39
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %105) #5, !dbg !40
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !41
  %109 = fmul float %104, %108, !dbg !42
  %110 = fadd float %89, %109, !dbg !43
  %111 = fadd float %76, %80, !dbg !44
  %112 = select i1 %9, float %111, float 0.000000e+00, !dbg !44
  %113 = fmul float %104, %104, !dbg !45
  %114 = fmul float %113, %95, !dbg !46
  %115 = fmul float %114, %108, !dbg !47
  %116 = fadd float %112, %115, !dbg !48
  %117 = fsub float %91, %110, !dbg !35
  %118 = select i1 %9, float 6.000000e+00, float 0.000000e+00, !dbg !38
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !39
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %118) #5, !dbg !40
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !41
  %122 = fmul float %121, %117, !dbg !42
  %123 = fadd float %110, %122, !dbg !43
  %124 = fadd float %93, %116, !dbg !44
  %125 = fmul float %117, %117, !dbg !45
  %126 = fmul float %105, %125, !dbg !46
  %127 = fmul float %121, %126, !dbg !47
  %128 = fadd float %124, %127, !dbg !48
  %129 = fsub float %92, %123, !dbg !35
  %130 = select i1 %9, float 8.000000e+00, float 0.000000e+00, !dbg !38
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !39
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %130) #5, !dbg !40
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !41
  %134 = fmul float %133, %129, !dbg !42
  %135 = fadd float %123, %134, !dbg !43
  %136 = fadd float %94, %128, !dbg !44
  %137 = fmul float %129, %129, !dbg !45
  %138 = fmul float %118, %137, !dbg !46
  %139 = fmul float %133, %138, !dbg !47
  %140 = fadd float %136, %139, !dbg !48
  %141 = bitcast float %135 to i32, !dbg !49
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !49
  %143 = bitcast i32 %142 to float, !dbg !49
  %144 = bitcast float %140 to i32, !dbg !49
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !49
  %146 = bitcast i32 %145 to float, !dbg !49
  %147 = bitcast float %130 to i32, !dbg !49
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !49
  %149 = bitcast i32 %148 to float, !dbg !49
  %150 = fsub float %143, %135, !dbg !35
  %151 = fadd float %130, %149, !dbg !38
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !39
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %151) #5, !dbg !40
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !41
  %155 = fmul float %154, %150, !dbg !42
  %156 = fadd float %135, %155, !dbg !43
  %157 = fadd float %140, %146, !dbg !44
  %158 = fmul float %150, %150, !dbg !45
  %159 = fmul float %130, %158, !dbg !46
  %160 = fmul float %154, %159, !dbg !47
  %161 = fadd float %157, %160, !dbg !48
  %162 = bitcast float %156 to i32, !dbg !49
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !49
  %164 = bitcast i32 %163 to float, !dbg !49
  %165 = bitcast float %161 to i32, !dbg !49
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !49
  %167 = bitcast i32 %166 to float, !dbg !49
  %168 = bitcast float %151 to i32, !dbg !49
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !49
  %170 = bitcast i32 %169 to float, !dbg !49
  %171 = fsub float %164, %156, !dbg !35
  %172 = fadd float %151, %170, !dbg !38
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !39
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %172) #5, !dbg !40
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !41
  %176 = fmul float %171, %175, !dbg !42
  %177 = fadd float %156, %176, !dbg !43
  %178 = fadd float %161, %167, !dbg !44
  %179 = fmul float %171, %171, !dbg !45
  %180 = fmul float %151, %179, !dbg !46
  %181 = fmul float %175, %180, !dbg !47
  %182 = fadd float %178, %181, !dbg !48
  %183 = bitcast float %177 to i32, !dbg !49
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !49
  %185 = bitcast i32 %184 to float, !dbg !49
  %186 = bitcast float %182 to i32, !dbg !49
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !49
  %188 = bitcast i32 %187 to float, !dbg !49
  %189 = bitcast float %172 to i32, !dbg !49
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !49
  %191 = bitcast i32 %190 to float, !dbg !49
  %192 = fsub float %185, %177, !dbg !35
  %193 = fadd float %172, %191, !dbg !38
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !39
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #5, !dbg !40
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !41
  %197 = fmul float %192, %196, !dbg !42
  %198 = fadd float %177, %197, !dbg !43
  %199 = fadd float %182, %188, !dbg !44
  %200 = fmul float %192, %192, !dbg !45
  %201 = fmul float %172, %200, !dbg !46
  %202 = fmul float %196, %201, !dbg !47
  %203 = fadd float %199, %202, !dbg !48
  %204 = bitcast float %198 to i32, !dbg !49
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !49
  %206 = bitcast i32 %205 to float, !dbg !49
  %207 = bitcast float %203 to i32, !dbg !49
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !49
  %209 = bitcast i32 %208 to float, !dbg !49
  %210 = bitcast float %193 to i32, !dbg !49
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !49
  %212 = bitcast i32 %211 to float, !dbg !49
  %213 = fsub float %206, %198, !dbg !35
  %214 = fadd float %193, %212, !dbg !38
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !39
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %214) #5, !dbg !40
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !41
  %218 = fmul float %213, %217, !dbg !42
  %219 = fadd float %198, %218, !dbg !43
  %220 = fadd float %203, %209, !dbg !44
  %221 = fmul float %213, %213, !dbg !45
  %222 = fmul float %193, %221, !dbg !46
  %223 = fmul float %217, %222, !dbg !47
  %224 = fadd float %220, %223, !dbg !48
  %225 = bitcast float %219 to i32, !dbg !49
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !49
  %227 = bitcast i32 %226 to float, !dbg !49
  %228 = bitcast float %224 to i32, !dbg !49
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !49
  %230 = bitcast i32 %229 to float, !dbg !49
  %231 = bitcast float %214 to i32, !dbg !49
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !49
  %233 = bitcast i32 %232 to float, !dbg !49
  %234 = fsub float %227, %219, !dbg !35
  %235 = fadd float %214, %233, !dbg !38
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !39
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #5, !dbg !40
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !41
  %239 = fmul float %234, %238, !dbg !42
  %240 = fadd float %219, %239, !dbg !43
  %241 = fadd float %224, %230, !dbg !44
  %242 = fmul float %234, %234, !dbg !45
  %243 = fmul float %214, %242, !dbg !46
  %244 = fmul float %238, %243, !dbg !47
  %245 = fadd float %241, %244, !dbg !48
  %246 = icmp eq i32 %11, 0, !dbg !49
  %247 = and i32 %103, 15, !dbg !49
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !49
  %249 = bitcast float %240 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 %246) #5, !dbg !49
  %250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %247, !dbg !49
  %251 = bitcast float %245 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 %246) #5, !dbg !49
  %252 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %247, !dbg !49
  %253 = bitcast float %235 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 %246) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %254 = icmp slt i32 %10, 16, !dbg !49
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !49
  %256 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !49
  %257 = bitcast i32 %256 to float, !dbg !49
  %258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !49
  %259 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %254) #5, !dbg !49
  %260 = bitcast i32 %259 to float, !dbg !49
  %261 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !49
  %262 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %261, i1 %254) #5, !dbg !49
  %263 = bitcast i32 %262 to float, !dbg !49
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !49
  %265 = bitcast i32 %264 to float, !dbg !49
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !49
  %267 = bitcast i32 %266 to float, !dbg !49
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !49
  %269 = bitcast i32 %268 to float, !dbg !49
  %270 = fsub float %265, %257, !dbg !35
  %271 = fadd float %263, %269, !dbg !38
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !39
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %271) #5, !dbg !40
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !41
  %275 = fmul float %270, %274, !dbg !42
  %276 = fadd float %275, %257, !dbg !43
  %277 = fadd float %260, %267, !dbg !44
  %278 = fmul float %270, %270, !dbg !45
  %279 = fmul float %278, %263, !dbg !46
  %280 = fmul float %279, %274, !dbg !47
  %281 = fadd float %277, %280, !dbg !48
  %282 = bitcast float %276 to i32, !dbg !49
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !49
  %284 = bitcast i32 %283 to float, !dbg !49
  %285 = bitcast float %281 to i32, !dbg !49
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !49
  %287 = bitcast i32 %286 to float, !dbg !49
  %288 = bitcast float %271 to i32, !dbg !49
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !49
  %290 = bitcast i32 %289 to float, !dbg !49
  %291 = fsub float %284, %276, !dbg !35
  %292 = fadd float %271, %290, !dbg !38
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !39
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #5, !dbg !40
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !41
  %296 = fmul float %291, %295, !dbg !42
  %297 = fadd float %276, %296, !dbg !43
  %298 = fadd float %281, %287, !dbg !44
  %299 = fmul float %291, %291, !dbg !45
  %300 = fmul float %271, %299, !dbg !46
  %301 = fmul float %295, %300, !dbg !47
  %302 = fadd float %298, %301, !dbg !48
  %303 = bitcast float %297 to i32, !dbg !49
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !49
  %305 = bitcast i32 %304 to float, !dbg !49
  %306 = bitcast float %302 to i32, !dbg !49
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !49
  %308 = bitcast i32 %307 to float, !dbg !49
  %309 = bitcast float %292 to i32, !dbg !49
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !49
  %311 = bitcast i32 %310 to float, !dbg !49
  %312 = fsub float %305, %297, !dbg !35
  %313 = fadd float %292, %311, !dbg !38
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !39
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #5, !dbg !40
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !41
  %317 = fmul float %312, %316, !dbg !42
  %318 = fadd float %297, %317, !dbg !43
  %319 = fadd float %302, %308, !dbg !44
  %320 = fmul float %312, %312, !dbg !45
  %321 = fmul float %292, %320, !dbg !46
  %322 = fmul float %316, %321, !dbg !47
  %323 = fadd float %319, %322, !dbg !48
  %324 = bitcast float %318 to i32, !dbg !49
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !49
  %326 = bitcast i32 %325 to float, !dbg !49
  %327 = bitcast float %323 to i32, !dbg !49
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !49
  %329 = bitcast i32 %328 to float, !dbg !49
  %330 = bitcast float %313 to i32, !dbg !49
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !49
  %332 = bitcast i32 %331 to float, !dbg !49
  %333 = fsub float %326, %318, !dbg !35
  %334 = fadd float %313, %332, !dbg !38
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !39
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %334) #5, !dbg !40
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !41
  %338 = fmul float %333, %337, !dbg !42
  %339 = fadd float %318, %338, !dbg !43
  %340 = fadd float %323, %329, !dbg !44
  %341 = fmul float %333, %333, !dbg !45
  %342 = fmul float %313, %341, !dbg !46
  %343 = fmul float %337, %342, !dbg !47
  %344 = fadd float %340, %343, !dbg !48
  %345 = and i32 %10, 15, !dbg !49
  %346 = icmp eq i32 %345, 0, !dbg !49
  %347 = and i1 %254, %346, !dbg !49
  %348 = bitcast float %339 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %348, i1 %347) #5, !dbg !49
  %349 = bitcast float %344 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %349, i1 %347) #5, !dbg !49
  %350 = bitcast float %334 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %350, i1 %347) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %351 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %352 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !49
  %353 = sext i32 %8 to i64, !dbg !50
  %354 = getelementptr float, ptr addrspace(1) %3, i64 %353, !dbg !50
  %urem = and i32 %10, 511, !dbg !51
  %355 = icmp eq i32 %urem, 0, !dbg !51
  %356 = bitcast float %351 to i32, !dbg !51
  %357 = and i1 %355, %9, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %354, i1 %357) #5, !dbg !51
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 4.096000e+03) #5, !dbg !52
  %359 = fadd float %358, 0x3EE4F8B580000000, !dbg !53
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %360, 0, !dbg !54
  br i1 %.not.i, label %363, label %361, !dbg !54

361:                                              ; preds = %7
  %362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %359), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

363:                                              ; preds = %7
  %364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %359), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %361, %363
  %.0.i = phi float [ %362, %361 ], [ %364, %363 ], !dbg !54
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i18 = icmp eq i32 %368, 0, !dbg !54
  br i1 %.not.i18, label %371, label %369, !dbg !54

369:                                              ; preds = %__nv_rsqrtf.exit
  %370 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %359), !dbg !54
  br label %__nv_rsqrtf.exit20, !dbg !54

371:                                              ; preds = %__nv_rsqrtf.exit
  %372 = tail call float @llvm.nvvm.rsqrt.approx.f(float %359), !dbg !54
  br label %__nv_rsqrtf.exit20, !dbg !54

__nv_rsqrtf.exit20:                               ; preds = %369, %371
  %.0.i19 = phi float [ %370, %369 ], [ %372, %371 ], !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %373 = getelementptr float, ptr addrspace(1) %1, i64 %353, !dbg !56
  %374 = bitcast float %.0.i to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %373, i1 %357) #5, !dbg !57
  %375 = shl nsw i32 %.decomposed, 12, !dbg !58
  %376 = mul i32 %14, 1310720, !dbg !59
  %377 = add i32 %376, %375
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !60
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !60
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !60
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !60
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !60
  %383 = bitcast i32 %379 to float, !dbg !60
  %384 = bitcast i32 %380 to float, !dbg !60
  %385 = bitcast i32 %381 to float, !dbg !60
  %386 = bitcast i32 %382 to float, !dbg !60
  %387 = fsub float %383, %351, !dbg !61
  %388 = fsub float %384, %351, !dbg !61
  %389 = fsub float %385, %351, !dbg !61
  %390 = fsub float %386, %351, !dbg !61
  %391 = fmul float %.0.i19, %387, !dbg !62
  %392 = fmul float %.0.i19, %388, !dbg !62
  %393 = fmul float %.0.i19, %389, !dbg !62
  %394 = fmul float %.0.i19, %390, !dbg !62
  %395 = fcmp olt float %391, 0.000000e+00, !dbg !63
  %396 = fcmp olt float %392, 0.000000e+00, !dbg !63
  %397 = fcmp olt float %393, 0.000000e+00, !dbg !63
  %398 = fcmp olt float %394, 0.000000e+00, !dbg !63
  %399 = select i1 %395, float 0.000000e+00, float %391, !dbg !65
  %400 = select i1 %396, float 0.000000e+00, float %392, !dbg !65
  %401 = select i1 %397, float 0.000000e+00, float %393, !dbg !65
  %402 = select i1 %398, float 0.000000e+00, float %394, !dbg !65
  %403 = or disjoint i32 %377, %13, !dbg !66
  %404 = sext i32 %403 to i64, !dbg !67
  %405 = getelementptr float, ptr addrspace(1) %4, i64 %404, !dbg !67
  %406 = bitcast float %399 to i32, !dbg !68
  %407 = bitcast float %400 to i32, !dbg !68
  %408 = bitcast float %401 to i32, !dbg !68
  %409 = bitcast float %402 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %406, i32 %407, i32 %408, i32 %409, ptr addrspace(1) %405, i1 %9) #5, !dbg !68
  %410 = or disjoint i32 %13, 2048, !dbg !69
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !60
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !60
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !60
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !60
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !60
  %416 = bitcast i32 %412 to float, !dbg !60
  %417 = bitcast i32 %413 to float, !dbg !60
  %418 = bitcast i32 %414 to float, !dbg !60
  %419 = bitcast i32 %415 to float, !dbg !60
  %420 = fsub float %416, %351, !dbg !61
  %421 = fsub float %417, %351, !dbg !61
  %422 = fsub float %418, %351, !dbg !61
  %423 = fsub float %419, %351, !dbg !61
  %424 = fmul float %.0.i19, %420, !dbg !62
  %425 = fmul float %.0.i19, %421, !dbg !62
  %426 = fmul float %.0.i19, %422, !dbg !62
  %427 = fmul float %.0.i19, %423, !dbg !62
  %428 = fcmp olt float %424, 0.000000e+00, !dbg !63
  %429 = fcmp olt float %425, 0.000000e+00, !dbg !63
  %430 = fcmp olt float %426, 0.000000e+00, !dbg !63
  %431 = fcmp olt float %427, 0.000000e+00, !dbg !63
  %432 = select i1 %428, float 0.000000e+00, float %424, !dbg !65
  %433 = select i1 %429, float 0.000000e+00, float %425, !dbg !65
  %434 = select i1 %430, float 0.000000e+00, float %426, !dbg !65
  %435 = select i1 %431, float 0.000000e+00, float %427, !dbg !65
  %436 = or disjoint i32 %377, %410, !dbg !66
  %437 = sext i32 %436 to i64, !dbg !67
  %438 = getelementptr float, ptr addrspace(1) %4, i64 %437, !dbg !67
  %439 = bitcast float %432 to i32, !dbg !68
  %440 = bitcast float %433 to i32, !dbg !68
  %441 = bitcast float %434 to i32, !dbg !68
  %442 = bitcast float %435 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %440, i32 %441, i32 %442, ptr addrspace(1) %438, i1 %9) #5, !dbg !68
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py", directory: "inductor_cache/cw")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_cat_convolution_60, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_cat_convolution_60, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_cat_convolution_60", linkageName: "triton_red_fused__native_batch_norm_legit_cat_convolution_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 60, column: 19, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 30, scope: !7)
!16 = !DILocation(line: 28, column: 35, scope: !7)
!17 = !DILocation(line: 36, column: 48, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 22, scope: !7)
!21 = !DILocation(line: 42, column: 60, scope: !7)
!22 = !DILocation(line: 45, column: 53, scope: !7)
!23 = !DILocation(line: 36, column: 43, scope: !7)
!24 = !DILocation(line: 183, column: 24, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 40, column: 51, scope: !7)
!28 = !DILocation(line: 44, column: 64, scope: !7)
!29 = !DILocation(line: 185, column: 34, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 185, column: 26, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 186, column: 39, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 186, column: 31, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 186, column: 22, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 43, column: 56, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!37 = !DILocation(line: 47, column: 41, scope: !7)
!38 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 204, column: 46, scope: !25, inlinedAt: !37)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 36, scope: !7)
!52 = !DILocation(line: 54, column: 18, scope: !7)
!53 = !DILocation(line: 56, column: 19, scope: !7)
!54 = !DILocation(line: 57, column: 28, scope: !7)
!55 = !DILocation(line: 58, column: 4, scope: !7)
!56 = !DILocation(line: 59, column: 28, scope: !7)
!57 = !DILocation(line: 59, column: 40, scope: !7)
!58 = !DILocation(line: 70, column: 39, scope: !7)
!59 = !DILocation(line: 70, column: 52, scope: !7)
!60 = !DILocation(line: 65, column: 54, scope: !7)
!61 = !DILocation(line: 66, column: 24, scope: !7)
!62 = !DILocation(line: 67, column: 24, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !64)
!64 = !DILocation(line: 69, column: 46, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !64)
!66 = !DILocation(line: 70, column: 44, scope: !7)
!67 = !DILocation(line: 70, column: 29, scope: !7)
!68 = !DILocation(line: 70, column: 64, scope: !7)
!69 = !DILocation(line: 62, column: 27, scope: !7)
!70 = !DILocation(line: 61, column: 4, scope: !7)
