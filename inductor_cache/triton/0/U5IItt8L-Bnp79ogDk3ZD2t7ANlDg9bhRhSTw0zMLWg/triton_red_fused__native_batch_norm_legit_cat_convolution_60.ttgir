#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0)
#loc1 = loc(unknown)
#loc34 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":47:41)
#loc87 = loc(callsite(#loc1 at #loc34))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_cat_convolution_60(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1310720_i32 = arith.constant 1310720 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = arith.muli %0, %c4096_i32 : i32 loc(#loc8)
    %10 = tt.splat %9 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc9)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc11)
    %13 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc12)
    %14:3 = scf.for %arg7 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg8 = %cst_0, %arg9 = %cst_0, %arg10 = %cst_0) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %41 = tt.splat %arg7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc14)
      %42 = arith.addi %41, %3 : tensor<1x2048xi32, #blocked> loc(#loc14)
      %43 = arith.cmpi slt, %42, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %44 = arith.addi %42, %10 : tensor<1x2048xi32, #blocked> loc(#loc9)
      %45 = tt.addptr %11, %44 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc10)
      %46 = arith.andi %43, %12 : tensor<1x2048xi1, #blocked> loc(#loc11)
      %47 = tt.load %45, %46, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc16)
      %48 = arith.addf %47, %13 : tensor<1x2048xf32, #blocked> loc(#loc12)
      %49 = arith.cmpi eq, %arg7, %c0_i32 : i32 loc(#loc17)
      %50:3 = scf.if %49 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst_0, %48, %cst_1 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc78)
      } else {
        %54 = arith.subf %48, %arg8 : tensor<1x2048xf32, #blocked> loc(#loc79)
        %55 = arith.addf %arg10, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc80)
        %56 = arith.divf %54, %55 : tensor<1x2048xf32, #blocked> loc(#loc81)
        %57 = arith.addf %arg8, %56 : tensor<1x2048xf32, #blocked> loc(#loc82)
        %58 = arith.subf %48, %57 : tensor<1x2048xf32, #blocked> loc(#loc83)
        %59 = arith.mulf %54, %58 : tensor<1x2048xf32, #blocked> loc(#loc84)
        %60 = arith.addf %arg9, %59 : tensor<1x2048xf32, #blocked> loc(#loc85)
        scf.yield %60, %57, %55 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc85)
      } loc(#loc77)
      %51 = arith.select %46, %50#1, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc28)
      %52 = arith.select %46, %50#0, %arg9 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc29)
      %53 = arith.select %46, %50#2, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc30)
      tt.store %45, %48, %46 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc31)
      scf.yield %51, %52, %53 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc32)
    } loc(#loc13)
    %15:3 = "tt.reduce"(%14#0, %14#1, %14#2) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc34)), %arg8: f32 loc(callsite(#loc1 at #loc34)), %arg9: f32 loc(callsite(#loc1 at #loc34)), %arg10: f32 loc(callsite(#loc1 at #loc34)), %arg11: f32 loc(callsite(#loc1 at #loc34)), %arg12: f32 loc(callsite(#loc1 at #loc34))):
      %41 = arith.subf %arg10, %arg7 : f32 loc(#loc102)
      %42 = arith.addf %arg9, %arg12 : f32 loc(#loc103)
      %43 = arith.cmpf oeq, %42, %cst_3 : f32 loc(#loc104)
      %44 = arith.divf %arg12, %42 : f32 loc(#loc105)
      %45 = arith.select %43, %cst_3, %44 : f32 loc(#loc106)
      %46 = arith.mulf %41, %45 : f32 loc(#loc107)
      %47 = arith.addf %arg7, %46 : f32 loc(#loc108)
      %48 = arith.addf %arg8, %arg11 : f32 loc(#loc109)
      %49 = arith.mulf %41, %41 : f32 loc(#loc110)
      %50 = arith.mulf %49, %arg9 : f32 loc(#loc111)
      %51 = arith.mulf %50, %45 : f32 loc(#loc112)
      %52 = arith.addf %48, %51 : f32 loc(#loc113)
      tt.reduce.return %47, %52, %42 : f32, f32, f32 loc(#loc86)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc86)
    %16 = triton_gpu.convert_layout %15#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc47)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc47)
    %18 = tt.expand_dims %15#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc47)
    %19 = triton_gpu.convert_layout %15#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc48)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc49)
    %21 = tt.expand_dims %15#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc49)
    %22 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc50)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc51)
    %24 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc51)
    tt.store %23, %17, %24 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc51)
    %25 = arith.divf %20, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc52)
    %26 = arith.divf %21, %cst : tensor<1x1xf32, #blocked> loc(#loc52)
    %27 = arith.addf %25, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc53)
    %28 = arith.addf %26, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc53)
    %29 = tt.extern_elementwise %27 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc48)
    %30 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc48)
    gpu.barrier loc(#loc54)
    %31 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc55)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    tt.store %32, %29, %24 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    %33 = arith.divsi %0, %c64_i32 : i32 loc(#loc57)
    %34 = tt.broadcast %18 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc58)
    %35 = tt.broadcast %30 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc59)
    %36 = arith.muli %4, %c4096_i32 : i32 loc(#loc60)
    %37 = tt.splat %36 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc61)
    %38 = arith.muli %33, %c1310720_i32 : i32 loc(#loc62)
    %39 = tt.splat %38 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc63)
    %40 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc64)
    scf.for %arg7 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %41 = tt.splat %arg7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc66)
      %42 = arith.addi %41, %3 : tensor<1x2048xi32, #blocked> loc(#loc66)
      %43 = arith.cmpi slt, %42, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc67)
      %44 = arith.addi %42, %10 : tensor<1x2048xi32, #blocked> loc(#loc68)
      %45 = tt.addptr %11, %44 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc69)
      %46 = arith.andi %43, %12 : tensor<1x2048xi1, #blocked> loc(#loc70)
      %47 = tt.load %45, %46, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc71)
      %48 = arith.subf %47, %34 : tensor<1x2048xf32, #blocked> loc(#loc58)
      %49 = arith.mulf %48, %35 : tensor<1x2048xf32, #blocked> loc(#loc59)
      %50 = arith.cmpf ogt, %cst_0, %49 : tensor<1x2048xf32, #blocked> loc(#loc100)
      %51 = arith.select %50, %cst_0, %49 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc101)
      %52 = arith.addi %42, %37 : tensor<1x2048xi32, #blocked> loc(#loc61)
      %53 = arith.addi %52, %39 : tensor<1x2048xi32, #blocked> loc(#loc63)
      %54 = tt.addptr %40, %53 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc64)
      tt.store %54, %51, %46 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc75)
    } loc(#loc65)
    tt.return loc(#loc76)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":22:28)
#loc3 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":24:21)
#loc4 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":25:33)
#loc5 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":27:19)
#loc6 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":28:30)
#loc7 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":28:35)
#loc8 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":36:48)
#loc9 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":36:43)
#loc10 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":36:38)
#loc11 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":36:61)
#loc12 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":37:22)
#loc13 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":32:36)
#loc14 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":33:27)
#loc15 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":34:25)
#loc16 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":36:53)
#loc17 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":40:62)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc19 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":40:51)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc28 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":42:60)
#loc29 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":43:56)
#loc30 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":44:64)
#loc31 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":45:53)
#loc32 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":45:8)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc47 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":49:20)
#loc48 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":57:28)
#loc49 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":50:20)
#loc50 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":52:25)
#loc51 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":52:36)
#loc52 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":54:18)
#loc53 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":56:19)
#loc54 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":58:4)
#loc55 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":59:28)
#loc56 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":59:40)
#loc57 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":60:19)
#loc58 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":66:24)
#loc59 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":67:24)
#loc60 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":70:39)
#loc61 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":70:34)
#loc62 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":70:52)
#loc63 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":70:44)
#loc64 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":70:29)
#loc65 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":61:36)
#loc66 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":62:27)
#loc67 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":63:25)
#loc68 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":65:44)
#loc69 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":65:39)
#loc70 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":65:62)
#loc71 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":65:54)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc73 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":69:46)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc75 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":70:64)
#loc76 = loc("inductor_cache/cw/ccwuyxvolukzwboishbgt2ndvjhkrp34mdw2qm6ar46qgkduod73.py":61:4)
#loc77 = loc(callsite(#loc18 at #loc19))
#loc78 = loc(callsite(#loc20 at #loc19))
#loc79 = loc(callsite(#loc21 at #loc19))
#loc80 = loc(callsite(#loc22 at #loc19))
#loc81 = loc(callsite(#loc23 at #loc19))
#loc82 = loc(callsite(#loc24 at #loc19))
#loc83 = loc(callsite(#loc25 at #loc19))
#loc84 = loc(callsite(#loc26 at #loc19))
#loc85 = loc(callsite(#loc27 at #loc19))
#loc86 = loc(callsite(#loc33 at #loc34))
#loc88 = loc(callsite(#loc35 at #loc33))
#loc89 = loc(callsite(#loc36 at #loc33))
#loc90 = loc(callsite(#loc37 at #loc33))
#loc91 = loc(callsite(#loc38 at #loc33))
#loc92 = loc(callsite(#loc39 at #loc33))
#loc93 = loc(callsite(#loc40 at #loc33))
#loc94 = loc(callsite(#loc41 at #loc33))
#loc95 = loc(callsite(#loc42 at #loc33))
#loc96 = loc(callsite(#loc43 at #loc33))
#loc97 = loc(callsite(#loc44 at #loc33))
#loc98 = loc(callsite(#loc45 at #loc33))
#loc99 = loc(callsite(#loc46 at #loc33))
#loc100 = loc(callsite(#loc72 at #loc73))
#loc101 = loc(callsite(#loc74 at #loc73))
#loc102 = loc(callsite(#loc88 at #loc34))
#loc103 = loc(callsite(#loc89 at #loc34))
#loc104 = loc(callsite(#loc90 at #loc34))
#loc105 = loc(callsite(#loc91 at #loc34))
#loc106 = loc(callsite(#loc92 at #loc34))
#loc107 = loc(callsite(#loc93 at #loc34))
#loc108 = loc(callsite(#loc94 at #loc34))
#loc109 = loc(callsite(#loc95 at #loc34))
#loc110 = loc(callsite(#loc96 at #loc34))
#loc111 = loc(callsite(#loc97 at #loc34))
#loc112 = loc(callsite(#loc98 at #loc34))
#loc113 = loc(callsite(#loc99 at #loc34))
