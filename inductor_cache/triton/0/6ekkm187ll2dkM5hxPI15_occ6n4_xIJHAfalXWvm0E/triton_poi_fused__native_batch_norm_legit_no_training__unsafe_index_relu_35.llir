; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 8, !dbg !14
  %17 = srem i32 %16, 8, !dbg !15
  %18 = mul i32 %16, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = srem i32 %15, 8, !dbg !16
  %20 = sdiv i32 %14, 64, !dbg !17
  %21 = srem i32 %20, 256, !dbg !18
  %22 = sext i32 %17 to i64, !dbg !19
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %28 = sext i32 %.decomposed to i64, !dbg !21
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %19 to i64, !dbg !21
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !22
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !22
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !22
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !22
  %38 = sext i32 %21 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !30
  %63 = lshr i64 %24, 61, !dbg !31
  %64 = and i64 %63, 4, !dbg !31
  %65 = add i64 %64, %24, !dbg !31
  %66 = lshr i64 %33, 61, !dbg !32
  %67 = and i64 %66, 4, !dbg !32
  %68 = lshr i64 %34, 61, !dbg !32
  %69 = and i64 %68, 4, !dbg !32
  %70 = lshr i64 %36, 61, !dbg !32
  %71 = and i64 %70, 4, !dbg !32
  %72 = lshr i64 %37, 61, !dbg !32
  %73 = and i64 %72, 4, !dbg !32
  %74 = shl i64 %65, 2, !dbg !33
  %75 = shl nsw i32 %20, 4, !dbg !34
  %76 = sext i32 %75 to i64, !dbg !35
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !36
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %67, !dbg !36
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %74, !dbg !36
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %76, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !36
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %69, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %74, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %76, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !36
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %71, !dbg !36
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %74, !dbg !36
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %76, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !36
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %73, !dbg !36
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %74, !dbg !36
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %76, !dbg !36
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !37
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !37
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !37
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !37
  %97 = fadd float %46, 0x3EE4F8B580000000, !dbg !38
  %98 = fadd float %48, 0x3EE4F8B580000000, !dbg !38
  %99 = fadd float %50, 0x3EE4F8B580000000, !dbg !38
  %100 = fadd float %52, 0x3EE4F8B580000000, !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %101, 0, !dbg !39
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %102, 0, !dbg !39
  br i1 %.not.i, label %108, label %103, !dbg !39

103:                                              ; preds = %8
  br i1 %.not1.i, label %106, label %104, !dbg !39

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

108:                                              ; preds = %8
  br i1 %.not1.i, label %111, label %109, !dbg !39

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !39
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %113, 0, !dbg !39
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %114, 0, !dbg !39
  br i1 %.not.i1, label %120, label %115, !dbg !39

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !39

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %123, label %121, !dbg !39

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %116, %118, %121, %123
  %.0.i3 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !39
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %125, 0, !dbg !39
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %126, 0, !dbg !39
  br i1 %.not.i6, label %132, label %127, !dbg !39

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !39

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

132:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %135, label %133, !dbg !39

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %128, %130, %133, %135
  %.0.i8 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !39
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %137, 0, !dbg !39
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %138, 0, !dbg !39
  br i1 %.not.i11, label %144, label %139, !dbg !39

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !39

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

144:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %147, label %145, !dbg !39

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %140, %142, %145, %147
  %.0.i13 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !39
  %149 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !37
  %150 = insertelement <4 x i32> %149, i32 %95, i64 1, !dbg !37
  %151 = insertelement <4 x i32> %150, i32 %94, i64 2, !dbg !37
  %152 = insertelement <4 x i32> %151, i32 %93, i64 3, !dbg !37
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !37
  %154 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !24
  %155 = insertelement <4 x i32> %154, i32 %42, i64 1, !dbg !24
  %156 = insertelement <4 x i32> %155, i32 %41, i64 2, !dbg !24
  %157 = insertelement <4 x i32> %156, i32 %40, i64 3, !dbg !24
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !24
  %159 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !30
  %160 = insertelement <4 x i32> %159, i32 %61, i64 1, !dbg !30
  %161 = insertelement <4 x i32> %160, i32 %60, i64 2, !dbg !30
  %162 = insertelement <4 x i32> %161, i32 %59, i64 3, !dbg !30
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !30
  %164 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %56, i64 1, !dbg !28
  %166 = insertelement <4 x i32> %165, i32 %55, i64 2, !dbg !28
  %167 = insertelement <4 x i32> %166, i32 %54, i64 3, !dbg !28
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !28
  %.frozen19 = freeze i32 %14, !dbg !40
  %169 = sdiv i32 %.frozen19, 16384, !dbg !40
  %170 = mul i32 %169, 16384, !dbg !41
  %.decomposed20 = sub i32 %.frozen19, %170, !dbg !41
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %175 = fsub <4 x float> %153, %158, !dbg !43
  %176 = insertelement <4 x float> poison, float %174, i64 0, !dbg !44
  %177 = insertelement <4 x float> %176, float %173, i64 1, !dbg !44
  %178 = insertelement <4 x float> %177, float %172, i64 2, !dbg !44
  %179 = insertelement <4 x float> %178, float %171, i64 3, !dbg !44
  %180 = fmul <4 x float> %175, %179, !dbg !44
  %181 = fmul <4 x float> %180, %168, !dbg !45
  %182 = fadd <4 x float> %181, %163, !dbg !46
  %183 = fcmp olt <4 x float> %182, zeroinitializer, !dbg !47
  %184 = extractelement <4 x i1> %183, i64 3, !dbg !51
  %185 = extractelement <4 x i1> %183, i64 2, !dbg !51
  %186 = extractelement <4 x i1> %183, i64 1, !dbg !51
  %187 = extractelement <4 x i1> %183, i64 0, !dbg !51
  %188 = shl i32 %169, 15, !dbg !52
  %189 = add i32 %188, %.decomposed20, !dbg !53
  %190 = sext i32 %189 to i64, !dbg !54
  %191 = getelementptr float, ptr addrspace(1) %6, i64 %190, !dbg !54
  %bc = bitcast <4 x float> %182 to <4 x i32>, !dbg !55
  %192 = extractelement <4 x i32> %bc, i64 3, !dbg !55
  %193 = select i1 %184, i32 0, i32 %192, !dbg !51
  %bc16 = bitcast <4 x float> %182 to <4 x i32>, !dbg !55
  %194 = extractelement <4 x i32> %bc16, i64 2, !dbg !55
  %195 = select i1 %185, i32 0, i32 %194, !dbg !51
  %bc17 = bitcast <4 x float> %182 to <4 x i32>, !dbg !55
  %196 = extractelement <4 x i32> %bc17, i64 1, !dbg !55
  %197 = select i1 %186, i32 0, i32 %196, !dbg !51
  %bc18 = bitcast <4 x float> %182 to <4 x i32>, !dbg !55
  %198 = extractelement <4 x i32> %bc18, i64 0, !dbg !55
  %199 = select i1 %187, i32 0, i32 %198, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %195, i32 %197, i32 %199, ptr addrspace(1) %191, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crxqhfy72cdpcimopi4n3gms45cpvtie3w66opgahk52mhvvowft.py", directory: "inductor_cache/rx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 49, scope: !7)
!35 = !DILocation(line: 43, column: 46, scope: !7)
!36 = !DILocation(line: 43, column: 30, scope: !7)
!37 = !DILocation(line: 43, column: 54, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 27, scope: !7)
!40 = !DILocation(line: 28, column: 19, scope: !7)
!41 = !DILocation(line: 29, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 56, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 57, column: 36, scope: !7)
!53 = !DILocation(line: 57, column: 30, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 48, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
