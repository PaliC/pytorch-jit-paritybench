; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_add_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 16, !dbg !15
  %15 = srem i32 %12, 16, !dbg !15
  %16 = shl i32 %11, 2, !dbg !16
  %17 = shl i32 %12, 2, !dbg !16
  %18 = sext i32 %16 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #1, !dbg !18
  %24 = shl nsw i32 %14, 2, !dbg !19
  %25 = shl nsw i32 %15, 2, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !21
  %32 = or disjoint i32 %16, 1, !dbg !22
  %33 = or disjoint i32 %17, 1, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !24
  %40 = or disjoint i32 %24, 1, !dbg !25
  %41 = or disjoint i32 %25, 1, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !27
  %48 = or disjoint i32 %16, 2, !dbg !28
  %49 = or disjoint i32 %17, 2, !dbg !28
  %50 = sext i32 %48 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = sext i32 %49 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !30
  %57 = bitcast i32 %56 to float, !dbg !30
  %58 = or disjoint i32 %24, 2, !dbg !31
  %59 = or disjoint i32 %25, 2, !dbg !31
  %60 = sext i32 %58 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = sext i32 %59 to i64, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %13) #1, !dbg !33
  %67 = bitcast i32 %66 to float, !dbg !33
  %68 = or disjoint i32 %16, 3, !dbg !34
  %69 = or disjoint i32 %17, 3, !dbg !34
  %70 = sext i32 %68 to i64, !dbg !35
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !35
  %72 = sext i32 %69 to i64, !dbg !35
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !35
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %13) #1, !dbg !36
  %75 = bitcast i32 %74 to float, !dbg !36
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !36
  %77 = bitcast i32 %76 to float, !dbg !36
  %78 = or disjoint i32 %24, 3, !dbg !37
  %79 = or disjoint i32 %25, 3, !dbg !37
  %80 = sext i32 %78 to i64, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !38
  %82 = sext i32 %79 to i64, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !38
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !39
  %85 = bitcast i32 %84 to float, !dbg !39
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %13) #1, !dbg !39
  %87 = bitcast i32 %86 to float, !dbg !39
  %88 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %89 = insertelement <2 x i32> %88, i32 %38, i64 1, !dbg !18
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !18
  %91 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %92 = insertelement <2 x i32> %91, i32 %46, i64 1, !dbg !21
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !21
  %94 = fmul <2 x float> %90, splat (float 5.000000e-01), !dbg !40
  %95 = fadd <2 x float> %94, %93, !dbg !41
  %96 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %97 = insertelement <2 x i32> %96, i32 %39, i64 1, !dbg !18
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !18
  %99 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %100 = insertelement <2 x i32> %99, i32 %47, i64 1, !dbg !21
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !21
  %102 = fmul <2 x float> %98, splat (float 5.000000e-01), !dbg !40
  %103 = fadd <2 x float> %102, %101, !dbg !41
  %104 = extractelement <2 x float> %95, i64 0, !dbg !42
  %105 = extractelement <2 x float> %95, i64 1, !dbg !43
  %106 = fcmp ogt float %104, %105, !dbg !44
  %107 = extractelement <2 x float> %103, i64 0, !dbg !42
  %108 = extractelement <2 x float> %103, i64 1, !dbg !43
  %109 = fcmp ogt float %107, %108, !dbg !44
  %110 = fcmp uno float %104, 0.000000e+00, !dbg !48
  %111 = fcmp uno float %107, 0.000000e+00, !dbg !48
  %112 = or i1 %110, %106, !dbg !49
  %113 = or i1 %111, %109, !dbg !49
  %114 = select i1 %112, float %104, float %105, !dbg !50
  %115 = select i1 %113, float %107, float %108, !dbg !50
  %116 = fmul float %55, 5.000000e-01, !dbg !51
  %117 = fmul float %57, 5.000000e-01, !dbg !51
  %118 = fadd float %116, %65, !dbg !52
  %119 = fadd float %117, %67, !dbg !52
  %120 = fcmp ogt float %114, %118, !dbg !53
  %121 = fcmp ogt float %115, %119, !dbg !53
  %122 = fcmp uno float %114, 0.000000e+00, !dbg !55
  %123 = fcmp uno float %115, 0.000000e+00, !dbg !55
  %124 = or i1 %122, %120, !dbg !56
  %125 = or i1 %123, %121, !dbg !56
  %126 = select i1 %124, float %114, float %118, !dbg !57
  %127 = select i1 %125, float %115, float %119, !dbg !57
  %128 = fmul float %75, 5.000000e-01, !dbg !58
  %129 = fmul float %77, 5.000000e-01, !dbg !58
  %130 = fadd float %128, %85, !dbg !59
  %131 = fadd float %129, %87, !dbg !59
  %132 = fcmp ogt float %126, %130, !dbg !60
  %133 = fcmp ogt float %127, %131, !dbg !60
  %134 = fcmp uno float %126, 0.000000e+00, !dbg !62
  %135 = fcmp uno float %127, 0.000000e+00, !dbg !62
  %136 = or i1 %134, %132, !dbg !63
  %137 = or i1 %135, %133, !dbg !63
  %138 = select i1 %136, float %126, float %130, !dbg !64
  %139 = select i1 %137, float %127, float %131, !dbg !64
  %140 = fsub float %104, %138, !dbg !42
  %141 = fsub float %107, %139, !dbg !42
  %142 = fmul float %140, 0x3FF7154760000000, !dbg !65
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #1, !dbg !65
  %144 = fmul float %141, 0x3FF7154760000000, !dbg !65
  %145 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %144) #1, !dbg !65
  %146 = fsub float %105, %138, !dbg !43
  %147 = fsub float %108, %139, !dbg !43
  %148 = fmul float %146, 0x3FF7154760000000, !dbg !66
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #1, !dbg !66
  %150 = fmul float %147, 0x3FF7154760000000, !dbg !66
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #1, !dbg !66
  %152 = fadd float %143, %149, !dbg !67
  %153 = fadd float %145, %151, !dbg !67
  %154 = fsub float %118, %138, !dbg !68
  %155 = fsub float %119, %139, !dbg !68
  %156 = fmul float %154, 0x3FF7154760000000, !dbg !69
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !69
  %158 = fmul float %155, 0x3FF7154760000000, !dbg !69
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #1, !dbg !69
  %160 = fadd float %152, %157, !dbg !70
  %161 = fadd float %153, %159, !dbg !70
  %162 = fsub float %130, %138, !dbg !71
  %163 = fsub float %131, %139, !dbg !71
  %164 = fmul float %162, 0x3FF7154760000000, !dbg !72
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !72
  %166 = fmul float %163, 0x3FF7154760000000, !dbg !72
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #1, !dbg !72
  %168 = fadd float %160, %165, !dbg !73
  %169 = fadd float %161, %167, !dbg !73
  %170 = sext i32 %11 to i64, !dbg !74
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !74
  %172 = bitcast float %138 to i32, !dbg !75
  %173 = bitcast float %139 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 %13) #1, !dbg !75
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !76
  %175 = bitcast float %168 to i32, !dbg !77
  %176 = bitcast float %169 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 %13) #1, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctxjkhhg5rvstztttzhbzijjokg235dchzrw6tiqidz34xgsc7eo.py", directory: "inductor_cache/tx")
!4 = !{ptr @triton_poi_fused__softmax_add_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_mul_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_mul_4", linkageName: "triton_poi_fused__softmax_add_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 31, scope: !7)
!30 = !DILocation(line: 30, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 35, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 42, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 42, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 46, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 39, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 40, column: 20, scope: !7)
!52 = !DILocation(line: 41, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !54)
!54 = !DILocation(line: 42, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !54)
!58 = !DILocation(line: 43, column: 20, scope: !7)
!59 = !DILocation(line: 44, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !61)
!61 = !DILocation(line: 45, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !61)
!65 = !DILocation(line: 47, column: 24, scope: !7)
!66 = !DILocation(line: 49, column: 24, scope: !7)
!67 = !DILocation(line: 50, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 20, scope: !7)
!69 = !DILocation(line: 52, column: 24, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 54, column: 20, scope: !7)
!72 = !DILocation(line: 55, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 20, scope: !7)
!74 = !DILocation(line: 57, column: 25, scope: !7)
!75 = !DILocation(line: 57, column: 37, scope: !7)
!76 = !DILocation(line: 58, column: 25, scope: !7)
!77 = !DILocation(line: 58, column: 37, scope: !7)
!78 = !DILocation(line: 58, column: 4, scope: !7)
