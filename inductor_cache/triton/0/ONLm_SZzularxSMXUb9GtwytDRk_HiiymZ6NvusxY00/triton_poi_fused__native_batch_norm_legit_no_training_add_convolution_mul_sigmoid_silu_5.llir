; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %19 = shl i32 %18, 1, !dbg !11
  %20 = or disjoint i32 %19, 1, !dbg !12
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !13
  %22 = shl i32 %21, 9, !dbg !14
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %24 = shl i32 %23, 2, !dbg !15
  %25 = and i32 %24, 508, !dbg !15
  %26 = or disjoint i32 %22, %25, !dbg !16
  %27 = icmp slt i32 %26, 512, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %28 = sdiv i32 %.frozen, 4096, !dbg !18
  %29 = sdiv i32 %20, 4096, !dbg !18
  %30 = shl i32 %18, 10, !dbg !19
  %31 = shl i32 %20, 9, !dbg !19
  %32 = add i32 %26, %30, !dbg !20
  %33 = add i32 %26, %31, !dbg !20
  %34 = sext i32 %32 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %33 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %27) #4, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %27) #4, !dbg !22
  %40 = sext i32 %26 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %27) #4, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #4, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %27) #4, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %27) #4, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #4, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %27) #4, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %57 = bitcast i32 %53 to float, !dbg !32
  %58 = bitcast i32 %54 to float, !dbg !32
  %59 = bitcast i32 %55 to float, !dbg !32
  %60 = bitcast i32 %56 to float, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !33
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %27) #4, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %40, !dbg !35
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %27) #4, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %40, !dbg !37
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %27) #4, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %9, i64 %40, !dbg !39
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !40
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !40
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !40
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !40
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !40
  %73 = bitcast i32 %69 to float, !dbg !40
  %74 = bitcast i32 %70 to float, !dbg !40
  %75 = bitcast i32 %71 to float, !dbg !40
  %76 = bitcast i32 %72 to float, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %10, i64 %40, !dbg !41
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %27) #4, !dbg !42
  %79 = getelementptr float, ptr addrspace(1) %11, i64 %40, !dbg !43
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %27) #4, !dbg !44
  %81 = shl nsw i32 %28, 9, !dbg !45
  %82 = shl nsw i32 %29, 9, !dbg !45
  %83 = add i32 %26, %81, !dbg !46
  %84 = add i32 %82, %26, !dbg !46
  %85 = sext i32 %83 to i64, !dbg !47
  %86 = getelementptr float, ptr addrspace(1) %12, i64 %85, !dbg !47
  %87 = sext i32 %84 to i64, !dbg !47
  %88 = getelementptr float, ptr addrspace(1) %12, i64 %87, !dbg !47
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %27) #4, !dbg !48
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %27) #4, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %13, i64 %34, !dbg !49
  %92 = getelementptr float, ptr addrspace(1) %13, i64 %36, !dbg !49
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %27) #4, !dbg !50
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %27) #4, !dbg !50
  %95 = fadd float %57, 0x3EE4F8B580000000, !dbg !51
  %96 = fadd float %58, 0x3EE4F8B580000000, !dbg !51
  %97 = fadd float %59, 0x3EE4F8B580000000, !dbg !51
  %98 = fadd float %60, 0x3EE4F8B580000000, !dbg !51
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i = icmp eq i32 %99, 0, !dbg !52
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i = icmp eq i32 %100, 0, !dbg !52
  br i1 %.not.i, label %106, label %101, !dbg !52

101:                                              ; preds = %17
  br i1 %.not1.i, label %104, label %102, !dbg !52

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

106:                                              ; preds = %17
  br i1 %.not1.i, label %109, label %107, !dbg !52

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

__nv_sqrtf.exit:                                  ; preds = %102, %104, %107, %109
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !52
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i15 = icmp eq i32 %111, 0, !dbg !52
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i18 = icmp eq i32 %112, 0, !dbg !52
  br i1 %.not.i15, label %118, label %113, !dbg !52

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %116, label %114, !dbg !52

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %121, label %119, !dbg !52

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

__nv_sqrtf.exit19:                                ; preds = %114, %116, %119, %121
  %.0.i17 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !52
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i20 = icmp eq i32 %123, 0, !dbg !52
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i23 = icmp eq i32 %124, 0, !dbg !52
  br i1 %.not.i20, label %130, label %125, !dbg !52

125:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %128, label %126, !dbg !52

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

130:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %133, label %131, !dbg !52

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

__nv_sqrtf.exit24:                                ; preds = %126, %128, %131, %133
  %.0.i22 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !52
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i25 = icmp eq i32 %135, 0, !dbg !52
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i28 = icmp eq i32 %136, 0, !dbg !52
  br i1 %.not.i25, label %142, label %137, !dbg !52

137:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %140, label %138, !dbg !52

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

142:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %145, label %143, !dbg !52

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

__nv_sqrtf.exit29:                                ; preds = %138, %140, %143, %145
  %.0.i27 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !52
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !53
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !53
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !53
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !53
  %151 = fadd float %73, 0x3EE4F8B580000000, !dbg !54
  %152 = fadd float %74, 0x3EE4F8B580000000, !dbg !54
  %153 = fadd float %75, 0x3EE4F8B580000000, !dbg !54
  %154 = fadd float %76, 0x3EE4F8B580000000, !dbg !54
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i30 = icmp eq i32 %155, 0, !dbg !55
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i33 = icmp eq i32 %156, 0, !dbg !55
  br i1 %.not.i30, label %162, label %157, !dbg !55

157:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %160, label %158, !dbg !55

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

162:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %165, label %163, !dbg !55

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

__nv_sqrtf.exit34:                                ; preds = %158, %160, %163, %165
  %.0.i32 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !55
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i35 = icmp eq i32 %167, 0, !dbg !55
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i38 = icmp eq i32 %168, 0, !dbg !55
  br i1 %.not.i35, label %174, label %169, !dbg !55

169:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %172, label %170, !dbg !55

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

174:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %177, label %175, !dbg !55

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

__nv_sqrtf.exit39:                                ; preds = %170, %172, %175, %177
  %.0.i37 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !55
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i40 = icmp eq i32 %179, 0, !dbg !55
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i43 = icmp eq i32 %180, 0, !dbg !55
  br i1 %.not.i40, label %186, label %181, !dbg !55

181:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %184, label %182, !dbg !55

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

186:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %189, label %187, !dbg !55

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

__nv_sqrtf.exit44:                                ; preds = %182, %184, %187, %189
  %.0.i42 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !55
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i45 = icmp eq i32 %191, 0, !dbg !55
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i48 = icmp eq i32 %192, 0, !dbg !55
  br i1 %.not.i45, label %198, label %193, !dbg !55

193:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %196, label %194, !dbg !55

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

198:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %201, label %199, !dbg !55

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

__nv_sqrtf.exit49:                                ; preds = %194, %196, %199, %201
  %.0.i47 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !55
  %203 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %204 = bitcast i32 %203 to float, !dbg !26
  %205 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %206 = bitcast i32 %205 to float, !dbg !28
  %207 = fadd float %204, %206, !dbg !56
  %208 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !38
  %209 = bitcast i32 %208 to float, !dbg !38
  %210 = fsub float %207, %209, !dbg !57
  %211 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %212 = bitcast i32 %211 to float, !dbg !26
  %213 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %214 = bitcast i32 %213 to float, !dbg !28
  %215 = fadd float %212, %214, !dbg !56
  %216 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !38
  %217 = bitcast i32 %216 to float, !dbg !38
  %218 = fsub float %215, %217, !dbg !57
  %219 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %220 = bitcast i32 %219 to float, !dbg !26
  %221 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %222 = bitcast i32 %221 to float, !dbg !28
  %223 = fadd float %220, %222, !dbg !56
  %224 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !38
  %225 = bitcast i32 %224 to float, !dbg !38
  %226 = fsub float %223, %225, !dbg !57
  %227 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %228 = bitcast i32 %227 to float, !dbg !26
  %229 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %230 = bitcast i32 %229 to float, !dbg !28
  %231 = fadd float %228, %230, !dbg !56
  %232 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !38
  %233 = bitcast i32 %232 to float, !dbg !38
  %234 = fsub float %231, %233, !dbg !57
  %235 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %236 = bitcast i32 %235 to float, !dbg !26
  %237 = fadd float %236, %206, !dbg !56
  %238 = fsub float %237, %209, !dbg !57
  %239 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %240 = bitcast i32 %239 to float, !dbg !26
  %241 = fadd float %240, %214, !dbg !56
  %242 = fsub float %241, %217, !dbg !57
  %243 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %244 = bitcast i32 %243 to float, !dbg !26
  %245 = fadd float %244, %222, !dbg !56
  %246 = fsub float %245, %225, !dbg !57
  %247 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %248 = bitcast i32 %247 to float, !dbg !26
  %249 = fadd float %248, %230, !dbg !56
  %250 = fsub float %249, %233, !dbg !57
  %251 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %252 = bitcast i32 %251 to float, !dbg !22
  %253 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %254 = bitcast i32 %253 to float, !dbg !24
  %255 = fadd float %252, %254, !dbg !58
  %256 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !30
  %257 = bitcast i32 %256 to float, !dbg !30
  %258 = fsub float %255, %257, !dbg !59
  %259 = fmul float %258, %150, !dbg !60
  %260 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !34
  %261 = bitcast i32 %260 to float, !dbg !34
  %262 = fmul float %259, %261, !dbg !61
  %263 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !36
  %264 = bitcast i32 %263 to float, !dbg !36
  %265 = fadd float %262, %264, !dbg !62
  %266 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %267 = bitcast i32 %266 to float, !dbg !22
  %268 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %269 = bitcast i32 %268 to float, !dbg !24
  %270 = fadd float %267, %269, !dbg !58
  %271 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !30
  %272 = bitcast i32 %271 to float, !dbg !30
  %273 = fsub float %270, %272, !dbg !59
  %274 = fmul float %273, %149, !dbg !60
  %275 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !34
  %276 = bitcast i32 %275 to float, !dbg !34
  %277 = fmul float %274, %276, !dbg !61
  %278 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !36
  %279 = bitcast i32 %278 to float, !dbg !36
  %280 = fadd float %277, %279, !dbg !62
  %281 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %282 = bitcast i32 %281 to float, !dbg !22
  %283 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %284 = bitcast i32 %283 to float, !dbg !24
  %285 = fadd float %282, %284, !dbg !58
  %286 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !30
  %287 = bitcast i32 %286 to float, !dbg !30
  %288 = fsub float %285, %287, !dbg !59
  %289 = fmul float %288, %148, !dbg !60
  %290 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !34
  %291 = bitcast i32 %290 to float, !dbg !34
  %292 = fmul float %289, %291, !dbg !61
  %293 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !36
  %294 = bitcast i32 %293 to float, !dbg !36
  %295 = fadd float %292, %294, !dbg !62
  %296 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %297 = bitcast i32 %296 to float, !dbg !22
  %298 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %299 = bitcast i32 %298 to float, !dbg !24
  %300 = fadd float %297, %299, !dbg !58
  %301 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !30
  %302 = bitcast i32 %301 to float, !dbg !30
  %303 = fsub float %300, %302, !dbg !59
  %304 = fmul float %303, %147, !dbg !60
  %305 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !34
  %306 = bitcast i32 %305 to float, !dbg !34
  %307 = fmul float %304, %306, !dbg !61
  %308 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !36
  %309 = bitcast i32 %308 to float, !dbg !36
  %310 = fadd float %307, %309, !dbg !62
  %311 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %312 = bitcast i32 %311 to float, !dbg !22
  %313 = fadd float %312, %254, !dbg !58
  %314 = fsub float %313, %257, !dbg !59
  %315 = fmul float %314, %150, !dbg !60
  %316 = fmul float %315, %261, !dbg !61
  %317 = fadd float %316, %264, !dbg !62
  %318 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %319 = bitcast i32 %318 to float, !dbg !22
  %320 = fadd float %319, %269, !dbg !58
  %321 = fsub float %320, %272, !dbg !59
  %322 = fmul float %321, %149, !dbg !60
  %323 = fmul float %322, %276, !dbg !61
  %324 = fadd float %323, %279, !dbg !62
  %325 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %326 = bitcast i32 %325 to float, !dbg !22
  %327 = fadd float %326, %284, !dbg !58
  %328 = fsub float %327, %287, !dbg !59
  %329 = fmul float %328, %148, !dbg !60
  %330 = fmul float %329, %291, !dbg !61
  %331 = fadd float %330, %294, !dbg !62
  %332 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %333 = bitcast i32 %332 to float, !dbg !22
  %334 = fadd float %333, %299, !dbg !58
  %335 = fsub float %334, %302, !dbg !59
  %336 = fmul float %335, %147, !dbg !60
  %337 = fmul float %336, %306, !dbg !61
  %338 = fadd float %337, %309, !dbg !62
  %339 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !50
  %340 = bitcast i32 %339 to float, !dbg !50
  %341 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !50
  %344 = bitcast i32 %343 to float, !dbg !50
  %345 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !50
  %346 = bitcast i32 %345 to float, !dbg !50
  %347 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !50
  %348 = bitcast i32 %347 to float, !dbg !50
  %349 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !50
  %350 = bitcast i32 %349 to float, !dbg !50
  %351 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !50
  %352 = bitcast i32 %351 to float, !dbg !50
  %353 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !50
  %354 = bitcast i32 %353 to float, !dbg !50
  %355 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !48
  %356 = bitcast i32 %355 to float, !dbg !48
  %357 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !48
  %358 = bitcast i32 %357 to float, !dbg !48
  %359 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !48
  %360 = bitcast i32 %359 to float, !dbg !48
  %361 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !48
  %362 = bitcast i32 %361 to float, !dbg !48
  %363 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !48
  %364 = bitcast i32 %363 to float, !dbg !48
  %365 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !48
  %366 = bitcast i32 %365 to float, !dbg !48
  %367 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !48
  %368 = bitcast i32 %367 to float, !dbg !48
  %369 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !48
  %370 = bitcast i32 %369 to float, !dbg !48
  %371 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !44
  %372 = bitcast i32 %371 to float, !dbg !44
  %373 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !44
  %374 = bitcast i32 %373 to float, !dbg !44
  %375 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !44
  %376 = bitcast i32 %375 to float, !dbg !44
  %377 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !44
  %378 = bitcast i32 %377 to float, !dbg !44
  %379 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !42
  %380 = bitcast i32 %379 to float, !dbg !42
  %381 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !42
  %382 = bitcast i32 %381 to float, !dbg !42
  %383 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !42
  %384 = bitcast i32 %383 to float, !dbg !42
  %385 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !42
  %386 = bitcast i32 %385 to float, !dbg !42
  %387 = mul i32 %28, 4096, !dbg !63
  %.decomposed = sub i32 %.frozen, %387, !dbg !63
  %388 = and i32 %23, 127, !dbg !15
  %389 = or disjoint i32 %388, %22, !dbg !16
  %390 = or disjoint i32 %389, 384, !dbg !16
  %391 = icmp slt i32 %390, 512, !dbg !17
  %392 = or disjoint i32 %389, 256, !dbg !16
  %393 = icmp slt i32 %392, 512, !dbg !17
  %394 = or disjoint i32 %389, 128, !dbg !16
  %395 = icmp slt i32 %394, 512, !dbg !17
  %396 = icmp slt i32 %389, 512, !dbg !17
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !64
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !64
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !64
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !64
  %401 = fmul float %250, %397, !dbg !65
  %402 = fmul float %246, %398, !dbg !65
  %403 = fmul float %242, %399, !dbg !65
  %404 = fmul float %238, %400, !dbg !65
  %405 = fmul float %234, %397, !dbg !65
  %406 = fmul float %226, %398, !dbg !65
  %407 = fmul float %218, %399, !dbg !65
  %408 = fmul float %210, %400, !dbg !65
  %409 = fmul float %401, %386, !dbg !66
  %410 = fmul float %402, %384, !dbg !66
  %411 = fmul float %403, %382, !dbg !66
  %412 = fmul float %404, %380, !dbg !66
  %413 = fmul float %405, %386, !dbg !66
  %414 = fmul float %406, %384, !dbg !66
  %415 = fmul float %407, %382, !dbg !66
  %416 = fmul float %408, %380, !dbg !66
  %417 = fadd float %409, %378, !dbg !67
  %418 = fadd float %410, %376, !dbg !67
  %419 = fadd float %411, %374, !dbg !67
  %420 = fadd float %412, %372, !dbg !67
  %421 = fadd float %413, %378, !dbg !67
  %422 = fadd float %414, %376, !dbg !67
  %423 = fadd float %415, %374, !dbg !67
  %424 = fadd float %416, %372, !dbg !67
  %425 = fadd float %338, %417, !dbg !68
  %426 = fadd float %331, %418, !dbg !68
  %427 = fadd float %324, %419, !dbg !68
  %428 = fadd float %317, %420, !dbg !68
  %429 = fadd float %310, %421, !dbg !68
  %430 = fadd float %295, %422, !dbg !68
  %431 = fadd float %280, %423, !dbg !68
  %432 = fadd float %265, %424, !dbg !68
  %433 = fsub float 0.000000e+00, %370, !dbg !69
  %434 = fsub float 0.000000e+00, %368, !dbg !69
  %435 = fsub float 0.000000e+00, %366, !dbg !69
  %436 = fsub float 0.000000e+00, %364, !dbg !69
  %437 = fsub float 0.000000e+00, %362, !dbg !69
  %438 = fsub float 0.000000e+00, %360, !dbg !69
  %439 = fsub float 0.000000e+00, %358, !dbg !69
  %440 = fsub float 0.000000e+00, %356, !dbg !69
  %441 = fmul float %433, 0x3FF7154760000000, !dbg !73
  %442 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %441) #4, !dbg !73
  %443 = fmul float %434, 0x3FF7154760000000, !dbg !73
  %444 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %443) #4, !dbg !73
  %445 = fmul float %435, 0x3FF7154760000000, !dbg !73
  %446 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %445) #4, !dbg !73
  %447 = fmul float %436, 0x3FF7154760000000, !dbg !73
  %448 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %447) #4, !dbg !73
  %449 = fmul float %437, 0x3FF7154760000000, !dbg !73
  %450 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %449) #4, !dbg !73
  %451 = fmul float %438, 0x3FF7154760000000, !dbg !73
  %452 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %451) #4, !dbg !73
  %453 = fmul float %439, 0x3FF7154760000000, !dbg !73
  %454 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %453) #4, !dbg !73
  %455 = fmul float %440, 0x3FF7154760000000, !dbg !73
  %456 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %455) #4, !dbg !73
  %457 = fadd float %442, 1.000000e+00, !dbg !74
  %458 = fadd float %444, 1.000000e+00, !dbg !74
  %459 = fadd float %446, 1.000000e+00, !dbg !74
  %460 = fadd float %448, 1.000000e+00, !dbg !74
  %461 = fadd float %450, 1.000000e+00, !dbg !74
  %462 = fadd float %452, 1.000000e+00, !dbg !74
  %463 = fadd float %454, 1.000000e+00, !dbg !74
  %464 = fadd float %456, 1.000000e+00, !dbg !74
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %457) #4, !dbg !75
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %458) #4, !dbg !75
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %459) #4, !dbg !75
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %460) #4, !dbg !75
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %461) #4, !dbg !75
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %462) #4, !dbg !75
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %463) #4, !dbg !75
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %464) #4, !dbg !75
  %473 = fmul float %465, %354, !dbg !76
  %474 = fmul float %466, %352, !dbg !76
  %475 = fmul float %467, %350, !dbg !76
  %476 = fmul float %468, %348, !dbg !76
  %477 = fmul float %469, %346, !dbg !76
  %478 = fmul float %470, %344, !dbg !76
  %479 = fmul float %471, %342, !dbg !76
  %480 = fmul float %472, %340, !dbg !76
  %481 = fadd float %425, %473, !dbg !77
  %482 = fadd float %426, %474, !dbg !77
  %483 = fadd float %427, %475, !dbg !77
  %484 = fadd float %428, %476, !dbg !77
  %485 = fadd float %429, %477, !dbg !77
  %486 = fadd float %430, %478, !dbg !77
  %487 = fadd float %431, %479, !dbg !77
  %488 = fadd float %432, %480, !dbg !77
  %489 = fsub float 0.000000e+00, %481, !dbg !78
  %490 = fsub float 0.000000e+00, %482, !dbg !78
  %491 = fsub float 0.000000e+00, %483, !dbg !78
  %492 = fsub float 0.000000e+00, %484, !dbg !78
  %493 = fsub float 0.000000e+00, %485, !dbg !78
  %494 = fsub float 0.000000e+00, %486, !dbg !78
  %495 = fsub float 0.000000e+00, %487, !dbg !78
  %496 = fsub float 0.000000e+00, %488, !dbg !78
  %497 = fmul float %489, 0x3FF7154760000000, !dbg !80
  %498 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %497) #4, !dbg !80
  %499 = fmul float %490, 0x3FF7154760000000, !dbg !80
  %500 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %499) #4, !dbg !80
  %501 = fmul float %491, 0x3FF7154760000000, !dbg !80
  %502 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %501) #4, !dbg !80
  %503 = fmul float %492, 0x3FF7154760000000, !dbg !80
  %504 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %503) #4, !dbg !80
  %505 = fmul float %493, 0x3FF7154760000000, !dbg !80
  %506 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %505) #4, !dbg !80
  %507 = fmul float %494, 0x3FF7154760000000, !dbg !80
  %508 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %507) #4, !dbg !80
  %509 = fmul float %495, 0x3FF7154760000000, !dbg !80
  %510 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %509) #4, !dbg !80
  %511 = fmul float %496, 0x3FF7154760000000, !dbg !80
  %512 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %511) #4, !dbg !80
  %513 = fadd float %498, 1.000000e+00, !dbg !81
  %514 = fadd float %500, 1.000000e+00, !dbg !81
  %515 = fadd float %502, 1.000000e+00, !dbg !81
  %516 = fadd float %504, 1.000000e+00, !dbg !81
  %517 = fadd float %506, 1.000000e+00, !dbg !81
  %518 = fadd float %508, 1.000000e+00, !dbg !81
  %519 = fadd float %510, 1.000000e+00, !dbg !81
  %520 = fadd float %512, 1.000000e+00, !dbg !81
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %513) #4, !dbg !82
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %514) #4, !dbg !82
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %515) #4, !dbg !82
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %516) #4, !dbg !82
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %517) #4, !dbg !82
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %518) #4, !dbg !82
  %527 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %519) #4, !dbg !82
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %520) #4, !dbg !82
  %529 = fmul float %481, %521, !dbg !83
  %530 = fmul float %482, %522, !dbg !83
  %531 = fmul float %483, %523, !dbg !83
  %532 = fmul float %484, %524, !dbg !83
  %533 = fmul float %485, %525, !dbg !83
  %534 = fmul float %486, %526, !dbg !83
  %535 = fmul float %487, %527, !dbg !83
  %536 = fmul float %488, %528, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %537 = bitcast float %334 to i32, !dbg !85
  %538 = bitcast float %327 to i32, !dbg !85
  %539 = bitcast float %320 to i32, !dbg !85
  %540 = bitcast float %313 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %537, i32 %538, i32 %539, i32 %540, ptr addrspace(1) %35, i1 %27) #4, !dbg !85
  %541 = bitcast float %300 to i32, !dbg !85
  %542 = bitcast float %285 to i32, !dbg !85
  %543 = bitcast float %270 to i32, !dbg !85
  %544 = bitcast float %255 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %542, i32 %543, i32 %544, ptr addrspace(1) %37, i1 %27) #4, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %545 = bitcast float %249 to i32, !dbg !87
  %546 = bitcast float %245 to i32, !dbg !87
  %547 = bitcast float %241 to i32, !dbg !87
  %548 = bitcast float %237 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %545, i32 %546, i32 %547, i32 %548, ptr addrspace(1) %43, i1 %27) #4, !dbg !87
  %549 = bitcast float %231 to i32, !dbg !87
  %550 = bitcast float %223 to i32, !dbg !87
  %551 = bitcast float %215 to i32, !dbg !87
  %552 = bitcast float %207 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %549, i32 %550, i32 %551, i32 %552, ptr addrspace(1) %44, i1 %27) #4, !dbg !87
  %553 = shl i32 %389, 12, !dbg !88
  %554 = shl i32 %394, 12, !dbg !88
  %555 = shl i32 %392, 12, !dbg !88
  %556 = shl i32 %390, 12, !dbg !88
  %557 = shl i32 %28, 21, !dbg !89
  %558 = add i32 %557, %.decomposed, !dbg !90
  %559 = add i32 %558, %553, !dbg !91
  %560 = add i32 %558, %554, !dbg !91
  %561 = add i32 %558, %555, !dbg !91
  %562 = add i32 %558, %556, !dbg !91
  %563 = sext i32 %559 to i64, !dbg !92
  %564 = getelementptr float, ptr addrspace(1) %14, i64 %563, !dbg !92
  %565 = sext i32 %560 to i64, !dbg !92
  %566 = getelementptr float, ptr addrspace(1) %14, i64 %565, !dbg !92
  %567 = sext i32 %561 to i64, !dbg !92
  %568 = getelementptr float, ptr addrspace(1) %14, i64 %567, !dbg !92
  %569 = sext i32 %562 to i64, !dbg !92
  %570 = getelementptr float, ptr addrspace(1) %14, i64 %569, !dbg !92
  %571 = shl i32 %23, 3, !dbg !93
  %572 = and i32 %571, 1016, !dbg !93
  %573 = shl i32 %23, 1, !dbg !93
  %574 = and i32 %573, 254, !dbg !93
  %.idx = shl nuw nsw i32 %572, 3, !dbg !93
  %575 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !93
  %576 = bitcast float %529 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %575, <1 x i32> %576, i1 true) #4, !dbg !93
  %577 = shl nuw nsw i32 %572, 1, !dbg !93
  %578 = or disjoint i32 %577, 4, !dbg !93
  %579 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %578, !dbg !93
  %580 = bitcast float %530 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 true) #4, !dbg !93
  %581 = or disjoint i32 %577, 8, !dbg !93
  %582 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %581, !dbg !93
  %583 = bitcast float %531 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %583, i1 true) #4, !dbg !93
  %584 = or disjoint i32 %577, 12, !dbg !93
  %585 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %584, !dbg !93
  %586 = bitcast float %532 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %586, i1 true) #4, !dbg !93
  %587 = or disjoint i32 %572, 1, !dbg !93
  %588 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %572, !dbg !93
  %589 = getelementptr inbounds float, ptr addrspace(3) %588, i32 %587, !dbg !93
  %590 = bitcast float %533 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %589, <1 x i32> %590, i1 true) #4, !dbg !93
  %591 = or disjoint i32 %572, 3, !dbg !93
  %592 = or disjoint i32 %572, 2, !dbg !93
  %593 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %592, !dbg !93
  %594 = getelementptr inbounds float, ptr addrspace(3) %593, i32 %591, !dbg !93
  %595 = bitcast float %534 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %594, <1 x i32> %595, i1 true) #4, !dbg !93
  %596 = or disjoint i32 %572, 5, !dbg !93
  %597 = or disjoint i32 %572, 4, !dbg !93
  %598 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %597, !dbg !93
  %599 = getelementptr inbounds float, ptr addrspace(3) %598, i32 %596, !dbg !93
  %600 = bitcast float %535 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %599, <1 x i32> %600, i1 true) #4, !dbg !93
  %601 = or disjoint i32 %572, 7, !dbg !93
  %602 = or disjoint i32 %572, 6, !dbg !93
  %603 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %602, !dbg !93
  %604 = getelementptr inbounds float, ptr addrspace(3) %603, i32 %601, !dbg !93
  %605 = bitcast float %536 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %604, <1 x i32> %605, i1 true) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %606 = getelementptr float, ptr addrspace(3) @global_smem, i32 %574, !dbg !93
  %607 = getelementptr float, ptr addrspace(3) %606, i32 %574, !dbg !93
  %608 = or disjoint i32 %574, 256, !dbg !93
  %609 = getelementptr float, ptr addrspace(3) @global_smem, i32 %608, !dbg !93
  %610 = getelementptr float, ptr addrspace(3) %609, i32 %608, !dbg !93
  %611 = load <2 x i32>, ptr addrspace(3) %610, align 8, !dbg !93
  %612 = or disjoint i32 %574, 512, !dbg !93
  %613 = getelementptr float, ptr addrspace(3) @global_smem, i32 %612, !dbg !93
  %614 = getelementptr float, ptr addrspace(3) %613, i32 %612, !dbg !93
  %615 = load <2 x i32>, ptr addrspace(3) %614, align 8, !dbg !93
  %616 = or disjoint i32 %574, 768, !dbg !93
  %617 = getelementptr float, ptr addrspace(3) @global_smem, i32 %616, !dbg !93
  %618 = getelementptr float, ptr addrspace(3) %617, i32 %616, !dbg !93
  %619 = load <2 x i32>, ptr addrspace(3) %618, align 8, !dbg !93
  %.extract = load i32, ptr addrspace(3) %607, align 8, !dbg !93
  %620 = getelementptr inbounds i8, ptr addrspace(3) %607, i32 4, !dbg !93
  %.extract8 = load i32, ptr addrspace(3) %620, align 4, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %564, i1 %396) #4, !dbg !93
  %.extract9 = extractelement <2 x i32> %611, i64 0, !dbg !93
  %.extract10 = extractelement <2 x i32> %611, i64 1, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %566, i1 %395) #4, !dbg !93
  %.extract11 = extractelement <2 x i32> %615, i64 0, !dbg !93
  %.extract12 = extractelement <2 x i32> %615, i64 1, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %568, i1 %393) #4, !dbg !93
  %.extract13 = extractelement <2 x i32> %619, i64 0, !dbg !93
  %.extract14 = extractelement <2 x i32> %619, i64 1, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %570, i1 %391) #4, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6hb5osixqfolktdv6zhzfoegxdcrbaouwjwi44j2o4uo4y7wgui.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 35, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 36, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 36, scope: !7)
!43 = !DILocation(line: 43, column: 31, scope: !7)
!44 = !DILocation(line: 43, column: 36, scope: !7)
!45 = !DILocation(line: 44, column: 41, scope: !7)
!46 = !DILocation(line: 44, column: 37, scope: !7)
!47 = !DILocation(line: 44, column: 32, scope: !7)
!48 = !DILocation(line: 44, column: 46, scope: !7)
!49 = !DILocation(line: 45, column: 32, scope: !7)
!50 = !DILocation(line: 45, column: 46, scope: !7)
!51 = !DILocation(line: 50, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 27, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 27, scope: !7)
!56 = !DILocation(line: 47, column: 18, scope: !7)
!57 = !DILocation(line: 59, column: 19, scope: !7)
!58 = !DILocation(line: 46, column: 18, scope: !7)
!59 = !DILocation(line: 48, column: 18, scope: !7)
!60 = !DILocation(line: 56, column: 19, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 31, column: 19, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!72 = !DILocation(line: 68, column: 23, scope: !7)
!73 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 69, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !79)
!79 = !DILocation(line: 71, column: 23, scope: !7)
!80 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !79)
!81 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !79)
!82 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !79)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 73, column: 4, scope: !7)
!85 = !DILocation(line: 74, column: 48, scope: !7)
!86 = !DILocation(line: 75, column: 4, scope: !7)
!87 = !DILocation(line: 76, column: 48, scope: !7)
!88 = !DILocation(line: 77, column: 35, scope: !7)
!89 = !DILocation(line: 77, column: 48, scope: !7)
!90 = !DILocation(line: 77, column: 30, scope: !7)
!91 = !DILocation(line: 77, column: 40, scope: !7)
!92 = !DILocation(line: 77, column: 25, scope: !7)
!93 = !DILocation(line: 77, column: 60, scope: !7)
!94 = !DILocation(line: 77, column: 4, scope: !7)
