; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, 1, !dbg !13
  %15 = or disjoint i32 %6, 2, !dbg !13
  %16 = or disjoint i32 %6, 3, !dbg !13
  %17 = or disjoint i32 %6, 4, !dbg !13
  %18 = or disjoint i32 %6, 5, !dbg !13
  %19 = or disjoint i32 %6, 6, !dbg !13
  %20 = or disjoint i32 %6, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %23 = srem i32 %14, 8, !dbg !14
  %24 = srem i32 %15, 8, !dbg !14
  %25 = srem i32 %16, 8, !dbg !14
  %26 = srem i32 %17, 8, !dbg !14
  %27 = srem i32 %18, 8, !dbg !14
  %28 = srem i32 %19, 8, !dbg !14
  %29 = srem i32 %20, 8, !dbg !14
  %30 = shl nsw i32 %23, 1, !dbg !15
  %31 = shl nsw i32 %24, 1, !dbg !15
  %32 = shl nsw i32 %25, 1, !dbg !15
  %33 = shl nsw i32 %26, 1, !dbg !15
  %34 = shl nsw i32 %27, 1, !dbg !15
  %35 = shl nsw i32 %28, 1, !dbg !15
  %36 = shl nsw i32 %29, 1, !dbg !15
  %37 = shl i32 %13, 2, !dbg !16
  %38 = add i32 %30, %37, !dbg !17
  %39 = add i32 %31, %37, !dbg !17
  %40 = add i32 %32, %37, !dbg !17
  %41 = add i32 %33, %37, !dbg !17
  %42 = add i32 %34, %37, !dbg !17
  %43 = add i32 %35, %37, !dbg !17
  %44 = add i32 %36, %37, !dbg !17
  %45 = sext i32 %37 to i64, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !18
  %47 = sext i32 %38 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = sext i32 %39 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = sext i32 %40 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !18
  %53 = sext i32 %41 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !18
  %55 = sext i32 %42 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !18
  %57 = sext i32 %43 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = sext i32 %44 to i64, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !18
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !19
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !19
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !19
  %69 = or disjoint i32 %37, 1, !dbg !20
  %70 = or disjoint i32 %38, 1, !dbg !20
  %71 = or disjoint i32 %39, 1, !dbg !20
  %72 = or disjoint i32 %40, 1, !dbg !20
  %73 = or disjoint i32 %41, 1, !dbg !20
  %74 = or disjoint i32 %42, 1, !dbg !20
  %75 = or disjoint i32 %43, 1, !dbg !20
  %76 = or disjoint i32 %44, 1, !dbg !20
  %77 = sext i32 %69 to i64, !dbg !21
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !21
  %79 = sext i32 %70 to i64, !dbg !21
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !21
  %81 = sext i32 %71 to i64, !dbg !21
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !21
  %83 = sext i32 %72 to i64, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !21
  %85 = sext i32 %73 to i64, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !21
  %87 = sext i32 %74 to i64, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !21
  %89 = sext i32 %75 to i64, !dbg !21
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !21
  %91 = sext i32 %76 to i64, !dbg !21
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !21
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #2, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #2, !dbg !22
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !22
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !22
  %101 = or disjoint i32 %37, 16, !dbg !23
  %102 = add i32 %101, %30, !dbg !23
  %103 = add i32 %101, %31, !dbg !23
  %104 = add i32 %101, %32, !dbg !23
  %105 = add i32 %101, %33, !dbg !23
  %106 = add i32 %101, %34, !dbg !23
  %107 = add i32 %101, %35, !dbg !23
  %108 = add i32 %101, %36, !dbg !23
  %109 = sext i32 %101 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !24
  %111 = sext i32 %102 to i64, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !24
  %113 = sext i32 %103 to i64, !dbg !24
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !24
  %115 = sext i32 %104 to i64, !dbg !24
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !24
  %117 = sext i32 %105 to i64, !dbg !24
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !24
  %119 = sext i32 %106 to i64, !dbg !24
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !24
  %121 = sext i32 %107 to i64, !dbg !24
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !24
  %123 = sext i32 %108 to i64, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !24
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !25
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #2, !dbg !25
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !25
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #2, !dbg !25
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !25
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !25
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !25
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #2, !dbg !25
  %133 = or disjoint i32 %37, 17, !dbg !26
  %134 = add i32 %133, %30, !dbg !26
  %135 = add i32 %133, %31, !dbg !26
  %136 = add i32 %133, %32, !dbg !26
  %137 = add i32 %133, %33, !dbg !26
  %138 = add i32 %133, %34, !dbg !26
  %139 = add i32 %133, %35, !dbg !26
  %140 = add i32 %133, %36, !dbg !26
  %141 = sext i32 %133 to i64, !dbg !27
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !27
  %143 = sext i32 %134 to i64, !dbg !27
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !27
  %145 = sext i32 %135 to i64, !dbg !27
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !27
  %147 = sext i32 %136 to i64, !dbg !27
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !27
  %149 = sext i32 %137 to i64, !dbg !27
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !27
  %151 = sext i32 %138 to i64, !dbg !27
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !27
  %153 = sext i32 %139 to i64, !dbg !27
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !27
  %155 = sext i32 %140 to i64, !dbg !27
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !27
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #2, !dbg !28
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #2, !dbg !28
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #2, !dbg !28
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !28
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !28
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !28
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !28
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !28
  %165 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !19
  %166 = insertelement <4 x i32> %165, i32 %62, i64 1, !dbg !19
  %167 = insertelement <4 x i32> %166, i32 %63, i64 2, !dbg !19
  %168 = insertelement <4 x i32> %167, i32 %64, i64 3, !dbg !19
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !19
  %170 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !22
  %171 = insertelement <4 x i32> %170, i32 %94, i64 1, !dbg !22
  %172 = insertelement <4 x i32> %171, i32 %95, i64 2, !dbg !22
  %173 = insertelement <4 x i32> %172, i32 %96, i64 3, !dbg !22
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !22
  %175 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !25
  %176 = insertelement <4 x i32> %175, i32 %126, i64 1, !dbg !25
  %177 = insertelement <4 x i32> %176, i32 %127, i64 2, !dbg !25
  %178 = insertelement <4 x i32> %177, i32 %128, i64 3, !dbg !25
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !25
  %180 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !28
  %181 = insertelement <4 x i32> %180, i32 %158, i64 1, !dbg !28
  %182 = insertelement <4 x i32> %181, i32 %159, i64 2, !dbg !28
  %183 = insertelement <4 x i32> %182, i32 %160, i64 3, !dbg !28
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !28
  %185 = fcmp ogt <4 x float> %174, %169, !dbg !29
  %186 = fcmp uno <4 x float> %174, zeroinitializer, !dbg !33
  %187 = or <4 x i1> %185, %186, !dbg !34
  %.v = select <4 x i1> %187, <4 x i32> %173, <4 x i32> %168, !dbg !35
  %188 = bitcast <4 x i32> %.v to <4 x float>, !dbg !35
  %189 = fcmp olt <4 x float> %188, %179, !dbg !36
  %190 = fcmp uno <4 x float> %179, zeroinitializer, !dbg !38
  %191 = or <4 x i1> %189, %190, !dbg !39
  %.v15 = select <4 x i1> %191, <4 x i32> %178, <4 x i32> %.v, !dbg !40
  %192 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !40
  %193 = fcmp olt <4 x float> %192, %184, !dbg !41
  %194 = extractelement <4 x i1> %193, i64 0, !dbg !43
  %195 = extractelement <4 x i1> %193, i64 1, !dbg !43
  %196 = extractelement <4 x i1> %193, i64 2, !dbg !43
  %197 = extractelement <4 x i1> %193, i64 3, !dbg !43
  %198 = zext <4 x i1> %185 to <4 x i8>, !dbg !44
  %199 = select <4 x i1> %189, <4 x i8> splat (i8 2), <4 x i8> %198, !dbg !45
  %200 = select <4 x i1> %193, <4 x i8> splat (i8 3), <4 x i8> %199, !dbg !46
  %201 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !19
  %202 = insertelement <4 x i32> %201, i32 %66, i64 1, !dbg !19
  %203 = insertelement <4 x i32> %202, i32 %67, i64 2, !dbg !19
  %204 = insertelement <4 x i32> %203, i32 %68, i64 3, !dbg !19
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !19
  %206 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !22
  %207 = insertelement <4 x i32> %206, i32 %98, i64 1, !dbg !22
  %208 = insertelement <4 x i32> %207, i32 %99, i64 2, !dbg !22
  %209 = insertelement <4 x i32> %208, i32 %100, i64 3, !dbg !22
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !22
  %211 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !25
  %212 = insertelement <4 x i32> %211, i32 %130, i64 1, !dbg !25
  %213 = insertelement <4 x i32> %212, i32 %131, i64 2, !dbg !25
  %214 = insertelement <4 x i32> %213, i32 %132, i64 3, !dbg !25
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !25
  %216 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !28
  %217 = insertelement <4 x i32> %216, i32 %162, i64 1, !dbg !28
  %218 = insertelement <4 x i32> %217, i32 %163, i64 2, !dbg !28
  %219 = insertelement <4 x i32> %218, i32 %164, i64 3, !dbg !28
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !28
  %221 = fcmp ogt <4 x float> %210, %205, !dbg !29
  %222 = fcmp uno <4 x float> %210, zeroinitializer, !dbg !33
  %223 = or <4 x i1> %221, %222, !dbg !34
  %.v16 = select <4 x i1> %223, <4 x i32> %209, <4 x i32> %204, !dbg !35
  %224 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !35
  %225 = fcmp olt <4 x float> %224, %215, !dbg !36
  %226 = fcmp uno <4 x float> %215, zeroinitializer, !dbg !38
  %227 = or <4 x i1> %225, %226, !dbg !39
  %.v17 = select <4 x i1> %227, <4 x i32> %214, <4 x i32> %.v16, !dbg !40
  %228 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !40
  %229 = fcmp olt <4 x float> %228, %220, !dbg !41
  %230 = shufflevector <4 x float> %220, <4 x float> %184, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !47
  %231 = fcmp uno <8 x float> %230, zeroinitializer, !dbg !47
  %232 = extractelement <8 x i1> %231, i64 7, !dbg !43
  %233 = or i1 %194, %232, !dbg !43
  %234 = extractelement <8 x i1> %231, i64 6, !dbg !43
  %235 = or i1 %195, %234, !dbg !43
  %236 = extractelement <8 x i1> %231, i64 5, !dbg !43
  %237 = or i1 %196, %236, !dbg !43
  %238 = extractelement <8 x i1> %231, i64 4, !dbg !43
  %239 = or i1 %197, %238, !dbg !43
  %240 = extractelement <4 x i1> %229, i64 0, !dbg !43
  %241 = extractelement <8 x i1> %231, i64 3, !dbg !43
  %242 = or i1 %240, %241, !dbg !43
  %243 = extractelement <4 x i1> %229, i64 1, !dbg !43
  %244 = extractelement <8 x i1> %231, i64 2, !dbg !43
  %245 = or i1 %243, %244, !dbg !43
  %246 = extractelement <4 x i1> %229, i64 2, !dbg !43
  %247 = extractelement <8 x i1> %231, i64 1, !dbg !43
  %248 = or i1 %246, %247, !dbg !43
  %249 = extractelement <4 x i1> %229, i64 3, !dbg !43
  %250 = extractelement <8 x i1> %231, i64 0, !dbg !43
  %251 = or i1 %249, %250, !dbg !43
  %252 = zext <4 x i1> %221 to <4 x i8>, !dbg !44
  %253 = select <4 x i1> %225, <4 x i8> splat (i8 2), <4 x i8> %252, !dbg !45
  %254 = select <4 x i1> %229, <4 x i8> splat (i8 3), <4 x i8> %253, !dbg !46
  %255 = sext i32 %21 to i64, !dbg !48
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !48
  %257 = sext i32 %22 to i64, !dbg !48
  %258 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !48
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !49
  %260 = extractelement <4 x i32> %.v15, i64 0, !dbg !49
  %261 = select i1 %233, i32 %157, i32 %260, !dbg !50
  %262 = extractelement <4 x i32> %.v15, i64 1, !dbg !49
  %263 = select i1 %235, i32 %158, i32 %262, !dbg !50
  %264 = extractelement <4 x i32> %.v15, i64 2, !dbg !49
  %265 = select i1 %237, i32 %159, i32 %264, !dbg !50
  %266 = extractelement <4 x i32> %.v15, i64 3, !dbg !49
  %267 = select i1 %239, i32 %160, i32 %266, !dbg !50
  %268 = extractelement <4 x i32> %.v17, i64 0, !dbg !49
  %269 = select i1 %242, i32 %161, i32 %268, !dbg !50
  %270 = extractelement <4 x i32> %.v17, i64 1, !dbg !49
  %271 = select i1 %245, i32 %162, i32 %270, !dbg !50
  %272 = extractelement <4 x i32> %.v17, i64 2, !dbg !49
  %273 = select i1 %248, i32 %163, i32 %272, !dbg !50
  %274 = extractelement <4 x i32> %.v17, i64 3, !dbg !49
  %275 = select i1 %251, i32 %164, i32 %274, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %259, i32 %261, i32 %263, i32 %265, i32 %267, i1 true) #2, !dbg !49
  %276 = getelementptr inbounds i8, ptr addrspace(3) %259, i32 16, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %276, i32 %269, i32 %271, i32 %273, i32 %275, i1 true) #2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !49
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !49
  %279 = load <4 x i32>, ptr addrspace(3) %278, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %277, align 16, !dbg !49
  %280 = getelementptr inbounds i8, ptr addrspace(3) %277, i32 4, !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %280, align 4, !dbg !49
  %281 = getelementptr inbounds i8, ptr addrspace(3) %277, i32 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %281, align 8, !dbg !49
  %282 = getelementptr inbounds i8, ptr addrspace(3) %277, i32 12, !dbg !49
  %.extract10 = load i32, ptr addrspace(3) %282, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %256, i1 true) #2, !dbg !49
  %.extract11 = extractelement <4 x i32> %279, i64 0, !dbg !49
  %.extract12 = extractelement <4 x i32> %279, i64 1, !dbg !49
  %.extract13 = extractelement <4 x i32> %279, i64 2, !dbg !49
  %.extract14 = extractelement <4 x i32> %279, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %258, i1 true) #2, !dbg !49
  %283 = sext i32 %13 to i64, !dbg !51
  %284 = getelementptr i8, ptr addrspace(1) %2, i64 %283, !dbg !51
  %285 = bitcast <4 x i8> %200 to i32, !dbg !52
  %286 = bitcast <4 x i8> %254 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %285, i32 %286, ptr addrspace(1) %284, i1 true) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwngalp4nest752nlax26mg4w2zr3qn6kudrflhj467nkf6poqcn.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 32, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 41, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 49, scope: !7)
!23 = !DILocation(line: 29, column: 42, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 30, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 50, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 31, column: 40, scope: !7)
!33 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !37)
!37 = !DILocation(line: 32, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !42)
!42 = !DILocation(line: 33, column: 40, scope: !7)
!43 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !42)
!44 = !DILocation(line: 37, column: 33, scope: !7)
!45 = !DILocation(line: 40, column: 35, scope: !7)
!46 = !DILocation(line: 43, column: 35, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !42)
!48 = !DILocation(line: 44, column: 25, scope: !7)
!49 = !DILocation(line: 44, column: 36, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !42)
!51 = !DILocation(line: 45, column: 25, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 45, column: 4, scope: !7)
