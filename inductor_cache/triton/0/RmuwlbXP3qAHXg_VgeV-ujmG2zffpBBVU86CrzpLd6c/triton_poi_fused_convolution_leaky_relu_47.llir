; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = sdiv i32 %10, 17, !dbg !14
  %19 = sdiv i32 %11, 17, !dbg !14
  %20 = sdiv i32 %12, 17, !dbg !14
  %21 = sdiv i32 %13, 17, !dbg !14
  %22 = sdiv i32 %14, 17, !dbg !14
  %23 = sdiv i32 %15, 17, !dbg !14
  %24 = sdiv i32 %16, 17, !dbg !14
  %25 = sdiv i32 %17, 17, !dbg !14
  %26 = srem i32 %18, 1024, !dbg !15
  %27 = srem i32 %19, 1024, !dbg !15
  %28 = srem i32 %20, 1024, !dbg !15
  %29 = srem i32 %21, 1024, !dbg !15
  %30 = srem i32 %22, 1024, !dbg !15
  %31 = srem i32 %23, 1024, !dbg !15
  %32 = srem i32 %24, 1024, !dbg !15
  %33 = srem i32 %25, 1024, !dbg !15
  %34 = sext i32 %10 to i64, !dbg !16
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !16
  %36 = sext i32 %14 to i64, !dbg !16
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !16
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !17
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !17
  %48 = sext i32 %26 to i64, !dbg !18
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !18
  %50 = sext i32 %27 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !18
  %52 = sext i32 %28 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !18
  %54 = sext i32 %29 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !18
  %56 = sext i32 %30 to i64, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !18
  %58 = sext i32 %31 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !18
  %60 = sext i32 %32 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !18
  %62 = sext i32 %33 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !18
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !19
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !19
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !19
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !20
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !21
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !21
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !21
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !21
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !21
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !21
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !21
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !21
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !21
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !21
  %84 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !19
  %85 = insertelement <8 x i32> %84, i32 %70, i64 1, !dbg !19
  %86 = insertelement <8 x i32> %85, i32 %69, i64 2, !dbg !19
  %87 = insertelement <8 x i32> %86, i32 %68, i64 3, !dbg !19
  %88 = insertelement <8 x i32> %87, i32 %67, i64 4, !dbg !19
  %89 = insertelement <8 x i32> %88, i32 %66, i64 5, !dbg !19
  %90 = insertelement <8 x i32> %89, i32 %65, i64 6, !dbg !19
  %91 = insertelement <8 x i32> %90, i32 %64, i64 7, !dbg !19
  %92 = bitcast <8 x i32> %91 to <8 x float>, !dbg !19
  %93 = shufflevector <8 x float> %92, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !19
  %94 = insertelement <16 x i32> poison, i32 %83, i64 0, !dbg !21
  %95 = insertelement <16 x i32> %94, i32 %82, i64 1, !dbg !21
  %96 = insertelement <16 x i32> %95, i32 %81, i64 2, !dbg !21
  %97 = insertelement <16 x i32> %96, i32 %80, i64 3, !dbg !21
  %98 = insertelement <16 x i32> %97, i32 %78, i64 4, !dbg !21
  %99 = insertelement <16 x i32> %98, i32 %77, i64 5, !dbg !21
  %100 = insertelement <16 x i32> %99, i32 %76, i64 6, !dbg !21
  %101 = insertelement <16 x i32> %100, i32 %75, i64 7, !dbg !21
  %102 = insertelement <16 x i32> %101, i32 %47, i64 8, !dbg !21
  %103 = insertelement <16 x i32> %102, i32 %46, i64 9, !dbg !21
  %104 = insertelement <16 x i32> %103, i32 %45, i64 10, !dbg !21
  %105 = insertelement <16 x i32> %104, i32 %44, i64 11, !dbg !21
  %106 = insertelement <16 x i32> %105, i32 %42, i64 12, !dbg !21
  %107 = insertelement <16 x i32> %106, i32 %41, i64 13, !dbg !21
  %108 = insertelement <16 x i32> %107, i32 %40, i64 14, !dbg !21
  %109 = insertelement <16 x i32> %108, i32 %39, i64 15, !dbg !21
  %110 = bitcast <16 x i32> %109 to <16 x float>, !dbg !21
  %111 = fadd <16 x float> %93, %110, !dbg !22
  %112 = extractelement <16 x float> %111, i64 15, !dbg !23
  %113 = fmul float %112, 0x3FB99999A0000000, !dbg !24
  %114 = extractelement <16 x float> %111, i64 14, !dbg !23
  %115 = fmul float %114, 0x3FB99999A0000000, !dbg !24
  %116 = extractelement <16 x float> %111, i64 13, !dbg !23
  %117 = fmul float %116, 0x3FB99999A0000000, !dbg !24
  %118 = extractelement <16 x float> %111, i64 12, !dbg !23
  %119 = fmul float %118, 0x3FB99999A0000000, !dbg !24
  %120 = extractelement <16 x float> %111, i64 11, !dbg !23
  %121 = fmul float %120, 0x3FB99999A0000000, !dbg !24
  %122 = extractelement <16 x float> %111, i64 10, !dbg !23
  %123 = fmul float %122, 0x3FB99999A0000000, !dbg !24
  %124 = extractelement <16 x float> %111, i64 9, !dbg !23
  %125 = fmul float %124, 0x3FB99999A0000000, !dbg !24
  %126 = extractelement <16 x float> %111, i64 8, !dbg !23
  %127 = fmul float %126, 0x3FB99999A0000000, !dbg !24
  %128 = fcmp ogt <16 x float> %111, zeroinitializer, !dbg !25
  %129 = extractelement <16 x i1> %128, i64 15, !dbg !23
  %130 = select i1 %129, float %112, float %113, !dbg !23
  %131 = extractelement <16 x i1> %128, i64 14, !dbg !23
  %132 = select i1 %131, float %114, float %115, !dbg !23
  %133 = extractelement <16 x i1> %128, i64 13, !dbg !23
  %134 = select i1 %133, float %116, float %117, !dbg !23
  %135 = extractelement <16 x i1> %128, i64 12, !dbg !23
  %136 = select i1 %135, float %118, float %119, !dbg !23
  %137 = extractelement <16 x i1> %128, i64 11, !dbg !23
  %138 = select i1 %137, float %120, float %121, !dbg !23
  %139 = extractelement <16 x i1> %128, i64 10, !dbg !23
  %140 = select i1 %139, float %122, float %123, !dbg !23
  %141 = extractelement <16 x i1> %128, i64 9, !dbg !23
  %142 = select i1 %141, float %124, float %125, !dbg !23
  %143 = extractelement <16 x i1> %128, i64 8, !dbg !23
  %144 = select i1 %143, float %126, float %127, !dbg !23
  %145 = extractelement <16 x float> %111, i64 7, !dbg !26
  %146 = fmul float %145, 0x3FB99999A0000000, !dbg !27
  %147 = extractelement <16 x float> %111, i64 6, !dbg !26
  %148 = fmul float %147, 0x3FB99999A0000000, !dbg !27
  %149 = extractelement <16 x float> %111, i64 5, !dbg !26
  %150 = fmul float %149, 0x3FB99999A0000000, !dbg !27
  %151 = extractelement <16 x float> %111, i64 4, !dbg !26
  %152 = fmul float %151, 0x3FB99999A0000000, !dbg !27
  %153 = extractelement <16 x float> %111, i64 3, !dbg !26
  %154 = fmul float %153, 0x3FB99999A0000000, !dbg !27
  %155 = extractelement <16 x float> %111, i64 2, !dbg !26
  %156 = fmul float %155, 0x3FB99999A0000000, !dbg !27
  %157 = extractelement <16 x float> %111, i64 1, !dbg !26
  %158 = fmul float %157, 0x3FB99999A0000000, !dbg !27
  %159 = extractelement <16 x float> %111, i64 0, !dbg !26
  %160 = fmul float %159, 0x3FB99999A0000000, !dbg !27
  %161 = extractelement <16 x i1> %128, i64 7, !dbg !26
  %162 = select i1 %161, float %145, float %146, !dbg !26
  %163 = extractelement <16 x i1> %128, i64 6, !dbg !26
  %164 = select i1 %163, float %147, float %148, !dbg !26
  %165 = extractelement <16 x i1> %128, i64 5, !dbg !26
  %166 = select i1 %165, float %149, float %150, !dbg !26
  %167 = extractelement <16 x i1> %128, i64 4, !dbg !26
  %168 = select i1 %167, float %151, float %152, !dbg !26
  %169 = extractelement <16 x i1> %128, i64 3, !dbg !26
  %170 = select i1 %169, float %153, float %154, !dbg !26
  %171 = extractelement <16 x i1> %128, i64 2, !dbg !26
  %172 = select i1 %171, float %155, float %156, !dbg !26
  %173 = extractelement <16 x i1> %128, i64 1, !dbg !26
  %174 = select i1 %173, float %157, float %158, !dbg !26
  %175 = extractelement <16 x i1> %128, i64 0, !dbg !26
  %176 = select i1 %175, float %159, float %160, !dbg !26
  %177 = bitcast float %130 to i32, !dbg !28
  %178 = bitcast float %132 to i32, !dbg !28
  %179 = bitcast float %134 to i32, !dbg !28
  %180 = bitcast float %136 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %35, i1 true) #1, !dbg !28
  %181 = bitcast float %138 to i32, !dbg !28
  %182 = bitcast float %140 to i32, !dbg !28
  %183 = bitcast float %142 to i32, !dbg !28
  %184 = bitcast float %144 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %37, i1 true) #1, !dbg !28
  %185 = bitcast float %162 to i32, !dbg !29
  %186 = bitcast float %164 to i32, !dbg !29
  %187 = bitcast float %166 to i32, !dbg !29
  %188 = bitcast float %168 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %72, i1 true) #1, !dbg !29
  %189 = bitcast float %170 to i32, !dbg !29
  %190 = bitcast float %172 to i32, !dbg !29
  %191 = bitcast float %174 to i32, !dbg !29
  %192 = bitcast float %176 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %189, i32 %190, i32 %191, i32 %192, ptr addrspace(1) %73, i1 true) #1, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc6iyabwkjebuogmoryvasoh23qfxlacrzzbr4kn6jdj2dyj37vm.py", directory: "inductor_cache/c6")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_47", linkageName: "triton_poi_fused_convolution_leaky_relu_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 34, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 39, scope: !7)
!29 = !DILocation(line: 40, column: 40, scope: !7)
!30 = !DILocation(line: 40, column: 4, scope: !7)
