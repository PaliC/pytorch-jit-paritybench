; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_62(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 64, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 4096, !dbg !17
  %.frozen1 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen1, 262144, !dbg !18
  %23 = mul i32 %22, 262144, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %23, !dbg !19
  %24 = sext i32 %19 to i64, !dbg !20
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %28 = sext i32 %.decomposed to i64, !dbg !22
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %31 = extractvalue { i64, i64 } %30, 0, !dbg !23
  %32 = extractvalue { i64, i64 } %30, 1, !dbg !23
  %33 = sext i32 %21 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !27
  %40 = getelementptr i64, ptr addrspace(1) %5, i64 %24, !dbg !28
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !29
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !29
  %43 = getelementptr i64, ptr addrspace(1) %6, i64 %28, !dbg !30
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !31
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !31
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !32
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !33
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !33
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !34
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !35
  %53 = bitcast i32 %52 to float, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !35
  %55 = bitcast i32 %54 to float, !dbg !35
  %56 = lshr i64 %26, 61, !dbg !36
  %57 = and i64 %56, 4, !dbg !36
  %58 = add i64 %57, %26, !dbg !36
  %59 = lshr i64 %31, 61, !dbg !37
  %60 = and i64 %59, 4, !dbg !37
  %61 = lshr i64 %32, 61, !dbg !37
  %62 = and i64 %61, 4, !dbg !37
  %63 = shl i64 %58, 2, !dbg !38
  %64 = shl nsw i32 %21, 4, !dbg !39
  %65 = sext i32 %64 to i64, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %60, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %63, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %65, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %62, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %63, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %65, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !42
  %76 = lshr i64 %41, 61, !dbg !43
  %77 = and i64 %76, 4, !dbg !43
  %78 = add i64 %77, %41, !dbg !43
  %79 = shl i64 %78, 2, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %67, i64 %79, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %65, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %71, i64 %79, !dbg !45
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %65, !dbg !45
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !46
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !46
  %86 = lshr i64 %45, 61, !dbg !47
  %87 = and i64 %86, 4, !dbg !47
  %88 = lshr i64 %46, 61, !dbg !47
  %89 = and i64 %88, 4, !dbg !47
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %87, !dbg !48
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %79, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %65, !dbg !48
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !48
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %89, !dbg !48
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %79, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %65, !dbg !48
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !49
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %91, i64 %63, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %65, !dbg !50
  %102 = getelementptr float, ptr addrspace(1) %95, i64 %63, !dbg !50
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %65, !dbg !50
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !51
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !51
  %106 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !42
  %107 = insertelement <2 x i32> %106, i32 %84, i64 1, !dbg !42
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !42
  %109 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !52
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !52
  %111 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %112 = fsub <2 x float> %108, %111, !dbg !52
  %113 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !53
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !53
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %116 = fmul <2 x float> %112, %115, !dbg !53
  %117 = fcmp olt <2 x float> %116, zeroinitializer, !dbg !54
  %118 = select <2 x i1> %117, <2 x float> zeroinitializer, <2 x float> %116, !dbg !58
  %119 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !51
  %120 = insertelement <2 x i32> %119, i32 %98, i64 1, !dbg !51
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !51
  %122 = fsub <2 x float> %121, %111, !dbg !59
  %123 = fmul <2 x float> %122, %115, !dbg !60
  %124 = fcmp olt <2 x float> %123, zeroinitializer, !dbg !61
  %125 = select <2 x i1> %124, <2 x float> zeroinitializer, <2 x float> %123, !dbg !63
  %126 = fsub <2 x float> %125, %118, !dbg !64
  %127 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !65
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !65
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %130 = fmul <2 x float> %126, %129, !dbg !65
  %131 = fadd <2 x float> %118, %130, !dbg !66
  %132 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !42
  %133 = insertelement <2 x i32> %132, i32 %85, i64 1, !dbg !42
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !42
  %135 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !52
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !52
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %138 = fsub <2 x float> %134, %137, !dbg !52
  %139 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !53
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !53
  %141 = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %142 = fmul <2 x float> %138, %141, !dbg !53
  %143 = fcmp olt <2 x float> %142, zeroinitializer, !dbg !54
  %144 = select <2 x i1> %143, <2 x float> zeroinitializer, <2 x float> %142, !dbg !58
  %145 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !51
  %146 = insertelement <2 x i32> %145, i32 %99, i64 1, !dbg !51
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !51
  %148 = fsub <2 x float> %147, %137, !dbg !59
  %149 = fmul <2 x float> %148, %141, !dbg !60
  %150 = fcmp olt <2 x float> %149, zeroinitializer, !dbg !61
  %151 = select <2 x i1> %150, <2 x float> zeroinitializer, <2 x float> %149, !dbg !63
  %152 = fsub <2 x float> %151, %144, !dbg !64
  %153 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !65
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !65
  %155 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %156 = fmul <2 x float> %152, %155, !dbg !65
  %157 = fadd <2 x float> %144, %156, !dbg !66
  %158 = extractelement <2 x float> %131, i64 0, !dbg !67
  %159 = extractelement <2 x float> %131, i64 1, !dbg !68
  %160 = fsub float %158, %159, !dbg !67
  %161 = extractelement <2 x float> %157, i64 0, !dbg !67
  %162 = extractelement <2 x float> %157, i64 1, !dbg !68
  %163 = fsub float %161, %162, !dbg !67
  %164 = fmul float %160, %53, !dbg !69
  %165 = fmul float %163, %55, !dbg !69
  %166 = fadd float %159, %164, !dbg !68
  %167 = fadd float %162, %165, !dbg !68
  %168 = mul i32 %22, 1310720, !dbg !70
  %169 = add i32 %168, %.decomposed2, !dbg !71
  %170 = sext i32 %169 to i64, !dbg !72
  %171 = getelementptr float, ptr addrspace(1) %9, i64 %170, !dbg !72
  %172 = bitcast float %166 to i32, !dbg !73
  %173 = bitcast float %167 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ymzwlkm64aqvuybfamurbzzaxni7qgwcpom4qqbwsugnfyq2ys.py", directory: "inductor_cache/4y")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_62, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_62, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_62", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_62", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 31, scope: !7)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 32, scope: !7)
!38 = !DILocation(line: 45, column: 39, scope: !7)
!39 = !DILocation(line: 45, column: 49, scope: !7)
!40 = !DILocation(line: 45, column: 46, scope: !7)
!41 = !DILocation(line: 45, column: 30, scope: !7)
!42 = !DILocation(line: 45, column: 54, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 53, column: 40, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 56, scope: !7)
!47 = !DILocation(line: 59, column: 35, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 57, scope: !7)
!50 = !DILocation(line: 67, column: 31, scope: !7)
!51 = !DILocation(line: 67, column: 56, scope: !7)
!52 = !DILocation(line: 46, column: 19, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 49, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 68, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 70, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 20, scope: !7)
!67 = !DILocation(line: 74, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 20, scope: !7)
!69 = !DILocation(line: 75, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 38, scope: !7)
!71 = !DILocation(line: 77, column: 30, scope: !7)
!72 = !DILocation(line: 77, column: 25, scope: !7)
!73 = !DILocation(line: 77, column: 50, scope: !7)
!74 = !DILocation(line: 77, column: 4, scope: !7)
