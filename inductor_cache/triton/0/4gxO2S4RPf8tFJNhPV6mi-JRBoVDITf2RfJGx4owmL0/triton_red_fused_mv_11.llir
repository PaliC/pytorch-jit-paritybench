; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 64, !dbg !12
  %10 = lshr i32 %8, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = and i32 %8, 63, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %14, 640, !dbg !14
  %16 = icmp slt i32 %13, 640, !dbg !14
  %17 = shl i32 %8, 2, !dbg !15
  %18 = and i32 %17, 4, !dbg !15
  %.lobit = lshr exact i32 %9, 6, !dbg !15
  %19 = srem i32 %13, 5, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %20 = sdiv i32 %.frozen, 5, !dbg !17
  %21 = mul i32 %20, 5, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = mul nsw i32 %19, 116, !dbg !18
  %23 = mul nsw i32 %.decomposed, 116, !dbg !18
  %24 = mul i32 %20, 576, !dbg !19
  %25 = shl i32 %8, 3
  %26 = and i32 %25, 504
  %27 = or disjoint i32 %26, %.lobit
  %28 = and i32 %17, 252
  %29 = shl nuw nsw i32 %9, 2
  %30 = or disjoint i32 %28, %29
  %31 = lshr exact i32 %26, 1
  %32 = add nuw nsw i32 %31, %27
  %33 = zext nneg i32 %32 to i64
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %33
  %35 = or disjoint i32 %27, 2
  %36 = add nuw nsw i32 %35, %31
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37
  %39 = or disjoint i32 %27, 4
  %40 = add nuw nsw i32 %39, %31
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %43 = or disjoint i32 %27, 6
  %44 = add nuw nsw i32 %43, %31
  %45 = zext nneg i32 %44 to i64
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %47 = lshr exact i32 %30, 1
  %48 = and i32 %47, 252
  %49 = add nuw nsw i32 %48, %30
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %.lobit to i64, !dbg !20
  %53 = sext i32 %23 to i64, !dbg !20
  %54 = zext nneg i32 %18 to i64, !dbg !20
  %55 = sext i32 %22 to i64, !dbg !20
  br label %56, !dbg !20

56:                                               ; preds = %5, %56
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %56 ]
  %57 = phi <4 x float> [ zeroinitializer, %5 ], [ %148, %56 ]
  %58 = or disjoint i64 %indvars.iv, %54, !dbg !21
  %59 = or disjoint i64 %indvars.iv, %52, !dbg !21
  %60 = or disjoint i64 %59, 2, !dbg !21
  %61 = or disjoint i64 %59, 4, !dbg !21
  %62 = or disjoint i64 %59, 6, !dbg !21
  %63 = icmp samesign ult i64 %61, 116, !dbg !22
  %64 = icmp samesign ult i64 %62, 116, !dbg !22
  %65 = icmp samesign ult i64 %58, 116, !dbg !22
  %66 = add nsw i64 %58, %55, !dbg !23
  %67 = add nsw i64 %59, %53, !dbg !23
  %68 = add nsw i64 %60, %53, !dbg !23
  %69 = add nsw i64 %61, %53, !dbg !23
  %70 = add nsw i64 %62, %53, !dbg !23
  %71 = icmp slt i64 %66, 576, !dbg !24
  %72 = icmp slt i64 %67, 576, !dbg !24
  %73 = icmp slt i64 %68, 576, !dbg !24
  %74 = icmp slt i64 %69, 576, !dbg !24
  %75 = icmp slt i64 %70, 576, !dbg !24
  %76 = trunc nsw i64 %67 to i32, !dbg !25
  %.frozen18 = freeze i32 %76, !dbg !26
  %77 = sdiv i32 %.frozen18, 9, !dbg !26
  %78 = mul i32 %77, 9, !dbg !25
  %.decomposed19 = sub i32 %.frozen18, %78, !dbg !25
  %79 = trunc nsw i64 %68 to i32, !dbg !25
  %.frozen20 = freeze i32 %79, !dbg !26
  %80 = sdiv i32 %.frozen20, 9, !dbg !26
  %81 = mul i32 %80, 9, !dbg !25
  %.decomposed21 = sub i32 %.frozen20, %81, !dbg !25
  %82 = trunc nsw i64 %69 to i32, !dbg !25
  %.frozen22 = freeze i32 %82, !dbg !26
  %83 = sdiv i32 %.frozen22, 9, !dbg !26
  %84 = mul i32 %83, 9, !dbg !25
  %.decomposed23 = sub i32 %.frozen22, %84, !dbg !25
  %85 = trunc nsw i64 %70 to i32, !dbg !25
  %.frozen24 = freeze i32 %85, !dbg !26
  %86 = sdiv i32 %.frozen24, 9, !dbg !26
  %87 = mul i32 %86, 9, !dbg !25
  %.decomposed25 = sub i32 %.frozen24, %87, !dbg !25
  %88 = shl nsw i32 %.decomposed19, 6, !dbg !27
  %89 = shl nsw i32 %.decomposed21, 6, !dbg !27
  %90 = shl nsw i32 %.decomposed23, 6, !dbg !27
  %91 = shl nsw i32 %.decomposed25, 6, !dbg !27
  %92 = add i32 %88, %24, !dbg !28
  %93 = add i32 %89, %24, !dbg !28
  %94 = add i32 %90, %24, !dbg !28
  %95 = add i32 %91, %24, !dbg !28
  %96 = srem i32 %77, 64, !dbg !29
  %97 = srem i32 %80, 64, !dbg !29
  %98 = srem i32 %83, 64, !dbg !29
  %99 = srem i32 %86, 64, !dbg !29
  %100 = add i32 %92, %96, !dbg !30
  %101 = add i32 %93, %97, !dbg !30
  %102 = add i32 %94, %98, !dbg !30
  %103 = add i32 %95, %99, !dbg !30
  %104 = sext i32 %100 to i64, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !31
  %106 = sext i32 %101 to i64, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !31
  %108 = sext i32 %102 to i64, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !31
  %110 = sext i32 %103 to i64, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !31
  %112 = and i1 %63, %74, !dbg !32
  %113 = and i1 %64, %75, !dbg !32
  %114 = and i1 %65, %71, !dbg !32
  %115 = and i1 %15, %72, !dbg !33
  %116 = and i1 %15, %73, !dbg !33
  %117 = and i1 %15, %112, !dbg !33
  %118 = and i1 %15, %113, !dbg !33
  %119 = and i1 %16, %114, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %115, i32 0, i1 %115) #3, !dbg !34
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %116, i32 0, i1 %116) #3, !dbg !34
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %117, i32 0, i1 %117) #3, !dbg !34
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %118, i32 0, i1 %118) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %124 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %124, i1 true) #3, !dbg !34
  %125 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %125, i1 true) #3, !dbg !34
  %126 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %126, i1 true) #3, !dbg !34
  %127 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %127, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !35
  %129 = load <4 x float>, ptr addrspace(3) %51, align 16, !dbg !34
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !36
  %135 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !36
  %136 = insertelement <4 x i32> %135, i32 %132, i64 1, !dbg !36
  %137 = insertelement <4 x i32> %136, i32 %133, i64 2, !dbg !36
  %138 = insertelement <4 x i32> %137, i32 %134, i64 3, !dbg !36
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !36
  %140 = fmul <4 x float> %129, %139, !dbg !37
  %141 = insertelement <4 x i1> poison, i1 %71, i64 0, !dbg !38
  %142 = shufflevector <4 x i1> %141, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !38
  %143 = select <4 x i1> %142, <4 x float> %140, <4 x float> zeroinitializer, !dbg !38
  %144 = fadd <4 x float> %57, %143, !dbg !39
  %145 = and i1 %16, %65, !dbg !40
  %146 = insertelement <4 x i1> poison, i1 %145, i64 0, !dbg !41
  %147 = shufflevector <4 x i1> %146, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !41
  %148 = select <4 x i1> %147, <4 x float> %144, <4 x float> %57, !dbg !41
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %149 = icmp samesign ult i64 %indvars.iv, 108, !dbg !20
  br i1 %149, label %56, label %150, !dbg !20

150:                                              ; preds = %56
  %shift = shufflevector <4 x float> %148, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !42
  %151 = fadd <4 x float> %148, %shift, !dbg !42
  %shift16 = shufflevector <4 x float> %148, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !42
  %152 = fadd <4 x float> %shift16, %151, !dbg !42
  %shift17 = shufflevector <4 x float> %148, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !42
  %153 = fadd <4 x float> %shift17, %152, !dbg !42
  %154 = extractelement <4 x float> %153, i64 0, !dbg !42
  %155 = bitcast float %154 to i32, !dbg !47
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !47
  %157 = bitcast i32 %156 to float, !dbg !47
  %158 = fadd float %154, %157, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %159 = zext nneg i32 %11 to i64, !dbg !48
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !48
  %161 = bitcast float %158 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %162 = zext nneg i32 %12 to i64, !dbg !48
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !48
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !48
  %165 = sext i32 %14 to i64, !dbg !49
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !49
  %167 = icmp eq i32 %9, 0, !dbg !50
  %168 = and i1 %167, %15, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %166, i1 %168) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu666laezw2iyqag5t7ao64gjhwqmhh5bd73aje56i5dcw7cejoi.py", directory: "inductor_cache/u6")
!4 = !{ptr @triton_red_fused_mv_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_11", linkageName: "triton_red_fused_mv_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 24, scope: !7)
!19 = !DILocation(line: 37, column: 65, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 27, scope: !7)
!22 = !DILocation(line: 32, column: 25, scope: !7)
!23 = !DILocation(line: 34, column: 20, scope: !7)
!24 = !DILocation(line: 36, column: 22, scope: !7)
!25 = !DILocation(line: 37, column: 55, scope: !7)
!26 = !DILocation(line: 37, column: 90, scope: !7)
!27 = !DILocation(line: 37, column: 39, scope: !7)
!28 = !DILocation(line: 37, column: 61, scope: !7)
!29 = !DILocation(line: 37, column: 95, scope: !7)
!30 = !DILocation(line: 37, column: 72, scope: !7)
!31 = !DILocation(line: 37, column: 34, scope: !7)
!32 = !DILocation(line: 37, column: 110, scope: !7)
!33 = !DILocation(line: 37, column: 117, scope: !7)
!34 = !DILocation(line: 37, column: 102, scope: !7)
!35 = !DILocation(line: 38, column: 34, scope: !7)
!36 = !DILocation(line: 38, column: 48, scope: !7)
!37 = !DILocation(line: 39, column: 22, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 43, column: 24, scope: !7)
!40 = !DILocation(line: 44, column: 33, scope: !7)
!41 = !DILocation(line: 44, column: 47, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 45, column: 25, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 45, column: 28, scope: !7)
!49 = !DILocation(line: 46, column: 25, scope: !7)
!50 = !DILocation(line: 46, column: 36, scope: !7)
!51 = !DILocation(line: 46, column: 4, scope: !7)
