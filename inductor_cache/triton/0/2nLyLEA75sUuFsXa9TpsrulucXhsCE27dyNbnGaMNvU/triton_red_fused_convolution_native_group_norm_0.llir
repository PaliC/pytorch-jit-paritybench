; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 64, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %10, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = srem i32 %8, 16, !dbg !13
  %20 = shl i32 %8, 11, !dbg !14
  %21 = or disjoint i32 %20, %18, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %.idx = shl nuw nsw i32 %18, 3, !dbg !17
  %29 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !17
  %30 = insertelement <1 x i32> poison, i32 %25, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %30, i1 true) #5, !dbg !17
  %31 = shl nuw nsw i32 %18, 1, !dbg !17
  %32 = or disjoint i32 %31, 2, !dbg !17
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %32, !dbg !17
  %34 = insertelement <1 x i32> poison, i32 %26, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %34, i1 true) #5, !dbg !17
  %35 = or disjoint i32 %31, 4, !dbg !17
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !17
  %37 = insertelement <1 x i32> poison, i32 %27, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %37, i1 true) #5, !dbg !17
  %38 = or disjoint i32 %31, 6, !dbg !17
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %38, !dbg !17
  %40 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #5, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %.idx1 = shl nuw nsw i32 %13, 3, !dbg !17
  %41 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !17
  %42 = load float, ptr addrspace(3) %41, align 8, !dbg !17
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !17
  %43 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !17
  %44 = load float, ptr addrspace(3) %43, align 8, !dbg !17
  %.idx3 = shl nuw nsw i32 %15, 3, !dbg !17
  %45 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !17
  %46 = load float, ptr addrspace(3) %45, align 8, !dbg !17
  %.idx4 = shl nuw nsw i32 %16, 3, !dbg !17
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !17
  %48 = load float, ptr addrspace(3) %47, align 8, !dbg !17
  %49 = shl nsw i32 %19, 1, !dbg !18
  %50 = or disjoint i32 %49, 1, !dbg !19
  %51 = sext i32 %49 to i64, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !20
  %53 = sext i32 %50 to i64, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !20
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %60 = bitcast i32 %59 to float, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %62 = bitcast i32 %61 to float, !dbg !21
  %63 = fadd float %42, %56, !dbg !22
  %64 = fadd float %44, %58, !dbg !22
  %65 = fadd float %46, %60, !dbg !22
  %66 = fadd float %48, %62, !dbg !22
  %67 = select i1 %9, float %63, float 0.000000e+00, !dbg !23
  %68 = select i1 %9, float %64, float 0.000000e+00, !dbg !23
  %69 = select i1 %9, float %65, float 0.000000e+00, !dbg !23
  %70 = select i1 %9, float %66, float 0.000000e+00, !dbg !23
  %71 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  %73 = bitcast float %63 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #5, !dbg !25
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  %75 = bitcast float %64 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #5, !dbg !25
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  %77 = bitcast float %65 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #5, !dbg !25
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !25
  %79 = bitcast float %66 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !25
  %.extract = load i32, ptr addrspace(3) %80, align 16, !dbg !25
  %81 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 4, !dbg !25
  %.extract8 = load i32, ptr addrspace(3) %81, align 4, !dbg !25
  %82 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 8, !dbg !25
  %.extract9 = load i32, ptr addrspace(3) %82, align 8, !dbg !25
  %83 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 12, !dbg !25
  %.extract10 = load i32, ptr addrspace(3) %83, align 4, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %23, i1 %9) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %84 = fsub float %68, %67, !dbg !30
  %85 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !32
  %86 = fcmp oeq float %85, 0.000000e+00, !dbg !33
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %85) #5, !dbg !34
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !35
  %89 = fmul float %84, %88, !dbg !36
  %90 = fadd float %67, %89, !dbg !37
  %91 = fmul float %84, %84, !dbg !38
  %92 = fmul float %71, %91, !dbg !39
  %93 = fmul float %92, %88, !dbg !40
  %94 = fadd float %93, 0.000000e+00, !dbg !41
  %95 = fsub float %69, %90, !dbg !30
  %96 = select i1 %9, float 3.000000e+00, float 0.000000e+00, !dbg !32
  %97 = fcmp oeq float %96, 0.000000e+00, !dbg !33
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %96) #5, !dbg !34
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !35
  %100 = fmul float %99, %95, !dbg !36
  %101 = fadd float %90, %100, !dbg !37
  %102 = fmul float %95, %95, !dbg !38
  %103 = fmul float %85, %102, !dbg !39
  %104 = fmul float %99, %103, !dbg !40
  %105 = fadd float %94, %104, !dbg !41
  %106 = fsub float %70, %101, !dbg !30
  %107 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %108 = fcmp oeq float %107, 0.000000e+00, !dbg !33
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %107) #5, !dbg !34
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !35
  %111 = fmul float %110, %106, !dbg !36
  %112 = fadd float %101, %111, !dbg !37
  %113 = fmul float %106, %106, !dbg !38
  %114 = fmul float %96, %113, !dbg !39
  %115 = fmul float %110, %114, !dbg !40
  %116 = fadd float %105, %115, !dbg !41
  %117 = bitcast float %112 to i32, !dbg !26
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = bitcast float %116 to i32, !dbg !26
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = bitcast float %107 to i32, !dbg !26
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = fsub float %119, %112, !dbg !30
  %127 = fadd float %107, %125, !dbg !32
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !33
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %127) #5, !dbg !34
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !35
  %131 = fmul float %130, %126, !dbg !36
  %132 = fadd float %112, %131, !dbg !37
  %133 = fadd float %116, %122, !dbg !42
  %134 = fmul float %126, %126, !dbg !38
  %135 = fmul float %107, %134, !dbg !39
  %136 = fmul float %130, %135, !dbg !40
  %137 = fadd float %133, %136, !dbg !41
  %138 = bitcast float %132 to i32, !dbg !26
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !26
  %140 = bitcast i32 %139 to float, !dbg !26
  %141 = bitcast float %137 to i32, !dbg !26
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !26
  %143 = bitcast i32 %142 to float, !dbg !26
  %144 = bitcast float %127 to i32, !dbg !26
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !26
  %146 = bitcast i32 %145 to float, !dbg !26
  %147 = fsub float %140, %132, !dbg !30
  %148 = fadd float %127, %146, !dbg !32
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !33
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %148) #5, !dbg !34
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !35
  %152 = fmul float %147, %151, !dbg !36
  %153 = fadd float %132, %152, !dbg !37
  %154 = fadd float %137, %143, !dbg !42
  %155 = fmul float %147, %147, !dbg !38
  %156 = fmul float %127, %155, !dbg !39
  %157 = fmul float %151, %156, !dbg !40
  %158 = fadd float %154, %157, !dbg !41
  %159 = bitcast float %153 to i32, !dbg !26
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !26
  %161 = bitcast i32 %160 to float, !dbg !26
  %162 = bitcast float %158 to i32, !dbg !26
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !26
  %164 = bitcast i32 %163 to float, !dbg !26
  %165 = bitcast float %148 to i32, !dbg !26
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !26
  %167 = bitcast i32 %166 to float, !dbg !26
  %168 = fsub float %161, %153, !dbg !30
  %169 = fadd float %148, %167, !dbg !32
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !33
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %169) #5, !dbg !34
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !35
  %173 = fmul float %168, %172, !dbg !36
  %174 = fadd float %153, %173, !dbg !37
  %175 = fadd float %158, %164, !dbg !42
  %176 = fmul float %168, %168, !dbg !38
  %177 = fmul float %148, %176, !dbg !39
  %178 = fmul float %172, %177, !dbg !40
  %179 = fadd float %175, %178, !dbg !41
  %180 = bitcast float %174 to i32, !dbg !26
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !26
  %182 = bitcast i32 %181 to float, !dbg !26
  %183 = bitcast float %179 to i32, !dbg !26
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !26
  %185 = bitcast i32 %184 to float, !dbg !26
  %186 = bitcast float %169 to i32, !dbg !26
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 2, i32 31), !dbg !26
  %188 = bitcast i32 %187 to float, !dbg !26
  %189 = fsub float %182, %174, !dbg !30
  %190 = fadd float %169, %188, !dbg !32
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !33
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %190) #5, !dbg !34
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !35
  %194 = fmul float %189, %193, !dbg !36
  %195 = fadd float %174, %194, !dbg !37
  %196 = fadd float %179, %185, !dbg !42
  %197 = fmul float %189, %189, !dbg !38
  %198 = fmul float %169, %197, !dbg !39
  %199 = fmul float %193, %198, !dbg !40
  %200 = fadd float %196, %199, !dbg !41
  %201 = bitcast float %195 to i32, !dbg !26
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !26
  %203 = bitcast i32 %202 to float, !dbg !26
  %204 = bitcast float %200 to i32, !dbg !26
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !26
  %206 = bitcast i32 %205 to float, !dbg !26
  %207 = bitcast float %190 to i32, !dbg !26
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !26
  %209 = bitcast i32 %208 to float, !dbg !26
  %210 = fsub float %203, %195, !dbg !30
  %211 = fadd float %190, %209, !dbg !32
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !33
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #5, !dbg !34
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !35
  %215 = fmul float %210, %214, !dbg !36
  %216 = fadd float %195, %215, !dbg !37
  %217 = fadd float %200, %206, !dbg !42
  %218 = fmul float %210, %210, !dbg !38
  %219 = fmul float %190, %218, !dbg !39
  %220 = fmul float %214, %219, !dbg !40
  %221 = fadd float %217, %220, !dbg !41
  %222 = icmp eq i32 %11, 0, !dbg !26
  %223 = and i32 %12, 15, !dbg !26
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !26
  %225 = bitcast float %216 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 %222) #5, !dbg !26
  %226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %223, !dbg !26
  %227 = bitcast float %221 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 %222) #5, !dbg !26
  %228 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %223, !dbg !26
  %229 = bitcast float %211 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 %222) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %230 = icmp slt i32 %10, 16, !dbg !26
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %232 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %231, i1 %230) #5, !dbg !26
  %233 = bitcast i32 %232 to float, !dbg !26
  %234 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !26
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %230) #5, !dbg !26
  %236 = bitcast i32 %235 to float, !dbg !26
  %237 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !26
  %238 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %237, i1 %230) #5, !dbg !26
  %239 = bitcast i32 %238 to float, !dbg !26
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !26
  %241 = bitcast i32 %240 to float, !dbg !26
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !26
  %243 = bitcast i32 %242 to float, !dbg !26
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !26
  %245 = bitcast i32 %244 to float, !dbg !26
  %246 = fsub float %241, %233, !dbg !30
  %247 = fadd float %239, %245, !dbg !32
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !33
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !34
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !35
  %251 = fmul float %246, %250, !dbg !36
  %252 = fadd float %251, %233, !dbg !37
  %253 = fadd float %236, %243, !dbg !42
  %254 = fmul float %246, %246, !dbg !38
  %255 = fmul float %254, %239, !dbg !39
  %256 = fmul float %255, %250, !dbg !40
  %257 = fadd float %253, %256, !dbg !41
  %258 = bitcast float %252 to i32, !dbg !26
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !26
  %260 = bitcast i32 %259 to float, !dbg !26
  %261 = bitcast float %257 to i32, !dbg !26
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !26
  %263 = bitcast i32 %262 to float, !dbg !26
  %264 = bitcast float %247 to i32, !dbg !26
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !26
  %266 = bitcast i32 %265 to float, !dbg !26
  %267 = fsub float %260, %252, !dbg !30
  %268 = fadd float %247, %266, !dbg !32
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !33
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !34
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !35
  %272 = fmul float %267, %271, !dbg !36
  %273 = fadd float %252, %272, !dbg !37
  %274 = fadd float %257, %263, !dbg !42
  %275 = fmul float %267, %267, !dbg !38
  %276 = fmul float %247, %275, !dbg !39
  %277 = fmul float %271, %276, !dbg !40
  %278 = fadd float %274, %277, !dbg !41
  %279 = bitcast float %273 to i32, !dbg !26
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !26
  %281 = bitcast i32 %280 to float, !dbg !26
  %282 = bitcast float %278 to i32, !dbg !26
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !26
  %284 = bitcast i32 %283 to float, !dbg !26
  %285 = bitcast float %268 to i32, !dbg !26
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !26
  %287 = bitcast i32 %286 to float, !dbg !26
  %288 = fsub float %281, %273, !dbg !30
  %289 = fadd float %268, %287, !dbg !32
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !33
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !34
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !35
  %293 = fmul float %288, %292, !dbg !36
  %294 = fadd float %273, %293, !dbg !37
  %295 = fadd float %278, %284, !dbg !42
  %296 = fmul float %288, %288, !dbg !38
  %297 = fmul float %268, %296, !dbg !39
  %298 = fmul float %292, %297, !dbg !40
  %299 = fadd float %295, %298, !dbg !41
  %300 = bitcast float %294 to i32, !dbg !26
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !26
  %302 = bitcast i32 %301 to float, !dbg !26
  %303 = bitcast float %299 to i32, !dbg !26
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !26
  %305 = bitcast i32 %304 to float, !dbg !26
  %306 = bitcast float %289 to i32, !dbg !26
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !26
  %308 = bitcast i32 %307 to float, !dbg !26
  %309 = fsub float %302, %294, !dbg !30
  %310 = fadd float %289, %308, !dbg !32
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !33
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %310) #5, !dbg !34
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !35
  %314 = fmul float %309, %313, !dbg !36
  %315 = fadd float %294, %314, !dbg !37
  %316 = fadd float %299, %305, !dbg !42
  %317 = fmul float %309, %309, !dbg !38
  %318 = fmul float %289, %317, !dbg !39
  %319 = fmul float %313, %318, !dbg !40
  %320 = fadd float %316, %319, !dbg !41
  %321 = and i32 %10, 15, !dbg !26
  %322 = icmp eq i32 %321, 0, !dbg !26
  %323 = and i1 %230, %322, !dbg !26
  %324 = bitcast float %315 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %324, i1 %323) #5, !dbg !26
  %325 = bitcast float %320 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %325, i1 %323) #5, !dbg !26
  %326 = bitcast float %310 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %326, i1 %323) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %327 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %328 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !26
  %329 = sext i32 %8 to i64, !dbg !43
  %330 = getelementptr float, ptr addrspace(1) %2, i64 %329, !dbg !43
  %331 = icmp eq i32 %13, 0, !dbg !44
  %332 = and i1 %331, %9, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %327, ptr addrspace(1) %330, i1 %332) #5, !dbg !44
  %333 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !45
  %334 = bitcast float %328 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %333, i1 %332) #5, !dbg !46
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %328, float 2.048000e+03) #5, !dbg !47
  %336 = fadd float %335, 0x3EE4F8B580000000, !dbg !48
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %337, 0, !dbg !49
  br i1 %.not.i, label %340, label %338, !dbg !49

338:                                              ; preds = %7
  %339 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %336), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

340:                                              ; preds = %7
  %341 = tail call float @llvm.nvvm.rsqrt.approx.f(float %336), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %338, %340
  %.0.i = phi float [ %339, %338 ], [ %341, %340 ], !dbg !49
  %342 = getelementptr float, ptr addrspace(1) %4, i64 %329, !dbg !50
  %343 = bitcast float %.0.i to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %342, i1 %332) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czq7bomjouca7gjcax5bvdtjnzwej5kymj47x5nqlkfp35p7q7gh.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_0", linkageName: "triton_red_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 36, column: 43, scope: !7)
!16 = !DILocation(line: 36, column: 38, scope: !7)
!17 = !DILocation(line: 36, column: 53, scope: !7)
!18 = !DILocation(line: 37, column: 41, scope: !7)
!19 = !DILocation(line: 37, column: 39, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 46, scope: !7)
!22 = !DILocation(line: 38, column: 22, scope: !7)
!23 = !DILocation(line: 43, column: 60, scope: !7)
!24 = !DILocation(line: 45, column: 64, scope: !7)
!25 = !DILocation(line: 46, column: 53, scope: !7)
!26 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 48, column: 41, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !29)
!33 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !29)
!34 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !29)
!35 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !29)
!36 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !29)
!37 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !29)
!38 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !29)
!39 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !29)
!40 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !29)
!41 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !29)
!42 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !29)
!43 = !DILocation(line: 53, column: 25, scope: !7)
!44 = !DILocation(line: 53, column: 36, scope: !7)
!45 = !DILocation(line: 54, column: 25, scope: !7)
!46 = !DILocation(line: 54, column: 36, scope: !7)
!47 = !DILocation(line: 56, column: 18, scope: !7)
!48 = !DILocation(line: 58, column: 19, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
