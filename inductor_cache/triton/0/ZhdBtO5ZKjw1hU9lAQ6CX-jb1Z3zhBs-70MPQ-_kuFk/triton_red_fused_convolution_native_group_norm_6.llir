; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 511, !dbg !12
  %11 = or disjoint i32 %10, 512, !dbg !12
  %12 = or disjoint i32 %10, 1024, !dbg !12
  %13 = or disjoint i32 %10, 1536, !dbg !12
  %14 = shl i32 %9, 2, !dbg !12
  %15 = and i32 %14, 2044, !dbg !12
  %16 = srem i32 %7, 32, !dbg !13
  %17 = shl i32 %7, 12, !dbg !14
  %18 = shl nsw i32 %16, 2, !dbg !15
  %19 = or disjoint i32 %17, %15
  %20 = shl nuw nsw i32 %15, 1
  %21 = zext nneg i32 %20 to i64
  %22 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %21
  %23 = or disjoint i32 %20, 2
  %24 = zext nneg i32 %23 to i64
  %25 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %24
  %26 = or disjoint i32 %20, 4
  %27 = zext nneg i32 %26 to i64
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %27
  %29 = or disjoint i32 %20, 6
  %30 = zext nneg i32 %29 to i64
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30
  %32 = shl nuw nsw i32 %10, 1
  %33 = zext nneg i32 %32 to i64
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %33
  %35 = shl nuw nsw i32 %11, 1
  %36 = zext nneg i32 %35 to i64
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %36
  %38 = shl nuw nsw i32 %12, 1
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39
  %41 = shl nuw nsw i32 %13, 1
  %42 = zext nneg i32 %41 to i64
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42
  %44 = zext nneg i32 %10 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %11 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %12 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %13 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %15 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = sext i32 %19 to i64, !dbg !16
  %55 = sext i32 %18 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !16
  %56 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 4
  %57 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 8
  %58 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 12
  %invariant.op = or i64 %55, 1, !dbg !16
  br label %59, !dbg !16

59:                                               ; preds = %6, %._crit_edge
  %60 = phi i1 [ true, %6 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %6 ], [ 2048, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %6 ], [ %147, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %6 ], [ %148, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %6 ], [ %149, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %6 ], [ %150, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %6 ], [ %143, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %6 ], [ %144, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %6 ], [ %145, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %6 ], [ %146, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %6 ], [ %139, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %6 ], [ %140, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %6 ], [ %141, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %6 ], [ %142, %._crit_edge ]
  %73 = lshr exact i64 %indvars.iv, 10, !dbg !17
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !18
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !19
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %79 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %79, i1 true) #5, !dbg !19
  %80 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %80, i1 true) #5, !dbg !19
  %81 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %81, i1 true) #5, !dbg !19
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %82, i1 true) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %83 = load float, ptr addrspace(3) %34, align 8, !dbg !19
  %84 = load float, ptr addrspace(3) %37, align 8, !dbg !19
  %85 = load float, ptr addrspace(3) %40, align 8, !dbg !19
  %86 = load float, ptr addrspace(3) %43, align 8, !dbg !19
  %87 = or disjoint i64 %73, %55, !dbg !20
  %.reass = or i64 %73, %invariant.op
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %.reass, !dbg !21
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %93 = bitcast i32 %92 to float, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %95 = bitcast i32 %94 to float, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %97 = bitcast i32 %96 to float, !dbg !22
  %98 = fadd float %83, %91, !dbg !23
  %99 = fadd float %84, %93, !dbg !23
  %100 = fadd float %85, %95, !dbg !23
  %101 = fadd float %86, %97, !dbg !23
  br i1 %60, label %._crit_edge, label %102, !dbg !24

102:                                              ; preds = %59
  %103 = fsub float %98, %69, !dbg !28
  %104 = fsub float %99, %70, !dbg !28
  %105 = fsub float %100, %71, !dbg !28
  %106 = fsub float %101, %72, !dbg !28
  %107 = fadd float %61, 1.000000e+00, !dbg !29
  %108 = fadd float %62, 1.000000e+00, !dbg !29
  %109 = fadd float %63, 1.000000e+00, !dbg !29
  %110 = fadd float %64, 1.000000e+00, !dbg !29
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %107) #5, !dbg !30
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %108) #5, !dbg !30
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %109) #5, !dbg !30
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %110) #5, !dbg !30
  %115 = fadd float %69, %111, !dbg !31
  %116 = fadd float %70, %112, !dbg !31
  %117 = fadd float %71, %113, !dbg !31
  %118 = fadd float %72, %114, !dbg !31
  %119 = fsub float %98, %115, !dbg !32
  %120 = fsub float %99, %116, !dbg !32
  %121 = fsub float %100, %117, !dbg !32
  %122 = fsub float %101, %118, !dbg !32
  %123 = fmul float %103, %119, !dbg !33
  %124 = fmul float %104, %120, !dbg !33
  %125 = fmul float %105, %121, !dbg !33
  %126 = fmul float %106, %122, !dbg !33
  %127 = fadd float %65, %123, !dbg !34
  %128 = fadd float %66, %124, !dbg !34
  %129 = fadd float %67, %125, !dbg !34
  %130 = fadd float %68, %126, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %59, %102
  %131 = phi float [ %127, %102 ], [ 0.000000e+00, %59 ], !dbg !27
  %132 = phi float [ %128, %102 ], [ 0.000000e+00, %59 ], !dbg !27
  %133 = phi float [ %129, %102 ], [ 0.000000e+00, %59 ], !dbg !27
  %134 = phi float [ %130, %102 ], [ 0.000000e+00, %59 ], !dbg !27
  %.pn7 = phi float [ %115, %102 ], [ %98, %59 ]
  %.pn5 = phi float [ %116, %102 ], [ %99, %59 ]
  %.pn3 = phi float [ %117, %102 ], [ %100, %59 ]
  %.pn1 = phi float [ %118, %102 ], [ %101, %59 ]
  %135 = phi float [ %107, %102 ], [ 1.000000e+00, %59 ], !dbg !27
  %136 = phi float [ %108, %102 ], [ 1.000000e+00, %59 ], !dbg !27
  %137 = phi float [ %109, %102 ], [ 1.000000e+00, %59 ], !dbg !27
  %138 = phi float [ %110, %102 ], [ 1.000000e+00, %59 ], !dbg !27
  %139 = select i1 %8, float %.pn7, float %69, !dbg !35
  %140 = select i1 %8, float %.pn5, float %70, !dbg !35
  %141 = select i1 %8, float %.pn3, float %71, !dbg !35
  %142 = select i1 %8, float %.pn1, float %72, !dbg !35
  %143 = select i1 %8, float %131, float %65, !dbg !36
  %144 = select i1 %8, float %132, float %66, !dbg !36
  %145 = select i1 %8, float %133, float %67, !dbg !36
  %146 = select i1 %8, float %134, float %68, !dbg !36
  %147 = select i1 %8, float %135, float %61, !dbg !37
  %148 = select i1 %8, float %136, float %62, !dbg !37
  %149 = select i1 %8, float %137, float %63, !dbg !37
  %150 = select i1 %8, float %138, float %64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %151 = bitcast float %98 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %151, i1 true) #5, !dbg !38
  %152 = bitcast float %99 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %152, i1 true) #5, !dbg !38
  %153 = bitcast float %100 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %153, i1 true) #5, !dbg !38
  %154 = bitcast float %101 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %154, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.extract = load i32, ptr addrspace(3) %53, align 16, !dbg !38
  %.extract11 = load i32, ptr addrspace(3) %56, align 4, !dbg !38
  %.extract12 = load i32, ptr addrspace(3) %57, align 8, !dbg !38
  %.extract13 = load i32, ptr addrspace(3) %58, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %8) #5, !dbg !38
  br i1 %60, label %59, label %155, !dbg !16

155:                                              ; preds = %._crit_edge
  %156 = lshr i32 %9, 5, !dbg !12
  %157 = and i32 %9, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %158 = fsub float %140, %139, !dbg !41
  %159 = fadd float %147, %148, !dbg !43
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !44
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %159) #5, !dbg !45
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !46
  %163 = fmul float %158, %162, !dbg !47
  %164 = fadd float %139, %163, !dbg !48
  %165 = fadd float %143, %144, !dbg !49
  %166 = fmul float %158, %158, !dbg !50
  %167 = fmul float %166, %147, !dbg !51
  %168 = fmul float %167, %162, !dbg !52
  %169 = fadd float %165, %168, !dbg !53
  %170 = fsub float %141, %164, !dbg !41
  %171 = fadd float %149, %159, !dbg !43
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !44
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %171) #5, !dbg !45
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !46
  %175 = fmul float %174, %170, !dbg !47
  %176 = fadd float %164, %175, !dbg !48
  %177 = fadd float %145, %169, !dbg !49
  %178 = fmul float %170, %170, !dbg !50
  %179 = fmul float %159, %178, !dbg !51
  %180 = fmul float %174, %179, !dbg !52
  %181 = fadd float %177, %180, !dbg !53
  %182 = fsub float %142, %176, !dbg !41
  %183 = fadd float %150, %171, !dbg !43
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !44
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %183) #5, !dbg !45
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !46
  %187 = fmul float %186, %182, !dbg !47
  %188 = fadd float %176, %187, !dbg !48
  %189 = fadd float %146, %181, !dbg !49
  %190 = fmul float %182, %182, !dbg !50
  %191 = fmul float %171, %190, !dbg !51
  %192 = fmul float %186, %191, !dbg !52
  %193 = fadd float %189, %192, !dbg !53
  %194 = bitcast float %188 to i32, !dbg !39
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 16, i32 31), !dbg !39
  %196 = bitcast i32 %195 to float, !dbg !39
  %197 = bitcast float %193 to i32, !dbg !39
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !39
  %199 = bitcast i32 %198 to float, !dbg !39
  %200 = bitcast float %183 to i32, !dbg !39
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !39
  %202 = bitcast i32 %201 to float, !dbg !39
  %203 = fsub float %196, %188, !dbg !41
  %204 = fadd float %183, %202, !dbg !43
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !44
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %204) #5, !dbg !45
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !46
  %208 = fmul float %207, %203, !dbg !47
  %209 = fadd float %188, %208, !dbg !48
  %210 = fadd float %193, %199, !dbg !49
  %211 = fmul float %203, %203, !dbg !50
  %212 = fmul float %183, %211, !dbg !51
  %213 = fmul float %207, %212, !dbg !52
  %214 = fadd float %210, %213, !dbg !53
  %215 = bitcast float %209 to i32, !dbg !39
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !39
  %217 = bitcast i32 %216 to float, !dbg !39
  %218 = bitcast float %214 to i32, !dbg !39
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !39
  %220 = bitcast i32 %219 to float, !dbg !39
  %221 = bitcast float %204 to i32, !dbg !39
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !39
  %223 = bitcast i32 %222 to float, !dbg !39
  %224 = fsub float %217, %209, !dbg !41
  %225 = fadd float %204, %223, !dbg !43
  %226 = fcmp oeq float %225, 0.000000e+00, !dbg !44
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %225) #5, !dbg !45
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !46
  %229 = fmul float %224, %228, !dbg !47
  %230 = fadd float %209, %229, !dbg !48
  %231 = fadd float %214, %220, !dbg !49
  %232 = fmul float %224, %224, !dbg !50
  %233 = fmul float %204, %232, !dbg !51
  %234 = fmul float %228, %233, !dbg !52
  %235 = fadd float %231, %234, !dbg !53
  %236 = bitcast float %230 to i32, !dbg !39
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !39
  %238 = bitcast i32 %237 to float, !dbg !39
  %239 = bitcast float %235 to i32, !dbg !39
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !39
  %241 = bitcast i32 %240 to float, !dbg !39
  %242 = bitcast float %225 to i32, !dbg !39
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !39
  %244 = bitcast i32 %243 to float, !dbg !39
  %245 = fsub float %238, %230, !dbg !41
  %246 = fadd float %225, %244, !dbg !43
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !44
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %246) #5, !dbg !45
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !46
  %250 = fmul float %245, %249, !dbg !47
  %251 = fadd float %230, %250, !dbg !48
  %252 = fadd float %235, %241, !dbg !49
  %253 = fmul float %245, %245, !dbg !50
  %254 = fmul float %225, %253, !dbg !51
  %255 = fmul float %249, %254, !dbg !52
  %256 = fadd float %252, %255, !dbg !53
  %257 = bitcast float %251 to i32, !dbg !39
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 2, i32 31), !dbg !39
  %259 = bitcast i32 %258 to float, !dbg !39
  %260 = bitcast float %256 to i32, !dbg !39
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !39
  %262 = bitcast i32 %261 to float, !dbg !39
  %263 = bitcast float %246 to i32, !dbg !39
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 2, i32 31), !dbg !39
  %265 = bitcast i32 %264 to float, !dbg !39
  %266 = fsub float %259, %251, !dbg !41
  %267 = fadd float %246, %265, !dbg !43
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !44
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %267) #5, !dbg !45
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !46
  %271 = fmul float %266, %270, !dbg !47
  %272 = fadd float %251, %271, !dbg !48
  %273 = fadd float %256, %262, !dbg !49
  %274 = fmul float %266, %266, !dbg !50
  %275 = fmul float %246, %274, !dbg !51
  %276 = fmul float %270, %275, !dbg !52
  %277 = fadd float %273, %276, !dbg !53
  %278 = bitcast float %272 to i32, !dbg !39
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !39
  %280 = bitcast i32 %279 to float, !dbg !39
  %281 = bitcast float %277 to i32, !dbg !39
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !39
  %283 = bitcast i32 %282 to float, !dbg !39
  %284 = bitcast float %267 to i32, !dbg !39
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !39
  %286 = bitcast i32 %285 to float, !dbg !39
  %287 = fsub float %280, %272, !dbg !41
  %288 = fadd float %267, %286, !dbg !43
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !44
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %288) #5, !dbg !45
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !46
  %292 = fmul float %287, %291, !dbg !47
  %293 = fadd float %272, %292, !dbg !48
  %294 = fadd float %277, %283, !dbg !49
  %295 = fmul float %287, %287, !dbg !50
  %296 = fmul float %267, %295, !dbg !51
  %297 = fmul float %291, %296, !dbg !52
  %298 = fadd float %294, %297, !dbg !53
  %299 = icmp eq i32 %157, 0, !dbg !39
  %300 = and i32 %156, 15, !dbg !39
  %301 = zext nneg i32 %300 to i64, !dbg !39
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %301, !dbg !39
  %303 = bitcast float %293 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 %299) #5, !dbg !39
  %304 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %301, !dbg !39
  %305 = bitcast float %298 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 %299) #5, !dbg !39
  %306 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %301, !dbg !39
  %307 = bitcast float %288 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 %299) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %308 = icmp slt i32 %9, 16, !dbg !39
  %309 = sext i32 %9 to i64, !dbg !39
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !39
  %311 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %310, i1 %308) #5, !dbg !39
  %312 = bitcast i32 %311 to float, !dbg !39
  %313 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %309, !dbg !39
  %314 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %313, i1 %308) #5, !dbg !39
  %315 = bitcast i32 %314 to float, !dbg !39
  %316 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %309, !dbg !39
  %317 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %316, i1 %308) #5, !dbg !39
  %318 = bitcast i32 %317 to float, !dbg !39
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 8, i32 31), !dbg !39
  %320 = bitcast i32 %319 to float, !dbg !39
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 8, i32 31), !dbg !39
  %322 = bitcast i32 %321 to float, !dbg !39
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 8, i32 31), !dbg !39
  %324 = bitcast i32 %323 to float, !dbg !39
  %325 = fsub float %320, %312, !dbg !41
  %326 = fadd float %318, %324, !dbg !43
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !44
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %324, float %326) #5, !dbg !45
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !46
  %330 = fmul float %325, %329, !dbg !47
  %331 = fadd float %330, %312, !dbg !48
  %332 = fadd float %315, %322, !dbg !49
  %333 = fmul float %325, %325, !dbg !50
  %334 = fmul float %333, %318, !dbg !51
  %335 = fmul float %334, %329, !dbg !52
  %336 = fadd float %332, %335, !dbg !53
  %337 = bitcast float %331 to i32, !dbg !39
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !39
  %339 = bitcast i32 %338 to float, !dbg !39
  %340 = bitcast float %336 to i32, !dbg !39
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !39
  %342 = bitcast i32 %341 to float, !dbg !39
  %343 = bitcast float %326 to i32, !dbg !39
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !39
  %345 = bitcast i32 %344 to float, !dbg !39
  %346 = fsub float %339, %331, !dbg !41
  %347 = fadd float %326, %345, !dbg !43
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !44
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %347) #5, !dbg !45
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !46
  %351 = fmul float %346, %350, !dbg !47
  %352 = fadd float %331, %351, !dbg !48
  %353 = fadd float %336, %342, !dbg !49
  %354 = fmul float %346, %346, !dbg !50
  %355 = fmul float %326, %354, !dbg !51
  %356 = fmul float %350, %355, !dbg !52
  %357 = fadd float %353, %356, !dbg !53
  %358 = bitcast float %352 to i32, !dbg !39
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !39
  %360 = bitcast i32 %359 to float, !dbg !39
  %361 = bitcast float %357 to i32, !dbg !39
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !39
  %363 = bitcast i32 %362 to float, !dbg !39
  %364 = bitcast float %347 to i32, !dbg !39
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !39
  %366 = bitcast i32 %365 to float, !dbg !39
  %367 = fsub float %360, %352, !dbg !41
  %368 = fadd float %347, %366, !dbg !43
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !44
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %368) #5, !dbg !45
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !46
  %372 = fmul float %367, %371, !dbg !47
  %373 = fadd float %352, %372, !dbg !48
  %374 = fadd float %357, %363, !dbg !49
  %375 = fmul float %367, %367, !dbg !50
  %376 = fmul float %347, %375, !dbg !51
  %377 = fmul float %371, %376, !dbg !52
  %378 = fadd float %374, %377, !dbg !53
  %379 = bitcast float %373 to i32, !dbg !39
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !39
  %381 = bitcast i32 %380 to float, !dbg !39
  %382 = bitcast float %378 to i32, !dbg !39
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !39
  %384 = bitcast i32 %383 to float, !dbg !39
  %385 = bitcast float %368 to i32, !dbg !39
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !39
  %387 = bitcast i32 %386 to float, !dbg !39
  %388 = fsub float %381, %373, !dbg !41
  %389 = fadd float %368, %387, !dbg !43
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !44
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #5, !dbg !45
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !46
  %393 = fmul float %388, %392, !dbg !47
  %394 = fadd float %373, %393, !dbg !48
  %395 = fadd float %378, %384, !dbg !49
  %396 = fmul float %388, %388, !dbg !50
  %397 = fmul float %368, %396, !dbg !51
  %398 = fmul float %392, %397, !dbg !52
  %399 = fadd float %395, %398, !dbg !53
  %400 = and i32 %9, 15, !dbg !39
  %401 = icmp eq i32 %400, 0, !dbg !39
  %402 = and i1 %308, %401, !dbg !39
  %403 = bitcast float %394 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %403, i1 %402) #5, !dbg !39
  %404 = bitcast float %399 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %404, i1 %402) #5, !dbg !39
  %405 = bitcast float %389 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %405, i1 %402) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %406 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %407 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !39
  %408 = sext i32 %7 to i64, !dbg !54
  %409 = getelementptr float, ptr addrspace(1) %3, i64 %408, !dbg !54
  %410 = icmp eq i32 %10, 0, !dbg !55
  %411 = and i1 %410, %8, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %406, ptr addrspace(1) %409, i1 %411) #5, !dbg !55
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %407, float 4.096000e+03) #5, !dbg !56
  %413 = fadd float %412, 0x3EE4F8B580000000, !dbg !57
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i = icmp eq i32 %414, 0, !dbg !58
  br i1 %.not.i, label %417, label %415, !dbg !58

415:                                              ; preds = %155
  %416 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %413), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

417:                                              ; preds = %155
  %418 = tail call float @llvm.nvvm.rsqrt.approx.f(float %413), !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !58

__nv_rsqrtf.exit:                                 ; preds = %415, %417
  %.0.i = phi float [ %416, %415 ], [ %418, %417 ], !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %419 = getelementptr float, ptr addrspace(1) %1, i64 %408, !dbg !60
  %420 = bitcast float %.0.i to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %419, i1 %411) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqpwa5kdhqmxz3yazipcqyze3apzbly33em3w6m325btujb2bcph.py", directory: "inductor_cache/qp")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_6", linkageName: "triton_red_fused_convolution_native_group_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 178, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 41, column: 51, scope: !7)
!28 = !DILocation(line: 183, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 184, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 185, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 185, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 186, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 186, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 186, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 43, column: 60, scope: !7)
!36 = !DILocation(line: 44, column: 56, scope: !7)
!37 = !DILocation(line: 45, column: 64, scope: !7)
!38 = !DILocation(line: 46, column: 53, scope: !7)
!39 = !DILocation(line: 204, column: 46, scope: !25, inlinedAt: !40)
!40 = !DILocation(line: 48, column: 41, scope: !7)
!41 = !DILocation(line: 192, column: 21, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!43 = !DILocation(line: 193, column: 28, scope: !42, inlinedAt: !40)
!44 = !DILocation(line: 194, column: 39, scope: !42, inlinedAt: !40)
!45 = !DILocation(line: 194, column: 60, scope: !42, inlinedAt: !40)
!46 = !DILocation(line: 194, column: 49, scope: !42, inlinedAt: !40)
!47 = !DILocation(line: 196, column: 25, scope: !42, inlinedAt: !40)
!48 = !DILocation(line: 196, column: 17, scope: !42, inlinedAt: !40)
!49 = !DILocation(line: 197, column: 15, scope: !42, inlinedAt: !40)
!50 = !DILocation(line: 197, column: 30, scope: !42, inlinedAt: !40)
!51 = !DILocation(line: 197, column: 38, scope: !42, inlinedAt: !40)
!52 = !DILocation(line: 197, column: 49, scope: !42, inlinedAt: !40)
!53 = !DILocation(line: 197, column: 22, scope: !42, inlinedAt: !40)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 36, scope: !7)
!56 = !DILocation(line: 55, column: 18, scope: !7)
!57 = !DILocation(line: 57, column: 19, scope: !7)
!58 = !DILocation(line: 58, column: 28, scope: !7)
!59 = !DILocation(line: 59, column: 4, scope: !7)
!60 = !DILocation(line: 60, column: 28, scope: !7)
!61 = !DILocation(line: 60, column: 40, scope: !7)
!62 = !DILocation(line: 60, column: 4, scope: !7)
