; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__log_softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = srem i32 %9, 4, !dbg !15
  %12 = sdiv i32 %9, 16, !dbg !16
  %13 = add i32 %9, 192, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %10) #1, !dbg !19
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !19
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !19
  %19 = bitcast i32 %17 to float, !dbg !19
  %20 = bitcast i32 %18 to float, !dbg !19
  %21 = shl nsw i32 %12, 4, !dbg !20
  %22 = add i32 %21, %11, !dbg !21
  %23 = add i32 %22, 192, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %10) #1, !dbg !24
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !24
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !24
  %29 = bitcast i32 %27 to float, !dbg !24
  %30 = bitcast i32 %28 to float, !dbg !24
  %31 = add i32 %22, 196, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %10) #1, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = bitcast i32 %35 to float, !dbg !27
  %38 = bitcast i32 %36 to float, !dbg !27
  %39 = add i32 %22, 200, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %10) #1, !dbg !30
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %45 = bitcast i32 %43 to float, !dbg !30
  %46 = bitcast i32 %44 to float, !dbg !30
  %47 = add i32 %22, 204, !dbg !31
  %48 = sext i32 %47 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !32
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %10) #1, !dbg !33
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !33
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !33
  %53 = bitcast i32 %51 to float, !dbg !33
  %54 = bitcast i32 %52 to float, !dbg !33
  %55 = fcmp ogt float %29, %37, !dbg !34
  %56 = fcmp ogt float %30, %38, !dbg !34
  %57 = fcmp uno float %29, 0.000000e+00, !dbg !38
  %58 = fcmp uno float %30, 0.000000e+00, !dbg !38
  %59 = or i1 %57, %55, !dbg !39
  %60 = or i1 %58, %56, !dbg !39
  %61 = select i1 %59, float %29, float %37, !dbg !40
  %62 = select i1 %60, float %30, float %38, !dbg !40
  %63 = fcmp ogt float %61, %45, !dbg !41
  %64 = fcmp ogt float %62, %46, !dbg !41
  %65 = fcmp uno float %61, 0.000000e+00, !dbg !43
  %66 = fcmp uno float %62, 0.000000e+00, !dbg !43
  %67 = or i1 %63, %65, !dbg !44
  %68 = or i1 %64, %66, !dbg !44
  %69 = select i1 %67, float %61, float %45, !dbg !45
  %70 = select i1 %68, float %62, float %46, !dbg !45
  %71 = fcmp ogt float %69, %53, !dbg !46
  %72 = fcmp ogt float %70, %54, !dbg !46
  %73 = fcmp uno float %69, 0.000000e+00, !dbg !48
  %74 = fcmp uno float %70, 0.000000e+00, !dbg !48
  %75 = or i1 %71, %73, !dbg !49
  %76 = or i1 %72, %74, !dbg !49
  %77 = select i1 %75, float %69, float %53, !dbg !50
  %78 = select i1 %76, float %70, float %54, !dbg !50
  %79 = fsub float %19, %77, !dbg !51
  %80 = fsub float %20, %78, !dbg !51
  %81 = sext i32 %9 to i64, !dbg !52
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !52
  %83 = bitcast float %79 to i32, !dbg !53
  %84 = bitcast float %80 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %84, ptr addrspace(1) %82, i1 %10) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctqzg3a3it72cuoi46kjfk2fyok6sqlfmzk6pnplpuame5z7zoq3.py", directory: "inductor_cache/tq")
!4 = !{ptr @triton_poi_fused__log_softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__log_softmax_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__log_softmax_0", linkageName: "triton_poi_fused__log_softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 41, scope: !7)
!20 = !DILocation(line: 28, column: 44, scope: !7)
!21 = !DILocation(line: 28, column: 36, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 49, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 49, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 49, scope: !7)
!31 = !DILocation(line: 31, column: 41, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 49, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 32, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 33, column: 40, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !42)
!46 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 34, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !47)
!51 = !DILocation(line: 35, column: 18, scope: !7)
!52 = !DILocation(line: 36, column: 25, scope: !7)
!53 = !DILocation(line: 36, column: 36, scope: !7)
!54 = !DILocation(line: 36, column: 4, scope: !7)
