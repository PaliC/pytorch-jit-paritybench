; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 9, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 510, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = sdiv i32 %23, 4096, !dbg !14
  %25 = srem i32 %24, 32, !dbg !15
  %26 = sext i32 %23 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !16
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %29 = sext i32 %25 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !36
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !39
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %13, i64 %29, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !41
  %67 = bitcast i32 %66 to float, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !41
  %69 = bitcast i32 %68 to float, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %14, i64 %29, !dbg !42
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !43
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %15, i64 %29, !dbg !44
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !45
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !45
  %76 = fadd float %35, 0x3EE4F8B580000000, !dbg !46
  %77 = fadd float %37, 0x3EE4F8B580000000, !dbg !46
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %78, 0, !dbg !47
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %79, 0, !dbg !47
  br i1 %.not.i, label %85, label %80, !dbg !47

80:                                               ; preds = %17
  br i1 %.not1.i, label %83, label %81, !dbg !47

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

85:                                               ; preds = %17
  br i1 %.not1.i, label %88, label %86, !dbg !47

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !47
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %90, 0, !dbg !47
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !47
  br i1 %.not.i1, label %97, label %92, !dbg !47

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !47

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !47

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !47
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !48
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !48
  %104 = fadd float %51, 0x3EE4F8B580000000, !dbg !49
  %105 = fadd float %53, 0x3EE4F8B580000000, !dbg !49
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i6 = icmp eq i32 %106, 0, !dbg !50
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i9 = icmp eq i32 %107, 0, !dbg !50
  br i1 %.not.i6, label %113, label %108, !dbg !50

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !50

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !50

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

__nv_sqrtf.exit10:                                ; preds = %109, %111, %114, %116
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !50
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i11 = icmp eq i32 %118, 0, !dbg !50
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i14 = icmp eq i32 %119, 0, !dbg !50
  br i1 %.not.i11, label %125, label %120, !dbg !50

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !50

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !50

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

__nv_sqrtf.exit15:                                ; preds = %121, %123, %126, %128
  %.0.i13 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !50
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !51
  %132 = fadd float %67, 0x3EE4F8B580000000, !dbg !52
  %133 = fadd float %69, 0x3EE4F8B580000000, !dbg !52
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i16 = icmp eq i32 %134, 0, !dbg !53
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i19 = icmp eq i32 %135, 0, !dbg !53
  br i1 %.not.i16, label %141, label %136, !dbg !53

136:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %139, label %137, !dbg !53

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

141:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %144, label %142, !dbg !53

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

__nv_sqrtf.exit20:                                ; preds = %137, %139, %142, %144
  %.0.i18 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !53
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i21 = icmp eq i32 %146, 0, !dbg !53
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i24 = icmp eq i32 %147, 0, !dbg !53
  br i1 %.not.i21, label %153, label %148, !dbg !53

148:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %151, label %149, !dbg !53

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

153:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %156, label %154, !dbg !53

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

__nv_sqrtf.exit25:                                ; preds = %149, %151, %154, %156
  %.0.i23 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !53
  %158 = extractvalue { i32, i32 } %61, 1, !dbg !37
  %159 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !19
  %160 = insertelement <2 x i32> %159, i32 %64, i64 1, !dbg !19
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !19
  %162 = extractvalue { i32, i32 } %61, 0, !dbg !37
  %163 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !19
  %164 = insertelement <2 x i32> %163, i32 %63, i64 1, !dbg !19
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !19
  %166 = extractvalue { i32, i32 } %28, 1, !dbg !17
  %167 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %168 = insertelement <2 x i32> %167, i32 %72, i64 1, !dbg !23
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !23
  %170 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !25
  %171 = insertelement <2 x i32> %170, i32 %75, i64 1, !dbg !25
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !25
  %173 = extractvalue { i32, i32 } %45, 1, !dbg !27
  %174 = bitcast i32 %173 to float, !dbg !27
  %175 = bitcast i32 %48 to float, !dbg !29
  %176 = fsub float %174, %175, !dbg !54
  %177 = fmul float %176, %131, !dbg !55
  %178 = bitcast i32 %56 to float, !dbg !33
  %179 = fmul float %177, %178, !dbg !56
  %180 = bitcast i32 %59 to float, !dbg !35
  %181 = fadd float %179, %180, !dbg !57
  %182 = extractvalue { i32, i32 } %28, 0, !dbg !17
  %183 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !23
  %184 = insertelement <2 x i32> %183, i32 %71, i64 1, !dbg !23
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !23
  %186 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !25
  %187 = insertelement <2 x i32> %186, i32 %74, i64 1, !dbg !25
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !25
  %189 = extractvalue { i32, i32 } %45, 0, !dbg !27
  %190 = bitcast i32 %189 to float, !dbg !27
  %191 = bitcast i32 %47 to float, !dbg !29
  %192 = fsub float %190, %191, !dbg !54
  %193 = fmul float %192, %130, !dbg !55
  %194 = bitcast i32 %55 to float, !dbg !33
  %195 = fmul float %193, %194, !dbg !56
  %196 = bitcast i32 %58 to float, !dbg !35
  %197 = fadd float %195, %196, !dbg !57
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !58
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !58
  %200 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !17
  %201 = insertelement <2 x i32> %200, i32 %162, i64 1, !dbg !17
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !17
  %203 = fsub <2 x float> %202, %165, !dbg !59
  %204 = insertelement <2 x float> poison, float %102, i64 0, !dbg !60
  %205 = insertelement <2 x float> %204, float %198, i64 1, !dbg !60
  %206 = fmul <2 x float> %203, %205, !dbg !60
  %207 = fmul <2 x float> %206, %185, !dbg !61
  %208 = fadd <2 x float> %207, %188, !dbg !62
  %209 = extractelement <2 x float> %208, i64 0, !dbg !63
  %210 = fadd float %209, %197, !dbg !63
  %211 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !17
  %212 = insertelement <2 x i32> %211, i32 %158, i64 1, !dbg !17
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !17
  %214 = fsub <2 x float> %213, %161, !dbg !59
  %215 = insertelement <2 x float> poison, float %103, i64 0, !dbg !60
  %216 = insertelement <2 x float> %215, float %199, i64 1, !dbg !60
  %217 = fmul <2 x float> %214, %216, !dbg !60
  %218 = fmul <2 x float> %217, %169, !dbg !61
  %219 = fadd <2 x float> %218, %172, !dbg !62
  %220 = extractelement <2 x float> %219, i64 0, !dbg !63
  %221 = fadd float %220, %181, !dbg !63
  %222 = extractelement <2 x float> %208, i64 1, !dbg !64
  %223 = fadd float %210, %222, !dbg !64
  %224 = extractelement <2 x float> %219, i64 1, !dbg !64
  %225 = fadd float %221, %224, !dbg !64
  %226 = fsub float 0.000000e+00, %223, !dbg !65
  %227 = fsub float 0.000000e+00, %225, !dbg !65
  %228 = fmul float %226, 0x3FF7154760000000, !dbg !69
  %229 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %228) #3, !dbg !69
  %230 = fmul float %227, 0x3FF7154760000000, !dbg !69
  %231 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %230) #3, !dbg !69
  %232 = fadd float %229, 1.000000e+00, !dbg !70
  %233 = fadd float %231, 1.000000e+00, !dbg !70
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %232) #3, !dbg !71
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %233) #3, !dbg !71
  %236 = fmul float %223, %234, !dbg !72
  %237 = fmul float %225, %235, !dbg !72
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !73
  %239 = bitcast float %236 to i32, !dbg !74
  %240 = bitcast float %237 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %239, i32 %240, ptr addrspace(1) %238, i1 true) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccbrtbm4u5vinik2zxc45nuq423cisxlqtmsugoxykbskv6l4pvd.py", directory: "inductor_cache/cb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 26, scope: !7)
!48 = !DILocation(line: 46, column: 18, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 27, scope: !7)
!51 = !DILocation(line: 55, column: 19, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 27, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 19, scope: !7)
!59 = !DILocation(line: 41, column: 18, scope: !7)
!60 = !DILocation(line: 49, column: 19, scope: !7)
!61 = !DILocation(line: 50, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 70, column: 23, scope: !7)
!69 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 28, scope: !7)
!74 = !DILocation(line: 72, column: 40, scope: !7)
!75 = !DILocation(line: 72, column: 4, scope: !7)
