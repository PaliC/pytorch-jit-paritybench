; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr24 = freeze i32 %7, !dbg !11
  %8 = icmp slt i32 %.fr24, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = mul i32 %.fr24, 5120, !dbg !13
  %15 = add i32 %13, %14, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  br i1 %8, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %6
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  %19 = or disjoint i32 %13, 2048, !dbg !17
  %20 = add i32 %19, %14, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  %24 = or disjoint i32 %13, 4096, !dbg !17
  %25 = add i32 %24, %14, !dbg !14
  %26 = sext i32 %25 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  br label %.split23.us, !dbg !18

.split.preheader:                                 ; preds = %6
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %34 = bitcast i32 %32 to float, !dbg !16
  %35 = bitcast i32 %33 to float, !dbg !16
  %36 = fmul float %34, %34, !dbg !22
  %37 = fmul float %35, %35, !dbg !22
  %38 = or disjoint i32 %13, 2048, !dbg !17
  %39 = add i32 %38, %14, !dbg !14
  %40 = sext i32 %39 to i64, !dbg !15
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !15
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !16
  %47 = bitcast i32 %45 to float, !dbg !16
  %48 = bitcast i32 %46 to float, !dbg !16
  %49 = fmul float %47, %47, !dbg !22
  %50 = fmul float %48, %48, !dbg !22
  %51 = fadd float %36, %49, !dbg !23
  %52 = fadd float %37, %50, !dbg !23
  %53 = or disjoint i32 %13, 4096, !dbg !17
  %54 = icmp samesign ult i32 %53, 5120, !dbg !24
  %55 = add i32 %53, %14, !dbg !14
  %56 = sext i32 %55 to i64, !dbg !15
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !15
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #5, !dbg !16
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !16
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !16
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !16
  %63 = bitcast i32 %61 to float, !dbg !16
  %64 = bitcast i32 %62 to float, !dbg !16
  %65 = fmul float %63, %63, !dbg !22
  %66 = fmul float %64, %64, !dbg !22
  %67 = fadd float %51, %65, !dbg !23
  %68 = fadd float %52, %66, !dbg !23
  %69 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !16
  %70 = insertelement <2 x i32> %69, i32 %31, i64 1, !dbg !16
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !16
  %72 = fmul <2 x float> %71, %71, !dbg !22
  %73 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !16
  %74 = insertelement <2 x i32> %73, i32 %44, i64 1, !dbg !16
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !16
  %76 = fmul <2 x float> %75, %75, !dbg !22
  %77 = fadd <2 x float> %72, %76, !dbg !23
  %78 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !16
  %79 = insertelement <2 x i32> %78, i32 %60, i64 1, !dbg !16
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !16
  %81 = fmul <2 x float> %80, %80, !dbg !22
  %82 = fadd <2 x float> %77, %81, !dbg !23
  %83 = insertelement <2 x i1> poison, i1 %54, i64 0, !dbg !25
  %84 = shufflevector <2 x i1> %83, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %85 = select <2 x i1> %84, <2 x float> %82, <2 x float> %77, !dbg !25
  %86 = select i1 %54, float %67, float %51, !dbg !25
  %87 = select i1 %54, float %68, float %52, !dbg !25
  %shift = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %88 = fadd <2 x float> %85, %shift, !dbg !18
  %89 = extractelement <2 x float> %88, i64 0, !dbg !18
  %90 = fadd float %86, %89, !dbg !18
  %91 = fadd float %87, %90, !dbg !18
  br label %.split23.us, !dbg !18

.split23.us:                                      ; preds = %.split.us.preheader, %.split.preheader
  %92 = phi float [ %91, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !26
  %93 = bitcast float %92 to i32, !dbg !18
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !18
  %95 = bitcast i32 %94 to float, !dbg !18
  %96 = fadd float %92, %95, !dbg !26
  %97 = bitcast float %96 to i32, !dbg !18
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !18
  %99 = bitcast i32 %98 to float, !dbg !18
  %100 = fadd float %96, %99, !dbg !26
  %101 = bitcast float %100 to i32, !dbg !18
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !18
  %103 = bitcast i32 %102 to float, !dbg !18
  %104 = fadd float %100, %103, !dbg !26
  %105 = bitcast float %104 to i32, !dbg !18
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !18
  %107 = bitcast i32 %106 to float, !dbg !18
  %108 = fadd float %104, %107, !dbg !26
  %109 = bitcast float %108 to i32, !dbg !18
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !18
  %111 = bitcast i32 %110 to float, !dbg !18
  %112 = fadd float %108, %111, !dbg !26
  %113 = icmp eq i32 %10, 0, !dbg !18
  %114 = and i32 %11, 15, !dbg !18
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !18
  %116 = bitcast float %112 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 %113) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %117 = icmp slt i32 %9, 16, !dbg !18
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !18
  %119 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %117) #5, !dbg !18
  %120 = bitcast i32 %119 to float, !dbg !18
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !18
  %122 = bitcast i32 %121 to float, !dbg !18
  %123 = fadd float %120, %122, !dbg !26
  %124 = bitcast float %123 to i32, !dbg !18
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !18
  %126 = bitcast i32 %125 to float, !dbg !18
  %127 = fadd float %123, %126, !dbg !26
  %128 = bitcast float %127 to i32, !dbg !18
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !18
  %130 = bitcast i32 %129 to float, !dbg !18
  %131 = fadd float %127, %130, !dbg !26
  %132 = bitcast float %131 to i32, !dbg !18
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !18
  %134 = bitcast i32 %133 to float, !dbg !18
  %135 = fadd float %131, %134, !dbg !26
  %136 = and i32 %9, 15, !dbg !18
  %137 = icmp eq i32 %136, 0, !dbg !18
  %138 = and i1 %117, %137, !dbg !18
  %139 = bitcast float %135 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %139, i1 %138) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %140 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %141, 0, !dbg !28
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %142, 0, !dbg !28
  br i1 %.not.i, label %148, label %143, !dbg !28

143:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %146, label %144, !dbg !28

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

148:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %151, label %149, !dbg !28

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %144, %146, %149, %151
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !28
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i17 = icmp eq i32 %159, 0, !dbg !28
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i20 = icmp eq i32 %160, 0, !dbg !28
  br i1 %.not.i17, label %166, label %161, !dbg !28

161:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %164, label %162, !dbg !28

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

166:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %169, label %167, !dbg !28

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

__nv_sqrtf.exit21:                                ; preds = %162, %164, %167, %169
  %.0.i19 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %171 = sext i32 %.fr24 to i64, !dbg !30
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !30
  %urem = and i32 %9, 511, !dbg !31
  %173 = icmp eq i32 %urem, 0, !dbg !31
  %174 = bitcast float %.0.i to i32, !dbg !31
  %175 = and i1 %173, %8, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %172, i1 %175) #5, !dbg !31
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !32
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %8) #5, !dbg !33
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %8) #5, !dbg !33
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %8) #5, !dbg !33
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %8) #5, !dbg !33
  %181 = bitcast i32 %180 to float, !dbg !33
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %.0.i19) #5, !dbg !34
  %183 = add i32 %13, %14, !dbg !35
  %184 = sext i32 %183 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !36
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !37
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !37
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !37
  %191 = bitcast i32 %187 to float, !dbg !37
  %192 = bitcast i32 %188 to float, !dbg !37
  %193 = bitcast i32 %189 to float, !dbg !37
  %194 = bitcast i32 %190 to float, !dbg !37
  %195 = fmul float %182, %191, !dbg !38
  %196 = fmul float %182, %192, !dbg !38
  %197 = fmul float %182, %193, !dbg !38
  %198 = fmul float %182, %194, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !39
  %200 = bitcast float %195 to i32, !dbg !40
  %201 = bitcast float %196 to i32, !dbg !40
  %202 = bitcast float %197 to i32, !dbg !40
  %203 = bitcast float %198 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %199, i1 %8) #5, !dbg !40
  %204 = or disjoint i32 %13, 2048, !dbg !41
  %205 = add i32 %204, %14, !dbg !35
  %206 = sext i32 %205 to i64, !dbg !36
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !36
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %207, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !37
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !37
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !37
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !37
  %213 = bitcast i32 %209 to float, !dbg !37
  %214 = bitcast i32 %210 to float, !dbg !37
  %215 = bitcast i32 %211 to float, !dbg !37
  %216 = bitcast i32 %212 to float, !dbg !37
  %217 = fmul float %182, %213, !dbg !38
  %218 = fmul float %182, %214, !dbg !38
  %219 = fmul float %182, %215, !dbg !38
  %220 = fmul float %182, %216, !dbg !38
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %206, !dbg !39
  %222 = bitcast float %217 to i32, !dbg !40
  %223 = bitcast float %218 to i32, !dbg !40
  %224 = bitcast float %219 to i32, !dbg !40
  %225 = bitcast float %220 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %221, i1 %8) #5, !dbg !40
  %226 = or disjoint i32 %13, 4096, !dbg !41
  %227 = icmp samesign ult i32 %226, 5120, !dbg !42
  %228 = add i32 %226, %14, !dbg !35
  %229 = sext i32 %228 to i64, !dbg !36
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !36
  %231 = and i1 %8, %227, !dbg !43
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %230, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231, i32 0, i1 %231) #5, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !37
  %237 = bitcast i32 %233 to float, !dbg !37
  %238 = bitcast i32 %234 to float, !dbg !37
  %239 = bitcast i32 %235 to float, !dbg !37
  %240 = bitcast i32 %236 to float, !dbg !37
  %241 = fmul float %182, %237, !dbg !38
  %242 = fmul float %182, %238, !dbg !38
  %243 = fmul float %182, %239, !dbg !38
  %244 = fmul float %182, %240, !dbg !38
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %229, !dbg !39
  %246 = bitcast float %241 to i32, !dbg !40
  %247 = bitcast float %242 to i32, !dbg !40
  %248 = bitcast float %243 to i32, !dbg !40
  %249 = bitcast float %244 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %247, i32 %248, i32 %249, ptr addrspace(1) %245, i1 %231) #5, !dbg !40
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci5zmdtl4ntgyw4oqif62w7zrzecerhawciwdiuuh7v7obea6zts.py", directory: "inductor_cache/i5")
!4 = !{ptr @triton_red_fused__weight_norm_interface_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_11, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_11", linkageName: "triton_red_fused__weight_norm_interface_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 37, column: 25, scope: !7)
!22 = !DILocation(line: 33, column: 22, scope: !7)
!23 = !DILocation(line: 35, column: 23, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 36, column: 46, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !21)
!27 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!28 = !DILocation(line: 38, column: 26, scope: !7)
!29 = !DILocation(line: 39, column: 4, scope: !7)
!30 = !DILocation(line: 40, column: 28, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 47, column: 22, scope: !7)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 46, column: 34, scope: !7)
!37 = !DILocation(line: 46, column: 49, scope: !7)
!38 = !DILocation(line: 48, column: 22, scope: !7)
!39 = !DILocation(line: 49, column: 29, scope: !7)
!40 = !DILocation(line: 49, column: 50, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 44, column: 25, scope: !7)
!43 = !DILocation(line: 46, column: 57, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
