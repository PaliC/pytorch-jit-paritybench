; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 768, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 4, !dbg !15
  %12 = srem i32 %11, 12, !dbg !16
  %13 = mul i32 %11, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %13, !dbg !17
  %.frozen1 = freeze i32 %9, !dbg !18
  %14 = sdiv i32 %.frozen1, 48, !dbg !18
  %15 = icmp slt i32 %12, 4, !dbg !19
  %16 = mul i32 %14, 48, !dbg !20
  %srem.decomposed = sub i32 %.frozen1, %16, !dbg !20
  %17 = shl nsw i32 %14, 4, !dbg !21
  %18 = add nsw i32 %17, %srem.decomposed, !dbg !22
  %19 = sext i32 %18 to i64, !dbg !23
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !23
  %21 = and i1 %10, %15, !dbg !24
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !25
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !25
  %25 = and i32 %12, -4, !dbg !26
  %26 = icmp eq i32 %25, 4, !dbg !26
  %27 = icmp sgt i32 %9, 191, !dbg !27
  %28 = and i1 %27, %26, !dbg !28
  %29 = shl nsw i32 %12, 2, !dbg !29
  %30 = add nsw i32 %29, -16, !dbg !29
  %31 = add nsw i32 %17, %.decomposed, !dbg !30
  %32 = add nsw i32 %31, %30, !dbg !31
  %33 = sext i32 %32 to i64, !dbg !32
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !32
  %35 = and i1 %10, %28, !dbg !33
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !34
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !34
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !34
  %39 = bitcast i32 %37 to float, !dbg !34
  %40 = bitcast i32 %38 to float, !dbg !34
  %41 = add nsw i32 %31, -64, !dbg !35
  %42 = add nsw i32 %41, %30, !dbg !36
  %43 = sext i32 %42 to i64, !dbg !37
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !37
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !38
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !38
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !38
  %48 = bitcast i32 %46 to float, !dbg !38
  %49 = bitcast i32 %47 to float, !dbg !38
  %50 = fsub float %39, %48, !dbg !39
  %51 = fsub float %40, %49, !dbg !39
  %52 = select i1 %28, float %50, float 0.000000e+00, !dbg !40
  %53 = select i1 %28, float %51, float 0.000000e+00, !dbg !40
  %54 = and i1 %10, %26, !dbg !41
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !42
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !42
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !42
  %58 = bitcast i32 %56 to float, !dbg !42
  %59 = bitcast i32 %57 to float, !dbg !42
  %60 = select i1 %27, float %52, float %58, !dbg !43
  %61 = select i1 %27, float %53, float %59, !dbg !43
  %62 = icmp sgt i32 %12, 7, !dbg !44
  %63 = icmp slt i32 %9, 576, !dbg !45
  %64 = and i1 %63, %62, !dbg !46
  %65 = add nsw i32 %29, -32, !dbg !47
  %66 = add nsw i32 %31, %65, !dbg !48
  %67 = sext i32 %66 to i64, !dbg !49
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !49
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !50
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !50
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !50
  %72 = bitcast i32 %70 to float, !dbg !50
  %73 = bitcast i32 %71 to float, !dbg !50
  %74 = add nsw i32 %31, 64, !dbg !51
  %75 = add nsw i32 %74, %65, !dbg !52
  %76 = sext i32 %75 to i64, !dbg !53
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !53
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !54
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !54
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !54
  %81 = bitcast i32 %79 to float, !dbg !54
  %82 = bitcast i32 %80 to float, !dbg !54
  %83 = fsub float %72, %81, !dbg !55
  %84 = fsub float %73, %82, !dbg !55
  %85 = select i1 %64, float %83, float 0.000000e+00, !dbg !56
  %86 = select i1 %64, float %84, float 0.000000e+00, !dbg !56
  %87 = and i1 %10, %62, !dbg !57
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #1, !dbg !58
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !58
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !58
  %91 = bitcast i32 %89 to float, !dbg !58
  %92 = bitcast i32 %90 to float, !dbg !58
  %93 = select i1 %63, float %85, float %91, !dbg !59
  %94 = select i1 %63, float %86, float %92, !dbg !59
  %95 = select i1 %62, float %93, float 0.000000e+00, !dbg !60
  %96 = select i1 %62, float %94, float 0.000000e+00, !dbg !60
  %97 = select i1 %26, float %60, float %95, !dbg !61
  %98 = select i1 %26, float %61, float %96, !dbg !61
  %99 = sext i32 %9 to i64, !dbg !62
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !62
  %101 = bitcast float %97 to i32, !dbg !63
  %102 = select i1 %15, i32 %23, i32 %101, !dbg !64
  %103 = bitcast float %98 to i32, !dbg !63
  %104 = select i1 %15, i32 %24, i32 %103, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %104, ptr addrspace(1) %100, i1 %10) #1, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnscz7fiundvnfhizkr6p7g5llwizkdtzwrbwru57npa77mdbdk.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 47, scope: !7)
!22 = !DILocation(line: 34, column: 44, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 59, scope: !7)
!25 = !DILocation(line: 34, column: 52, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 21, scope: !7)
!28 = !DILocation(line: 42, column: 20, scope: !7)
!29 = !DILocation(line: 43, column: 39, scope: !7)
!30 = !DILocation(line: 43, column: 36, scope: !7)
!31 = !DILocation(line: 43, column: 52, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 68, scope: !7)
!34 = !DILocation(line: 43, column: 60, scope: !7)
!35 = !DILocation(line: 44, column: 44, scope: !7)
!36 = !DILocation(line: 44, column: 60, scope: !7)
!37 = !DILocation(line: 44, column: 31, scope: !7)
!38 = !DILocation(line: 44, column: 68, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 67, scope: !7)
!42 = !DILocation(line: 48, column: 60, scope: !7)
!43 = !DILocation(line: 49, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 59, column: 39, scope: !7)
!48 = !DILocation(line: 59, column: 52, scope: !7)
!49 = !DILocation(line: 59, column: 31, scope: !7)
!50 = !DILocation(line: 59, column: 60, scope: !7)
!51 = !DILocation(line: 60, column: 41, scope: !7)
!52 = !DILocation(line: 60, column: 57, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 60, column: 65, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 35, scope: !7)
!57 = !DILocation(line: 64, column: 68, scope: !7)
!58 = !DILocation(line: 64, column: 60, scope: !7)
!59 = !DILocation(line: 65, column: 35, scope: !7)
!60 = !DILocation(line: 67, column: 35, scope: !7)
!61 = !DILocation(line: 0, scope: !7)
!62 = !DILocation(line: 70, column: 25, scope: !7)
!63 = !DILocation(line: 70, column: 37, scope: !7)
!64 = !DILocation(line: 69, column: 33, scope: !7)
!65 = !DILocation(line: 70, column: 4, scope: !7)
