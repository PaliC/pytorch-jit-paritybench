; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %23 = sdiv i32 %.frozen, 64, !dbg !14
  %24 = sdiv i32 %22, 64, !dbg !14
  %25 = srem i32 %23, 768, !dbg !15
  %26 = srem i32 %24, 768, !dbg !15
  %27 = mul i32 %23, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %28 = srem i32 %19, 64, !dbg !16
  %29 = srem i32 %20, 64, !dbg !16
  %30 = srem i32 %21, 64, !dbg !16
  %.frozen78 = freeze i32 %18, !dbg !17
  %31 = sdiv i32 %.frozen78, 49152, !dbg !17
  %.frozen76 = freeze i32 %22, !dbg !17
  %32 = sdiv i32 %.frozen76, 49152, !dbg !17
  %33 = icmp slt i32 %25, 384, !dbg !18
  %34 = icmp slt i32 %26, 384, !dbg !18
  %35 = mul nsw i32 %.decomposed, 384, !dbg !19
  %36 = mul nsw i32 %28, 384, !dbg !19
  %37 = mul nsw i32 %29, 384, !dbg !19
  %38 = mul nsw i32 %30, 384, !dbg !19
  %39 = mul nsw i32 %31, 24576, !dbg !20
  %40 = mul nsw i32 %32, 24576, !dbg !20
  %41 = add nsw i32 %35, %39, !dbg !21
  %42 = add nsw i32 %39, %36, !dbg !21
  %43 = add nsw i32 %39, %37, !dbg !21
  %44 = add nsw i32 %39, %38, !dbg !21
  %45 = add nsw i32 %35, %40, !dbg !21
  %46 = add nsw i32 %36, %40, !dbg !21
  %47 = add nsw i32 %37, %40, !dbg !21
  %48 = add nsw i32 %38, %40, !dbg !21
  %49 = add nsw i32 %41, %25, !dbg !22
  %50 = add nsw i32 %42, %25, !dbg !22
  %51 = add nsw i32 %43, %25, !dbg !22
  %52 = add nsw i32 %44, %25, !dbg !22
  %53 = add nsw i32 %45, %26, !dbg !22
  %54 = add nsw i32 %46, %26, !dbg !22
  %55 = add nsw i32 %47, %26, !dbg !22
  %56 = add nsw i32 %48, %26, !dbg !22
  %57 = sext i32 %49 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %50 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %51 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %52 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %53 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %54 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = sext i32 %55 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = sext i32 %56 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %33, i32 0, i1 %33) #3, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %33, i32 0, i1 %33) #3, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %33, i32 0, i1 %33) #3, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %33, i32 0, i1 %33) #3, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %34, i32 0, i1 %34) #3, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %34, i32 0, i1 %34) #3, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %34, i32 0, i1 %34) #3, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %34, i32 0, i1 %34) #3, !dbg !24
  %81 = sext i32 %25 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !25
  %83 = sext i32 %26 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %33, i32 0, i1 %33) #3, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %33, i32 0, i1 %33) #3, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %33, i32 0, i1 %33) #3, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %33, i32 0, i1 %33) #3, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %34, i32 0, i1 %34) #3, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %34, i32 0, i1 %34) #3, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %34, i32 0, i1 %34) #3, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %34, i32 0, i1 %34) #3, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %33, i32 0, i1 %33) #3, !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %33, i32 0, i1 %33) #3, !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %33, i32 0, i1 %33) #3, !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %33, i32 0, i1 %33) #3, !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %34, i32 0, i1 %34) #3, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %34, i32 0, i1 %34) #3, !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %34, i32 0, i1 %34) #3, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %34, i32 0, i1 %34) #3, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = fadd float %96, 0x3F50624DE0000000, !dbg !29
  %112 = fadd float %98, 0x3F50624DE0000000, !dbg !29
  %113 = fadd float %100, 0x3F50624DE0000000, !dbg !29
  %114 = fadd float %102, 0x3F50624DE0000000, !dbg !29
  %115 = fadd float %104, 0x3F50624DE0000000, !dbg !29
  %116 = fadd float %106, 0x3F50624DE0000000, !dbg !29
  %117 = fadd float %108, 0x3F50624DE0000000, !dbg !29
  %118 = fadd float %110, 0x3F50624DE0000000, !dbg !29
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %119, 0, !dbg !30
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %120, 0, !dbg !30
  br i1 %.not.i, label %126, label %121, !dbg !30

121:                                              ; preds = %12
  br i1 %.not1.i, label %124, label %122, !dbg !30

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

126:                                              ; preds = %12
  br i1 %.not1.i, label %129, label %127, !dbg !30

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %122, %124, %127, %129
  %.0.i = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !30
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %131, 0, !dbg !30
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %132, 0, !dbg !30
  br i1 %.not.i1, label %138, label %133, !dbg !30

133:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %136, label %134, !dbg !30

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

138:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %141, label %139, !dbg !30

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %134, %136, %139, %141
  %.0.i3 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !30
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %143, 0, !dbg !30
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %144, 0, !dbg !30
  br i1 %.not.i6, label %150, label %145, !dbg !30

145:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %148, label %146, !dbg !30

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

150:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %153, label %151, !dbg !30

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %146, %148, %151, %153
  %.0.i8 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !30
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %155, 0, !dbg !30
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %156, 0, !dbg !30
  br i1 %.not.i11, label %162, label %157, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

162:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %165, label %163, !dbg !30

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %158, %160, %163, %165
  %.0.i13 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !30
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %167, 0, !dbg !30
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %168, 0, !dbg !30
  br i1 %.not.i16, label %174, label %169, !dbg !30

169:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %172, label %170, !dbg !30

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

174:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %177, label %175, !dbg !30

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %170, %172, %175, %177
  %.0.i18 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !30
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %179, 0, !dbg !30
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %180, 0, !dbg !30
  br i1 %.not.i21, label %186, label %181, !dbg !30

181:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %184, label %182, !dbg !30

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

186:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %189, label %187, !dbg !30

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %182, %184, %187, %189
  %.0.i23 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !30
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %191, 0, !dbg !30
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %192, 0, !dbg !30
  br i1 %.not.i26, label %198, label %193, !dbg !30

193:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %196, label %194, !dbg !30

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

198:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %201, label %199, !dbg !30

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %194, %196, %199, %201
  %.0.i28 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !30
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %203, 0, !dbg !30
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %204, 0, !dbg !30
  br i1 %.not.i31, label %210, label %205, !dbg !30

205:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %208, label %206, !dbg !30

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

210:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %213, label %211, !dbg !30

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %206, %208, %211, %213
  %.0.i33 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !30
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !32
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !32
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %233 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !34
  %234 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !34
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %33, i32 0, i1 %33) #3, !dbg !35
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %33, i32 0, i1 %33) #3, !dbg !35
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %33, i32 0, i1 %33) #3, !dbg !35
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %33, i32 0, i1 %33) #3, !dbg !35
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %34, i32 0, i1 %34) #3, !dbg !35
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %34, i32 0, i1 %34) #3, !dbg !35
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %34, i32 0, i1 %34) #3, !dbg !35
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %34, i32 0, i1 %34) #3, !dbg !35
  %243 = icmp sgt i32 %25, 383, !dbg !36
  %244 = icmp sgt i32 %26, 383, !dbg !36
  %245 = add nsw i32 %25, -384, !dbg !37
  %246 = add nsw i32 %26, -384, !dbg !37
  %247 = add nsw i32 %41, %245, !dbg !38
  %248 = add nsw i32 %42, %245, !dbg !38
  %249 = add nsw i32 %43, %245, !dbg !38
  %250 = add nsw i32 %44, %245, !dbg !38
  %251 = add nsw i32 %45, %246, !dbg !38
  %252 = add nsw i32 %46, %246, !dbg !38
  %253 = add nsw i32 %47, %246, !dbg !38
  %254 = add nsw i32 %48, %246, !dbg !38
  %255 = sext i32 %247 to i64, !dbg !39
  %256 = getelementptr float, ptr addrspace(1) %5, i64 %255, !dbg !39
  %257 = sext i32 %248 to i64, !dbg !39
  %258 = getelementptr float, ptr addrspace(1) %5, i64 %257, !dbg !39
  %259 = sext i32 %249 to i64, !dbg !39
  %260 = getelementptr float, ptr addrspace(1) %5, i64 %259, !dbg !39
  %261 = sext i32 %250 to i64, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !39
  %263 = sext i32 %251 to i64, !dbg !39
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !39
  %265 = sext i32 %252 to i64, !dbg !39
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !39
  %267 = sext i32 %253 to i64, !dbg !39
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !39
  %269 = sext i32 %254 to i64, !dbg !39
  %270 = getelementptr float, ptr addrspace(1) %5, i64 %269, !dbg !39
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %243, i32 0, i1 %243) #3, !dbg !40
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %243, i32 0, i1 %243) #3, !dbg !40
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 %243, i32 0, i1 %243) #3, !dbg !40
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %243, i32 0, i1 %243) #3, !dbg !40
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %244, i32 0, i1 %244) #3, !dbg !40
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %244, i32 0, i1 %244) #3, !dbg !40
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %244, i32 0, i1 %244) #3, !dbg !40
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %244, i32 0, i1 %244) #3, !dbg !40
  %279 = sext i32 %245 to i64, !dbg !41
  %280 = getelementptr float, ptr addrspace(1) %6, i64 %279, !dbg !41
  %281 = sext i32 %246 to i64, !dbg !41
  %282 = getelementptr float, ptr addrspace(1) %6, i64 %281, !dbg !41
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %243, i32 0, i1 %243) #3, !dbg !42
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %243, i32 0, i1 %243) #3, !dbg !42
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %243, i32 0, i1 %243) #3, !dbg !42
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %243, i32 0, i1 %243) #3, !dbg !42
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %244, i32 0, i1 %244) #3, !dbg !42
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %244, i32 0, i1 %244) #3, !dbg !42
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %244, i32 0, i1 %244) #3, !dbg !42
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %244, i32 0, i1 %244) #3, !dbg !42
  %291 = getelementptr float, ptr addrspace(1) %7, i64 %279, !dbg !43
  %292 = getelementptr float, ptr addrspace(1) %7, i64 %281, !dbg !43
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %243, i32 0, i1 %243) #3, !dbg !44
  %294 = bitcast i32 %293 to float, !dbg !44
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %243, i32 0, i1 %243) #3, !dbg !44
  %296 = bitcast i32 %295 to float, !dbg !44
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %243, i32 0, i1 %243) #3, !dbg !44
  %298 = bitcast i32 %297 to float, !dbg !44
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %243, i32 0, i1 %243) #3, !dbg !44
  %300 = bitcast i32 %299 to float, !dbg !44
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %244, i32 0, i1 %244) #3, !dbg !44
  %302 = bitcast i32 %301 to float, !dbg !44
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %244, i32 0, i1 %244) #3, !dbg !44
  %304 = bitcast i32 %303 to float, !dbg !44
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %244, i32 0, i1 %244) #3, !dbg !44
  %306 = bitcast i32 %305 to float, !dbg !44
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %244, i32 0, i1 %244) #3, !dbg !44
  %308 = bitcast i32 %307 to float, !dbg !44
  %309 = fadd float %294, 0x3F50624DE0000000, !dbg !45
  %310 = fadd float %296, 0x3F50624DE0000000, !dbg !45
  %311 = fadd float %298, 0x3F50624DE0000000, !dbg !45
  %312 = fadd float %300, 0x3F50624DE0000000, !dbg !45
  %313 = fadd float %302, 0x3F50624DE0000000, !dbg !45
  %314 = fadd float %304, 0x3F50624DE0000000, !dbg !45
  %315 = fadd float %306, 0x3F50624DE0000000, !dbg !45
  %316 = fadd float %308, 0x3F50624DE0000000, !dbg !45
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i36 = icmp eq i32 %317, 0, !dbg !46
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i39 = icmp eq i32 %318, 0, !dbg !46
  br i1 %.not.i36, label %324, label %319, !dbg !46

319:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %322, label %320, !dbg !46

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %309) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %309) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

324:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %327, label %325, !dbg !46

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %309) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %309) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

__nv_sqrtf.exit40:                                ; preds = %320, %322, %325, %327
  %.0.i38 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !46
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i41 = icmp eq i32 %329, 0, !dbg !46
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i44 = icmp eq i32 %330, 0, !dbg !46
  br i1 %.not.i41, label %336, label %331, !dbg !46

331:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %334, label %332, !dbg !46

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %310) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %310) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

336:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %339, label %337, !dbg !46

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.f(float %310) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.f(float %310) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

__nv_sqrtf.exit45:                                ; preds = %332, %334, %337, %339
  %.0.i43 = phi float [ %333, %332 ], [ %335, %334 ], [ %338, %337 ], [ %340, %339 ], !dbg !46
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i46 = icmp eq i32 %341, 0, !dbg !46
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i49 = icmp eq i32 %342, 0, !dbg !46
  br i1 %.not.i46, label %348, label %343, !dbg !46

343:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %346, label %344, !dbg !46

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %311) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %311) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

348:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %351, label %349, !dbg !46

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.f(float %311) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.f(float %311) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

__nv_sqrtf.exit50:                                ; preds = %344, %346, %349, %351
  %.0.i48 = phi float [ %345, %344 ], [ %347, %346 ], [ %350, %349 ], [ %352, %351 ], !dbg !46
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i51 = icmp eq i32 %353, 0, !dbg !46
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i54 = icmp eq i32 %354, 0, !dbg !46
  br i1 %.not.i51, label %360, label %355, !dbg !46

355:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %358, label %356, !dbg !46

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %312) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %312) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

360:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %363, label %361, !dbg !46

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.f(float %312) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.f(float %312) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

__nv_sqrtf.exit55:                                ; preds = %356, %358, %361, %363
  %.0.i53 = phi float [ %357, %356 ], [ %359, %358 ], [ %362, %361 ], [ %364, %363 ], !dbg !46
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i56 = icmp eq i32 %365, 0, !dbg !46
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i59 = icmp eq i32 %366, 0, !dbg !46
  br i1 %.not.i56, label %372, label %367, !dbg !46

367:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %370, label %368, !dbg !46

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %313) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %313) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

372:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %375, label %373, !dbg !46

373:                                              ; preds = %372
  %374 = tail call float @llvm.nvvm.sqrt.rn.f(float %313) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

375:                                              ; preds = %372
  %376 = tail call float @llvm.nvvm.sqrt.approx.f(float %313) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

__nv_sqrtf.exit60:                                ; preds = %368, %370, %373, %375
  %.0.i58 = phi float [ %369, %368 ], [ %371, %370 ], [ %374, %373 ], [ %376, %375 ], !dbg !46
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i61 = icmp eq i32 %377, 0, !dbg !46
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i64 = icmp eq i32 %378, 0, !dbg !46
  br i1 %.not.i61, label %384, label %379, !dbg !46

379:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %382, label %380, !dbg !46

380:                                              ; preds = %379
  %381 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %314) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

382:                                              ; preds = %379
  %383 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %314) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

384:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %387, label %385, !dbg !46

385:                                              ; preds = %384
  %386 = tail call float @llvm.nvvm.sqrt.rn.f(float %314) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

387:                                              ; preds = %384
  %388 = tail call float @llvm.nvvm.sqrt.approx.f(float %314) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

__nv_sqrtf.exit65:                                ; preds = %380, %382, %385, %387
  %.0.i63 = phi float [ %381, %380 ], [ %383, %382 ], [ %386, %385 ], [ %388, %387 ], !dbg !46
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i66 = icmp eq i32 %389, 0, !dbg !46
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i69 = icmp eq i32 %390, 0, !dbg !46
  br i1 %.not.i66, label %396, label %391, !dbg !46

391:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %394, label %392, !dbg !46

392:                                              ; preds = %391
  %393 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %315) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

394:                                              ; preds = %391
  %395 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %315) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

396:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %399, label %397, !dbg !46

397:                                              ; preds = %396
  %398 = tail call float @llvm.nvvm.sqrt.rn.f(float %315) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

399:                                              ; preds = %396
  %400 = tail call float @llvm.nvvm.sqrt.approx.f(float %315) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

__nv_sqrtf.exit70:                                ; preds = %392, %394, %397, %399
  %.0.i68 = phi float [ %393, %392 ], [ %395, %394 ], [ %398, %397 ], [ %400, %399 ], !dbg !46
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i71 = icmp eq i32 %401, 0, !dbg !46
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i74 = icmp eq i32 %402, 0, !dbg !46
  br i1 %.not.i71, label %408, label %403, !dbg !46

403:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %406, label %404, !dbg !46

404:                                              ; preds = %403
  %405 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %316) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

406:                                              ; preds = %403
  %407 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %316) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

408:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %411, label %409, !dbg !46

409:                                              ; preds = %408
  %410 = tail call float @llvm.nvvm.sqrt.rn.f(float %316) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

411:                                              ; preds = %408
  %412 = tail call float @llvm.nvvm.sqrt.approx.f(float %316) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

__nv_sqrtf.exit75:                                ; preds = %404, %406, %409, %411
  %.0.i73 = phi float [ %405, %404 ], [ %407, %406 ], [ %410, %409 ], [ %412, %411 ], !dbg !46
  %413 = insertelement <16 x i32> poison, i32 %278, i64 0, !dbg !40
  %414 = insertelement <16 x i32> %413, i32 %277, i64 1, !dbg !40
  %415 = insertelement <16 x i32> %414, i32 %276, i64 2, !dbg !40
  %416 = insertelement <16 x i32> %415, i32 %275, i64 3, !dbg !40
  %417 = insertelement <16 x i32> %416, i32 %274, i64 4, !dbg !40
  %418 = insertelement <16 x i32> %417, i32 %273, i64 5, !dbg !40
  %419 = insertelement <16 x i32> %418, i32 %272, i64 6, !dbg !40
  %420 = insertelement <16 x i32> %419, i32 %271, i64 7, !dbg !40
  %421 = insertelement <16 x i32> %420, i32 %73, i64 8, !dbg !40
  %422 = insertelement <16 x i32> %421, i32 %74, i64 9, !dbg !40
  %423 = insertelement <16 x i32> %422, i32 %75, i64 10, !dbg !40
  %424 = insertelement <16 x i32> %423, i32 %76, i64 11, !dbg !40
  %425 = insertelement <16 x i32> %424, i32 %77, i64 12, !dbg !40
  %426 = insertelement <16 x i32> %425, i32 %78, i64 13, !dbg !40
  %427 = insertelement <16 x i32> %426, i32 %79, i64 14, !dbg !40
  %428 = insertelement <16 x i32> %427, i32 %80, i64 15, !dbg !40
  %429 = bitcast <16 x i32> %428 to <16 x float>, !dbg !40
  %430 = insertelement <16 x i32> poison, i32 %290, i64 0, !dbg !42
  %431 = insertelement <16 x i32> %430, i32 %289, i64 1, !dbg !42
  %432 = insertelement <16 x i32> %431, i32 %288, i64 2, !dbg !42
  %433 = insertelement <16 x i32> %432, i32 %287, i64 3, !dbg !42
  %434 = insertelement <16 x i32> %433, i32 %286, i64 4, !dbg !42
  %435 = insertelement <16 x i32> %434, i32 %285, i64 5, !dbg !42
  %436 = insertelement <16 x i32> %435, i32 %284, i64 6, !dbg !42
  %437 = insertelement <16 x i32> %436, i32 %283, i64 7, !dbg !42
  %438 = insertelement <16 x i32> %437, i32 %85, i64 8, !dbg !42
  %439 = insertelement <16 x i32> %438, i32 %86, i64 9, !dbg !42
  %440 = insertelement <16 x i32> %439, i32 %87, i64 10, !dbg !42
  %441 = insertelement <16 x i32> %440, i32 %88, i64 11, !dbg !42
  %442 = insertelement <16 x i32> %441, i32 %89, i64 12, !dbg !42
  %443 = insertelement <16 x i32> %442, i32 %90, i64 13, !dbg !42
  %444 = insertelement <16 x i32> %443, i32 %91, i64 14, !dbg !42
  %445 = insertelement <16 x i32> %444, i32 %92, i64 15, !dbg !42
  %446 = bitcast <16 x i32> %445 to <16 x float>, !dbg !42
  %447 = mul i32 %32, 49152, !dbg !47
  %.decomposed77 = sub i32 %.frozen76, %447, !dbg !47
  %448 = mul i32 %31, 49152, !dbg !47
  %.decomposed79 = sub i32 %.frozen78, %448, !dbg !47
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !48
  %450 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !48
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !48
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !48
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !48
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !48
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !48
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !48
  %457 = getelementptr float, ptr addrspace(1) %8, i64 %279, !dbg !49
  %458 = getelementptr float, ptr addrspace(1) %8, i64 %281, !dbg !49
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %243, i32 0, i1 %243) #3, !dbg !50
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %243, i32 0, i1 %243) #3, !dbg !50
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %243, i32 0, i1 %243) #3, !dbg !50
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %243, i32 0, i1 %243) #3, !dbg !50
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %244, i32 0, i1 %244) #3, !dbg !50
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %244, i32 0, i1 %244) #3, !dbg !50
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %244, i32 0, i1 %244) #3, !dbg !50
  %466 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %244, i32 0, i1 %244) #3, !dbg !50
  %467 = getelementptr float, ptr addrspace(1) %9, i64 %279, !dbg !51
  %468 = getelementptr float, ptr addrspace(1) %9, i64 %281, !dbg !51
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %243, i32 0, i1 %243) #3, !dbg !52
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %243, i32 0, i1 %243) #3, !dbg !52
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %243, i32 0, i1 %243) #3, !dbg !52
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %243, i32 0, i1 %243) #3, !dbg !52
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %244, i32 0, i1 %244) #3, !dbg !52
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %244, i32 0, i1 %244) #3, !dbg !52
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %244, i32 0, i1 %244) #3, !dbg !52
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %244, i32 0, i1 %244) #3, !dbg !52
  %477 = fsub <16 x float> %429, %446, !dbg !53
  %478 = insertelement <16 x float> poison, float %456, i64 0, !dbg !54
  %479 = insertelement <16 x float> %478, float %455, i64 1, !dbg !54
  %480 = insertelement <16 x float> %479, float %454, i64 2, !dbg !54
  %481 = insertelement <16 x float> %480, float %453, i64 3, !dbg !54
  %482 = insertelement <16 x float> %481, float %452, i64 4, !dbg !54
  %483 = insertelement <16 x float> %482, float %451, i64 5, !dbg !54
  %484 = insertelement <16 x float> %483, float %450, i64 6, !dbg !54
  %485 = insertelement <16 x float> %484, float %449, i64 7, !dbg !54
  %486 = insertelement <16 x float> %485, float %215, i64 8, !dbg !54
  %487 = insertelement <16 x float> %486, float %216, i64 9, !dbg !54
  %488 = insertelement <16 x float> %487, float %217, i64 10, !dbg !54
  %489 = insertelement <16 x float> %488, float %218, i64 11, !dbg !54
  %490 = insertelement <16 x float> %489, float %219, i64 12, !dbg !54
  %491 = insertelement <16 x float> %490, float %220, i64 13, !dbg !54
  %492 = insertelement <16 x float> %491, float %221, i64 14, !dbg !54
  %493 = insertelement <16 x float> %492, float %222, i64 15, !dbg !54
  %494 = fmul <16 x float> %477, %493, !dbg !54
  %495 = insertelement <16 x i32> poison, i32 %466, i64 0, !dbg !50
  %496 = insertelement <16 x i32> %495, i32 %465, i64 1, !dbg !50
  %497 = insertelement <16 x i32> %496, i32 %464, i64 2, !dbg !50
  %498 = insertelement <16 x i32> %497, i32 %463, i64 3, !dbg !50
  %499 = insertelement <16 x i32> %498, i32 %462, i64 4, !dbg !50
  %500 = insertelement <16 x i32> %499, i32 %461, i64 5, !dbg !50
  %501 = insertelement <16 x i32> %500, i32 %460, i64 6, !dbg !50
  %502 = insertelement <16 x i32> %501, i32 %459, i64 7, !dbg !50
  %503 = insertelement <16 x i32> %502, i32 %225, i64 8, !dbg !50
  %504 = insertelement <16 x i32> %503, i32 %226, i64 9, !dbg !50
  %505 = insertelement <16 x i32> %504, i32 %227, i64 10, !dbg !50
  %506 = insertelement <16 x i32> %505, i32 %228, i64 11, !dbg !50
  %507 = insertelement <16 x i32> %506, i32 %229, i64 12, !dbg !50
  %508 = insertelement <16 x i32> %507, i32 %230, i64 13, !dbg !50
  %509 = insertelement <16 x i32> %508, i32 %231, i64 14, !dbg !50
  %510 = insertelement <16 x i32> %509, i32 %232, i64 15, !dbg !50
  %511 = bitcast <16 x i32> %510 to <16 x float>, !dbg !50
  %512 = fmul <16 x float> %494, %511, !dbg !55
  %513 = insertelement <16 x i32> poison, i32 %476, i64 0, !dbg !52
  %514 = insertelement <16 x i32> %513, i32 %475, i64 1, !dbg !52
  %515 = insertelement <16 x i32> %514, i32 %474, i64 2, !dbg !52
  %516 = insertelement <16 x i32> %515, i32 %473, i64 3, !dbg !52
  %517 = insertelement <16 x i32> %516, i32 %472, i64 4, !dbg !52
  %518 = insertelement <16 x i32> %517, i32 %471, i64 5, !dbg !52
  %519 = insertelement <16 x i32> %518, i32 %470, i64 6, !dbg !52
  %520 = insertelement <16 x i32> %519, i32 %469, i64 7, !dbg !52
  %521 = insertelement <16 x i32> %520, i32 %235, i64 8, !dbg !52
  %522 = insertelement <16 x i32> %521, i32 %236, i64 9, !dbg !52
  %523 = insertelement <16 x i32> %522, i32 %237, i64 10, !dbg !52
  %524 = insertelement <16 x i32> %523, i32 %238, i64 11, !dbg !52
  %525 = insertelement <16 x i32> %524, i32 %239, i64 12, !dbg !52
  %526 = insertelement <16 x i32> %525, i32 %240, i64 13, !dbg !52
  %527 = insertelement <16 x i32> %526, i32 %241, i64 14, !dbg !52
  %528 = insertelement <16 x i32> %527, i32 %242, i64 15, !dbg !52
  %529 = bitcast <16 x i32> %528 to <16 x float>, !dbg !52
  %530 = fadd <16 x float> %512, %529, !dbg !56
  %531 = fcmp olt <16 x float> %530, zeroinitializer, !dbg !57
  %532 = extractelement <16 x i1> %531, i64 15, !dbg !61
  %533 = extractelement <16 x float> %530, i64 15, !dbg !61
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !61
  %535 = extractelement <16 x i1> %531, i64 14, !dbg !61
  %536 = extractelement <16 x float> %530, i64 14, !dbg !61
  %537 = select i1 %535, float 0.000000e+00, float %536, !dbg !61
  %538 = extractelement <16 x i1> %531, i64 13, !dbg !61
  %539 = extractelement <16 x float> %530, i64 13, !dbg !61
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !61
  %541 = extractelement <16 x i1> %531, i64 12, !dbg !61
  %542 = extractelement <16 x float> %530, i64 12, !dbg !61
  %543 = select i1 %541, float 0.000000e+00, float %542, !dbg !61
  %544 = extractelement <16 x i1> %531, i64 11, !dbg !61
  %545 = extractelement <16 x float> %530, i64 11, !dbg !61
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !61
  %547 = extractelement <16 x i1> %531, i64 10, !dbg !61
  %548 = extractelement <16 x float> %530, i64 10, !dbg !61
  %549 = select i1 %547, float 0.000000e+00, float %548, !dbg !61
  %550 = extractelement <16 x i1> %531, i64 9, !dbg !61
  %551 = extractelement <16 x float> %530, i64 9, !dbg !61
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !61
  %553 = extractelement <16 x i1> %531, i64 8, !dbg !61
  %554 = extractelement <16 x float> %530, i64 8, !dbg !61
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !61
  %556 = extractelement <16 x i1> %531, i64 7, !dbg !63
  %557 = extractelement <16 x float> %530, i64 7, !dbg !63
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !63
  %559 = extractelement <16 x i1> %531, i64 6, !dbg !63
  %560 = extractelement <16 x float> %530, i64 6, !dbg !63
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !63
  %562 = extractelement <16 x i1> %531, i64 5, !dbg !63
  %563 = extractelement <16 x float> %530, i64 5, !dbg !63
  %564 = select i1 %562, float 0.000000e+00, float %563, !dbg !63
  %565 = extractelement <16 x i1> %531, i64 4, !dbg !63
  %566 = extractelement <16 x float> %530, i64 4, !dbg !63
  %567 = select i1 %565, float 0.000000e+00, float %566, !dbg !63
  %568 = extractelement <16 x i1> %531, i64 3, !dbg !63
  %569 = extractelement <16 x float> %530, i64 3, !dbg !63
  %570 = select i1 %568, float 0.000000e+00, float %569, !dbg !63
  %571 = extractelement <16 x i1> %531, i64 2, !dbg !63
  %572 = extractelement <16 x float> %530, i64 2, !dbg !63
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !63
  %574 = extractelement <16 x i1> %531, i64 1, !dbg !63
  %575 = extractelement <16 x float> %530, i64 1, !dbg !63
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !63
  %577 = extractelement <16 x i1> %531, i64 0, !dbg !63
  %578 = extractelement <16 x float> %530, i64 0, !dbg !63
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !63
  %580 = select i1 %33, float %555, float %558, !dbg !64
  %581 = select i1 %33, float %552, float %561, !dbg !64
  %582 = select i1 %33, float %549, float %564, !dbg !64
  %583 = select i1 %33, float %546, float %567, !dbg !64
  %584 = select i1 %34, float %543, float %570, !dbg !64
  %585 = select i1 %34, float %540, float %573, !dbg !64
  %586 = select i1 %34, float %537, float %576, !dbg !64
  %587 = select i1 %34, float %534, float %579, !dbg !64
  %588 = shl i32 %31, 17, !dbg !65
  %589 = shl i32 %32, 17, !dbg !65
  %590 = add i32 %588, %.decomposed79, !dbg !66
  %591 = add i32 %589, %.decomposed77, !dbg !66
  %592 = sext i32 %590 to i64, !dbg !67
  %593 = getelementptr float, ptr addrspace(1) %10, i64 %592, !dbg !67
  %594 = sext i32 %591 to i64, !dbg !67
  %595 = getelementptr float, ptr addrspace(1) %10, i64 %594, !dbg !67
  %596 = bitcast float %580 to i32, !dbg !68
  %597 = bitcast float %581 to i32, !dbg !68
  %598 = bitcast float %582 to i32, !dbg !68
  %599 = bitcast float %583 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %596, i32 %597, i32 %598, i32 %599, ptr addrspace(1) %593, i1 true) #3, !dbg !68
  %600 = bitcast float %584 to i32, !dbg !68
  %601 = bitcast float %585 to i32, !dbg !68
  %602 = bitcast float %586 to i32, !dbg !68
  %603 = bitcast float %587 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %600, i32 %601, i32 %602, i32 %603, ptr addrspace(1) %595, i1 true) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4oa7zdbn6si3pjg3mjuk72qywoluj2lntc63ss5z24uoog2ib73.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused_cat_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_47", linkageName: "triton_poi_fused_cat_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 57, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 61, scope: !7)
!38 = !DILocation(line: 56, column: 52, scope: !7)
!39 = !DILocation(line: 56, column: 31, scope: !7)
!40 = !DILocation(line: 56, column: 67, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 45, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 45, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 27, column: 19, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 31, scope: !7)
!50 = !DILocation(line: 68, column: 45, scope: !7)
!51 = !DILocation(line: 70, column: 31, scope: !7)
!52 = !DILocation(line: 70, column: 45, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 71, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 73, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !62)
!62 = !DILocation(line: 50, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 77, column: 37, scope: !7)
!66 = !DILocation(line: 77, column: 30, scope: !7)
!67 = !DILocation(line: 77, column: 25, scope: !7)
!68 = !DILocation(line: 77, column: 49, scope: !7)
!69 = !DILocation(line: 77, column: 4, scope: !7)
