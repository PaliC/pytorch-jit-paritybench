; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 16, !dbg !14
  %14 = shl i32 %12, 2, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #3, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #3, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = or disjoint i32 %14, 1, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #3, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #3, !dbg !24
  %29 = bitcast i32 %28 to float, !dbg !24
  %30 = or disjoint i32 %14, 2, !dbg !25
  %31 = sext i32 %30 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #3, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #3, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = or disjoint i32 %14, 3, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %13) #3, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #3, !dbg !34
  %45 = bitcast i32 %44 to float, !dbg !34
  %46 = fadd float %18, %21, !dbg !35
  %47 = fadd float %26, %29, !dbg !36
  %48 = fadd float %46, %47, !dbg !37
  %49 = fadd float %34, %37, !dbg !38
  %50 = fadd float %48, %49, !dbg !39
  %51 = fadd float %42, %45, !dbg !40
  %52 = fadd float %50, %51, !dbg !41
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 4.000000e+00) #3, !dbg !42
  %54 = fsub float %46, %53, !dbg !43
  %55 = fmul float %54, %54, !dbg !44
  %56 = fsub float %47, %53, !dbg !45
  %57 = fmul float %56, %56, !dbg !46
  %58 = fadd float %55, %57, !dbg !47
  %59 = fsub float %49, %53, !dbg !48
  %60 = fmul float %59, %59, !dbg !49
  %61 = fadd float %60, %58, !dbg !50
  %62 = fsub float %51, %53, !dbg !51
  %63 = fmul float %62, %62, !dbg !52
  %64 = fadd float %63, %61, !dbg !53
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 4.000000e+00) #3, !dbg !54
  %66 = fadd float %18, %26, !dbg !55
  %67 = fadd float %66, %34, !dbg !56
  %68 = fadd float %67, %42, !dbg !57
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 4.000000e+00) #3, !dbg !58
  %70 = fsub float %18, %69, !dbg !59
  %71 = fmul float %70, %70, !dbg !60
  %72 = fsub float %26, %69, !dbg !61
  %73 = fmul float %72, %72, !dbg !62
  %74 = fadd float %71, %73, !dbg !63
  %75 = fsub float %34, %69, !dbg !64
  %76 = fmul float %75, %75, !dbg !65
  %77 = fadd float %76, %74, !dbg !66
  %78 = fsub float %42, %69, !dbg !67
  %79 = fmul float %78, %78, !dbg !68
  %80 = fadd float %79, %77, !dbg !69
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #3, !dbg !70
  %82 = fadd float %81, 0x3EB0C6F7A0000000, !dbg !71
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i = icmp eq i32 %83, 0, !dbg !72
  br i1 %.not.i, label %86, label %84, !dbg !72

84:                                               ; preds = %7
  %85 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

86:                                               ; preds = %7
  %87 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

__nv_rsqrtf.exit:                                 ; preds = %84, %86
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], !dbg !72
  %88 = and i32 %10, 16, !dbg !12
  %89 = sext i32 %12 to i64, !dbg !73
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !73
  %91 = icmp eq i32 %88, 0, !dbg !74
  %92 = bitcast float %53 to i32, !dbg !74
  %93 = and i1 %91, %13, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %90, i1 %93) #3, !dbg !74
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !75
  %95 = bitcast float %65 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %94, i1 %93) #3, !dbg !76
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !77
  %97 = bitcast float %69 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %96, i1 %93) #3, !dbg !78
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !79
  %99 = bitcast float %.0.i to i32, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %98, i1 %93) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czr4mu6hppkugdgrre4c6ftwvzsu3gajunlu5jburwjw7fvv3xtv.py", directory: "inductor_cache/zr")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_2", linkageName: "triton_poi_fused_add_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 20, scope: !7)
!41 = !DILocation(line: 39, column: 20, scope: !7)
!42 = !DILocation(line: 41, column: 20, scope: !7)
!43 = !DILocation(line: 42, column: 19, scope: !7)
!44 = !DILocation(line: 43, column: 20, scope: !7)
!45 = !DILocation(line: 44, column: 19, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 54, column: 19, scope: !7)
!56 = !DILocation(line: 55, column: 20, scope: !7)
!57 = !DILocation(line: 56, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 58, column: 19, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 19, scope: !7)
!62 = !DILocation(line: 61, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 19, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 73, column: 25, scope: !7)
!74 = !DILocation(line: 73, column: 37, scope: !7)
!75 = !DILocation(line: 74, column: 25, scope: !7)
!76 = !DILocation(line: 74, column: 37, scope: !7)
!77 = !DILocation(line: 75, column: 25, scope: !7)
!78 = !DILocation(line: 75, column: 37, scope: !7)
!79 = !DILocation(line: 76, column: 25, scope: !7)
!80 = !DILocation(line: 76, column: 37, scope: !7)
!81 = !DILocation(line: 76, column: 4, scope: !7)
