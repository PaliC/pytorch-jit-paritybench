; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_mul_sigmoid_tanh_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 48, !dbg !14
  %11 = sext i32 %9 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %12, i1 %10) #3, !dbg !16
  %14 = extractvalue { i32, i32 } %13, 0, !dbg !16
  %15 = extractvalue { i32, i32 } %13, 1, !dbg !16
  %16 = bitcast i32 %14 to float, !dbg !16
  %17 = bitcast i32 %15 to float, !dbg !16
  %18 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not.i = icmp eq i32 %18, 0, !dbg !17
  %19 = tail call float @llvm.nvvm.fabs.ftz.f(float %16) #3, !dbg !17
  %20 = tail call float @llvm.nvvm.fabs.f(float %16) #3, !dbg !17
  %.01.i = select i1 %.not.i, float %20, float %19, !dbg !17
  %21 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !17
  br i1 %21, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !17

__internal_fmad.exit1.i:                          ; preds = %3
  %22 = fmul float %.01.i, 0x4007154760000000, !dbg !17
  %23 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %22) #3, !dbg !17
  %24 = fadd float %23, 1.000000e+00, !dbg !17
  %25 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %24) #4, !dbg !17, !srcloc !18
  %26 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not6.i = icmp eq i32 %26, 0, !dbg !17
  %27 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %25, float -2.000000e+00, float 1.000000e+00) #3, !dbg !17
  %28 = tail call float @llvm.nvvm.fma.rn.f(float %25, float -2.000000e+00, float 1.000000e+00) #3, !dbg !17
  %.03.i = select i1 %.not6.i, float %28, float %27, !dbg !17
  %29 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !17
  %s.0.i = select i1 %29, float 1.000000e+00, float %.03.i, !dbg !17
  %30 = bitcast float %s.0.i to i32, !dbg !17
  %31 = and i32 %14, -2147483648, !dbg !17
  %32 = or i32 %31, %30, !dbg !17
  %33 = bitcast i32 %32 to float, !dbg !17
  br label %__nv_tanhf.exit, !dbg !17

__internal_fmad.exit3.i:                          ; preds = %3
  %34 = fmul float %16, %16, !dbg !17
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not1.i = icmp eq i32 %35, 0, !dbg !17
  %36 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %34, float 0xBFAAC795C0000000) #3, !dbg !17
  %37 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %34, float 0xBFAAC795C0000000) #3, !dbg !17
  %.06.i = select i1 %.not1.i, float %37, float %36, !dbg !17
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not2.i = icmp eq i32 %38, 0, !dbg !17
  %39 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %34, float 0x3FC10B2820000000) #3, !dbg !17
  %40 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %34, float 0x3FC10B2820000000) #3, !dbg !17
  %.05.i = select i1 %.not2.i, float %40, float %39, !dbg !17
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not3.i = icmp eq i32 %41, 0, !dbg !17
  %42 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %34, float 0xBFD5553DA0000000) #3, !dbg !17
  %43 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %34, float 0xBFD5553DA0000000) #3, !dbg !17
  %.0.i = select i1 %.not3.i, float %43, float %42, !dbg !17
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not4.i = icmp eq i32 %44, 0, !dbg !17
  %45 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %34, float 0.000000e+00) #3, !dbg !17
  %46 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %34, float 0.000000e+00) #3, !dbg !17
  %.04.i = select i1 %.not4.i, float %46, float %45, !dbg !17
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not5.i = icmp eq i32 %47, 0, !dbg !17
  %48 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %16, float %16) #3, !dbg !17
  %49 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %16, float %16) #3, !dbg !17
  %.02.i = select i1 %.not5.i, float %49, float %48, !dbg !17
  br label %__nv_tanhf.exit, !dbg !17

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %33, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !17
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not.i1 = icmp eq i32 %50, 0, !dbg !17
  %51 = tail call float @llvm.nvvm.fabs.ftz.f(float %17) #3, !dbg !17
  %52 = tail call float @llvm.nvvm.fabs.f(float %17) #3, !dbg !17
  %.01.i2 = select i1 %.not.i1, float %52, float %51, !dbg !17
  %53 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !17
  br i1 %53, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !17

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %54 = fmul float %.01.i2, 0x4007154760000000, !dbg !17
  %55 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %54) #3, !dbg !17
  %56 = fadd float %55, 1.000000e+00, !dbg !17
  %57 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %56) #4, !dbg !17, !srcloc !18
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not6.i4 = icmp eq i32 %58, 0, !dbg !17
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %57, float -2.000000e+00, float 1.000000e+00) #3, !dbg !17
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %57, float -2.000000e+00, float 1.000000e+00) #3, !dbg !17
  %.03.i5 = select i1 %.not6.i4, float %60, float %59, !dbg !17
  %61 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !17
  %s.0.i6 = select i1 %61, float 1.000000e+00, float %.03.i5, !dbg !17
  %62 = bitcast float %s.0.i6 to i32, !dbg !17
  %63 = and i32 %15, -2147483648, !dbg !17
  %64 = or i32 %63, %62, !dbg !17
  %65 = bitcast i32 %64 to float, !dbg !17
  br label %__nv_tanhf.exit19, !dbg !17

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %66 = fmul float %17, %17, !dbg !17
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not1.i9 = icmp eq i32 %67, 0, !dbg !17
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %66, float 0xBFAAC795C0000000) #3, !dbg !17
  %69 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %66, float 0xBFAAC795C0000000) #3, !dbg !17
  %.06.i10 = select i1 %.not1.i9, float %69, float %68, !dbg !17
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not2.i11 = icmp eq i32 %70, 0, !dbg !17
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %66, float 0x3FC10B2820000000) #3, !dbg !17
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %66, float 0x3FC10B2820000000) #3, !dbg !17
  %.05.i12 = select i1 %.not2.i11, float %72, float %71, !dbg !17
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not3.i13 = icmp eq i32 %73, 0, !dbg !17
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %66, float 0xBFD5553DA0000000) #3, !dbg !17
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %66, float 0xBFD5553DA0000000) #3, !dbg !17
  %.0.i14 = select i1 %.not3.i13, float %75, float %74, !dbg !17
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not4.i15 = icmp eq i32 %76, 0, !dbg !17
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %66, float 0.000000e+00) #3, !dbg !17
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %66, float 0.000000e+00) #3, !dbg !17
  %.04.i16 = select i1 %.not4.i15, float %78, float %77, !dbg !17
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !17
  %.not5.i17 = icmp eq i32 %79, 0, !dbg !17
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %17, float %17) #3, !dbg !17
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %17, float %17) #3, !dbg !17
  %.02.i18 = select i1 %.not5.i17, float %81, float %80, !dbg !17
  br label %__nv_tanhf.exit19, !dbg !17

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %65, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !17
  %82 = fsub float 0.000000e+00, %16, !dbg !19
  %83 = fsub float 0.000000e+00, %17, !dbg !19
  %84 = fmul float %82, 0x3FF7154760000000, !dbg !23
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #3, !dbg !23
  %86 = fmul float %83, 0x3FF7154760000000, !dbg !23
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #3, !dbg !23
  %88 = fadd float %85, 1.000000e+00, !dbg !24
  %89 = fadd float %87, 1.000000e+00, !dbg !24
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #3, !dbg !25
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #3, !dbg !25
  %92 = fmul float %s.1.i, %90, !dbg !26
  %93 = fmul float %s.1.i7, %91, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !27
  %95 = bitcast float %92 to i32, !dbg !28
  %96 = bitcast float %93 to i32, !dbg !28
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %96, ptr addrspace(1) %94, i1 %10) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjsq6nqwgmmjsfj4ggv2txjnwol4nddpyadfaxhpuweoy3dvgrta.py", directory: "inductor_cache/js")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_tanh_0", linkageName: "triton_poi_fused_mul_sigmoid_tanh_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !{i32 21046}
!19 = !DILocation(line: 47, column: 30, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 27, column: 22, scope: !7)
!23 = !DILocation(line: 47, column: 29, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 47, column: 20, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 47, column: 16, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 28, column: 18, scope: !7)
!27 = !DILocation(line: 29, column: 25, scope: !7)
!28 = !DILocation(line: 29, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 4, scope: !7)
