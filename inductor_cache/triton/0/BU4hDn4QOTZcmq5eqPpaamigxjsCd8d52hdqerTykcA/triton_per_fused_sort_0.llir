; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_sort_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = icmp slt i32 %5, 64, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 1, !dbg !12
  %9 = and i32 %7, 3, !dbg !12
  %10 = shl i32 %5, 2, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %6, i32 0, i1 %6) #2, !dbg !16
  %15 = trunc nuw nsw i32 %9 to i16, !dbg !17
  %16 = lshr i32 %7, 1, !dbg !18
  %.lobit = and i32 %16, 1, !dbg !18
  %17 = xor i32 %.lobit, 1, !dbg !23
  %18 = xor i32 %8, 1, !dbg !23
  %19 = mul nuw nsw i32 %14, %18, !dbg !25
  %20 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %19, i32 1, i32 31), !dbg !26
  %21 = add i32 %19, %20, !dbg !29
  %22 = mul nuw nsw i32 %14, %8, !dbg !31
  %23 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 1, i32 31), !dbg !26
  %24 = add i32 %23, %22, !dbg !29
  %25 = bitcast i32 %21 to float, !dbg !32
  %26 = bitcast i32 %24 to float, !dbg !33
  %27 = trunc nuw nsw i32 %17 to i16, !dbg !34
  %28 = trunc nuw nsw i32 %18 to i16, !dbg !34
  %29 = mul nuw nsw i16 %28, %15, !dbg !35
  %30 = zext nneg i16 %29 to i32, !dbg !26
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 1, i32 31), !dbg !26
  %32 = trunc i32 %31 to i16, !dbg !26
  %33 = add i16 %29, %32, !dbg !29
  %34 = trunc nuw nsw i32 %8 to i16, !dbg !36
  %35 = trunc nuw nsw i32 %.lobit to i16, !dbg !36
  %36 = mul nuw nsw i16 %15, %34, !dbg !37
  %37 = zext nneg i16 %36 to i32, !dbg !26
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 1, i32 31), !dbg !26
  %39 = trunc i32 %38 to i16, !dbg !26
  %40 = add i16 %36, %39, !dbg !29
  %41 = trunc i32 %16 to i1, !dbg !38
  %42 = fcmp uge float %25, %26, !dbg !38
  %.not = xor i1 %42, %41, !dbg !38
  %43 = xor i32 %24, %21, !dbg !39
  %44 = select i1 %.not, i32 0, i32 %43, !dbg !40
  %45 = xor i32 %44, %14, !dbg !41
  %46 = xor i16 %40, %33, !dbg !42
  %47 = select i1 %.not, i16 0, i16 %46, !dbg !43
  %48 = xor i16 %47, %15, !dbg !44
  %49 = mul nuw nsw i32 %45, %17, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !26
  %51 = add i32 %49, %50, !dbg !29
  %52 = mul nuw nsw i32 %45, %.lobit, !dbg !31
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !26
  %54 = add i32 %52, %53, !dbg !29
  %55 = bitcast i32 %51 to float, !dbg !32
  %56 = bitcast i32 %54 to float, !dbg !33
  %57 = mul nuw nsw i16 %48, %27, !dbg !35
  %58 = zext i16 %57 to i32, !dbg !26
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !26
  %60 = trunc i32 %59 to i16, !dbg !26
  %61 = add i16 %57, %60, !dbg !29
  %62 = mul nuw nsw i16 %48, %35, !dbg !37
  %63 = zext i16 %62 to i32, !dbg !26
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !26
  %65 = trunc i32 %64 to i16, !dbg !26
  %66 = add i16 %62, %65, !dbg !29
  %67 = fcmp olt float %55, %56, !dbg !45
  %68 = xor i32 %51, %54, !dbg !39
  %69 = select i1 %67, i32 %68, i32 0, !dbg !40
  %70 = xor i32 %69, %45, !dbg !41
  %71 = xor i16 %61, %66, !dbg !42
  %72 = select i1 %67, i16 %71, i16 0, !dbg !43
  %73 = xor i16 %72, %48, !dbg !44
  %74 = mul nuw nsw i32 %70, %18, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !26
  %76 = add i32 %74, %75, !dbg !29
  %77 = mul nuw nsw i32 %70, %8, !dbg !31
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !26
  %79 = add i32 %77, %78, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !32
  %81 = bitcast i32 %79 to float, !dbg !33
  %82 = mul nuw nsw i16 %73, %28, !dbg !35
  %83 = zext i16 %82 to i32, !dbg !26
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !26
  %85 = trunc i32 %84 to i16, !dbg !26
  %86 = add i16 %82, %85, !dbg !29
  %87 = mul nuw nsw i16 %73, %34, !dbg !37
  %88 = zext i16 %87 to i32, !dbg !26
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !26
  %90 = trunc i32 %89 to i16, !dbg !26
  %91 = add i16 %87, %90, !dbg !29
  %92 = fcmp olt float %80, %81, !dbg !45
  %93 = xor i16 %86, %91, !dbg !42
  %94 = select i1 %92, i16 %93, i16 0, !dbg !43
  %95 = xor i16 %94, %73, !dbg !44
  %96 = getelementptr i16, ptr addrspace(1) %1, i64 %12, !dbg !46
  %97 = and i32 %7, 60, !dbg !47
  %98 = icmp eq i32 %97, 0, !dbg !47
  %99 = and i1 %98, %6, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %95, ptr addrspace(1) %96, i1 %99) #2, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvswek3lhq6bxpaltqqk45ch53gsssom55it5im4uypb4vaitunr.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_per_fused_sort_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sort_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sort_0", linkageName: "triton_per_fused_sort_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 575, column: 44, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 36, column: 67, scope: !7)
!23 = !DILocation(line: 505, column: 21, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!25 = !DILocation(line: 506, column: 40, scope: !24, inlinedAt: !22)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !22)
!27 = distinct !DILexicalBlockFile(scope: !24, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !22)
!30 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!31 = !DILocation(line: 507, column: 41, scope: !24, inlinedAt: !22)
!32 = !DILocation(line: 510, column: 20, scope: !24, inlinedAt: !22)
!33 = !DILocation(line: 511, column: 22, scope: !24, inlinedAt: !22)
!34 = !DILocation(line: 516, column: 36, scope: !24, inlinedAt: !22)
!35 = !DILocation(line: 516, column: 23, scope: !24, inlinedAt: !22)
!36 = !DILocation(line: 519, column: 37, scope: !24, inlinedAt: !22)
!37 = !DILocation(line: 519, column: 23, scope: !24, inlinedAt: !22)
!38 = !DILocation(line: 547, column: 28, scope: !24, inlinedAt: !22)
!39 = !DILocation(line: 548, column: 38, scope: !24, inlinedAt: !22)
!40 = !DILocation(line: 548, column: 46, scope: !24, inlinedAt: !22)
!41 = !DILocation(line: 548, column: 15, scope: !24, inlinedAt: !22)
!42 = !DILocation(line: 549, column: 48, scope: !24, inlinedAt: !22)
!43 = !DILocation(line: 549, column: 59, scope: !24, inlinedAt: !22)
!44 = !DILocation(line: 549, column: 22, scope: !24, inlinedAt: !22)
!45 = !DILocation(line: 536, column: 22, scope: !24, inlinedAt: !22)
!46 = !DILocation(line: 37, column: 25, scope: !7)
!47 = !DILocation(line: 37, column: 43, scope: !7)
!48 = !DILocation(line: 37, column: 4, scope: !7)
