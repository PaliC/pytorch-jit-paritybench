; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %19 = shl i32 %18, 5, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = lshr i32 %20, 3, !dbg !12
  %22 = and i32 %21, 15, !dbg !12
  %23 = or disjoint i32 %22, 16, !dbg !12
  %24 = shl i32 %20, 2, !dbg !12
  %25 = and i32 %24, 28, !dbg !12
  %26 = or disjoint i32 %19, %22, !dbg !13
  %27 = or disjoint i32 %19, %23, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %29 = shl i32 %28, 5, !dbg !15
  %30 = or disjoint i32 %29, %25, !dbg !16
  %31 = icmp slt i32 %30, 512, !dbg !17
  %32 = sdiv i32 %26, 4096, !dbg !18
  %33 = sdiv i32 %27, 4096, !dbg !18
  %34 = shl i32 %26, 9, !dbg !19
  %35 = shl i32 %27, 9, !dbg !19
  %36 = add i32 %30, %34, !dbg !20
  %37 = add i32 %30, %35, !dbg !20
  %38 = sext i32 %36 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %37 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %31) #4, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %31) #4, !dbg !22
  %44 = sext i32 %30 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %31) #4, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %31) #4, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %31) #4, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %31) #4, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !29
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %31) #4, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !31
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %31) #4, !dbg !32
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !32
  %61 = bitcast i32 %57 to float, !dbg !32
  %62 = bitcast i32 %58 to float, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !33
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %31) #4, !dbg !34
  %67 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !35
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %31) #4, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %8, i64 %44, !dbg !37
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %31) #4, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %9, i64 %44, !dbg !39
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %31) #4, !dbg !40
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !40
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !40
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !40
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !40
  %77 = bitcast i32 %73 to float, !dbg !40
  %78 = bitcast i32 %74 to float, !dbg !40
  %79 = bitcast i32 %75 to float, !dbg !40
  %80 = bitcast i32 %76 to float, !dbg !40
  %81 = getelementptr float, ptr addrspace(1) %10, i64 %44, !dbg !41
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %31) #4, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %11, i64 %44, !dbg !43
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %31) #4, !dbg !44
  %85 = shl nsw i32 %32, 9, !dbg !45
  %86 = shl nsw i32 %33, 9, !dbg !45
  %87 = add i32 %85, %30, !dbg !46
  %88 = add i32 %86, %30, !dbg !46
  %89 = sext i32 %87 to i64, !dbg !47
  %90 = getelementptr float, ptr addrspace(1) %12, i64 %89, !dbg !47
  %91 = sext i32 %88 to i64, !dbg !47
  %92 = getelementptr float, ptr addrspace(1) %12, i64 %91, !dbg !47
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %31) #4, !dbg !48
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %31) #4, !dbg !48
  %95 = getelementptr float, ptr addrspace(1) %13, i64 %38, !dbg !49
  %96 = getelementptr float, ptr addrspace(1) %13, i64 %40, !dbg !49
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %31) #4, !dbg !50
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %31) #4, !dbg !50
  %99 = fadd float %61, 0x3EE4F8B580000000, !dbg !51
  %100 = fadd float %62, 0x3EE4F8B580000000, !dbg !51
  %101 = fadd float %63, 0x3EE4F8B580000000, !dbg !51
  %102 = fadd float %64, 0x3EE4F8B580000000, !dbg !51
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i = icmp eq i32 %103, 0, !dbg !52
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i = icmp eq i32 %104, 0, !dbg !52
  br i1 %.not.i, label %110, label %105, !dbg !52

105:                                              ; preds = %17
  br i1 %.not1.i, label %108, label %106, !dbg !52

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

110:                                              ; preds = %17
  br i1 %.not1.i, label %113, label %111, !dbg !52

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

__nv_sqrtf.exit:                                  ; preds = %106, %108, %111, %113
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !52
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i15 = icmp eq i32 %115, 0, !dbg !52
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i18 = icmp eq i32 %116, 0, !dbg !52
  br i1 %.not.i15, label %122, label %117, !dbg !52

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %120, label %118, !dbg !52

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %125, label %123, !dbg !52

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !52
  br label %__nv_sqrtf.exit19, !dbg !52

__nv_sqrtf.exit19:                                ; preds = %118, %120, %123, %125
  %.0.i17 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !52
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i20 = icmp eq i32 %127, 0, !dbg !52
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i23 = icmp eq i32 %128, 0, !dbg !52
  br i1 %.not.i20, label %134, label %129, !dbg !52

129:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %132, label %130, !dbg !52

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

134:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %137, label %135, !dbg !52

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #4, !dbg !52
  br label %__nv_sqrtf.exit24, !dbg !52

__nv_sqrtf.exit24:                                ; preds = %130, %132, %135, %137
  %.0.i22 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !52
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i25 = icmp eq i32 %139, 0, !dbg !52
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i28 = icmp eq i32 %140, 0, !dbg !52
  br i1 %.not.i25, label %146, label %141, !dbg !52

141:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %144, label %142, !dbg !52

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

146:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %149, label %147, !dbg !52

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #4, !dbg !52
  br label %__nv_sqrtf.exit29, !dbg !52

__nv_sqrtf.exit29:                                ; preds = %142, %144, %147, %149
  %.0.i27 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !52
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !53
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !53
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !53
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !53
  %155 = fadd float %77, 0x3EE4F8B580000000, !dbg !54
  %156 = fadd float %78, 0x3EE4F8B580000000, !dbg !54
  %157 = fadd float %79, 0x3EE4F8B580000000, !dbg !54
  %158 = fadd float %80, 0x3EE4F8B580000000, !dbg !54
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i30 = icmp eq i32 %159, 0, !dbg !55
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i33 = icmp eq i32 %160, 0, !dbg !55
  br i1 %.not.i30, label %166, label %161, !dbg !55

161:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %164, label %162, !dbg !55

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

166:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %169, label %167, !dbg !55

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #4, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

__nv_sqrtf.exit34:                                ; preds = %162, %164, %167, %169
  %.0.i32 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !55
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i35 = icmp eq i32 %171, 0, !dbg !55
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i38 = icmp eq i32 %172, 0, !dbg !55
  br i1 %.not.i35, label %178, label %173, !dbg !55

173:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %176, label %174, !dbg !55

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

178:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %181, label %179, !dbg !55

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #4, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

__nv_sqrtf.exit39:                                ; preds = %174, %176, %179, %181
  %.0.i37 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !55
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i40 = icmp eq i32 %183, 0, !dbg !55
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i43 = icmp eq i32 %184, 0, !dbg !55
  br i1 %.not.i40, label %190, label %185, !dbg !55

185:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %188, label %186, !dbg !55

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

190:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %193, label %191, !dbg !55

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #4, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

__nv_sqrtf.exit44:                                ; preds = %186, %188, %191, %193
  %.0.i42 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !55
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i45 = icmp eq i32 %195, 0, !dbg !55
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i48 = icmp eq i32 %196, 0, !dbg !55
  br i1 %.not.i45, label %202, label %197, !dbg !55

197:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %200, label %198, !dbg !55

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

202:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %205, label %203, !dbg !55

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #4, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

__nv_sqrtf.exit49:                                ; preds = %198, %200, %203, %205
  %.0.i47 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !55
  %207 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %208 = bitcast i32 %207 to float, !dbg !26
  %209 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %210 = bitcast i32 %209 to float, !dbg !28
  %211 = fadd float %208, %210, !dbg !56
  %212 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !38
  %213 = bitcast i32 %212 to float, !dbg !38
  %214 = fsub float %211, %213, !dbg !57
  %215 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %216 = bitcast i32 %215 to float, !dbg !26
  %217 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %218 = bitcast i32 %217 to float, !dbg !28
  %219 = fadd float %216, %218, !dbg !56
  %220 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !38
  %221 = bitcast i32 %220 to float, !dbg !38
  %222 = fsub float %219, %221, !dbg !57
  %223 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %224 = bitcast i32 %223 to float, !dbg !26
  %225 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %226 = bitcast i32 %225 to float, !dbg !28
  %227 = fadd float %224, %226, !dbg !56
  %228 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !38
  %229 = bitcast i32 %228 to float, !dbg !38
  %230 = fsub float %227, %229, !dbg !57
  %231 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %232 = bitcast i32 %231 to float, !dbg !26
  %233 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %234 = bitcast i32 %233 to float, !dbg !28
  %235 = fadd float %232, %234, !dbg !56
  %236 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !38
  %237 = bitcast i32 %236 to float, !dbg !38
  %238 = fsub float %235, %237, !dbg !57
  %239 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %240 = bitcast i32 %239 to float, !dbg !26
  %241 = fadd float %240, %210, !dbg !56
  %242 = fsub float %241, %213, !dbg !57
  %243 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %244 = bitcast i32 %243 to float, !dbg !26
  %245 = fadd float %244, %218, !dbg !56
  %246 = fsub float %245, %221, !dbg !57
  %247 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %248 = bitcast i32 %247 to float, !dbg !26
  %249 = fadd float %248, %226, !dbg !56
  %250 = fsub float %249, %229, !dbg !57
  %251 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %252 = bitcast i32 %251 to float, !dbg !26
  %253 = fadd float %252, %234, !dbg !56
  %254 = fsub float %253, %237, !dbg !57
  %255 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %256 = bitcast i32 %255 to float, !dbg !22
  %257 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %258 = bitcast i32 %257 to float, !dbg !24
  %259 = fadd float %256, %258, !dbg !58
  %260 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !30
  %261 = bitcast i32 %260 to float, !dbg !30
  %262 = fsub float %259, %261, !dbg !59
  %263 = fmul float %262, %154, !dbg !60
  %264 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !34
  %265 = bitcast i32 %264 to float, !dbg !34
  %266 = fmul float %263, %265, !dbg !61
  %267 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !36
  %268 = bitcast i32 %267 to float, !dbg !36
  %269 = fadd float %266, %268, !dbg !62
  %270 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %271 = bitcast i32 %270 to float, !dbg !22
  %272 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %273 = bitcast i32 %272 to float, !dbg !24
  %274 = fadd float %271, %273, !dbg !58
  %275 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !30
  %276 = bitcast i32 %275 to float, !dbg !30
  %277 = fsub float %274, %276, !dbg !59
  %278 = fmul float %277, %153, !dbg !60
  %279 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !34
  %280 = bitcast i32 %279 to float, !dbg !34
  %281 = fmul float %278, %280, !dbg !61
  %282 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !36
  %283 = bitcast i32 %282 to float, !dbg !36
  %284 = fadd float %281, %283, !dbg !62
  %285 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %286 = bitcast i32 %285 to float, !dbg !22
  %287 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %288 = bitcast i32 %287 to float, !dbg !24
  %289 = fadd float %286, %288, !dbg !58
  %290 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !30
  %291 = bitcast i32 %290 to float, !dbg !30
  %292 = fsub float %289, %291, !dbg !59
  %293 = fmul float %292, %152, !dbg !60
  %294 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !34
  %295 = bitcast i32 %294 to float, !dbg !34
  %296 = fmul float %293, %295, !dbg !61
  %297 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !36
  %298 = bitcast i32 %297 to float, !dbg !36
  %299 = fadd float %296, %298, !dbg !62
  %300 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %301 = bitcast i32 %300 to float, !dbg !22
  %302 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %303 = bitcast i32 %302 to float, !dbg !24
  %304 = fadd float %301, %303, !dbg !58
  %305 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !30
  %306 = bitcast i32 %305 to float, !dbg !30
  %307 = fsub float %304, %306, !dbg !59
  %308 = fmul float %307, %151, !dbg !60
  %309 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !34
  %310 = bitcast i32 %309 to float, !dbg !34
  %311 = fmul float %308, %310, !dbg !61
  %312 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !36
  %313 = bitcast i32 %312 to float, !dbg !36
  %314 = fadd float %311, %313, !dbg !62
  %315 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %316 = bitcast i32 %315 to float, !dbg !22
  %317 = fadd float %316, %258, !dbg !58
  %318 = fsub float %317, %261, !dbg !59
  %319 = fmul float %318, %154, !dbg !60
  %320 = fmul float %319, %265, !dbg !61
  %321 = fadd float %320, %268, !dbg !62
  %322 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %323 = bitcast i32 %322 to float, !dbg !22
  %324 = fadd float %323, %273, !dbg !58
  %325 = fsub float %324, %276, !dbg !59
  %326 = fmul float %325, %153, !dbg !60
  %327 = fmul float %326, %280, !dbg !61
  %328 = fadd float %327, %283, !dbg !62
  %329 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %330 = bitcast i32 %329 to float, !dbg !22
  %331 = fadd float %330, %288, !dbg !58
  %332 = fsub float %331, %291, !dbg !59
  %333 = fmul float %332, %152, !dbg !60
  %334 = fmul float %333, %295, !dbg !61
  %335 = fadd float %334, %298, !dbg !62
  %336 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %337 = bitcast i32 %336 to float, !dbg !22
  %338 = fadd float %337, %303, !dbg !58
  %339 = fsub float %338, %306, !dbg !59
  %340 = fmul float %339, %151, !dbg !60
  %341 = fmul float %340, %310, !dbg !61
  %342 = fadd float %341, %313, !dbg !62
  %343 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !50
  %344 = bitcast i32 %343 to float, !dbg !50
  %345 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !50
  %346 = bitcast i32 %345 to float, !dbg !50
  %347 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !50
  %348 = bitcast i32 %347 to float, !dbg !50
  %349 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !50
  %350 = bitcast i32 %349 to float, !dbg !50
  %351 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !50
  %352 = bitcast i32 %351 to float, !dbg !50
  %353 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !50
  %354 = bitcast i32 %353 to float, !dbg !50
  %355 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !50
  %356 = bitcast i32 %355 to float, !dbg !50
  %357 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !50
  %358 = bitcast i32 %357 to float, !dbg !50
  %359 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !48
  %360 = bitcast i32 %359 to float, !dbg !48
  %361 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !48
  %362 = bitcast i32 %361 to float, !dbg !48
  %363 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !48
  %364 = bitcast i32 %363 to float, !dbg !48
  %365 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !48
  %366 = bitcast i32 %365 to float, !dbg !48
  %367 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !48
  %368 = bitcast i32 %367 to float, !dbg !48
  %369 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !48
  %370 = bitcast i32 %369 to float, !dbg !48
  %371 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !48
  %372 = bitcast i32 %371 to float, !dbg !48
  %373 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !48
  %374 = bitcast i32 %373 to float, !dbg !48
  %375 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !44
  %376 = bitcast i32 %375 to float, !dbg !44
  %377 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !44
  %378 = bitcast i32 %377 to float, !dbg !44
  %379 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !44
  %380 = bitcast i32 %379 to float, !dbg !44
  %381 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !44
  %382 = bitcast i32 %381 to float, !dbg !44
  %383 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !42
  %384 = bitcast i32 %383 to float, !dbg !42
  %385 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !42
  %386 = bitcast i32 %385 to float, !dbg !42
  %387 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !42
  %388 = bitcast i32 %387 to float, !dbg !42
  %389 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !42
  %390 = bitcast i32 %389 to float, !dbg !42
  %391 = or disjoint i32 %19, %25, !dbg !13
  %.frozen = freeze i32 %391, !dbg !18
  %392 = sdiv i32 %.frozen, 4096, !dbg !18
  %393 = mul i32 %392, 4096, !dbg !63
  %.decomposed = sub i32 %.frozen, %393, !dbg !63
  %394 = or disjoint i32 %29, %23, !dbg !16
  %395 = icmp slt i32 %394, 512, !dbg !17
  %396 = or disjoint i32 %29, %22, !dbg !16
  %397 = icmp slt i32 %396, 512, !dbg !17
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !64
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !64
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !64
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !64
  %402 = fmul float %254, %398, !dbg !65
  %403 = fmul float %250, %399, !dbg !65
  %404 = fmul float %246, %400, !dbg !65
  %405 = fmul float %242, %401, !dbg !65
  %406 = fmul float %238, %398, !dbg !65
  %407 = fmul float %230, %399, !dbg !65
  %408 = fmul float %222, %400, !dbg !65
  %409 = fmul float %214, %401, !dbg !65
  %410 = fmul float %402, %390, !dbg !66
  %411 = fmul float %403, %388, !dbg !66
  %412 = fmul float %404, %386, !dbg !66
  %413 = fmul float %405, %384, !dbg !66
  %414 = fmul float %406, %390, !dbg !66
  %415 = fmul float %407, %388, !dbg !66
  %416 = fmul float %408, %386, !dbg !66
  %417 = fmul float %409, %384, !dbg !66
  %418 = fadd float %410, %382, !dbg !67
  %419 = fadd float %411, %380, !dbg !67
  %420 = fadd float %412, %378, !dbg !67
  %421 = fadd float %413, %376, !dbg !67
  %422 = fadd float %414, %382, !dbg !67
  %423 = fadd float %415, %380, !dbg !67
  %424 = fadd float %416, %378, !dbg !67
  %425 = fadd float %417, %376, !dbg !67
  %426 = fadd float %342, %418, !dbg !68
  %427 = fadd float %335, %419, !dbg !68
  %428 = fadd float %328, %420, !dbg !68
  %429 = fadd float %321, %421, !dbg !68
  %430 = fadd float %314, %422, !dbg !68
  %431 = fadd float %299, %423, !dbg !68
  %432 = fadd float %284, %424, !dbg !68
  %433 = fadd float %269, %425, !dbg !68
  %434 = fsub float 0.000000e+00, %374, !dbg !69
  %435 = fsub float 0.000000e+00, %372, !dbg !69
  %436 = fsub float 0.000000e+00, %370, !dbg !69
  %437 = fsub float 0.000000e+00, %368, !dbg !69
  %438 = fsub float 0.000000e+00, %366, !dbg !69
  %439 = fsub float 0.000000e+00, %364, !dbg !69
  %440 = fsub float 0.000000e+00, %362, !dbg !69
  %441 = fsub float 0.000000e+00, %360, !dbg !69
  %442 = fmul float %434, 0x3FF7154760000000, !dbg !73
  %443 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %442) #4, !dbg !73
  %444 = fmul float %435, 0x3FF7154760000000, !dbg !73
  %445 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %444) #4, !dbg !73
  %446 = fmul float %436, 0x3FF7154760000000, !dbg !73
  %447 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %446) #4, !dbg !73
  %448 = fmul float %437, 0x3FF7154760000000, !dbg !73
  %449 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %448) #4, !dbg !73
  %450 = fmul float %438, 0x3FF7154760000000, !dbg !73
  %451 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %450) #4, !dbg !73
  %452 = fmul float %439, 0x3FF7154760000000, !dbg !73
  %453 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %452) #4, !dbg !73
  %454 = fmul float %440, 0x3FF7154760000000, !dbg !73
  %455 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %454) #4, !dbg !73
  %456 = fmul float %441, 0x3FF7154760000000, !dbg !73
  %457 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %456) #4, !dbg !73
  %458 = fadd float %443, 1.000000e+00, !dbg !74
  %459 = fadd float %445, 1.000000e+00, !dbg !74
  %460 = fadd float %447, 1.000000e+00, !dbg !74
  %461 = fadd float %449, 1.000000e+00, !dbg !74
  %462 = fadd float %451, 1.000000e+00, !dbg !74
  %463 = fadd float %453, 1.000000e+00, !dbg !74
  %464 = fadd float %455, 1.000000e+00, !dbg !74
  %465 = fadd float %457, 1.000000e+00, !dbg !74
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %458) #4, !dbg !75
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %459) #4, !dbg !75
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %460) #4, !dbg !75
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %461) #4, !dbg !75
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %462) #4, !dbg !75
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %463) #4, !dbg !75
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %464) #4, !dbg !75
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %465) #4, !dbg !75
  %474 = fmul float %466, %358, !dbg !76
  %475 = fmul float %467, %356, !dbg !76
  %476 = fmul float %468, %354, !dbg !76
  %477 = fmul float %469, %352, !dbg !76
  %478 = fmul float %470, %350, !dbg !76
  %479 = fmul float %471, %348, !dbg !76
  %480 = fmul float %472, %346, !dbg !76
  %481 = fmul float %473, %344, !dbg !76
  %482 = fadd float %426, %474, !dbg !77
  %483 = fadd float %427, %475, !dbg !77
  %484 = fadd float %428, %476, !dbg !77
  %485 = fadd float %429, %477, !dbg !77
  %486 = fadd float %430, %478, !dbg !77
  %487 = fadd float %431, %479, !dbg !77
  %488 = fadd float %432, %480, !dbg !77
  %489 = fadd float %433, %481, !dbg !77
  %490 = fsub float 0.000000e+00, %482, !dbg !78
  %491 = fsub float 0.000000e+00, %483, !dbg !78
  %492 = fsub float 0.000000e+00, %484, !dbg !78
  %493 = fsub float 0.000000e+00, %485, !dbg !78
  %494 = fsub float 0.000000e+00, %486, !dbg !78
  %495 = fsub float 0.000000e+00, %487, !dbg !78
  %496 = fsub float 0.000000e+00, %488, !dbg !78
  %497 = fsub float 0.000000e+00, %489, !dbg !78
  %498 = fmul float %490, 0x3FF7154760000000, !dbg !80
  %499 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %498) #4, !dbg !80
  %500 = fmul float %491, 0x3FF7154760000000, !dbg !80
  %501 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %500) #4, !dbg !80
  %502 = fmul float %492, 0x3FF7154760000000, !dbg !80
  %503 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %502) #4, !dbg !80
  %504 = fmul float %493, 0x3FF7154760000000, !dbg !80
  %505 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %504) #4, !dbg !80
  %506 = fmul float %494, 0x3FF7154760000000, !dbg !80
  %507 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %506) #4, !dbg !80
  %508 = fmul float %495, 0x3FF7154760000000, !dbg !80
  %509 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %508) #4, !dbg !80
  %510 = fmul float %496, 0x3FF7154760000000, !dbg !80
  %511 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %510) #4, !dbg !80
  %512 = fmul float %497, 0x3FF7154760000000, !dbg !80
  %513 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %512) #4, !dbg !80
  %514 = fadd float %499, 1.000000e+00, !dbg !81
  %515 = fadd float %501, 1.000000e+00, !dbg !81
  %516 = fadd float %503, 1.000000e+00, !dbg !81
  %517 = fadd float %505, 1.000000e+00, !dbg !81
  %518 = fadd float %507, 1.000000e+00, !dbg !81
  %519 = fadd float %509, 1.000000e+00, !dbg !81
  %520 = fadd float %511, 1.000000e+00, !dbg !81
  %521 = fadd float %513, 1.000000e+00, !dbg !81
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %514) #4, !dbg !82
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %515) #4, !dbg !82
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %516) #4, !dbg !82
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %517) #4, !dbg !82
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %518) #4, !dbg !82
  %527 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %519) #4, !dbg !82
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %520) #4, !dbg !82
  %529 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %521) #4, !dbg !82
  %530 = fmul float %482, %522, !dbg !83
  %531 = fmul float %483, %523, !dbg !83
  %532 = fmul float %484, %524, !dbg !83
  %533 = fmul float %485, %525, !dbg !83
  %534 = fmul float %486, %526, !dbg !83
  %535 = fmul float %487, %527, !dbg !83
  %536 = fmul float %488, %528, !dbg !83
  %537 = fmul float %489, %529, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %538 = bitcast float %338 to i32, !dbg !85
  %539 = bitcast float %331 to i32, !dbg !85
  %540 = bitcast float %324 to i32, !dbg !85
  %541 = bitcast float %317 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %538, i32 %539, i32 %540, i32 %541, ptr addrspace(1) %39, i1 %31) #4, !dbg !85
  %542 = bitcast float %304 to i32, !dbg !85
  %543 = bitcast float %289 to i32, !dbg !85
  %544 = bitcast float %274 to i32, !dbg !85
  %545 = bitcast float %259 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %542, i32 %543, i32 %544, i32 %545, ptr addrspace(1) %41, i1 %31) #4, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %546 = bitcast float %253 to i32, !dbg !87
  %547 = bitcast float %249 to i32, !dbg !87
  %548 = bitcast float %245 to i32, !dbg !87
  %549 = bitcast float %241 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %546, i32 %547, i32 %548, i32 %549, ptr addrspace(1) %47, i1 %31) #4, !dbg !87
  %550 = bitcast float %235 to i32, !dbg !87
  %551 = bitcast float %227 to i32, !dbg !87
  %552 = bitcast float %219 to i32, !dbg !87
  %553 = bitcast float %211 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %550, i32 %551, i32 %552, i32 %553, ptr addrspace(1) %48, i1 %31) #4, !dbg !87
  %554 = shl i32 %396, 12, !dbg !88
  %555 = shl i32 %394, 12, !dbg !88
  %556 = shl i32 %392, 21, !dbg !89
  %557 = add i32 %556, %.decomposed, !dbg !90
  %558 = add i32 %557, %554, !dbg !91
  %559 = add i32 %557, %555, !dbg !91
  %560 = sext i32 %558 to i64, !dbg !92
  %561 = getelementptr float, ptr addrspace(1) %14, i64 %560, !dbg !92
  %562 = sext i32 %559 to i64, !dbg !92
  %563 = getelementptr float, ptr addrspace(1) %14, i64 %562, !dbg !92
  %564 = shl i32 %20, 7, !dbg !93
  %565 = and i32 %564, 896, !dbg !93
  %566 = or disjoint i32 %565, %22, !dbg !93
  %567 = and i32 %24, 508, !dbg !93
  %568 = lshr exact i32 %565, 1, !dbg !93
  %569 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %568, !dbg !93
  %570 = getelementptr float, ptr addrspace(3) %569, i32 %566, !dbg !93
  %571 = bitcast float %530 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %571, i1 true) #4, !dbg !93
  %572 = or disjoint i32 %566, 32, !dbg !93
  %573 = lshr i32 %572, 3, !dbg !93
  %574 = and i32 %573, 116, !dbg !93
  %575 = getelementptr float, ptr addrspace(3) @global_smem, i32 %574, !dbg !93
  %576 = getelementptr float, ptr addrspace(3) %575, i32 %572, !dbg !93
  %577 = bitcast float %531 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %577, i1 true) #4, !dbg !93
  %578 = or disjoint i32 %566, 64, !dbg !93
  %579 = lshr i32 %578, 3, !dbg !93
  %580 = and i32 %579, 120, !dbg !93
  %581 = getelementptr float, ptr addrspace(3) @global_smem, i32 %580, !dbg !93
  %582 = getelementptr float, ptr addrspace(3) %581, i32 %578, !dbg !93
  %583 = bitcast float %532 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %583, i1 true) #4, !dbg !93
  %584 = or disjoint i32 %566, 96, !dbg !93
  %585 = lshr i32 %584, 3, !dbg !93
  %586 = and i32 %585, 124, !dbg !93
  %587 = getelementptr float, ptr addrspace(3) @global_smem, i32 %586, !dbg !93
  %588 = getelementptr float, ptr addrspace(3) %587, i32 %584, !dbg !93
  %589 = bitcast float %533 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %588, <1 x i32> %589, i1 true) #4, !dbg !93
  %590 = or disjoint i32 %566, 16, !dbg !93
  %591 = getelementptr float, ptr addrspace(3) %569, i32 %590, !dbg !93
  %592 = bitcast float %534 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %591, <1 x i32> %592, i1 true) #4, !dbg !93
  %593 = or disjoint i32 %566, 48, !dbg !93
  %594 = lshr i32 %593, 3, !dbg !93
  %595 = and i32 %594, 116, !dbg !93
  %596 = getelementptr float, ptr addrspace(3) @global_smem, i32 %595, !dbg !93
  %597 = getelementptr float, ptr addrspace(3) %596, i32 %593, !dbg !93
  %598 = bitcast float %535 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %597, <1 x i32> %598, i1 true) #4, !dbg !93
  %599 = or disjoint i32 %566, 80, !dbg !93
  %600 = lshr i32 %599, 3, !dbg !93
  %601 = and i32 %600, 120, !dbg !93
  %602 = getelementptr float, ptr addrspace(3) @global_smem, i32 %601, !dbg !93
  %603 = getelementptr float, ptr addrspace(3) %602, i32 %599, !dbg !93
  %604 = bitcast float %536 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %603, <1 x i32> %604, i1 true) #4, !dbg !93
  %605 = or disjoint i32 %566, 112, !dbg !93
  %606 = lshr i32 %605, 3, !dbg !93
  %607 = and i32 %606, 124, !dbg !93
  %608 = getelementptr float, ptr addrspace(3) @global_smem, i32 %607, !dbg !93
  %609 = getelementptr float, ptr addrspace(3) %608, i32 %605, !dbg !93
  %610 = bitcast float %537 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %609, <1 x i32> %610, i1 true) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %611 = lshr i32 %24, 3, !dbg !93
  %612 = and i32 %611, 60, !dbg !93
  %613 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %612, !dbg !93
  %614 = getelementptr inbounds float, ptr addrspace(3) %613, i32 %567, !dbg !93
  %615 = or disjoint i32 %567, 512, !dbg !93
  %616 = lshr i32 %615, 3, !dbg !93
  %617 = and i32 %616, 124, !dbg !93
  %618 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %617, !dbg !93
  %619 = getelementptr inbounds float, ptr addrspace(3) %618, i32 %615, !dbg !93
  %620 = load <4 x i32>, ptr addrspace(3) %619, align 16, !dbg !93
  %.extract = load i32, ptr addrspace(3) %614, align 16, !dbg !93
  %621 = getelementptr inbounds i8, ptr addrspace(3) %614, i32 4, !dbg !93
  %.extract8 = load i32, ptr addrspace(3) %621, align 4, !dbg !93
  %622 = getelementptr inbounds i8, ptr addrspace(3) %614, i32 8, !dbg !93
  %.extract9 = load i32, ptr addrspace(3) %622, align 8, !dbg !93
  %623 = getelementptr inbounds i8, ptr addrspace(3) %614, i32 12, !dbg !93
  %.extract10 = load i32, ptr addrspace(3) %623, align 4, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %561, i1 %397) #4, !dbg !93
  %.extract11 = extractelement <4 x i32> %620, i64 0, !dbg !93
  %.extract12 = extractelement <4 x i32> %620, i64 1, !dbg !93
  %.extract13 = extractelement <4 x i32> %620, i64 2, !dbg !93
  %.extract14 = extractelement <4 x i32> %620, i64 3, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %563, i1 %395) #4, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6hb5osixqfolktdv6zhzfoegxdcrbaouwjwi44j2o4uo4y7wgui.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 35, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 36, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 36, scope: !7)
!43 = !DILocation(line: 43, column: 31, scope: !7)
!44 = !DILocation(line: 43, column: 36, scope: !7)
!45 = !DILocation(line: 44, column: 41, scope: !7)
!46 = !DILocation(line: 44, column: 37, scope: !7)
!47 = !DILocation(line: 44, column: 32, scope: !7)
!48 = !DILocation(line: 44, column: 46, scope: !7)
!49 = !DILocation(line: 45, column: 32, scope: !7)
!50 = !DILocation(line: 45, column: 46, scope: !7)
!51 = !DILocation(line: 50, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 27, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 27, scope: !7)
!56 = !DILocation(line: 47, column: 18, scope: !7)
!57 = !DILocation(line: 59, column: 19, scope: !7)
!58 = !DILocation(line: 46, column: 18, scope: !7)
!59 = !DILocation(line: 48, column: 18, scope: !7)
!60 = !DILocation(line: 56, column: 19, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 31, column: 19, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!72 = !DILocation(line: 68, column: 23, scope: !7)
!73 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 69, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !79)
!79 = !DILocation(line: 71, column: 23, scope: !7)
!80 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !79)
!81 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !79)
!82 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !79)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 73, column: 4, scope: !7)
!85 = !DILocation(line: 74, column: 48, scope: !7)
!86 = !DILocation(line: 75, column: 4, scope: !7)
!87 = !DILocation(line: 76, column: 48, scope: !7)
!88 = !DILocation(line: 77, column: 35, scope: !7)
!89 = !DILocation(line: 77, column: 48, scope: !7)
!90 = !DILocation(line: 77, column: 30, scope: !7)
!91 = !DILocation(line: 77, column: 40, scope: !7)
!92 = !DILocation(line: 77, column: 25, scope: !7)
!93 = !DILocation(line: 77, column: 60, scope: !7)
!94 = !DILocation(line: 77, column: 4, scope: !7)
