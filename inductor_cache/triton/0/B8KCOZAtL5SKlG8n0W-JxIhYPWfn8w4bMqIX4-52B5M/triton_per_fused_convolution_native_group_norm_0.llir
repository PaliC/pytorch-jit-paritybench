; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 31, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %14, 16, !dbg !13
  %17 = or disjoint i32 %14, 24, !dbg !13
  %18 = or disjoint i32 %9, %13, !dbg !13
  %19 = icmp slt i32 %18, 64, !dbg !14
  %20 = icmp slt i32 %14, 64, !dbg !14
  %21 = icmp slt i32 %15, 64, !dbg !14
  %22 = icmp slt i32 %16, 64, !dbg !14
  %23 = icmp slt i32 %17, 64, !dbg !14
  %24 = shl i32 %10, 2, !dbg !15
  %25 = and i32 %24, 124, !dbg !15
  %26 = srem i32 %18, 16, !dbg !16
  %27 = shl i32 %14, 7, !dbg !17
  %28 = shl i32 %15, 7, !dbg !17
  %29 = shl i32 %16, 7, !dbg !17
  %30 = shl i32 %17, 7, !dbg !17
  %31 = or disjoint i32 %27, %25, !dbg !18
  %32 = or disjoint i32 %28, %25, !dbg !18
  %33 = or disjoint i32 %29, %25, !dbg !18
  %34 = or disjoint i32 %30, %25, !dbg !18
  %35 = sext i32 %31 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !19
  %37 = sext i32 %32 to i64, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !19
  %39 = sext i32 %33 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = sext i32 %34 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !20
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !20
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !20
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !20
  %63 = shl i32 %10, 7, !dbg !20
  %64 = and i32 %63, 3968, !dbg !20
  %65 = or disjoint i32 %64, %12, !dbg !20
  %66 = and i32 %10, 255, !dbg !20
  %67 = lshr exact i32 %64, 3, !dbg !20
  %68 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %67, !dbg !20
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %65, !dbg !20
  %70 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #5, !dbg !20
  %71 = or disjoint i32 %65, 32, !dbg !20
  %72 = lshr i32 %71, 5, !dbg !20
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !20
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %71, !dbg !20
  %75 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #5, !dbg !20
  %76 = or disjoint i32 %65, 64, !dbg !20
  %77 = lshr i32 %76, 5, !dbg !20
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !20
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %76, !dbg !20
  %80 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #5, !dbg !20
  %81 = or disjoint i32 %65, 96, !dbg !20
  %82 = lshr i32 %81, 5, !dbg !20
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !20
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %81, !dbg !20
  %85 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #5, !dbg !20
  %86 = or disjoint i32 %65, 8, !dbg !20
  %87 = getelementptr float, ptr addrspace(3) %68, i32 %86, !dbg !20
  %88 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #5, !dbg !20
  %89 = or disjoint i32 %65, 40, !dbg !20
  %90 = lshr i32 %89, 5, !dbg !20
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !20
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !20
  %93 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #5, !dbg !20
  %94 = or disjoint i32 %65, 72, !dbg !20
  %95 = lshr i32 %94, 5, !dbg !20
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !20
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !20
  %98 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #5, !dbg !20
  %99 = or disjoint i32 %65, 104, !dbg !20
  %100 = lshr i32 %99, 5, !dbg !20
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !20
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !20
  %103 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #5, !dbg !20
  %104 = or disjoint i32 %65, 16, !dbg !20
  %105 = getelementptr float, ptr addrspace(3) %68, i32 %104, !dbg !20
  %106 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #5, !dbg !20
  %107 = or disjoint i32 %65, 48, !dbg !20
  %108 = lshr i32 %107, 5, !dbg !20
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !20
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !20
  %111 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #5, !dbg !20
  %112 = or disjoint i32 %65, 80, !dbg !20
  %113 = lshr i32 %112, 5, !dbg !20
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !20
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !20
  %116 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #5, !dbg !20
  %117 = or disjoint i32 %65, 112, !dbg !20
  %118 = lshr i32 %117, 5, !dbg !20
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !20
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !20
  %121 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #5, !dbg !20
  %122 = or disjoint i32 %65, 24, !dbg !20
  %123 = getelementptr float, ptr addrspace(3) %68, i32 %122, !dbg !20
  %124 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #5, !dbg !20
  %125 = or disjoint i32 %65, 56, !dbg !20
  %126 = lshr i32 %125, 5, !dbg !20
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !20
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !20
  %129 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #5, !dbg !20
  %130 = or disjoint i32 %65, 88, !dbg !20
  %131 = lshr i32 %130, 5, !dbg !20
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !20
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !20
  %134 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #5, !dbg !20
  %135 = or disjoint i32 %65, 120, !dbg !20
  %136 = lshr i32 %135, 5, !dbg !20
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !20
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !20
  %139 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %140 = lshr i32 %66, 5, !dbg !20
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !20
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %66, !dbg !20
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !20
  %144 = or disjoint i32 %66, 256, !dbg !20
  %145 = lshr i32 %144, 5, !dbg !20
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !20
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !20
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !20
  %149 = or disjoint i32 %66, 512, !dbg !20
  %150 = lshr i32 %149, 5, !dbg !20
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !20
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !20
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !20
  %154 = or disjoint i32 %66, 768, !dbg !20
  %155 = lshr i32 %154, 5, !dbg !20
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !20
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %154, !dbg !20
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !20
  %159 = or disjoint i32 %66, 1024, !dbg !20
  %160 = lshr i32 %159, 5, !dbg !20
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !20
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %159, !dbg !20
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !20
  %164 = or disjoint i32 %66, 1280, !dbg !20
  %165 = lshr i32 %164, 5, !dbg !20
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !20
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %164, !dbg !20
  %168 = load float, ptr addrspace(3) %167, align 4, !dbg !20
  %169 = or disjoint i32 %66, 1536, !dbg !20
  %170 = lshr i32 %169, 5, !dbg !20
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !20
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %169, !dbg !20
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !20
  %174 = or disjoint i32 %66, 1792, !dbg !20
  %175 = lshr i32 %174, 5, !dbg !20
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !20
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %174, !dbg !20
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !20
  %179 = or disjoint i32 %66, 2048, !dbg !20
  %180 = lshr i32 %179, 5, !dbg !20
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %180, !dbg !20
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %179, !dbg !20
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !20
  %184 = or disjoint i32 %66, 2304, !dbg !20
  %185 = lshr i32 %184, 5, !dbg !20
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !20
  %187 = getelementptr inbounds float, ptr addrspace(3) %186, i32 %184, !dbg !20
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !20
  %189 = or disjoint i32 %66, 2560, !dbg !20
  %190 = lshr i32 %189, 5, !dbg !20
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !20
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %189, !dbg !20
  %193 = load float, ptr addrspace(3) %192, align 4, !dbg !20
  %194 = or disjoint i32 %66, 2816, !dbg !20
  %195 = lshr i32 %194, 5, !dbg !20
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !20
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !20
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !20
  %199 = or disjoint i32 %66, 3072, !dbg !20
  %200 = lshr i32 %199, 5, !dbg !20
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !20
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %199, !dbg !20
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !20
  %204 = or disjoint i32 %66, 3328, !dbg !20
  %205 = lshr i32 %204, 5, !dbg !20
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !20
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %204, !dbg !20
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !20
  %209 = or disjoint i32 %66, 3584, !dbg !20
  %210 = lshr i32 %209, 5, !dbg !20
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !20
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !20
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !20
  %214 = or disjoint i32 %66, 3840, !dbg !20
  %215 = lshr i32 %214, 5, !dbg !20
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !20
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !20
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !20
  %219 = shl nsw i32 %26, 1, !dbg !21
  %220 = or disjoint i32 %219, 1, !dbg !22
  %221 = sext i32 %219 to i64, !dbg !23
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !23
  %223 = sext i32 %220 to i64, !dbg !23
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !23
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %226 = bitcast i32 %225 to float, !dbg !24
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %228 = bitcast i32 %227 to float, !dbg !24
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %230 = bitcast i32 %229 to float, !dbg !24
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %232 = bitcast i32 %231 to float, !dbg !24
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %234 = bitcast i32 %233 to float, !dbg !24
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %236 = bitcast i32 %235 to float, !dbg !24
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %238 = bitcast i32 %237 to float, !dbg !24
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %240 = bitcast i32 %239 to float, !dbg !24
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %242 = bitcast i32 %241 to float, !dbg !24
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %244 = bitcast i32 %243 to float, !dbg !24
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %246 = bitcast i32 %245 to float, !dbg !24
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %248 = bitcast i32 %247 to float, !dbg !24
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %250 = bitcast i32 %249 to float, !dbg !24
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %252 = bitcast i32 %251 to float, !dbg !24
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %254 = bitcast i32 %253 to float, !dbg !24
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %256 = bitcast i32 %255 to float, !dbg !24
  %257 = fadd float %143, %226, !dbg !25
  %258 = fadd float %148, %228, !dbg !25
  %259 = fadd float %153, %230, !dbg !25
  %260 = fadd float %158, %232, !dbg !25
  %261 = fadd float %163, %234, !dbg !25
  %262 = fadd float %168, %236, !dbg !25
  %263 = fadd float %173, %238, !dbg !25
  %264 = fadd float %178, %240, !dbg !25
  %265 = fadd float %183, %242, !dbg !25
  %266 = fadd float %188, %244, !dbg !25
  %267 = fadd float %193, %246, !dbg !25
  %268 = fadd float %198, %248, !dbg !25
  %269 = fadd float %203, %250, !dbg !25
  %270 = fadd float %208, %252, !dbg !25
  %271 = fadd float %213, %254, !dbg !25
  %272 = fadd float %218, %256, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %273 = fadd float %257, %258, !dbg !30
  %274 = fadd float %273, %259, !dbg !30
  %275 = fadd float %274, %260, !dbg !30
  %276 = fadd float %275, %261, !dbg !30
  %277 = fadd float %276, %262, !dbg !30
  %278 = fadd float %277, %263, !dbg !30
  %279 = fadd float %278, %264, !dbg !30
  %280 = fadd float %279, %265, !dbg !30
  %281 = fadd float %280, %266, !dbg !30
  %282 = fadd float %281, %267, !dbg !30
  %283 = fadd float %282, %268, !dbg !30
  %284 = fadd float %283, %269, !dbg !30
  %285 = fadd float %284, %270, !dbg !30
  %286 = fadd float %285, %271, !dbg !30
  %287 = fadd float %286, %272, !dbg !30
  %288 = shl nuw nsw i32 %13, 3, !dbg !26
  %289 = or disjoint i32 %288, %12, !dbg !26
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !26
  %291 = bitcast float %287 to i32, !dbg !26
  %292 = select i1 %19, i32 %291, i32 0, !dbg !30
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %293, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %294 = icmp slt i32 %10, 256, !dbg !26
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %296 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %294) #5, !dbg !26
  %297 = bitcast i32 %296 to float, !dbg !26
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 4, i32 31), !dbg !26
  %299 = bitcast i32 %298 to float, !dbg !26
  %300 = fadd float %297, %299, !dbg !30
  %301 = bitcast float %300 to i32, !dbg !26
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !26
  %303 = bitcast i32 %302 to float, !dbg !26
  %304 = fadd float %300, %303, !dbg !30
  %305 = bitcast float %304 to i32, !dbg !26
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !26
  %307 = bitcast i32 %306 to float, !dbg !26
  %308 = fadd float %304, %307, !dbg !30
  %309 = and i32 %10, 7, !dbg !26
  %310 = icmp eq i32 %309, 0, !dbg !26
  %311 = and i1 %294, %310, !dbg !26
  %312 = bitcast float %308 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %312, i1 %311) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !26
  %314 = load float, ptr addrspace(3) %313, align 16, !dbg !26
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 1.280000e+02) #5, !dbg !32
  %316 = fsub float %257, %315, !dbg !33
  %317 = fsub float %258, %315, !dbg !33
  %318 = fsub float %259, %315, !dbg !33
  %319 = fsub float %260, %315, !dbg !33
  %320 = fsub float %261, %315, !dbg !33
  %321 = fsub float %262, %315, !dbg !33
  %322 = fsub float %263, %315, !dbg !33
  %323 = fsub float %264, %315, !dbg !33
  %324 = fsub float %265, %315, !dbg !33
  %325 = fsub float %266, %315, !dbg !33
  %326 = fsub float %267, %315, !dbg !33
  %327 = fsub float %268, %315, !dbg !33
  %328 = fsub float %269, %315, !dbg !33
  %329 = fsub float %270, %315, !dbg !33
  %330 = fsub float %271, %315, !dbg !33
  %331 = fsub float %272, %315, !dbg !33
  %332 = fmul float %316, %316, !dbg !34
  %333 = fmul float %317, %317, !dbg !34
  %334 = fmul float %318, %318, !dbg !34
  %335 = fmul float %319, %319, !dbg !34
  %336 = fmul float %320, %320, !dbg !34
  %337 = fmul float %321, %321, !dbg !34
  %338 = fmul float %322, %322, !dbg !34
  %339 = fmul float %323, %323, !dbg !34
  %340 = fmul float %324, %324, !dbg !34
  %341 = fmul float %325, %325, !dbg !34
  %342 = fmul float %326, %326, !dbg !34
  %343 = fmul float %327, %327, !dbg !34
  %344 = fmul float %328, %328, !dbg !34
  %345 = fmul float %329, %329, !dbg !34
  %346 = fmul float %330, %330, !dbg !34
  %347 = fmul float %331, %331, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %348 = fadd float %332, %333, !dbg !37
  %349 = fadd float %334, %348, !dbg !37
  %350 = fadd float %335, %349, !dbg !37
  %351 = fadd float %336, %350, !dbg !37
  %352 = fadd float %337, %351, !dbg !37
  %353 = fadd float %338, %352, !dbg !37
  %354 = fadd float %339, %353, !dbg !37
  %355 = fadd float %340, %354, !dbg !37
  %356 = fadd float %341, %355, !dbg !37
  %357 = fadd float %342, %356, !dbg !37
  %358 = fadd float %343, %357, !dbg !37
  %359 = fadd float %344, %358, !dbg !37
  %360 = fadd float %345, %359, !dbg !37
  %361 = fadd float %346, %360, !dbg !37
  %362 = fadd float %347, %361, !dbg !37
  %363 = bitcast float %362 to i32, !dbg !35
  %364 = select i1 %19, i32 %363, i32 0, !dbg !37
  %365 = insertelement <1 x i32> poison, i32 %364, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %365, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %366 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %294) #5, !dbg !35
  %367 = bitcast i32 %366 to float, !dbg !35
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !35
  %369 = bitcast i32 %368 to float, !dbg !35
  %370 = fadd float %367, %369, !dbg !37
  %371 = bitcast float %370 to i32, !dbg !35
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 2, i32 31), !dbg !35
  %373 = bitcast i32 %372 to float, !dbg !35
  %374 = fadd float %370, %373, !dbg !37
  %375 = bitcast float %374 to i32, !dbg !35
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !35
  %377 = bitcast i32 %376 to float, !dbg !35
  %378 = fadd float %374, %377, !dbg !37
  %379 = bitcast float %378 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %379, i1 %311) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %380 = load float, ptr addrspace(3) %313, align 16, !dbg !35
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float 1.280000e+02) #5, !dbg !38
  %382 = fadd float %381, 0x3EE4F8B580000000, !dbg !39
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %383, 0, !dbg !40
  br i1 %.not.i, label %386, label %384, !dbg !40

384:                                              ; preds = %7
  %385 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %382), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

386:                                              ; preds = %7
  %387 = tail call float @llvm.nvvm.rsqrt.approx.f(float %382), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %384, %386
  %.0.i = phi float [ %385, %384 ], [ %387, %386 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %388 = and i32 %24, 1020, !dbg !41
  %389 = bitcast float %257 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %389, i1 true) #5, !dbg !41
  %390 = bitcast float %258 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %390, i1 true) #5, !dbg !41
  %391 = bitcast float %259 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %391, i1 true) #5, !dbg !41
  %392 = bitcast float %260 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %392, i1 true) #5, !dbg !41
  %393 = getelementptr float, ptr addrspace(3) %68, i32 %71, !dbg !41
  %394 = bitcast float %261 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #5, !dbg !41
  %395 = getelementptr float, ptr addrspace(3) %68, i32 %89, !dbg !41
  %396 = bitcast float %262 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #5, !dbg !41
  %397 = getelementptr float, ptr addrspace(3) %68, i32 %107, !dbg !41
  %398 = bitcast float %263 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #5, !dbg !41
  %399 = getelementptr float, ptr addrspace(3) %68, i32 %125, !dbg !41
  %400 = bitcast float %264 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #5, !dbg !41
  %401 = getelementptr float, ptr addrspace(3) %68, i32 %76, !dbg !41
  %402 = bitcast float %265 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #5, !dbg !41
  %403 = getelementptr float, ptr addrspace(3) %68, i32 %94, !dbg !41
  %404 = bitcast float %266 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #5, !dbg !41
  %405 = getelementptr float, ptr addrspace(3) %68, i32 %112, !dbg !41
  %406 = bitcast float %267 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #5, !dbg !41
  %407 = getelementptr float, ptr addrspace(3) %68, i32 %130, !dbg !41
  %408 = bitcast float %268 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #5, !dbg !41
  %409 = getelementptr float, ptr addrspace(3) %68, i32 %81, !dbg !41
  %410 = bitcast float %269 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #5, !dbg !41
  %411 = getelementptr float, ptr addrspace(3) %68, i32 %99, !dbg !41
  %412 = bitcast float %270 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #5, !dbg !41
  %413 = getelementptr float, ptr addrspace(3) %68, i32 %117, !dbg !41
  %414 = bitcast float %271 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #5, !dbg !41
  %415 = getelementptr float, ptr addrspace(3) %68, i32 %135, !dbg !41
  %416 = bitcast float %272 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %417 = lshr i32 %24, 5, !dbg !41
  %418 = and i32 %417, 28, !dbg !41
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !41
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %388, !dbg !41
  %421 = or disjoint i32 %388, 1024, !dbg !41
  %422 = lshr i32 %421, 5, !dbg !41
  %423 = and i32 %422, 60, !dbg !41
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %423, !dbg !41
  %425 = getelementptr inbounds float, ptr addrspace(3) %424, i32 %421, !dbg !41
  %426 = load <4 x i32>, ptr addrspace(3) %425, align 16, !dbg !41
  %427 = or disjoint i32 %388, 2048, !dbg !41
  %428 = lshr i32 %427, 5, !dbg !41
  %429 = and i32 %428, 92, !dbg !41
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %429, !dbg !41
  %431 = getelementptr inbounds float, ptr addrspace(3) %430, i32 %427, !dbg !41
  %432 = load <4 x i32>, ptr addrspace(3) %431, align 16, !dbg !41
  %433 = or disjoint i32 %388, 3072, !dbg !41
  %434 = lshr i32 %433, 5, !dbg !41
  %435 = and i32 %434, 124, !dbg !41
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !41
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %433, !dbg !41
  %438 = load <4 x i32>, ptr addrspace(3) %437, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %420, align 16, !dbg !41
  %439 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 4, !dbg !41
  %.extract17 = load i32, ptr addrspace(3) %439, align 4, !dbg !41
  %440 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 8, !dbg !41
  %.extract18 = load i32, ptr addrspace(3) %440, align 8, !dbg !41
  %441 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 12, !dbg !41
  %.extract19 = load i32, ptr addrspace(3) %441, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %36, i1 %20) #5, !dbg !41
  %.extract20 = extractelement <4 x i32> %426, i64 0, !dbg !41
  %.extract21 = extractelement <4 x i32> %426, i64 1, !dbg !41
  %.extract22 = extractelement <4 x i32> %426, i64 2, !dbg !41
  %.extract23 = extractelement <4 x i32> %426, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %38, i1 %21) #5, !dbg !41
  %.extract24 = extractelement <4 x i32> %432, i64 0, !dbg !41
  %.extract25 = extractelement <4 x i32> %432, i64 1, !dbg !41
  %.extract26 = extractelement <4 x i32> %432, i64 2, !dbg !41
  %.extract27 = extractelement <4 x i32> %432, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %40, i1 %22) #5, !dbg !41
  %.extract28 = extractelement <4 x i32> %438, i64 0, !dbg !41
  %.extract29 = extractelement <4 x i32> %438, i64 1, !dbg !41
  %.extract30 = extractelement <4 x i32> %438, i64 2, !dbg !41
  %.extract31 = extractelement <4 x i32> %438, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %42, i1 %23) #5, !dbg !41
  %442 = sext i32 %18 to i64, !dbg !42
  %443 = getelementptr float, ptr addrspace(1) %4, i64 %442, !dbg !42
  %444 = icmp eq i32 %12, 0, !dbg !43
  %445 = bitcast float %.0.i to i32, !dbg !43
  %446 = and i1 %444, %19, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %445, ptr addrspace(1) %443, i1 %446) #5, !dbg !43
  %447 = getelementptr float, ptr addrspace(1) %2, i64 %442, !dbg !44
  %448 = bitcast float %315 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %448, ptr addrspace(1) %447, i1 %446) #5, !dbg !45
  %449 = getelementptr float, ptr addrspace(1) %3, i64 %442, !dbg !46
  %450 = bitcast float %380 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %449, i1 %446) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemfxvutksyd2efpo5qschmjbras5lkuotdig3djlwccl4hkxxi6.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_0", linkageName: "triton_per_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 48, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 37, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
