; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = sdiv i32 %12, 4096, !dbg !14
  %14 = srem i32 %13, 3, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #4, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !17
  %22 = bitcast i32 %18 to float, !dbg !17
  %23 = bitcast i32 %19 to float, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = sext i32 %14 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %31 = bitcast i32 %30 to float, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %38 = fadd float %22, %29, !dbg !22
  %39 = fadd float %23, %31, !dbg !22
  %40 = fadd float %24, %33, !dbg !22
  %41 = fadd float %25, %35, !dbg !22
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not.i = icmp eq i32 %42, 0, !dbg !23
  %43 = tail call float @llvm.nvvm.fabs.ftz.f(float %38) #4, !dbg !23
  %44 = tail call float @llvm.nvvm.fabs.f(float %38) #4, !dbg !23
  %.01.i = select i1 %.not.i, float %44, float %43, !dbg !23
  %45 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !23
  br i1 %45, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !23

__internal_fmad.exit1.i:                          ; preds = %6
  %46 = fmul float %.01.i, 0x4007154760000000, !dbg !23
  %47 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %46) #4, !dbg !23
  %48 = fadd float %47, 1.000000e+00, !dbg !23
  %49 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %48) #5, !dbg !23, !srcloc !24
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not6.i = icmp eq i32 %50, 0, !dbg !23
  %51 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %49, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %52 = tail call float @llvm.nvvm.fma.rn.f(float %49, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %.03.i = select i1 %.not6.i, float %52, float %51, !dbg !23
  %53 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !23
  %s.0.i = select i1 %53, float 1.000000e+00, float %.03.i, !dbg !23
  %54 = bitcast float %s.0.i to i32, !dbg !23
  %55 = bitcast float %38 to i32, !dbg !23
  %56 = and i32 %55, -2147483648, !dbg !23
  %57 = or i32 %56, %54, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__internal_fmad.exit3.i:                          ; preds = %6
  %59 = fmul float %38, %38, !dbg !23
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not1.i = icmp eq i32 %60, 0, !dbg !23
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %59, float 0xBFAAC795C0000000) #4, !dbg !23
  %62 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %59, float 0xBFAAC795C0000000) #4, !dbg !23
  %.06.i = select i1 %.not1.i, float %62, float %61, !dbg !23
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not2.i = icmp eq i32 %63, 0, !dbg !23
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %59, float 0x3FC10B2820000000) #4, !dbg !23
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %59, float 0x3FC10B2820000000) #4, !dbg !23
  %.05.i = select i1 %.not2.i, float %65, float %64, !dbg !23
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not3.i = icmp eq i32 %66, 0, !dbg !23
  %67 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %59, float 0xBFD5553DA0000000) #4, !dbg !23
  %68 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %59, float 0xBFD5553DA0000000) #4, !dbg !23
  %.0.i = select i1 %.not3.i, float %68, float %67, !dbg !23
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not4.i = icmp eq i32 %69, 0, !dbg !23
  %70 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %59, float 0.000000e+00) #4, !dbg !23
  %71 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %59, float 0.000000e+00) #4, !dbg !23
  %.04.i = select i1 %.not4.i, float %71, float %70, !dbg !23
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not5.i = icmp eq i32 %72, 0, !dbg !23
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %38, float %38) #4, !dbg !23
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %38, float %38) #4, !dbg !23
  %.02.i = select i1 %.not5.i, float %74, float %73, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %58, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !23
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not.i1 = icmp eq i32 %75, 0, !dbg !23
  %76 = tail call float @llvm.nvvm.fabs.ftz.f(float %39) #4, !dbg !23
  %77 = tail call float @llvm.nvvm.fabs.f(float %39) #4, !dbg !23
  %.01.i2 = select i1 %.not.i1, float %77, float %76, !dbg !23
  %78 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !23
  br i1 %78, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !23

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %79 = fmul float %.01.i2, 0x4007154760000000, !dbg !23
  %80 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %79) #4, !dbg !23
  %81 = fadd float %80, 1.000000e+00, !dbg !23
  %82 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %81) #5, !dbg !23, !srcloc !24
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not6.i4 = icmp eq i32 %83, 0, !dbg !23
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %82, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %82, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %.03.i5 = select i1 %.not6.i4, float %85, float %84, !dbg !23
  %86 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !23
  %s.0.i6 = select i1 %86, float 1.000000e+00, float %.03.i5, !dbg !23
  %87 = bitcast float %s.0.i6 to i32, !dbg !23
  %88 = bitcast float %39 to i32, !dbg !23
  %89 = and i32 %88, -2147483648, !dbg !23
  %90 = or i32 %89, %87, !dbg !23
  %91 = bitcast i32 %90 to float, !dbg !23
  br label %__nv_tanhf.exit19, !dbg !23

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %92 = fmul float %39, %39, !dbg !23
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !23
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %92, float 0xBFAAC795C0000000) #4, !dbg !23
  %95 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %92, float 0xBFAAC795C0000000) #4, !dbg !23
  %.06.i10 = select i1 %.not1.i9, float %95, float %94, !dbg !23
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not2.i11 = icmp eq i32 %96, 0, !dbg !23
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %92, float 0x3FC10B2820000000) #4, !dbg !23
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %92, float 0x3FC10B2820000000) #4, !dbg !23
  %.05.i12 = select i1 %.not2.i11, float %98, float %97, !dbg !23
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not3.i13 = icmp eq i32 %99, 0, !dbg !23
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %92, float 0xBFD5553DA0000000) #4, !dbg !23
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %92, float 0xBFD5553DA0000000) #4, !dbg !23
  %.0.i14 = select i1 %.not3.i13, float %101, float %100, !dbg !23
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not4.i15 = icmp eq i32 %102, 0, !dbg !23
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %92, float 0.000000e+00) #4, !dbg !23
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %92, float 0.000000e+00) #4, !dbg !23
  %.04.i16 = select i1 %.not4.i15, float %104, float %103, !dbg !23
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not5.i17 = icmp eq i32 %105, 0, !dbg !23
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %39, float %39) #4, !dbg !23
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %39, float %39) #4, !dbg !23
  %.02.i18 = select i1 %.not5.i17, float %107, float %106, !dbg !23
  br label %__nv_tanhf.exit19, !dbg !23

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %91, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !23
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not.i20 = icmp eq i32 %108, 0, !dbg !23
  %109 = tail call float @llvm.nvvm.fabs.ftz.f(float %40) #4, !dbg !23
  %110 = tail call float @llvm.nvvm.fabs.f(float %40) #4, !dbg !23
  %.01.i21 = select i1 %.not.i20, float %110, float %109, !dbg !23
  %111 = fcmp ult float %.01.i21, 0x3FE3333340000000, !dbg !23
  br i1 %111, label %__internal_fmad.exit3.i27, label %__internal_fmad.exit1.i22, !dbg !23

__internal_fmad.exit1.i22:                        ; preds = %__nv_tanhf.exit19
  %112 = fmul float %.01.i21, 0x4007154760000000, !dbg !23
  %113 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %112) #4, !dbg !23
  %114 = fadd float %113, 1.000000e+00, !dbg !23
  %115 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %114) #5, !dbg !23, !srcloc !24
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not6.i23 = icmp eq i32 %116, 0, !dbg !23
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %115, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %115, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %.03.i24 = select i1 %.not6.i23, float %118, float %117, !dbg !23
  %119 = fcmp oge float %.01.i21, 0x4022059680000000, !dbg !23
  %s.0.i25 = select i1 %119, float 1.000000e+00, float %.03.i24, !dbg !23
  %120 = bitcast float %s.0.i25 to i32, !dbg !23
  %121 = bitcast float %40 to i32, !dbg !23
  %122 = and i32 %121, -2147483648, !dbg !23
  %123 = or i32 %122, %120, !dbg !23
  %124 = bitcast i32 %123 to float, !dbg !23
  br label %__nv_tanhf.exit38, !dbg !23

__internal_fmad.exit3.i27:                        ; preds = %__nv_tanhf.exit19
  %125 = fmul float %40, %40, !dbg !23
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not1.i28 = icmp eq i32 %126, 0, !dbg !23
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %125, float 0xBFAAC795C0000000) #4, !dbg !23
  %128 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %125, float 0xBFAAC795C0000000) #4, !dbg !23
  %.06.i29 = select i1 %.not1.i28, float %128, float %127, !dbg !23
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not2.i30 = icmp eq i32 %129, 0, !dbg !23
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i29, float %125, float 0x3FC10B2820000000) #4, !dbg !23
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i29, float %125, float 0x3FC10B2820000000) #4, !dbg !23
  %.05.i31 = select i1 %.not2.i30, float %131, float %130, !dbg !23
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not3.i32 = icmp eq i32 %132, 0, !dbg !23
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i31, float %125, float 0xBFD5553DA0000000) #4, !dbg !23
  %134 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i31, float %125, float 0xBFD5553DA0000000) #4, !dbg !23
  %.0.i33 = select i1 %.not3.i32, float %134, float %133, !dbg !23
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not4.i34 = icmp eq i32 %135, 0, !dbg !23
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i33, float %125, float 0.000000e+00) #4, !dbg !23
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i33, float %125, float 0.000000e+00) #4, !dbg !23
  %.04.i35 = select i1 %.not4.i34, float %137, float %136, !dbg !23
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not5.i36 = icmp eq i32 %138, 0, !dbg !23
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i35, float %40, float %40) #4, !dbg !23
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i35, float %40, float %40) #4, !dbg !23
  %.02.i37 = select i1 %.not5.i36, float %140, float %139, !dbg !23
  br label %__nv_tanhf.exit38, !dbg !23

__nv_tanhf.exit38:                                ; preds = %__internal_fmad.exit1.i22, %__internal_fmad.exit3.i27
  %s.1.i26 = phi float [ %124, %__internal_fmad.exit1.i22 ], [ %.02.i37, %__internal_fmad.exit3.i27 ], !dbg !23
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not.i39 = icmp eq i32 %141, 0, !dbg !23
  %142 = tail call float @llvm.nvvm.fabs.ftz.f(float %41) #4, !dbg !23
  %143 = tail call float @llvm.nvvm.fabs.f(float %41) #4, !dbg !23
  %.01.i40 = select i1 %.not.i39, float %143, float %142, !dbg !23
  %144 = fcmp ult float %.01.i40, 0x3FE3333340000000, !dbg !23
  br i1 %144, label %__internal_fmad.exit3.i46, label %__internal_fmad.exit1.i41, !dbg !23

__internal_fmad.exit1.i41:                        ; preds = %__nv_tanhf.exit38
  %145 = fmul float %.01.i40, 0x4007154760000000, !dbg !23
  %146 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %145) #4, !dbg !23
  %147 = fadd float %146, 1.000000e+00, !dbg !23
  %148 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %147) #5, !dbg !23, !srcloc !24
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not6.i42 = icmp eq i32 %149, 0, !dbg !23
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %148, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %148, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %.03.i43 = select i1 %.not6.i42, float %151, float %150, !dbg !23
  %152 = fcmp oge float %.01.i40, 0x4022059680000000, !dbg !23
  %s.0.i44 = select i1 %152, float 1.000000e+00, float %.03.i43, !dbg !23
  %153 = bitcast float %s.0.i44 to i32, !dbg !23
  %154 = bitcast float %41 to i32, !dbg !23
  %155 = and i32 %154, -2147483648, !dbg !23
  %156 = or i32 %155, %153, !dbg !23
  %157 = bitcast i32 %156 to float, !dbg !23
  br label %__nv_tanhf.exit57, !dbg !23

__internal_fmad.exit3.i46:                        ; preds = %__nv_tanhf.exit38
  %158 = fmul float %41, %41, !dbg !23
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not1.i47 = icmp eq i32 %159, 0, !dbg !23
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %158, float 0xBFAAC795C0000000) #4, !dbg !23
  %161 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %158, float 0xBFAAC795C0000000) #4, !dbg !23
  %.06.i48 = select i1 %.not1.i47, float %161, float %160, !dbg !23
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not2.i49 = icmp eq i32 %162, 0, !dbg !23
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i48, float %158, float 0x3FC10B2820000000) #4, !dbg !23
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i48, float %158, float 0x3FC10B2820000000) #4, !dbg !23
  %.05.i50 = select i1 %.not2.i49, float %164, float %163, !dbg !23
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not3.i51 = icmp eq i32 %165, 0, !dbg !23
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i50, float %158, float 0xBFD5553DA0000000) #4, !dbg !23
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i50, float %158, float 0xBFD5553DA0000000) #4, !dbg !23
  %.0.i52 = select i1 %.not3.i51, float %167, float %166, !dbg !23
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not4.i53 = icmp eq i32 %168, 0, !dbg !23
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i52, float %158, float 0.000000e+00) #4, !dbg !23
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i52, float %158, float 0.000000e+00) #4, !dbg !23
  %.04.i54 = select i1 %.not4.i53, float %170, float %169, !dbg !23
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not5.i55 = icmp eq i32 %171, 0, !dbg !23
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i54, float %41, float %41) #4, !dbg !23
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i54, float %41, float %41) #4, !dbg !23
  %.02.i56 = select i1 %.not5.i55, float %173, float %172, !dbg !23
  %.pre = bitcast float %41 to i32, !dbg !25
  br label %__nv_tanhf.exit57, !dbg !23

__nv_tanhf.exit57:                                ; preds = %__internal_fmad.exit1.i41, %__internal_fmad.exit3.i46
  %.pre-phi = phi i32 [ %154, %__internal_fmad.exit1.i41 ], [ %.pre, %__internal_fmad.exit3.i46 ], !dbg !25
  %s.1.i45 = phi float [ %157, %__internal_fmad.exit1.i41 ], [ %.02.i56, %__internal_fmad.exit3.i46 ], !dbg !23
  %174 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !21
  %175 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !21
  %176 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !21
  %177 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !21
  %178 = bitcast float %38 to i32, !dbg !25
  %179 = bitcast float %39 to i32, !dbg !25
  %180 = bitcast float %40 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %.pre-phi, ptr addrspace(1) %16, i1 true) #4, !dbg !25
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !26
  %182 = getelementptr i1, ptr addrspace(1) %4, i64 %15, !dbg !27
  %183 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !21
  %184 = insertelement <4 x i32> %183, i32 %176, i64 1, !dbg !21
  %185 = insertelement <4 x i32> %184, i32 %175, i64 2, !dbg !21
  %186 = insertelement <4 x i32> %185, i32 %174, i64 3, !dbg !21
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !21
  %188 = insertelement <4 x float> poison, float %s.1.i, i64 0, !dbg !28
  %189 = insertelement <4 x float> %188, float %s.1.i7, i64 1, !dbg !28
  %190 = insertelement <4 x float> %189, float %s.1.i26, i64 2, !dbg !28
  %191 = insertelement <4 x float> %190, float %s.1.i45, i64 3, !dbg !28
  %192 = fadd <4 x float> %191, %187, !dbg !28
  %193 = fcmp ogt <4 x float> %192, splat (float -1.000000e+00), !dbg !29
  %194 = fcmp uno <4 x float> %192, zeroinitializer, !dbg !33
  %195 = or <4 x i1> %193, %194, !dbg !34
  %196 = select <4 x i1> %195, <4 x float> %192, <4 x float> splat (float -1.000000e+00), !dbg !35
  %197 = fcmp olt <4 x float> %196, splat (float 1.000000e+00), !dbg !36
  %198 = extractelement <4 x float> %196, i64 0, !dbg !38
  %199 = fcmp uno float %198, 0.000000e+00, !dbg !39
  %200 = extractelement <4 x float> %196, i64 1, !dbg !38
  %201 = fcmp uno float %200, 0.000000e+00, !dbg !39
  %202 = extractelement <4 x float> %196, i64 2, !dbg !38
  %203 = fcmp uno float %202, 0.000000e+00, !dbg !39
  %204 = extractelement <4 x float> %196, i64 3, !dbg !38
  %205 = fcmp uno float %204, 0.000000e+00, !dbg !39
  %206 = extractelement <4 x i1> %197, i64 0, !dbg !40
  %207 = or i1 %206, %199, !dbg !40
  %208 = extractelement <4 x i1> %197, i64 1, !dbg !40
  %209 = or i1 %208, %201, !dbg !40
  %210 = extractelement <4 x i1> %197, i64 2, !dbg !40
  %211 = or i1 %210, %203, !dbg !40
  %212 = extractelement <4 x i1> %197, i64 3, !dbg !40
  %213 = or i1 %212, %205, !dbg !40
  %214 = tail call <4 x float> @llvm.fabs.v4f32(<4 x float> %192), !dbg !41
  %215 = fcmp ole <4 x float> %214, splat (float 1.000000e+00), !dbg !41
  %216 = bitcast float %198 to i32, !dbg !38
  %217 = select i1 %207, i32 %216, i32 1065353216, !dbg !42
  %218 = bitcast float %200 to i32, !dbg !38
  %219 = select i1 %209, i32 %218, i32 1065353216, !dbg !42
  %220 = bitcast float %202 to i32, !dbg !38
  %221 = select i1 %211, i32 %220, i32 1065353216, !dbg !42
  %222 = bitcast float %204 to i32, !dbg !38
  %223 = select i1 %213, i32 %222, i32 1065353216, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %219, i32 %221, i32 %223, ptr addrspace(1) %181, i1 true) #4, !dbg !38
  %224 = zext <4 x i1> %215 to <4 x i8>, !dbg !43
  %225 = bitcast <4 x i8> %224 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %182, i1 true) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxmi2ibvgitkhypvp2i7gposuyj6r53r6f5erprqhcuqytgjk3uu.py", directory: "inductor_cache/xm")
!4 = !{ptr @triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8", linkageName: "triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 30, column: 26, scope: !7)
!24 = !{i32 21046}
!25 = !DILocation(line: 39, column: 39, scope: !7)
!26 = !DILocation(line: 40, column: 25, scope: !7)
!27 = !DILocation(line: 41, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 33, column: 40, scope: !7)
!33 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 110, column: 15, scope: !30, inlinedAt: !37)
!37 = !DILocation(line: 35, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 112, column: 21, scope: !30, inlinedAt: !37)
!40 = !DILocation(line: 112, column: 16, scope: !30, inlinedAt: !37)
!41 = !DILocation(line: 38, column: 20, scope: !7)
!42 = !DILocation(line: 113, column: 29, scope: !30, inlinedAt: !37)
!43 = !DILocation(line: 41, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
