; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 256, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = icmp samesign ult i32 %14, 192, !dbg !13
  %16 = mul i32 %8, 192, !dbg !14
  %17 = add i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = and i1 %15, %9, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %32 = zext nneg i32 %14 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %39 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %40 = insertelement <2 x i32> %39, i32 %23, i64 1, !dbg !18
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !18
  %42 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %43 = insertelement <2 x i32> %42, i32 %29, i64 1, !dbg !20
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !20
  %45 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %46 = insertelement <2 x i32> %45, i32 %36, i64 1, !dbg !22
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !22
  %48 = fadd <2 x float> %44, %47, !dbg !23
  %49 = fadd <2 x float> %48, %41, !dbg !24
  %50 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %51 = insertelement <2 x i32> %50, i32 %24, i64 1, !dbg !18
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !18
  %53 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %54 = insertelement <2 x i32> %53, i32 %30, i64 1, !dbg !20
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !20
  %56 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %57 = insertelement <2 x i32> %56, i32 %37, i64 1, !dbg !22
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !22
  %59 = fadd <2 x float> %55, %58, !dbg !23
  %60 = fadd <2 x float> %59, %52, !dbg !24
  %61 = extractelement <2 x float> %49, i64 0, !dbg !25
  %62 = extractelement <2 x float> %49, i64 1, !dbg !25
  %63 = fadd float %61, %62, !dbg !25
  %64 = extractelement <2 x float> %60, i64 1, !dbg !25
  %65 = fadd float %64, %63, !dbg !25
  %66 = extractelement <2 x float> %60, i64 0, !dbg !25
  %67 = fadd float %66, %65, !dbg !25
  %68 = select i1 %20, float %67, float 0.000000e+00, !dbg !25
  %69 = bitcast float %68 to i32, !dbg !30
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = fadd float %68, %71, !dbg !25
  %73 = bitcast float %72 to i32, !dbg !30
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = fadd float %72, %75, !dbg !25
  %77 = bitcast float %76 to i32, !dbg !30
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = fadd float %76, %79, !dbg !25
  %81 = bitcast float %80 to i32, !dbg !30
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = fadd float %80, %83, !dbg !25
  %85 = bitcast float %84 to i32, !dbg !30
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = fadd float %84, %87, !dbg !25
  %89 = icmp eq i32 %11, 0, !dbg !30
  %90 = and i32 %12, 1, !dbg !30
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !30
  %92 = bitcast float %88 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %89) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %93 = icmp slt i32 %10, 2, !dbg !30
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %93) #5, !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = fadd float %96, %98, !dbg !25
  %100 = and i32 %10, 1, !dbg !30
  %101 = icmp eq i32 %100, 0, !dbg !30
  %102 = and i1 %93, %101, !dbg !30
  %103 = bitcast float %99 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %103, i1 %102) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %104 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.920000e+02) #5, !dbg !31
  %106 = fsub float %61, %105, !dbg !32
  %107 = fsub float %62, %105, !dbg !32
  %108 = fsub float %64, %105, !dbg !32
  %109 = fsub float %66, %105, !dbg !32
  %110 = fmul float %106, %106, !dbg !33
  %111 = fmul float %107, %107, !dbg !33
  %112 = fmul float %108, %108, !dbg !33
  %113 = fmul float %109, %109, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %114 = fadd float %110, %111, !dbg !36
  %115 = fadd float %112, %114, !dbg !36
  %116 = fadd float %113, %115, !dbg !36
  %117 = select i1 %20, float %116, float 0.000000e+00, !dbg !36
  %118 = bitcast float %117 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = fadd float %117, %120, !dbg !36
  %122 = bitcast float %121 to i32, !dbg !34
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !34
  %124 = bitcast i32 %123 to float, !dbg !34
  %125 = fadd float %121, %124, !dbg !36
  %126 = bitcast float %125 to i32, !dbg !34
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !34
  %128 = bitcast i32 %127 to float, !dbg !34
  %129 = fadd float %125, %128, !dbg !36
  %130 = bitcast float %129 to i32, !dbg !34
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = fadd float %129, %132, !dbg !36
  %134 = bitcast float %133 to i32, !dbg !34
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !34
  %136 = bitcast i32 %135 to float, !dbg !34
  %137 = fadd float %133, %136, !dbg !36
  %138 = bitcast float %137 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %138, i1 %89) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %139 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %93) #5, !dbg !34
  %140 = bitcast i32 %139 to float, !dbg !34
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !34
  %142 = bitcast i32 %141 to float, !dbg !34
  %143 = fadd float %140, %142, !dbg !36
  %144 = bitcast float %143 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %144, i1 %102) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %145 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 1.920000e+02) #5, !dbg !37
  %147 = fadd float %146, 0x3EB0C6F7A0000000, !dbg !38
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %148, 0, !dbg !39
  br i1 %.not.i, label %151, label %149, !dbg !39

149:                                              ; preds = %7
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

151:                                              ; preds = %7
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %149, %151
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], !dbg !39
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i10 = icmp eq i32 %156, 0, !dbg !39
  br i1 %.not.i10, label %159, label %157, !dbg !39

157:                                              ; preds = %__nv_rsqrtf.exit
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !39
  br label %__nv_rsqrtf.exit12, !dbg !39

159:                                              ; preds = %__nv_rsqrtf.exit
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !39
  br label %__nv_rsqrtf.exit12, !dbg !39

__nv_rsqrtf.exit12:                               ; preds = %157, %159
  %.0.i11 = phi float [ %158, %157 ], [ %160, %159 ], !dbg !39
  %161 = fmul float %106, %.0.i11, !dbg !40
  %162 = fmul float %107, %.0.i11, !dbg !40
  %163 = fmul float %108, %.0.i11, !dbg !40
  %164 = fmul float %109, %.0.i11, !dbg !40
  %165 = fmul float %.0.i, 0x3F75555560000000, !dbg !41
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !42
  %167 = bitcast float %161 to i32, !dbg !43
  %168 = bitcast float %162 to i32, !dbg !43
  %169 = bitcast float %163 to i32, !dbg !43
  %170 = bitcast float %164 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %166, i1 %20) #5, !dbg !43
  %171 = sext i32 %8 to i64, !dbg !44
  %172 = getelementptr float, ptr addrspace(1) %4, i64 %171, !dbg !44
  %urem = and i32 %10, 63, !dbg !45
  %173 = icmp eq i32 %urem, 0, !dbg !45
  %174 = bitcast float %165 to i32, !dbg !45
  %175 = and i1 %173, %9, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %172, i1 %175) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4xwh7qmk4thugvevh6mey26vsavrskqbbqb7irfvtiicv7vru2t.py", directory: "inductor_cache/4x")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_19, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_19, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_19", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!35 = !DILocation(line: 48, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 28, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 57, column: 20, scope: !7)
!42 = !DILocation(line: 58, column: 25, scope: !7)
!43 = !DILocation(line: 58, column: 46, scope: !7)
!44 = !DILocation(line: 59, column: 25, scope: !7)
!45 = !DILocation(line: 59, column: 37, scope: !7)
!46 = !DILocation(line: 59, column: 4, scope: !7)
