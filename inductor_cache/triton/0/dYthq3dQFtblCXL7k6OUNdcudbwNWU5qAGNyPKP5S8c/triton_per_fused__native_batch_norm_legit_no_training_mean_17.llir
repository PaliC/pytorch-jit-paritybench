; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 192, !dbg !14
  %18 = icmp slt i32 %16, 192, !dbg !14
  %19 = shl i32 %11, 2, !dbg !15
  %20 = and i32 %19, 12, !dbg !15
  %21 = srem i32 %15, 48, !dbg !16
  %22 = srem i32 %16, 48, !dbg !16
  %23 = shl i32 %15, 4, !dbg !17
  %24 = shl i32 %16, 4, !dbg !17
  %25 = or disjoint i32 %23, %20, !dbg !18
  %26 = or disjoint i32 %24, %20, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %33 = sext i32 %21 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %35 = sext i32 %22 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #5, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #5, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #5, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #5, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #5, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #5, !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #5, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #5, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #5, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #5, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #5, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #5, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #5, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #5, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %77 = fadd float %51, 0x3EE4F8B580000000, !dbg !29
  %78 = fadd float %56, 0x3EE4F8B580000000, !dbg !29
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i13 = icmp eq i32 %85, 0, !dbg !30
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i16 = icmp eq i32 %86, 0, !dbg !30
  br i1 %.not.i13, label %92, label %87, !dbg !30

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %90, label %88, !dbg !30

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %95, label %93, !dbg !30

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

__nv_sqrtf.exit17:                                ; preds = %88, %90, %93, %95
  %.0.i15 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !30
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i33 = icmp eq i32 %103, 0, !dbg !30
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i36 = icmp eq i32 %104, 0, !dbg !30
  br i1 %.not.i33, label %110, label %105, !dbg !30

105:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %108, label %106, !dbg !30

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #5, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #5, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

110:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %113, label %111, !dbg !30

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #5, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #5, !dbg !30
  br label %__nv_sqrtf.exit37, !dbg !30

__nv_sqrtf.exit37:                                ; preds = %106, %108, %111, %113
  %.0.i35 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %116 = bitcast i32 %115 to float, !dbg !20
  %117 = bitcast i32 %44 to float, !dbg !22
  %118 = fsub float %116, %117, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %120 = bitcast i32 %119 to float, !dbg !20
  %121 = fsub float %120, %117, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %123 = bitcast i32 %122 to float, !dbg !20
  %124 = fsub float %123, %117, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %126 = bitcast i32 %125 to float, !dbg !20
  %127 = fsub float %126, %117, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %129 = bitcast i32 %128 to float, !dbg !20
  %130 = bitcast i32 %40 to float, !dbg !22
  %131 = fsub float %129, %130, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %133 = bitcast i32 %132 to float, !dbg !20
  %134 = fsub float %133, %130, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %136 = bitcast i32 %135 to float, !dbg !20
  %137 = fsub float %136, %130, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %139 = bitcast i32 %138 to float, !dbg !20
  %140 = fsub float %139, %130, !dbg !31
  %141 = bitcast i32 %76 to float, !dbg !28
  %142 = bitcast i32 %72 to float, !dbg !28
  %143 = bitcast i32 %66 to float, !dbg !26
  %144 = bitcast i32 %62 to float, !dbg !26
  %145 = and i32 %11, 127, !dbg !12
  %146 = or disjoint i32 %10, %145, !dbg !13
  %147 = icmp slt i32 %146, 192, !dbg !14
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !32
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #5, !dbg !32
  %150 = fmul float %140, %148, !dbg !33
  %151 = fmul float %137, %148, !dbg !33
  %152 = fmul float %134, %148, !dbg !33
  %153 = fmul float %131, %148, !dbg !33
  %154 = fmul float %127, %149, !dbg !33
  %155 = fmul float %124, %149, !dbg !33
  %156 = fmul float %121, %149, !dbg !33
  %157 = fmul float %118, %149, !dbg !33
  %158 = fmul float %150, %144, !dbg !34
  %159 = fmul float %151, %144, !dbg !34
  %160 = fmul float %152, %144, !dbg !34
  %161 = fmul float %153, %144, !dbg !34
  %162 = fmul float %154, %143, !dbg !34
  %163 = fmul float %155, %143, !dbg !34
  %164 = fmul float %156, %143, !dbg !34
  %165 = fmul float %157, %143, !dbg !34
  %166 = fadd float %158, %142, !dbg !35
  %167 = fadd float %159, %142, !dbg !35
  %168 = fadd float %160, %142, !dbg !35
  %169 = fadd float %161, %142, !dbg !35
  %170 = fadd float %162, %141, !dbg !35
  %171 = fadd float %163, %141, !dbg !35
  %172 = fadd float %164, %141, !dbg !35
  %173 = fadd float %165, %141, !dbg !35
  %174 = fadd float %166, %167, !dbg !36
  %175 = fadd float %168, %174, !dbg !36
  %176 = fadd float %169, %175, !dbg !36
  %177 = select i1 %17, float %176, float 0.000000e+00, !dbg !36
  %178 = fadd float %170, %171, !dbg !36
  %179 = fadd float %172, %178, !dbg !36
  %180 = fadd float %173, %179, !dbg !36
  %181 = select i1 %18, float %180, float 0.000000e+00, !dbg !36
  %182 = bitcast float %177 to i32, !dbg !41
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = fadd float %177, %184, !dbg !36
  %186 = bitcast float %185 to i32, !dbg !41
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !41
  %188 = bitcast i32 %187 to float, !dbg !41
  %189 = fadd float %185, %188, !dbg !36
  %190 = bitcast float %181 to i32, !dbg !41
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !41
  %192 = bitcast i32 %191 to float, !dbg !41
  %193 = fadd float %181, %192, !dbg !36
  %194 = bitcast float %193 to i32, !dbg !41
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !41
  %196 = bitcast i32 %195 to float, !dbg !41
  %197 = fadd float %193, %196, !dbg !36
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %199 = bitcast float %189 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #5, !dbg !42
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !42
  %201 = bitcast float %197 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !42
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !42
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 1.600000e+01) #5, !dbg !42
  %205 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !43
  %206 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !43
  %207 = bitcast float %166 to i32, !dbg !44
  %208 = bitcast float %167 to i32, !dbg !44
  %209 = bitcast float %168 to i32, !dbg !44
  %210 = bitcast float %169 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %205, i1 %17) #5, !dbg !44
  %211 = bitcast float %170 to i32, !dbg !44
  %212 = bitcast float %171 to i32, !dbg !44
  %213 = bitcast float %172 to i32, !dbg !44
  %214 = bitcast float %173 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %206, i1 %18) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %215 = sext i32 %146 to i64, !dbg !46
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !46
  %217 = and i32 %11, 128, !dbg !47
  %218 = icmp eq i32 %217, 0, !dbg !47
  %219 = bitcast float %204 to i32, !dbg !47
  %220 = and i1 %218, %147, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %216, i1 %220) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3gixtkdclvntm7b3rzer2jso4jfocm2aji2pjoqg6qguh6y6qs.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_17", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 50, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 25, scope: !7)
!44 = !DILocation(line: 53, column: 45, scope: !7)
!45 = !DILocation(line: 54, column: 4, scope: !7)
!46 = !DILocation(line: 55, column: 28, scope: !7)
!47 = !DILocation(line: 55, column: 40, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
