; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 2, !dbg !13
  %22 = or disjoint i32 %20, 512, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %23 = sdiv i32 %.frozen, 16, !dbg !14
  %24 = sdiv i32 %22, 16, !dbg !14
  %25 = srem i32 %23, 16, !dbg !15
  %26 = srem i32 %24, 16, !dbg !15
  %27 = mul i32 %23, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %28 = srem i32 %21, 16, !dbg !16
  %29 = sdiv i32 %20, 256, !dbg !17
  %30 = sdiv i32 %22, 256, !dbg !17
  %31 = srem i32 %29, 256, !dbg !18
  %32 = srem i32 %30, 256, !dbg !18
  %33 = sext i32 %25 to i64, !dbg !19
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = sext i32 %26 to i64, !dbg !19
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %45 = sext i32 %.decomposed to i64, !dbg !21
  %46 = getelementptr i64, ptr addrspace(1) %2, i64 %45, !dbg !21
  %47 = sext i32 %28 to i64, !dbg !21
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !21
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !22
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !22
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !22
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !22
  %61 = sext i32 %31 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !23
  %63 = sext i32 %32 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %73 = getelementptr i64, ptr addrspace(1) %6, i64 %33, !dbg !25
  %74 = getelementptr i64, ptr addrspace(1) %6, i64 %35, !dbg !25
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %83 = getelementptr i64, ptr addrspace(1) %7, i64 %45, !dbg !27
  %84 = getelementptr i64, ptr addrspace(1) %7, i64 %47, !dbg !27
  %85 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %86 = extractvalue { i64, i64 } %85, 0, !dbg !28
  %87 = extractvalue { i64, i64 } %85, 1, !dbg !28
  %88 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %89 = extractvalue { i64, i64 } %88, 0, !dbg !28
  %90 = extractvalue { i64, i64 } %88, 1, !dbg !28
  %91 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %92 = extractvalue { i64, i64 } %91, 0, !dbg !28
  %93 = extractvalue { i64, i64 } %91, 1, !dbg !28
  %94 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %95 = extractvalue { i64, i64 } %94, 0, !dbg !28
  %96 = extractvalue { i64, i64 } %94, 1, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %8, i64 %45, !dbg !29
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !30
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !30
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !30
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !30
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !32
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !32
  %118 = sext i32 %20 to i64, !dbg !33
  %119 = getelementptr float, ptr addrspace(1) %10, i64 %118, !dbg !33
  %120 = sext i32 %22 to i64, !dbg !33
  %121 = getelementptr float, ptr addrspace(1) %10, i64 %120, !dbg !33
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !34
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !34
  %132 = getelementptr float, ptr addrspace(1) %11, i64 %61, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %11, i64 %63, !dbg !35
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !36
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !36
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !36
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !36
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %12, i64 %118, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %12, i64 %120, !dbg !37
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !38
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !38
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !38
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !38
  %154 = lshr i64 %37, 60, !dbg !39
  %155 = and i64 %154, 8, !dbg !39
  %156 = add i64 %155, %37, !dbg !39
  %157 = lshr i64 %41, 60, !dbg !39
  %158 = and i64 %157, 8, !dbg !39
  %159 = add i64 %158, %41, !dbg !39
  %160 = lshr i64 %50, 60, !dbg !40
  %161 = and i64 %160, 8, !dbg !40
  %162 = add i64 %161, %50, !dbg !40
  %163 = lshr i64 %51, 60, !dbg !40
  %164 = and i64 %163, 8, !dbg !40
  %165 = add i64 %164, %51, !dbg !40
  %166 = lshr i64 %53, 60, !dbg !40
  %167 = and i64 %166, 8, !dbg !40
  %168 = add i64 %167, %53, !dbg !40
  %169 = lshr i64 %54, 60, !dbg !40
  %170 = and i64 %169, 8, !dbg !40
  %171 = add i64 %170, %54, !dbg !40
  %172 = lshr i64 %56, 60, !dbg !40
  %173 = and i64 %172, 8, !dbg !40
  %174 = add i64 %173, %56, !dbg !40
  %175 = lshr i64 %57, 60, !dbg !40
  %176 = and i64 %175, 8, !dbg !40
  %177 = add i64 %176, %57, !dbg !40
  %178 = lshr i64 %59, 60, !dbg !40
  %179 = and i64 %178, 8, !dbg !40
  %180 = add i64 %179, %59, !dbg !40
  %181 = lshr i64 %60, 60, !dbg !40
  %182 = and i64 %181, 8, !dbg !40
  %183 = add i64 %182, %60, !dbg !40
  %184 = shl i64 %156, 3, !dbg !41
  %185 = shl i64 %159, 3, !dbg !41
  %186 = shl nsw i32 %29, 6, !dbg !42
  %187 = shl nsw i32 %30, 6, !dbg !42
  %188 = sext i32 %186 to i64, !dbg !43
  %189 = sext i32 %187 to i64, !dbg !43
  %190 = add i64 %184, %188, !dbg !44
  %191 = add i64 %190, %162, !dbg !43
  %192 = add i64 %190, %165, !dbg !43
  %193 = add i64 %190, %168, !dbg !43
  %194 = add i64 %190, %171, !dbg !43
  %195 = add i64 %185, %189, !dbg !44
  %196 = add i64 %195, %174, !dbg !43
  %197 = add i64 %195, %177, !dbg !43
  %198 = add i64 %195, %180, !dbg !43
  %199 = add i64 %195, %183, !dbg !43
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !45
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %192, !dbg !45
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !45
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %194, !dbg !45
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %196, !dbg !45
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %197, !dbg !45
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %198, !dbg !45
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !45
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !46
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #1, !dbg !46
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !46
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #1, !dbg !46
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !46
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 true) #1, !dbg !46
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !46
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #1, !dbg !46
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %191, !dbg !47
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %192, !dbg !47
  %218 = getelementptr float, ptr addrspace(1) %5, i64 %193, !dbg !47
  %219 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !47
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !47
  %221 = getelementptr float, ptr addrspace(1) %5, i64 %197, !dbg !47
  %222 = getelementptr float, ptr addrspace(1) %5, i64 %198, !dbg !47
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !47
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !48
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #1, !dbg !48
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !48
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 true) #1, !dbg !48
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !48
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #1, !dbg !48
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !48
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !48
  %232 = lshr i64 %75, 60, !dbg !49
  %233 = and i64 %232, 8, !dbg !49
  %234 = add i64 %233, %75, !dbg !49
  %235 = lshr i64 %79, 60, !dbg !49
  %236 = and i64 %235, 8, !dbg !49
  %237 = add i64 %236, %79, !dbg !49
  %238 = shl i64 %234, 3, !dbg !50
  %239 = shl i64 %237, 3, !dbg !50
  %240 = add i64 %238, %188, !dbg !51
  %241 = add i64 %240, %162, !dbg !52
  %242 = add i64 %240, %165, !dbg !52
  %243 = add i64 %240, %168, !dbg !52
  %244 = add i64 %240, %171, !dbg !52
  %245 = add i64 %239, %189, !dbg !51
  %246 = add i64 %245, %174, !dbg !52
  %247 = add i64 %245, %177, !dbg !52
  %248 = add i64 %245, %180, !dbg !52
  %249 = add i64 %245, %183, !dbg !52
  %250 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !53
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !53
  %252 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !53
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !53
  %254 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !53
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %247, !dbg !53
  %256 = getelementptr float, ptr addrspace(1) %3, i64 %248, !dbg !53
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %249, !dbg !53
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #1, !dbg !54
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 true) #1, !dbg !54
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !54
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #1, !dbg !54
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !54
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !54
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !54
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #1, !dbg !54
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !55
  %267 = getelementptr float, ptr addrspace(1) %5, i64 %242, !dbg !55
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !55
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %244, !dbg !55
  %270 = getelementptr float, ptr addrspace(1) %5, i64 %246, !dbg !55
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !55
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %248, !dbg !55
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !55
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !56
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 true) #1, !dbg !56
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !56
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #1, !dbg !56
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !56
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 true) #1, !dbg !56
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !56
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !56
  %282 = lshr i64 %86, 60, !dbg !57
  %283 = and i64 %282, 8, !dbg !57
  %284 = add i64 %283, %86, !dbg !57
  %285 = lshr i64 %87, 60, !dbg !57
  %286 = and i64 %285, 8, !dbg !57
  %287 = add i64 %286, %87, !dbg !57
  %288 = lshr i64 %89, 60, !dbg !57
  %289 = and i64 %288, 8, !dbg !57
  %290 = add i64 %289, %89, !dbg !57
  %291 = lshr i64 %90, 60, !dbg !57
  %292 = and i64 %291, 8, !dbg !57
  %293 = add i64 %292, %90, !dbg !57
  %294 = lshr i64 %92, 60, !dbg !57
  %295 = and i64 %294, 8, !dbg !57
  %296 = add i64 %295, %92, !dbg !57
  %297 = lshr i64 %93, 60, !dbg !57
  %298 = and i64 %297, 8, !dbg !57
  %299 = add i64 %298, %93, !dbg !57
  %300 = lshr i64 %95, 60, !dbg !57
  %301 = and i64 %300, 8, !dbg !57
  %302 = add i64 %301, %95, !dbg !57
  %303 = lshr i64 %96, 60, !dbg !57
  %304 = and i64 %303, 8, !dbg !57
  %305 = add i64 %304, %96, !dbg !57
  %306 = add i64 %240, %284, !dbg !58
  %307 = add i64 %240, %287, !dbg !58
  %308 = add i64 %240, %290, !dbg !58
  %309 = add i64 %240, %293, !dbg !58
  %310 = add i64 %245, %296, !dbg !58
  %311 = add i64 %245, %299, !dbg !58
  %312 = add i64 %245, %302, !dbg !58
  %313 = add i64 %245, %305, !dbg !58
  %314 = getelementptr float, ptr addrspace(1) %3, i64 %306, !dbg !59
  %315 = getelementptr float, ptr addrspace(1) %3, i64 %307, !dbg !59
  %316 = getelementptr float, ptr addrspace(1) %3, i64 %308, !dbg !59
  %317 = getelementptr float, ptr addrspace(1) %3, i64 %309, !dbg !59
  %318 = getelementptr float, ptr addrspace(1) %3, i64 %310, !dbg !59
  %319 = getelementptr float, ptr addrspace(1) %3, i64 %311, !dbg !59
  %320 = getelementptr float, ptr addrspace(1) %3, i64 %312, !dbg !59
  %321 = getelementptr float, ptr addrspace(1) %3, i64 %313, !dbg !59
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 true) #1, !dbg !60
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 true) #1, !dbg !60
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %316, i1 true) #1, !dbg !60
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 true) #1, !dbg !60
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 true) #1, !dbg !60
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 true) #1, !dbg !60
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 true) #1, !dbg !60
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 true) #1, !dbg !60
  %330 = getelementptr float, ptr addrspace(1) %5, i64 %306, !dbg !61
  %331 = getelementptr float, ptr addrspace(1) %5, i64 %307, !dbg !61
  %332 = getelementptr float, ptr addrspace(1) %5, i64 %308, !dbg !61
  %333 = getelementptr float, ptr addrspace(1) %5, i64 %309, !dbg !61
  %334 = getelementptr float, ptr addrspace(1) %5, i64 %310, !dbg !61
  %335 = getelementptr float, ptr addrspace(1) %5, i64 %311, !dbg !61
  %336 = getelementptr float, ptr addrspace(1) %5, i64 %312, !dbg !61
  %337 = getelementptr float, ptr addrspace(1) %5, i64 %313, !dbg !61
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 true) #1, !dbg !62
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 true) #1, !dbg !62
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 true) #1, !dbg !62
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 true) #1, !dbg !62
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 true) #1, !dbg !62
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 true) #1, !dbg !62
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 true) #1, !dbg !62
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 true) #1, !dbg !62
  %346 = add i64 %190, %284, !dbg !63
  %347 = add i64 %190, %287, !dbg !63
  %348 = add i64 %190, %290, !dbg !63
  %349 = add i64 %190, %293, !dbg !63
  %350 = add i64 %195, %296, !dbg !63
  %351 = add i64 %195, %299, !dbg !63
  %352 = add i64 %195, %302, !dbg !63
  %353 = add i64 %195, %305, !dbg !63
  %354 = getelementptr float, ptr addrspace(1) %3, i64 %346, !dbg !64
  %355 = getelementptr float, ptr addrspace(1) %3, i64 %347, !dbg !64
  %356 = getelementptr float, ptr addrspace(1) %3, i64 %348, !dbg !64
  %357 = getelementptr float, ptr addrspace(1) %3, i64 %349, !dbg !64
  %358 = getelementptr float, ptr addrspace(1) %3, i64 %350, !dbg !64
  %359 = getelementptr float, ptr addrspace(1) %3, i64 %351, !dbg !64
  %360 = getelementptr float, ptr addrspace(1) %3, i64 %352, !dbg !64
  %361 = getelementptr float, ptr addrspace(1) %3, i64 %353, !dbg !64
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 true) #1, !dbg !65
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 true) #1, !dbg !65
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 true) #1, !dbg !65
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 true) #1, !dbg !65
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 true) #1, !dbg !65
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 true) #1, !dbg !65
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 true) #1, !dbg !65
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 true) #1, !dbg !65
  %370 = getelementptr float, ptr addrspace(1) %5, i64 %346, !dbg !66
  %371 = getelementptr float, ptr addrspace(1) %5, i64 %347, !dbg !66
  %372 = getelementptr float, ptr addrspace(1) %5, i64 %348, !dbg !66
  %373 = getelementptr float, ptr addrspace(1) %5, i64 %349, !dbg !66
  %374 = getelementptr float, ptr addrspace(1) %5, i64 %350, !dbg !66
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %351, !dbg !66
  %376 = getelementptr float, ptr addrspace(1) %5, i64 %352, !dbg !66
  %377 = getelementptr float, ptr addrspace(1) %5, i64 %353, !dbg !66
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 true) #1, !dbg !67
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 true) #1, !dbg !67
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 true) #1, !dbg !67
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 true) #1, !dbg !67
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 true) #1, !dbg !67
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 true) #1, !dbg !67
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 true) #1, !dbg !67
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 true) #1, !dbg !67
  %386 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !46
  %387 = insertelement <2 x i32> %386, i32 %258, i64 1, !dbg !46
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !46
  %389 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !68
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !68
  %391 = shufflevector <2 x float> %390, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %392 = fadd <2 x float> %391, %388, !dbg !68
  %393 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !48
  %394 = insertelement <2 x i32> %393, i32 %274, i64 1, !dbg !48
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !48
  %396 = fadd <2 x float> %392, %395, !dbg !69
  %397 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !65
  %398 = insertelement <2 x i32> %397, i32 %322, i64 1, !dbg !65
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !65
  %400 = fadd <2 x float> %391, %399, !dbg !70
  %401 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !67
  %402 = insertelement <2 x i32> %401, i32 %338, i64 1, !dbg !67
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !67
  %404 = fadd <2 x float> %400, %403, !dbg !71
  %405 = fsub <2 x float> %404, %396, !dbg !72
  %406 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !73
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !73
  %408 = shufflevector <2 x float> %407, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %409 = fmul <2 x float> %405, %408, !dbg !73
  %410 = fadd <2 x float> %396, %409, !dbg !74
  %411 = shufflevector <2 x float> %410, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %412 = shufflevector <2 x float> %410, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %413 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !46
  %414 = insertelement <2 x i32> %413, i32 %259, i64 1, !dbg !46
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !46
  %416 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !68
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !68
  %418 = shufflevector <2 x float> %417, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %419 = fadd <2 x float> %418, %415, !dbg !68
  %420 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !48
  %421 = insertelement <2 x i32> %420, i32 %275, i64 1, !dbg !48
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !48
  %423 = fadd <2 x float> %419, %422, !dbg !69
  %424 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !65
  %425 = insertelement <2 x i32> %424, i32 %323, i64 1, !dbg !65
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !65
  %427 = fadd <2 x float> %418, %426, !dbg !70
  %428 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !67
  %429 = insertelement <2 x i32> %428, i32 %339, i64 1, !dbg !67
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !67
  %431 = fadd <2 x float> %427, %430, !dbg !71
  %432 = fsub <2 x float> %431, %423, !dbg !72
  %433 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !73
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !73
  %435 = shufflevector <2 x float> %434, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %436 = fmul <2 x float> %432, %435, !dbg !73
  %437 = fadd <2 x float> %423, %436, !dbg !74
  %438 = shufflevector <2 x float> %437, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %439 = shufflevector <2 x float> %437, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %440 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !46
  %441 = insertelement <2 x i32> %440, i32 %260, i64 1, !dbg !46
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !46
  %443 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !68
  %444 = bitcast <2 x i32> %443 to <2 x float>, !dbg !68
  %445 = shufflevector <2 x float> %444, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %446 = fadd <2 x float> %445, %442, !dbg !68
  %447 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !48
  %448 = insertelement <2 x i32> %447, i32 %276, i64 1, !dbg !48
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !48
  %450 = fadd <2 x float> %446, %449, !dbg !69
  %451 = insertelement <2 x i32> poison, i32 %364, i64 0, !dbg !65
  %452 = insertelement <2 x i32> %451, i32 %324, i64 1, !dbg !65
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !65
  %454 = fadd <2 x float> %445, %453, !dbg !70
  %455 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !67
  %456 = insertelement <2 x i32> %455, i32 %340, i64 1, !dbg !67
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !67
  %458 = fadd <2 x float> %454, %457, !dbg !71
  %459 = fsub <2 x float> %458, %450, !dbg !72
  %460 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !73
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !73
  %462 = shufflevector <2 x float> %461, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %463 = fmul <2 x float> %459, %462, !dbg !73
  %464 = fadd <2 x float> %450, %463, !dbg !74
  %465 = shufflevector <2 x float> %464, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %466 = shufflevector <2 x float> %464, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %467 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !46
  %468 = insertelement <2 x i32> %467, i32 %261, i64 1, !dbg !46
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !46
  %470 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !68
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !68
  %472 = shufflevector <2 x float> %471, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %473 = fadd <2 x float> %472, %469, !dbg !68
  %474 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !48
  %475 = insertelement <2 x i32> %474, i32 %277, i64 1, !dbg !48
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !48
  %477 = fadd <2 x float> %473, %476, !dbg !69
  %478 = insertelement <2 x i32> poison, i32 %365, i64 0, !dbg !65
  %479 = insertelement <2 x i32> %478, i32 %325, i64 1, !dbg !65
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !65
  %481 = fadd <2 x float> %472, %480, !dbg !70
  %482 = insertelement <2 x i32> poison, i32 %381, i64 0, !dbg !67
  %483 = insertelement <2 x i32> %482, i32 %341, i64 1, !dbg !67
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !67
  %485 = fadd <2 x float> %481, %484, !dbg !71
  %486 = fsub <2 x float> %485, %477, !dbg !72
  %487 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !73
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !73
  %489 = shufflevector <2 x float> %488, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %490 = fmul <2 x float> %486, %489, !dbg !73
  %491 = fadd <2 x float> %477, %490, !dbg !74
  %492 = shufflevector <2 x float> %491, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %493 = shufflevector <2 x float> %491, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %494 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !46
  %495 = insertelement <2 x i32> %494, i32 %262, i64 1, !dbg !46
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !46
  %497 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !68
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !68
  %499 = shufflevector <2 x float> %498, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %500 = fadd <2 x float> %499, %496, !dbg !68
  %501 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !48
  %502 = insertelement <2 x i32> %501, i32 %278, i64 1, !dbg !48
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !48
  %504 = fadd <2 x float> %500, %503, !dbg !69
  %505 = insertelement <2 x i32> poison, i32 %366, i64 0, !dbg !65
  %506 = insertelement <2 x i32> %505, i32 %326, i64 1, !dbg !65
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !65
  %508 = fadd <2 x float> %499, %507, !dbg !70
  %509 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !67
  %510 = insertelement <2 x i32> %509, i32 %342, i64 1, !dbg !67
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !67
  %512 = fadd <2 x float> %508, %511, !dbg !71
  %513 = fsub <2 x float> %512, %504, !dbg !72
  %514 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !73
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !73
  %516 = shufflevector <2 x float> %515, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %517 = fmul <2 x float> %513, %516, !dbg !73
  %518 = fadd <2 x float> %504, %517, !dbg !74
  %519 = shufflevector <2 x float> %518, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %520 = shufflevector <2 x float> %518, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %521 = insertelement <2 x i32> poison, i32 %213, i64 0, !dbg !46
  %522 = insertelement <2 x i32> %521, i32 %263, i64 1, !dbg !46
  %523 = bitcast <2 x i32> %522 to <2 x float>, !dbg !46
  %524 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !68
  %525 = bitcast <2 x i32> %524 to <2 x float>, !dbg !68
  %526 = shufflevector <2 x float> %525, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %527 = fadd <2 x float> %526, %523, !dbg !68
  %528 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !48
  %529 = insertelement <2 x i32> %528, i32 %279, i64 1, !dbg !48
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !48
  %531 = fadd <2 x float> %527, %530, !dbg !69
  %532 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !65
  %533 = insertelement <2 x i32> %532, i32 %327, i64 1, !dbg !65
  %534 = bitcast <2 x i32> %533 to <2 x float>, !dbg !65
  %535 = fadd <2 x float> %526, %534, !dbg !70
  %536 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !67
  %537 = insertelement <2 x i32> %536, i32 %343, i64 1, !dbg !67
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !67
  %539 = fadd <2 x float> %535, %538, !dbg !71
  %540 = fsub <2 x float> %539, %531, !dbg !72
  %541 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !73
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !73
  %543 = shufflevector <2 x float> %542, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %544 = fmul <2 x float> %540, %543, !dbg !73
  %545 = fadd <2 x float> %531, %544, !dbg !74
  %546 = shufflevector <2 x float> %545, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %547 = shufflevector <2 x float> %545, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %548 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !46
  %549 = insertelement <2 x i32> %548, i32 %264, i64 1, !dbg !46
  %550 = bitcast <2 x i32> %549 to <2 x float>, !dbg !46
  %551 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !68
  %552 = bitcast <2 x i32> %551 to <2 x float>, !dbg !68
  %553 = shufflevector <2 x float> %552, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %554 = fadd <2 x float> %553, %550, !dbg !68
  %555 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !48
  %556 = insertelement <2 x i32> %555, i32 %280, i64 1, !dbg !48
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !48
  %558 = fadd <2 x float> %554, %557, !dbg !69
  %559 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !65
  %560 = insertelement <2 x i32> %559, i32 %328, i64 1, !dbg !65
  %561 = bitcast <2 x i32> %560 to <2 x float>, !dbg !65
  %562 = fadd <2 x float> %553, %561, !dbg !70
  %563 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !67
  %564 = insertelement <2 x i32> %563, i32 %344, i64 1, !dbg !67
  %565 = bitcast <2 x i32> %564 to <2 x float>, !dbg !67
  %566 = fadd <2 x float> %562, %565, !dbg !71
  %567 = fsub <2 x float> %566, %558, !dbg !72
  %568 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !73
  %569 = bitcast <2 x i32> %568 to <2 x float>, !dbg !73
  %570 = shufflevector <2 x float> %569, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %571 = fmul <2 x float> %567, %570, !dbg !73
  %572 = fadd <2 x float> %558, %571, !dbg !74
  %573 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !46
  %574 = insertelement <2 x i32> %573, i32 %265, i64 1, !dbg !46
  %575 = bitcast <2 x i32> %574 to <2 x float>, !dbg !46
  %576 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !68
  %577 = bitcast <2 x i32> %576 to <2 x float>, !dbg !68
  %578 = shufflevector <2 x float> %577, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %579 = fadd <2 x float> %578, %575, !dbg !68
  %580 = insertelement <2 x i32> poison, i32 %231, i64 0, !dbg !48
  %581 = insertelement <2 x i32> %580, i32 %281, i64 1, !dbg !48
  %582 = bitcast <2 x i32> %581 to <2 x float>, !dbg !48
  %583 = fadd <2 x float> %579, %582, !dbg !69
  %584 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !65
  %585 = insertelement <2 x i32> %584, i32 %329, i64 1, !dbg !65
  %586 = bitcast <2 x i32> %585 to <2 x float>, !dbg !65
  %587 = fadd <2 x float> %578, %586, !dbg !70
  %588 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !67
  %589 = insertelement <2 x i32> %588, i32 %345, i64 1, !dbg !67
  %590 = bitcast <2 x i32> %589 to <2 x float>, !dbg !67
  %591 = fadd <2 x float> %587, %590, !dbg !71
  %592 = fsub <2 x float> %591, %583, !dbg !72
  %593 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !73
  %594 = bitcast <2 x i32> %593 to <2 x float>, !dbg !73
  %595 = shufflevector <2 x float> %594, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %596 = fmul <2 x float> %592, %595, !dbg !73
  %597 = fadd <2 x float> %583, %596, !dbg !74
  %598 = insertelement <8 x i32> poison, i32 %117, i64 0, !dbg !32
  %599 = insertelement <8 x i32> %598, i32 %116, i64 1, !dbg !32
  %600 = insertelement <8 x i32> %599, i32 %115, i64 2, !dbg !32
  %601 = insertelement <8 x i32> %600, i32 %114, i64 3, !dbg !32
  %602 = insertelement <8 x i32> %601, i32 %113, i64 4, !dbg !32
  %603 = insertelement <8 x i32> %602, i32 %112, i64 5, !dbg !32
  %604 = insertelement <8 x i32> %603, i32 %111, i64 6, !dbg !32
  %605 = insertelement <8 x i32> %604, i32 %110, i64 7, !dbg !32
  %606 = bitcast <8 x i32> %605 to <8 x float>, !dbg !32
  %607 = insertelement <8 x i32> poison, i32 %131, i64 0, !dbg !34
  %608 = insertelement <8 x i32> %607, i32 %130, i64 1, !dbg !34
  %609 = insertelement <8 x i32> %608, i32 %129, i64 2, !dbg !34
  %610 = insertelement <8 x i32> %609, i32 %128, i64 3, !dbg !34
  %611 = insertelement <8 x i32> %610, i32 %126, i64 4, !dbg !34
  %612 = insertelement <8 x i32> %611, i32 %125, i64 5, !dbg !34
  %613 = insertelement <8 x i32> %612, i32 %124, i64 6, !dbg !34
  %614 = insertelement <8 x i32> %613, i32 %123, i64 7, !dbg !34
  %615 = bitcast <8 x i32> %614 to <8 x float>, !dbg !34
  %616 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !36
  %617 = insertelement <8 x i32> %616, i32 %140, i64 1, !dbg !36
  %618 = insertelement <8 x i32> %617, i32 %139, i64 2, !dbg !36
  %619 = insertelement <8 x i32> %618, i32 %138, i64 3, !dbg !36
  %620 = insertelement <8 x i32> %619, i32 %137, i64 4, !dbg !36
  %621 = insertelement <8 x i32> %620, i32 %136, i64 5, !dbg !36
  %622 = insertelement <8 x i32> %621, i32 %135, i64 6, !dbg !36
  %623 = insertelement <8 x i32> %622, i32 %134, i64 7, !dbg !36
  %624 = bitcast <8 x i32> %623 to <8 x float>, !dbg !36
  %625 = insertelement <8 x i32> poison, i32 %153, i64 0, !dbg !38
  %626 = insertelement <8 x i32> %625, i32 %152, i64 1, !dbg !38
  %627 = insertelement <8 x i32> %626, i32 %151, i64 2, !dbg !38
  %628 = insertelement <8 x i32> %627, i32 %150, i64 3, !dbg !38
  %629 = insertelement <8 x i32> %628, i32 %148, i64 4, !dbg !38
  %630 = insertelement <8 x i32> %629, i32 %147, i64 5, !dbg !38
  %631 = insertelement <8 x i32> %630, i32 %146, i64 6, !dbg !38
  %632 = insertelement <8 x i32> %631, i32 %145, i64 7, !dbg !38
  %633 = bitcast <8 x i32> %632 to <8 x float>, !dbg !38
  %634 = shufflevector <2 x float> %597, <2 x float> %572, <8 x i32> <i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %635 = shufflevector <8 x float> %634, <8 x float> %547, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %636 = shufflevector <8 x float> %635, <8 x float> %520, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %637 = shufflevector <8 x float> %636, <8 x float> %493, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !75
  %638 = shufflevector <8 x float> %637, <8 x float> %466, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !75
  %639 = shufflevector <8 x float> %638, <8 x float> %439, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !75
  %640 = shufflevector <8 x float> %639, <8 x float> %412, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !75
  %641 = shufflevector <2 x float> %597, <2 x float> %572, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %642 = shufflevector <8 x float> %641, <8 x float> %546, <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %643 = shufflevector <8 x float> %642, <8 x float> %519, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %644 = shufflevector <8 x float> %643, <8 x float> %492, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !75
  %645 = shufflevector <8 x float> %644, <8 x float> %465, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !75
  %646 = shufflevector <8 x float> %645, <8 x float> %438, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !75
  %647 = shufflevector <8 x float> %646, <8 x float> %411, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !75
  %648 = fsub <8 x float> %640, %647, !dbg !75
  %649 = fmul <8 x float> %648, %606, !dbg !76
  %650 = fadd <8 x float> %647, %649, !dbg !77
  %651 = fadd <8 x float> %615, %624, !dbg !78
  %652 = fadd <8 x float> %651, %633, !dbg !79
  %653 = fadd <8 x float> %652, %650, !dbg !80
  %654 = fcmp olt <8 x float> %653, zeroinitializer, !dbg !81
  %655 = extractelement <8 x i1> %654, i64 7, !dbg !85
  %656 = extractelement <8 x i1> %654, i64 6, !dbg !85
  %657 = extractelement <8 x i1> %654, i64 5, !dbg !85
  %658 = extractelement <8 x i1> %654, i64 4, !dbg !85
  %659 = extractelement <8 x i1> %654, i64 3, !dbg !85
  %660 = extractelement <8 x i1> %654, i64 2, !dbg !85
  %661 = extractelement <8 x i1> %654, i64 1, !dbg !85
  %662 = extractelement <8 x i1> %654, i64 0, !dbg !85
  %663 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !86
  %664 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !86
  %bc = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %665 = extractelement <8 x i32> %bc, i64 7, !dbg !87
  %666 = select i1 %655, i32 0, i32 %665, !dbg !85
  %bc1 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %667 = extractelement <8 x i32> %bc1, i64 6, !dbg !87
  %668 = select i1 %656, i32 0, i32 %667, !dbg !85
  %bc2 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %669 = extractelement <8 x i32> %bc2, i64 5, !dbg !87
  %670 = select i1 %657, i32 0, i32 %669, !dbg !85
  %bc3 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %671 = extractelement <8 x i32> %bc3, i64 4, !dbg !87
  %672 = select i1 %658, i32 0, i32 %671, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %668, i32 %670, i32 %672, ptr addrspace(1) %663, i1 true) #1, !dbg !87
  %bc4 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %673 = extractelement <8 x i32> %bc4, i64 3, !dbg !87
  %674 = select i1 %659, i32 0, i32 %673, !dbg !85
  %bc5 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %675 = extractelement <8 x i32> %bc5, i64 2, !dbg !87
  %676 = select i1 %660, i32 0, i32 %675, !dbg !85
  %bc6 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %677 = extractelement <8 x i32> %bc6, i64 1, !dbg !87
  %678 = select i1 %661, i32 0, i32 %677, !dbg !85
  %bc7 = bitcast <8 x float> %653 to <8 x i32>, !dbg !87
  %679 = extractelement <8 x i32> %bc7, i64 0, !dbg !87
  %680 = select i1 %662, i32 0, i32 %679, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %674, i32 %676, i32 %678, i32 %680, ptr addrspace(1) %664, i1 true) #1, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjo7fqslydr77iruijhwy33eqpkmuyiz2rga6lg2zoao6qtjbegk.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_36", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 37, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 46, column: 49, scope: !7)
!43 = !DILocation(line: 46, column: 46, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 54, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 55, scope: !7)
!49 = !DILocation(line: 52, column: 35, scope: !7)
!50 = !DILocation(line: 53, column: 40, scope: !7)
!51 = !DILocation(line: 53, column: 38, scope: !7)
!52 = !DILocation(line: 53, column: 48, scope: !7)
!53 = !DILocation(line: 53, column: 31, scope: !7)
!54 = !DILocation(line: 53, column: 56, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 55, column: 56, scope: !7)
!57 = !DILocation(line: 59, column: 35, scope: !7)
!58 = !DILocation(line: 60, column: 49, scope: !7)
!59 = !DILocation(line: 60, column: 31, scope: !7)
!60 = !DILocation(line: 60, column: 57, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 62, column: 57, scope: !7)
!63 = !DILocation(line: 67, column: 48, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 56, scope: !7)
!66 = !DILocation(line: 69, column: 31, scope: !7)
!67 = !DILocation(line: 69, column: 56, scope: !7)
!68 = !DILocation(line: 47, column: 19, scope: !7)
!69 = !DILocation(line: 49, column: 20, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 20, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 74, column: 20, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 81, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 82, column: 28, scope: !7)
!87 = !DILocation(line: 82, column: 40, scope: !7)
!88 = !DILocation(line: 82, column: 4, scope: !7)
