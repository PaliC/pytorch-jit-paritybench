; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_pow_sum_21(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr4, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = sdiv i32 %10, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %10, %13, !dbg !16
  %14 = shl i32 %12, 11, !dbg !17
  %.mask = and i32 %7, 112
  %15 = add nsw i32 %.decomposed, %.mask
  %16 = add i32 %15, %14
  br i1 %11, label %.split.us, label %.split

.split.us:                                        ; preds = %4, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %4 ]
  %17 = phi <4 x float> [ %33, %.split.us ], [ zeroinitializer, %4 ]
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32, !dbg !18
  %18 = shl nuw nsw i32 %indvars.iv7.tr, 4, !dbg !18
  %19 = add i32 %16, %18, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %27 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !20
  %28 = insertelement <4 x i32> %27, i32 %24, i64 1, !dbg !20
  %29 = insertelement <4 x i32> %28, i32 %25, i64 2, !dbg !20
  %30 = insertelement <4 x i32> %29, i32 %26, i64 3, !dbg !20
  %31 = bitcast <4 x i32> %30 to <4 x float>, !dbg !20
  %32 = fmul <4 x float> %31, %31, !dbg !21
  %33 = fadd <4 x float> %17, %32, !dbg !22
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !23
  %34 = icmp samesign ult i64 %indvars.iv7, 120, !dbg !23
  br i1 %34, label %.split.us, label %.split2.us, !dbg !23

.split:                                           ; preds = %4
  %35 = sext i32 %16 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %38 = or disjoint i32 %16, 128, !dbg !18
  %39 = sext i32 %38 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %42 = or disjoint i32 %16, 256, !dbg !18
  %43 = sext i32 %42 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %46 = or disjoint i32 %16, 384, !dbg !18
  %47 = sext i32 %46 to i64, !dbg !19
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !19
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %50 = or disjoint i32 %16, 512, !dbg !18
  %51 = sext i32 %50 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %54 = or disjoint i32 %16, 640, !dbg !18
  %55 = sext i32 %54 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %58 = or disjoint i32 %16, 768, !dbg !18
  %59 = sext i32 %58 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %62 = or disjoint i32 %16, 896, !dbg !18
  %63 = sext i32 %62 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %66 = or disjoint i32 %16, 1024, !dbg !18
  %67 = sext i32 %66 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !19
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %70 = or disjoint i32 %16, 1152, !dbg !18
  %71 = sext i32 %70 to i64, !dbg !19
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !19
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %74 = or disjoint i32 %16, 1280, !dbg !18
  %75 = sext i32 %74 to i64, !dbg !19
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !19
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %78 = or disjoint i32 %16, 1408, !dbg !18
  %79 = sext i32 %78 to i64, !dbg !19
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !19
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %82 = or disjoint i32 %16, 1536, !dbg !18
  %83 = sext i32 %82 to i64, !dbg !19
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !19
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %86 = or disjoint i32 %16, 1664, !dbg !18
  %87 = sext i32 %86 to i64, !dbg !19
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !19
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %90 = or disjoint i32 %16, 1792, !dbg !18
  %91 = sext i32 %90 to i64, !dbg !19
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !19
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %94 = or disjoint i32 %16, 1920, !dbg !18
  %95 = sext i32 %94 to i64, !dbg !19
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !19
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us, %.split
  %98 = phi <4 x float> [ zeroinitializer, %.split ], [ %33, %.split.us ], !dbg !12
  %99 = lshr i32 %7, 5, !dbg !12
  %100 = and i32 %7, 63, !dbg !12
  %101 = or disjoint i32 %6, %100, !dbg !13
  %102 = icmp slt i32 %101, 256, !dbg !14
  %103 = and i32 %7, 16, !dbg !12
  %104 = extractelement <4 x float> %98, i64 0, !dbg !24
  %105 = bitcast float %104 to i32, !dbg !24
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !24
  %107 = bitcast i32 %106 to float, !dbg !24
  %108 = fadd float %104, %107, !dbg !28
  %109 = extractelement <4 x float> %98, i64 1, !dbg !24
  %110 = bitcast float %109 to i32, !dbg !24
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !24
  %112 = bitcast i32 %111 to float, !dbg !24
  %113 = fadd float %109, %112, !dbg !28
  %114 = extractelement <4 x float> %98, i64 2, !dbg !24
  %115 = bitcast float %114 to i32, !dbg !24
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !24
  %117 = bitcast i32 %116 to float, !dbg !24
  %118 = fadd float %114, %117, !dbg !28
  %119 = extractelement <4 x float> %98, i64 3, !dbg !24
  %120 = bitcast float %119 to i32, !dbg !24
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !24
  %122 = bitcast i32 %121 to float, !dbg !24
  %123 = fadd float %119, %122, !dbg !28
  %124 = icmp eq i32 %103, 0, !dbg !24
  %125 = and i32 %99, 3, !dbg !24
  %126 = shl nuw nsw i32 %9, 2, !dbg !24
  %127 = or disjoint i32 %126, %125, !dbg !24
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !24
  %129 = bitcast float %108 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 %124) #3, !dbg !24
  %130 = or disjoint i32 %126, 4, !dbg !24
  %131 = or disjoint i32 %130, %125, !dbg !24
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !24
  %133 = bitcast float %113 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 %124) #3, !dbg !24
  %134 = or disjoint i32 %126, 8, !dbg !24
  %135 = or disjoint i32 %134, %125, !dbg !24
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !24
  %137 = bitcast float %118 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 %124) #3, !dbg !24
  %138 = or disjoint i32 %126, 12, !dbg !24
  %139 = or disjoint i32 %138, %125, !dbg !24
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !24
  %141 = bitcast float %123 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 %124) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %142 = icmp slt i32 %7, 256, !dbg !24
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !24
  %144 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %143, i1 %142) #3, !dbg !24
  %145 = bitcast i32 %144 to float, !dbg !24
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !24
  %147 = bitcast i32 %146 to float, !dbg !24
  %148 = fadd float %145, %147, !dbg !28
  %149 = bitcast float %148 to i32, !dbg !24
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !24
  %151 = bitcast i32 %150 to float, !dbg !24
  %152 = fadd float %148, %151, !dbg !28
  %153 = and i32 %7, 3, !dbg !24
  %154 = icmp eq i32 %153, 0, !dbg !24
  %155 = and i1 %142, %154, !dbg !24
  %156 = bitcast float %152 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %156, i1 %155) #3, !dbg !24
  %157 = getelementptr i8, ptr addrspace(3) %143, i32 512, !dbg !24
  %158 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %157, i1 %142) #3, !dbg !24
  %159 = bitcast i32 %158 to float, !dbg !24
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = fadd float %159, %161, !dbg !28
  %163 = bitcast float %162 to i32, !dbg !24
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !24
  %165 = bitcast i32 %164 to float, !dbg !24
  %166 = fadd float %162, %165, !dbg !28
  %167 = bitcast float %166 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %167, i1 %155) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !24
  %169 = load i32, ptr addrspace(3) %168, align 16, !dbg !24
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !24
  %171 = load i32, ptr addrspace(3) %170, align 16, !dbg !24
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !24
  %173 = load i32, ptr addrspace(3) %172, align 16, !dbg !24
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !24
  %175 = load i32, ptr addrspace(3) %174, align 16, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %176, i32 %169, i32 %171, i32 %173, i32 %175, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !30
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !30
  %179 = sext i32 %101 to i64, !dbg !31
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !31
  %181 = and i32 %7, 64, !dbg !32
  %182 = icmp eq i32 %181, 0, !dbg !32
  %183 = and i1 %182, %102, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %180, i1 %183) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgovhvsnvh6hbg2jardws7g6erbbhkfxsrmcsukewhpzb3bfxp7t.py", directory: "inductor_cache/go")
!4 = !{ptr @triton_red_fused_pow_sum_21, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_pow_sum_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_pow_sum_21", linkageName: "triton_red_fused_pow_sum_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 52, scope: !7)
!18 = !DILocation(line: 34, column: 47, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 57, scope: !7)
!21 = !DILocation(line: 35, column: 22, scope: !7)
!22 = !DILocation(line: 37, column: 23, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 39, column: 25, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 39, column: 28, scope: !7)
!31 = !DILocation(line: 40, column: 25, scope: !7)
!32 = !DILocation(line: 40, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 4, scope: !7)
