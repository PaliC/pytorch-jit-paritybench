; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 30720, !dbg !14
  %11 = srem i32 %9, 480, !dbg !15
  %12 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %14 = sdiv <2 x i32> %13, <i32 1920, i32 480>, !dbg !16
  %15 = srem <2 x i32> %14, splat (i32 4), !dbg !17
  %16 = extractelement <2 x i32> %15, i64 0, !dbg !18
  %17 = icmp sgt i32 %16, -1, !dbg !19
  %18 = extractelement <2 x i32> %15, i64 1, !dbg !18
  %19 = icmp sgt i32 %18, -1, !dbg !20
  %20 = or i32 %16, %18, !dbg !18
  %21 = icmp sgt i32 %20, -1, !dbg !18
  %22 = mul nsw i32 %18, 960, !dbg !21
  %23 = extractelement <2 x i32> %14, i64 0, !dbg !22
  %24 = mul i32 %23, 7680, !dbg !22
  %25 = add i32 %24, %11, !dbg !23
  %26 = add i32 %25, %22, !dbg !24
  %27 = sext i32 %26 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !25
  %29 = and i1 %10, %21, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %29, i32 -8388608, i1 %29) #1, !dbg !27
  %31 = bitcast i32 %30 to float, !dbg !27
  %32 = add i32 %25, 480, !dbg !28
  %33 = add i32 %32, %22, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %29, i32 -8388608, i1 %29) #1, !dbg !31
  %37 = bitcast i32 %36 to float, !dbg !31
  %38 = fcmp ogt float %37, %31, !dbg !32
  %39 = fcmp uno float %37, 0.000000e+00, !dbg !36
  %40 = or i1 %38, %39, !dbg !37
  %41 = select i1 %40, float %37, float %31, !dbg !38
  %42 = add nsw <2 x i32> %15, splat (i32 1), !dbg !39
  %43 = extractelement <2 x i32> %42, i64 1, !dbg !40
  %44 = icmp ult i32 %43, 4, !dbg !41
  %45 = and i1 %17, %44, !dbg !42
  %46 = add i32 %25, 960, !dbg !43
  %47 = add i32 %46, %22, !dbg !44
  %48 = sext i32 %47 to i64, !dbg !45
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !45
  %50 = and i1 %10, %45, !dbg !46
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 -8388608, i1 %50) #1, !dbg !47
  %52 = bitcast i32 %51 to float, !dbg !47
  %53 = fcmp olt float %41, %52, !dbg !48
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !50
  %55 = or i1 %54, %53, !dbg !51
  %56 = select i1 %55, float %52, float %41, !dbg !52
  %57 = add i32 %25, 3840, !dbg !53
  %58 = add i32 %57, %22, !dbg !54
  %59 = sext i32 %58 to i64, !dbg !55
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !55
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %29, i32 -8388608, i1 %29) #1, !dbg !56
  %62 = bitcast i32 %61 to float, !dbg !56
  %63 = fcmp olt float %56, %62, !dbg !57
  %64 = fcmp uno float %62, 0.000000e+00, !dbg !59
  %65 = or i1 %64, %63, !dbg !60
  %66 = select i1 %65, float %62, float %56, !dbg !61
  %67 = add i32 %25, 4320, !dbg !62
  %68 = add i32 %67, %22, !dbg !63
  %69 = sext i32 %68 to i64, !dbg !64
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !64
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %29, i32 -8388608, i1 %29) #1, !dbg !65
  %72 = bitcast i32 %71 to float, !dbg !65
  %73 = fcmp olt float %66, %72, !dbg !66
  %74 = fcmp uno float %72, 0.000000e+00, !dbg !68
  %75 = or i1 %74, %73, !dbg !69
  %76 = select i1 %75, float %72, float %66, !dbg !70
  %77 = add i32 %25, 4800, !dbg !71
  %78 = add i32 %77, %22, !dbg !72
  %79 = sext i32 %78 to i64, !dbg !73
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !73
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %50, i32 -8388608, i1 %50) #1, !dbg !74
  %82 = bitcast i32 %81 to float, !dbg !74
  %83 = fcmp olt float %76, %82, !dbg !75
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !77
  %85 = or i1 %84, %83, !dbg !78
  %86 = select i1 %85, float %82, float %76, !dbg !79
  %87 = extractelement <2 x i32> %42, i64 0, !dbg !40
  %88 = icmp ult i32 %87, 4, !dbg !39
  %89 = and i1 %19, %88, !dbg !80
  %90 = add i32 %25, 7680, !dbg !81
  %91 = add i32 %90, %22, !dbg !82
  %92 = sext i32 %91 to i64, !dbg !83
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !83
  %94 = and i1 %10, %89, !dbg !84
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 -8388608, i1 %94) #1, !dbg !85
  %96 = bitcast i32 %95 to float, !dbg !85
  %97 = fcmp olt float %86, %96, !dbg !86
  %98 = fcmp uno float %96, 0.000000e+00, !dbg !88
  %99 = or i1 %98, %97, !dbg !89
  %100 = select i1 %99, float %96, float %86, !dbg !90
  %101 = add i32 %25, 8160, !dbg !91
  %102 = add i32 %101, %22, !dbg !92
  %103 = sext i32 %102 to i64, !dbg !93
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !93
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %94, i32 -8388608, i1 %94) #1, !dbg !94
  %106 = bitcast i32 %105 to float, !dbg !94
  %107 = fcmp olt float %100, %106, !dbg !95
  %108 = fcmp uno float %106, 0.000000e+00, !dbg !97
  %109 = or i1 %108, %107, !dbg !98
  %110 = select i1 %109, float %106, float %100, !dbg !99
  %111 = or i32 %87, %43, !dbg !40
  %112 = icmp ult i32 %111, 4, !dbg !40
  %113 = add i32 %25, 8640, !dbg !100
  %114 = add i32 %113, %22, !dbg !101
  %115 = sext i32 %114 to i64, !dbg !102
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !102
  %117 = and i1 %10, %112, !dbg !103
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %117, i32 -8388608, i1 %117) #1, !dbg !104
  %119 = bitcast i32 %118 to float, !dbg !104
  %120 = fcmp olt float %110, %119, !dbg !105
  %121 = fcmp uno float %119, 0.000000e+00, !dbg !107
  %122 = or i1 %121, %120, !dbg !108
  %123 = zext i1 %38 to i8, !dbg !109
  %124 = select i1 %53, i8 2, i8 %123, !dbg !110
  %125 = select i1 %63, i8 3, i8 %124, !dbg !111
  %126 = select i1 %73, i8 4, i8 %125, !dbg !112
  %127 = select i1 %83, i8 5, i8 %126, !dbg !113
  %128 = select i1 %97, i8 6, i8 %127, !dbg !114
  %129 = select i1 %107, i8 7, i8 %128, !dbg !115
  %130 = select i1 %120, i8 8, i8 %129, !dbg !116
  %131 = sext i32 %9 to i64, !dbg !117
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !117
  %133 = bitcast float %110 to i32, !dbg !118
  %134 = select i1 %122, i32 %118, i32 %133, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %132, i1 %10) #1, !dbg !118
  %135 = getelementptr i8, ptr addrspace(1) %2, i64 %131, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %130, ptr addrspace(1) %135, i1 %10) #1, !dbg !121
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdpgy3zzngv4j757tlz7bsugbgmrpgrvm3fwtbkllpiwl763c53.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_36", linkageName: "triton_poi_fused_max_pool2d_with_indices_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 24, column: 29, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 36, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 40, scope: !7)
!22 = !DILocation(line: 40, column: 50, scope: !7)
!23 = !DILocation(line: 40, column: 36, scope: !7)
!24 = !DILocation(line: 40, column: 45, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 63, scope: !7)
!27 = !DILocation(line: 40, column: 55, scope: !7)
!28 = !DILocation(line: 46, column: 42, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 47, column: 42, scope: !7)
!36 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 71, column: 20, scope: !7)
!40 = !DILocation(line: 78, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 19, scope: !7)
!43 = !DILocation(line: 53, column: 42, scope: !7)
!44 = !DILocation(line: 53, column: 51, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 69, scope: !7)
!47 = !DILocation(line: 53, column: 61, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !49)
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !49)
!53 = !DILocation(line: 60, column: 43, scope: !7)
!54 = !DILocation(line: 60, column: 52, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 62, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !58)
!58 = !DILocation(line: 61, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !58)
!62 = !DILocation(line: 63, column: 43, scope: !7)
!63 = !DILocation(line: 63, column: 52, scope: !7)
!64 = !DILocation(line: 63, column: 31, scope: !7)
!65 = !DILocation(line: 63, column: 62, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !67)
!67 = !DILocation(line: 64, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !67)
!71 = !DILocation(line: 66, column: 43, scope: !7)
!72 = !DILocation(line: 66, column: 52, scope: !7)
!73 = !DILocation(line: 66, column: 31, scope: !7)
!74 = !DILocation(line: 66, column: 62, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !76)
!76 = !DILocation(line: 67, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !76)
!80 = !DILocation(line: 72, column: 20, scope: !7)
!81 = !DILocation(line: 73, column: 43, scope: !7)
!82 = !DILocation(line: 73, column: 52, scope: !7)
!83 = !DILocation(line: 73, column: 31, scope: !7)
!84 = !DILocation(line: 73, column: 70, scope: !7)
!85 = !DILocation(line: 73, column: 62, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !87)
!87 = !DILocation(line: 74, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !87)
!91 = !DILocation(line: 76, column: 43, scope: !7)
!92 = !DILocation(line: 76, column: 52, scope: !7)
!93 = !DILocation(line: 76, column: 31, scope: !7)
!94 = !DILocation(line: 76, column: 62, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !96)
!96 = !DILocation(line: 77, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !96)
!100 = !DILocation(line: 79, column: 43, scope: !7)
!101 = !DILocation(line: 79, column: 52, scope: !7)
!102 = !DILocation(line: 79, column: 31, scope: !7)
!103 = !DILocation(line: 79, column: 70, scope: !7)
!104 = !DILocation(line: 79, column: 62, scope: !7)
!105 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !106)
!106 = !DILocation(line: 80, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !106)
!109 = !DILocation(line: 84, column: 35, scope: !7)
!110 = !DILocation(line: 87, column: 35, scope: !7)
!111 = !DILocation(line: 90, column: 35, scope: !7)
!112 = !DILocation(line: 93, column: 35, scope: !7)
!113 = !DILocation(line: 96, column: 35, scope: !7)
!114 = !DILocation(line: 99, column: 35, scope: !7)
!115 = !DILocation(line: 102, column: 35, scope: !7)
!116 = !DILocation(line: 105, column: 35, scope: !7)
!117 = !DILocation(line: 106, column: 25, scope: !7)
!118 = !DILocation(line: 106, column: 37, scope: !7)
!119 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !106)
!120 = !DILocation(line: 107, column: 25, scope: !7)
!121 = !DILocation(line: 107, column: 37, scope: !7)
!122 = !DILocation(line: 107, column: 4, scope: !7)
