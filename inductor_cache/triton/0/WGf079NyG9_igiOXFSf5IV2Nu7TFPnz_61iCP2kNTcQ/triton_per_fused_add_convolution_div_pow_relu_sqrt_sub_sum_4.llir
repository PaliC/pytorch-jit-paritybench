; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = shl i32 %8, 2, !dbg !14
  %15 = and i32 %14, 60, !dbg !14
  %16 = shl i32 %12, 6, !dbg !15
  %17 = shl i32 %13, 6, !dbg !15
  %18 = or disjoint i32 %16, %15, !dbg !16
  %19 = or disjoint i32 %17, %15, !dbg !16
  %20 = sext i32 %18 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = zext nneg i32 %15 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %53 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !22
  %54 = insertelement <4 x i32> %53, i32 %51, i64 1, !dbg !22
  %55 = insertelement <4 x i32> %54, i32 %50, i64 2, !dbg !22
  %56 = insertelement <4 x i32> %55, i32 %49, i64 3, !dbg !22
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !22
  %58 = insertelement <16 x i32> poison, i32 %40, i64 0, !dbg !20
  %59 = insertelement <16 x i32> %58, i32 %39, i64 1, !dbg !20
  %60 = insertelement <16 x i32> %59, i32 %38, i64 2, !dbg !20
  %61 = insertelement <16 x i32> %60, i32 %37, i64 3, !dbg !20
  %62 = insertelement <16 x i32> %61, i32 %47, i64 4, !dbg !20
  %63 = insertelement <16 x i32> %62, i32 %46, i64 5, !dbg !20
  %64 = insertelement <16 x i32> %63, i32 %45, i64 6, !dbg !20
  %65 = insertelement <16 x i32> %64, i32 %44, i64 7, !dbg !20
  %66 = insertelement <16 x i32> %65, i32 %33, i64 8, !dbg !20
  %67 = insertelement <16 x i32> %66, i32 %32, i64 9, !dbg !20
  %68 = insertelement <16 x i32> %67, i32 %31, i64 10, !dbg !20
  %69 = insertelement <16 x i32> %68, i32 %30, i64 11, !dbg !20
  %70 = insertelement <16 x i32> %69, i32 %28, i64 12, !dbg !20
  %71 = insertelement <16 x i32> %70, i32 %27, i64 13, !dbg !20
  %72 = insertelement <16 x i32> %71, i32 %26, i64 14, !dbg !20
  %73 = insertelement <16 x i32> %72, i32 %25, i64 15, !dbg !20
  %74 = bitcast <16 x i32> %73 to <16 x float>, !dbg !20
  %75 = shufflevector <16 x float> %74, <16 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %76 = shufflevector <4 x float> %57, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %77 = shufflevector <8 x float> %76, <8 x float> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !23
  %78 = shufflevector <8 x float> %77, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7>, !dbg !23
  %79 = fadd <16 x float> %78, %74, !dbg !23
  %80 = fcmp olt <16 x float> %79, zeroinitializer, !dbg !24
  %81 = extractelement <16 x i1> %80, i64 15, !dbg !28
  %82 = extractelement <16 x float> %79, i64 15, !dbg !28
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !28
  %84 = extractelement <16 x i1> %80, i64 14, !dbg !28
  %85 = extractelement <16 x float> %79, i64 14, !dbg !28
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !28
  %87 = extractelement <16 x i1> %80, i64 13, !dbg !28
  %88 = extractelement <16 x float> %79, i64 13, !dbg !28
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !28
  %90 = extractelement <16 x i1> %80, i64 12, !dbg !28
  %91 = extractelement <16 x float> %79, i64 12, !dbg !28
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !28
  %93 = extractelement <16 x i1> %80, i64 11, !dbg !28
  %94 = extractelement <16 x float> %79, i64 11, !dbg !28
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !28
  %96 = extractelement <16 x i1> %80, i64 10, !dbg !28
  %97 = extractelement <16 x float> %79, i64 10, !dbg !28
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !28
  %99 = extractelement <16 x i1> %80, i64 9, !dbg !28
  %100 = extractelement <16 x float> %79, i64 9, !dbg !28
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !28
  %102 = extractelement <16 x i1> %80, i64 8, !dbg !28
  %103 = extractelement <16 x float> %79, i64 8, !dbg !28
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !28
  %105 = extractelement <16 x i1> %80, i64 7, !dbg !30
  %106 = extractelement <16 x float> %79, i64 7, !dbg !30
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !30
  %108 = extractelement <16 x i1> %80, i64 6, !dbg !30
  %109 = extractelement <16 x float> %79, i64 6, !dbg !30
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !30
  %111 = extractelement <16 x i1> %80, i64 5, !dbg !30
  %112 = extractelement <16 x float> %79, i64 5, !dbg !30
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !30
  %114 = extractelement <16 x i1> %80, i64 4, !dbg !30
  %115 = extractelement <16 x float> %79, i64 4, !dbg !30
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !30
  %117 = extractelement <16 x i1> %80, i64 3, !dbg !30
  %118 = extractelement <16 x float> %79, i64 3, !dbg !30
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !30
  %120 = extractelement <16 x i1> %80, i64 2, !dbg !30
  %121 = extractelement <16 x float> %79, i64 2, !dbg !30
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !30
  %123 = extractelement <16 x i1> %80, i64 1, !dbg !30
  %124 = extractelement <16 x float> %79, i64 1, !dbg !30
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !30
  %126 = extractelement <16 x i1> %80, i64 0, !dbg !30
  %127 = extractelement <16 x float> %79, i64 0, !dbg !30
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !30
  %129 = fmul float %83, %83, !dbg !31
  %130 = fmul float %86, %86, !dbg !31
  %131 = fmul float %89, %89, !dbg !31
  %132 = fmul float %92, %92, !dbg !31
  %133 = fmul float %95, %95, !dbg !31
  %134 = fmul float %98, %98, !dbg !31
  %135 = fmul float %101, %101, !dbg !31
  %136 = fmul float %104, %104, !dbg !31
  %137 = fadd float %129, %130, !dbg !32
  %138 = fadd float %131, %137, !dbg !32
  %139 = fadd float %132, %138, !dbg !32
  %140 = fadd float %133, %134, !dbg !32
  %141 = fadd float %135, %140, !dbg !32
  %142 = fadd float %136, %141, !dbg !32
  %143 = bitcast float %139 to i32, !dbg !37
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !37
  %145 = bitcast i32 %144 to float, !dbg !37
  %146 = fadd float %139, %145, !dbg !32
  %147 = bitcast float %146 to i32, !dbg !37
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !37
  %149 = bitcast i32 %148 to float, !dbg !37
  %150 = fadd float %146, %149, !dbg !32
  %151 = bitcast float %150 to i32, !dbg !37
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !37
  %153 = bitcast i32 %152 to float, !dbg !37
  %154 = fadd float %150, %153, !dbg !32
  %155 = bitcast float %154 to i32, !dbg !37
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !37
  %157 = bitcast i32 %156 to float, !dbg !37
  %158 = fadd float %154, %157, !dbg !32
  %159 = bitcast float %142 to i32, !dbg !37
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !37
  %161 = bitcast i32 %160 to float, !dbg !37
  %162 = fadd float %142, %161, !dbg !32
  %163 = bitcast float %162 to i32, !dbg !37
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !37
  %165 = bitcast i32 %164 to float, !dbg !37
  %166 = fadd float %162, %165, !dbg !32
  %167 = bitcast float %166 to i32, !dbg !37
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !37
  %169 = bitcast i32 %168 to float, !dbg !37
  %170 = fadd float %166, %169, !dbg !32
  %171 = bitcast float %170 to i32, !dbg !37
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !37
  %173 = bitcast i32 %172 to float, !dbg !37
  %174 = fadd float %170, %173, !dbg !32
  %175 = fmul float %107, %107, !dbg !38
  %176 = fmul float %110, %110, !dbg !38
  %177 = fmul float %113, %113, !dbg !38
  %178 = fmul float %116, %116, !dbg !38
  %179 = fmul float %119, %119, !dbg !38
  %180 = fmul float %122, %122, !dbg !38
  %181 = fmul float %125, %125, !dbg !38
  %182 = fmul float %128, %128, !dbg !38
  %183 = fadd float %175, %176, !dbg !39
  %184 = fadd float %177, %183, !dbg !39
  %185 = fadd float %178, %184, !dbg !39
  %186 = fadd float %179, %180, !dbg !39
  %187 = fadd float %181, %186, !dbg !39
  %188 = fadd float %182, %187, !dbg !39
  %189 = bitcast float %185 to i32, !dbg !41
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !41
  %191 = bitcast i32 %190 to float, !dbg !41
  %192 = fadd float %185, %191, !dbg !39
  %193 = bitcast float %192 to i32, !dbg !41
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !41
  %195 = bitcast i32 %194 to float, !dbg !41
  %196 = fadd float %192, %195, !dbg !39
  %197 = bitcast float %196 to i32, !dbg !41
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !41
  %199 = bitcast i32 %198 to float, !dbg !41
  %200 = fadd float %196, %199, !dbg !39
  %201 = bitcast float %200 to i32, !dbg !41
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !41
  %203 = bitcast i32 %202 to float, !dbg !41
  %204 = fadd float %200, %203, !dbg !39
  %205 = bitcast float %188 to i32, !dbg !41
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !41
  %207 = bitcast i32 %206 to float, !dbg !41
  %208 = fadd float %188, %207, !dbg !39
  %209 = bitcast float %208 to i32, !dbg !41
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 4, i32 31), !dbg !41
  %211 = bitcast i32 %210 to float, !dbg !41
  %212 = fadd float %208, %211, !dbg !39
  %213 = bitcast float %212 to i32, !dbg !41
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !41
  %215 = bitcast i32 %214 to float, !dbg !41
  %216 = fadd float %212, %215, !dbg !39
  %217 = bitcast float %216 to i32, !dbg !41
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 1, i32 31), !dbg !41
  %219 = bitcast i32 %218 to float, !dbg !41
  %220 = fadd float %216, %219, !dbg !39
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i11 = icmp eq i32 %227, 0, !dbg !42
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i14 = icmp eq i32 %228, 0, !dbg !42
  br i1 %.not.i11, label %234, label %229, !dbg !42

229:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %232, label %230, !dbg !42

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

234:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %237, label %235, !dbg !42

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %230, %232, %235, %237
  %.0.i13 = phi float [ %231, %230 ], [ %233, %232 ], [ %236, %235 ], [ %238, %237 ], !dbg !42
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i31 = icmp eq i32 %245, 0, !dbg !42
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i34 = icmp eq i32 %246, 0, !dbg !42
  br i1 %.not.i31, label %252, label %247, !dbg !42

247:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %250, label %248, !dbg !42

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !42
  br label %__nv_sqrtf.exit35, !dbg !42

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !42
  br label %__nv_sqrtf.exit35, !dbg !42

252:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %255, label %253, !dbg !42

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !42
  br label %__nv_sqrtf.exit35, !dbg !42

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !42
  br label %__nv_sqrtf.exit35, !dbg !42

__nv_sqrtf.exit35:                                ; preds = %248, %250, %253, %255
  %.0.i33 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !42
  %257 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !43
  %258 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !43
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %257) #4, !dbg !44
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %257) #4, !dbg !44
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %257) #4, !dbg !44
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %257) #4, !dbg !44
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %258) #4, !dbg !44
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %258) #4, !dbg !44
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %258) #4, !dbg !44
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %258) #4, !dbg !44
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i51 = icmp eq i32 %273, 0, !dbg !45
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i54 = icmp eq i32 %274, 0, !dbg !45
  br i1 %.not.i51, label %280, label %275, !dbg !45

275:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i54, label %278, label %276, !dbg !45

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

280:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i54, label %283, label %281, !dbg !45

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #4, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

__nv_sqrtf.exit55:                                ; preds = %276, %278, %281, %283
  %.0.i53 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !45
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i71 = icmp eq i32 %291, 0, !dbg !45
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i74 = icmp eq i32 %292, 0, !dbg !45
  br i1 %.not.i71, label %298, label %293, !dbg !45

293:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i74, label %296, label %294, !dbg !45

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

298:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i74, label %301, label %299, !dbg !45

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #4, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

__nv_sqrtf.exit75:                                ; preds = %294, %296, %299, %301
  %.0.i73 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !45
  %303 = fadd float %.0.i53, 0x3DDB7CDFE0000000, !dbg !46
  %304 = fadd float %.0.i73, 0x3DDB7CDFE0000000, !dbg !46
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %303) #4, !dbg !47
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %303) #4, !dbg !47
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %303) #4, !dbg !47
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %303) #4, !dbg !47
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %304) #4, !dbg !47
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %304) #4, !dbg !47
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %304) #4, !dbg !47
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %304) #4, !dbg !47
  %313 = fsub float %259, %305, !dbg !48
  %314 = fsub float %260, %306, !dbg !48
  %315 = fsub float %261, %307, !dbg !48
  %316 = fsub float %262, %308, !dbg !48
  %317 = fsub float %263, %309, !dbg !48
  %318 = fsub float %264, %310, !dbg !48
  %319 = fsub float %265, %311, !dbg !48
  %320 = fsub float %266, %312, !dbg !48
  %321 = fmul float %313, %313, !dbg !49
  %322 = fmul float %314, %314, !dbg !49
  %323 = fmul float %315, %315, !dbg !49
  %324 = fmul float %316, %316, !dbg !49
  %325 = fmul float %317, %317, !dbg !49
  %326 = fmul float %318, %318, !dbg !49
  %327 = fmul float %319, %319, !dbg !49
  %328 = fmul float %320, %320, !dbg !49
  %329 = bitcast float %83 to i32, !dbg !50
  %330 = bitcast float %86 to i32, !dbg !50
  %331 = bitcast float %89 to i32, !dbg !50
  %332 = bitcast float %92 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %21, i1 true) #4, !dbg !50
  %333 = bitcast float %95 to i32, !dbg !50
  %334 = bitcast float %98 to i32, !dbg !50
  %335 = bitcast float %101 to i32, !dbg !50
  %336 = bitcast float %104 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %23, i1 true) #4, !dbg !50
  %337 = bitcast float %107 to i32, !dbg !51
  %338 = bitcast float %110 to i32, !dbg !51
  %339 = bitcast float %113 to i32, !dbg !51
  %340 = bitcast float %116 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %338, i32 %339, i32 %340, ptr addrspace(1) %41, i1 true) #4, !dbg !51
  %341 = bitcast float %119 to i32, !dbg !51
  %342 = bitcast float %122 to i32, !dbg !51
  %343 = bitcast float %125 to i32, !dbg !51
  %344 = bitcast float %128 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %342, i32 %343, i32 %344, ptr addrspace(1) %42, i1 true) #4, !dbg !51
  %345 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !52
  %346 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !52
  %347 = bitcast float %321 to i32, !dbg !53
  %348 = bitcast float %322 to i32, !dbg !53
  %349 = bitcast float %323 to i32, !dbg !53
  %350 = bitcast float %324 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %345, i1 true) #4, !dbg !53
  %351 = bitcast float %325 to i32, !dbg !53
  %352 = bitcast float %326 to i32, !dbg !53
  %353 = bitcast float %327 to i32, !dbg !53
  %354 = bitcast float %328 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %352, i32 %353, i32 %354, ptr addrspace(1) %346, i1 true) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cikukn7ysiu5mudtsv4guw4abtyturbcwx7uyk32idcq24k4r2ok.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4", linkageName: "triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 34, scope: !7)
!18 = !DILocation(line: 31, column: 47, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 38, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !29)
!29 = !DILocation(line: 36, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 44, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !40)
!42 = !DILocation(line: 45, column: 27, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 27, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 47, scope: !7)
!51 = !DILocation(line: 55, column: 47, scope: !7)
!52 = !DILocation(line: 56, column: 25, scope: !7)
!53 = !DILocation(line: 56, column: 45, scope: !7)
!54 = !DILocation(line: 56, column: 4, scope: !7)
