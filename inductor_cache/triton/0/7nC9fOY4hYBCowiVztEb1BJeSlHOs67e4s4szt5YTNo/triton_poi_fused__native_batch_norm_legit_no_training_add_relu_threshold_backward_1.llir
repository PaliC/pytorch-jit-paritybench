; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %22 = sdiv i32 %20, 16, !dbg !15
  %23 = srem i32 %22, 4, !dbg !16
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %21) #3, !dbg !18
  %27 = sext i32 %23 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #3, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %21) #3, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %21) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !27
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %21) #3, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %21) #3, !dbg !32
  %49 = bitcast i32 %48 to float, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %21) #3, !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !35
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %21) #3, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %21) #3, !dbg !36
  %58 = fadd float %33, 0x3EE4F8B580000000, !dbg !37
  %59 = fadd float %35, 0x3EE4F8B580000000, !dbg !37
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %60, 0, !dbg !38
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %61, 0, !dbg !38
  br i1 %.not.i, label %67, label %62, !dbg !38

62:                                               ; preds = %14
  br i1 %.not1.i, label %65, label %63, !dbg !38

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

67:                                               ; preds = %14
  br i1 %.not1.i, label %70, label %68, !dbg !38

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !38
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %72, 0, !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !38
  br i1 %.not.i1, label %79, label %74, !dbg !38

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !38

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !38
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %86 = fadd float %49, 0x3EE4F8B580000000, !dbg !40
  %87 = fadd float %51, 0x3EE4F8B580000000, !dbg !40
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i6 = icmp eq i32 %88, 0, !dbg !41
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i9 = icmp eq i32 %89, 0, !dbg !41
  br i1 %.not.i6, label %95, label %90, !dbg !41

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !41

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !41

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %91, %93, %96, %98
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !41
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %100, 0, !dbg !41
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i14 = icmp eq i32 %101, 0, !dbg !41
  br i1 %.not.i11, label %107, label %102, !dbg !41

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !41

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !41

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %103, %105, %108, %110
  %.0.i13 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !41
  %112 = extractvalue { i32, i32 } %43, 1, !dbg !28
  %113 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %114 = insertelement <2 x i32> %113, i32 %46, i64 1, !dbg !20
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !20
  %116 = extractvalue { i32, i32 } %43, 0, !dbg !28
  %117 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %118 = insertelement <2 x i32> %117, i32 %45, i64 1, !dbg !20
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !20
  %120 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %121 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !24
  %122 = insertelement <2 x i32> %121, i32 %54, i64 1, !dbg !24
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !24
  %124 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !26
  %125 = insertelement <2 x i32> %124, i32 %57, i64 1, !dbg !26
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !26
  %127 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %128 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %129 = insertelement <2 x i32> %128, i32 %53, i64 1, !dbg !24
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !24
  %131 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %132 = insertelement <2 x i32> %131, i32 %56, i64 1, !dbg !26
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !26
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %136 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !18
  %137 = insertelement <2 x i32> %136, i32 %116, i64 1, !dbg !18
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !18
  %139 = fsub <2 x float> %138, %119, !dbg !43
  %140 = insertelement <2 x float> poison, float %84, i64 0, !dbg !44
  %141 = insertelement <2 x float> %140, float %134, i64 1, !dbg !44
  %142 = fmul <2 x float> %139, %141, !dbg !44
  %143 = fmul <2 x float> %142, %130, !dbg !45
  %144 = fadd <2 x float> %143, %133, !dbg !46
  %145 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !18
  %146 = insertelement <2 x i32> %145, i32 %112, i64 1, !dbg !18
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !18
  %148 = fsub <2 x float> %147, %115, !dbg !43
  %149 = insertelement <2 x float> poison, float %85, i64 0, !dbg !44
  %150 = insertelement <2 x float> %149, float %135, i64 1, !dbg !44
  %151 = fmul <2 x float> %148, %150, !dbg !44
  %152 = fmul <2 x float> %151, %123, !dbg !45
  %153 = fadd <2 x float> %152, %126, !dbg !46
  %154 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !47
  %bc = bitcast <2 x float> %144 to <2 x i32>, !dbg !48
  %155 = extractelement <2 x i32> %bc, i64 0, !dbg !48
  %bc16 = bitcast <2 x float> %153 to <2 x i32>, !dbg !48
  %156 = extractelement <2 x i32> %bc16, i64 0, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %156, ptr addrspace(1) %154, i1 %21) #3, !dbg !48
  %157 = getelementptr float, ptr addrspace(1) %11, i64 %24, !dbg !49
  %158 = getelementptr i1, ptr addrspace(1) %12, i64 %24, !dbg !50
  %159 = shufflevector <2 x float> %144, <2 x float> %153, <2 x i32> <i32 0, i32 2>, !dbg !51
  %160 = shufflevector <2 x float> %144, <2 x float> %153, <2 x i32> <i32 1, i32 3>, !dbg !51
  %161 = fadd <2 x float> %159, %160, !dbg !51
  %162 = fcmp olt <2 x float> %161, zeroinitializer, !dbg !52
  %163 = select <2 x i1> %162, <2 x float> zeroinitializer, <2 x float> %161, !dbg !56
  %164 = fcmp ole <2 x float> %163, zeroinitializer, !dbg !57
  %bc17 = bitcast <2 x float> %163 to <2 x i32>, !dbg !58
  %165 = extractelement <2 x i32> %bc17, i64 0, !dbg !58
  %bc18 = bitcast <2 x float> %163 to <2 x i32>, !dbg !58
  %166 = extractelement <2 x i32> %bc18, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %157, i1 %21) #3, !dbg !58
  %167 = zext <2 x i1> %164 to <2 x i8>, !dbg !59
  %168 = bitcast <2 x i8> %167 to i16, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %168, ptr addrspace(1) %158, i1 %21) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtoddm3t6icwfcnte5wh6yoh6ctktqvgko3qbtaphluxyuyztrr.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 27, scope: !7)
!42 = !DILocation(line: 50, column: 19, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 25, scope: !7)
!48 = !DILocation(line: 60, column: 37, scope: !7)
!49 = !DILocation(line: 61, column: 25, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 57, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 59, column: 21, scope: !7)
!58 = !DILocation(line: 61, column: 37, scope: !7)
!59 = !DILocation(line: 62, column: 37, scope: !7)
!60 = !DILocation(line: 62, column: 4, scope: !7)
