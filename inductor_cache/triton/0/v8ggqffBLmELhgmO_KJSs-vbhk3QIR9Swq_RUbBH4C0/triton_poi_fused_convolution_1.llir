; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %11, 512, !dbg !12
  %16 = or disjoint i32 %11, 640, !dbg !12
  %17 = or disjoint i32 %11, 768, !dbg !12
  %18 = or disjoint i32 %11, 896, !dbg !12
  %19 = or disjoint i32 %7, %10, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %18, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %30 = sdiv i32 %.frozen, 768, !dbg !15
  %31 = mul i32 %30, 768, !dbg !16
  %.decomposed = sub i32 %.frozen, %31, !dbg !16
  %.frozen5 = freeze i32 %20, !dbg !15
  %32 = sdiv i32 %.frozen5, 768, !dbg !15
  %33 = mul i32 %32, 768, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %33, !dbg !16
  %34 = mul i32 %29, 768, !dbg !17
  %35 = add i32 %.decomposed, %34, !dbg !18
  %36 = mul i32 %30, 3145728, !dbg !19
  %37 = mul i32 %32, 3145728, !dbg !19
  %38 = add i32 %35, %36, !dbg !20
  %39 = add i32 %37, %.decomposed6, !dbg !18
  %40 = add i32 %39, %34, !dbg !20
  %41 = sext i32 %38 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %40 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !22
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !22
  %59 = bitcast i32 %55 to float, !dbg !22
  %60 = bitcast i32 %56 to float, !dbg !22
  %61 = bitcast i32 %57 to float, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = sext i32 %.decomposed to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !23
  %65 = sext i32 %.decomposed6 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = fadd float %50, %72, !dbg !25
  %86 = fadd float %51, %73, !dbg !25
  %87 = fadd float %52, %74, !dbg !25
  %88 = fadd float %53, %75, !dbg !25
  %89 = fadd float %59, %81, !dbg !25
  %90 = fadd float %60, %82, !dbg !25
  %91 = fadd float %61, %83, !dbg !25
  %92 = fadd float %62, %84, !dbg !25
  %93 = shl i32 %21, 12, !dbg !26
  %94 = shl i32 %22, 12, !dbg !26
  %95 = shl i32 %23, 12, !dbg !26
  %96 = shl i32 %24, 12, !dbg !26
  %97 = shl i32 %25, 12, !dbg !26
  %98 = shl i32 %26, 12, !dbg !26
  %99 = shl i32 %27, 12, !dbg !26
  %100 = shl i32 %28, 12, !dbg !26
  %101 = add i32 %93, %29, !dbg !27
  %102 = add i32 %94, %29, !dbg !27
  %103 = add i32 %95, %29, !dbg !27
  %104 = add i32 %96, %29, !dbg !27
  %105 = add i32 %97, %29, !dbg !27
  %106 = add i32 %98, %29, !dbg !27
  %107 = add i32 %99, %29, !dbg !27
  %108 = add i32 %100, %29, !dbg !27
  %109 = sext i32 %101 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !28
  %111 = sext i32 %102 to i64, !dbg !28
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !28
  %113 = sext i32 %103 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !28
  %115 = sext i32 %104 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !28
  %117 = sext i32 %105 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !28
  %119 = sext i32 %106 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !28
  %121 = sext i32 %107 to i64, !dbg !28
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !28
  %123 = sext i32 %108 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !28
  %.idx = shl nuw nsw i32 %10, 3, !dbg !29
  %125 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !29
  %126 = bitcast float %85 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !29
  %127 = shl nuw nsw i32 %10, 1, !dbg !29
  %128 = or disjoint i32 %127, 2, !dbg !29
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !29
  %130 = bitcast float %86 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !29
  %131 = or disjoint i32 %127, 4, !dbg !29
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !29
  %133 = bitcast float %87 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !29
  %134 = or disjoint i32 %127, 6, !dbg !29
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !29
  %136 = bitcast float %88 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !29
  %137 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !29
  %138 = load i32, ptr addrspace(3) %137, align 8, !dbg !29
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !29
  %139 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !29
  %140 = load i32, ptr addrspace(3) %139, align 8, !dbg !29
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !29
  %141 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !29
  %142 = load i32, ptr addrspace(3) %141, align 8, !dbg !29
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !29
  %143 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !29
  %144 = load i32, ptr addrspace(3) %143, align 8, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %145 = bitcast float %89 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %145, i1 true) #2, !dbg !29
  %146 = bitcast float %90 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %146, i1 true) #2, !dbg !29
  %147 = bitcast float %91 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %147, i1 true) #2, !dbg !29
  %148 = bitcast float %92 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %148, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %149 = load i32, ptr addrspace(3) %137, align 8, !dbg !29
  %150 = load i32, ptr addrspace(3) %139, align 8, !dbg !29
  %151 = load i32, ptr addrspace(3) %141, align 8, !dbg !29
  %152 = load i32, ptr addrspace(3) %143, align 8, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %110, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %112, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %114, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %116, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %118, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %120, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %122, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %124, i1 true) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ckajixsu2uu4ii72ivhxr6c7g6hgidqnmu7kvlm2hwzqjmnmnk.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_poi_fused_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_1", linkageName: "triton_poi_fused_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 52, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
