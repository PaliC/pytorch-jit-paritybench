; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30, ptr addrspace(1) %31, i32 %32) local_unnamed_addr !dbg !7 {
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %35 = shl i32 %34, 8, !dbg !11
  %36 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %37 = shl i32 %36, 1, !dbg !12
  %38 = and i32 %37, 254, !dbg !12
  %39 = or disjoint i32 %35, %38, !dbg !13
  %40 = or disjoint i32 %39, 1, !dbg !13
  %.frozen = freeze i32 %39, !dbg !14
  %41 = sdiv i32 %.frozen, 4, !dbg !14
  %42 = mul i32 %41, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %42, !dbg !15
  %43 = srem i32 %40, 4, !dbg !15
  %44 = sdiv i32 %39, 16, !dbg !16
  %45 = srem i32 %44, 256, !dbg !17
  %46 = shl nsw i32 %.decomposed, 1, !dbg !18
  %47 = shl nsw i32 %43, 1, !dbg !18
  %48 = shl i32 %41, 4, !dbg !19
  %49 = add i32 %46, %48, !dbg !20
  %50 = add i32 %48, %47, !dbg !20
  %51 = sext i32 %49 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %50 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %57 = or disjoint i32 %49, 1, !dbg !23
  %58 = or disjoint i32 %50, 1, !dbg !23
  %59 = sext i32 %57 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %58 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !25
  %65 = add i32 %49, 8, !dbg !26
  %66 = add i32 %50, 8, !dbg !26
  %67 = sext i32 %65 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !27
  %69 = sext i32 %66 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !28
  %73 = add i32 %49, 9, !dbg !29
  %74 = add i32 %50, 9, !dbg !29
  %75 = sext i32 %73 to i64, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !30
  %77 = sext i32 %74 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !31
  %81 = sext i32 %45 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !35
  %87 = bitcast i32 %86 to float, !dbg !35
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !35
  %89 = bitcast i32 %88 to float, !dbg !35
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !37
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !37
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !38
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !39
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !39
  %96 = fadd float %87, 0x3EE4F8B580000000, !dbg !40
  %97 = fadd float %89, 0x3EE4F8B580000000, !dbg !40
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %98, 0, !dbg !41
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %99, 0, !dbg !41
  br i1 %.not.i, label %105, label %100, !dbg !41

100:                                              ; preds = %33
  br i1 %.not1.i, label %103, label %101, !dbg !41

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

105:                                              ; preds = %33
  br i1 %.not1.i, label %108, label %106, !dbg !41

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !41
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %110, 0, !dbg !41
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %111, 0, !dbg !41
  br i1 %.not.i1, label %117, label %112, !dbg !41

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !41

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %120, label %118, !dbg !41

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %113, %115, %118, %120
  %.0.i3 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !41
  %122 = bitcast i32 %64 to float, !dbg !25
  %123 = bitcast i32 %56 to float, !dbg !22
  %124 = fadd float %123, %122, !dbg !42
  %125 = bitcast i32 %72 to float, !dbg !28
  %126 = fadd float %124, %125, !dbg !43
  %127 = bitcast i32 %80 to float, !dbg !31
  %128 = fadd float %126, %127, !dbg !44
  %129 = fmul float %128, 2.500000e-01, !dbg !45
  %130 = bitcast i32 %84 to float, !dbg !33
  %131 = fsub float %129, %130, !dbg !46
  %132 = bitcast i32 %63 to float, !dbg !25
  %133 = bitcast i32 %55 to float, !dbg !22
  %134 = fadd float %133, %132, !dbg !42
  %135 = bitcast i32 %71 to float, !dbg !28
  %136 = fadd float %134, %135, !dbg !43
  %137 = bitcast i32 %79 to float, !dbg !31
  %138 = fadd float %136, %137, !dbg !44
  %139 = fmul float %138, 2.500000e-01, !dbg !45
  %140 = bitcast i32 %83 to float, !dbg !33
  %141 = fsub float %139, %140, !dbg !46
  %142 = bitcast i32 %95 to float, !dbg !39
  %143 = bitcast i32 %94 to float, !dbg !39
  %144 = bitcast i32 %92 to float, !dbg !37
  %145 = bitcast i32 %91 to float, !dbg !37
  %.frozen6 = freeze i32 %39, !dbg !47
  %146 = sdiv i32 %.frozen6, 4096, !dbg !47
  %147 = mul i32 %146, 4096, !dbg !48
  %.decomposed7 = sub i32 %.frozen6, %147, !dbg !48
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %150 = fmul float %141, %148, !dbg !50
  %151 = fmul float %131, %149, !dbg !50
  %152 = fmul float %150, %145, !dbg !51
  %153 = fmul float %151, %144, !dbg !51
  %154 = fadd float %152, %143, !dbg !52
  %155 = fadd float %153, %142, !dbg !52
  %156 = fcmp olt float %154, 0.000000e+00, !dbg !53
  %157 = fcmp olt float %155, 0.000000e+00, !dbg !53
  %158 = select i1 %156, float 0.000000e+00, float %154, !dbg !57
  %159 = select i1 %157, float 0.000000e+00, float %155, !dbg !57
  %160 = sext i32 %39 to i64, !dbg !58
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !58
  %162 = bitcast float %139 to i32, !dbg !59
  %163 = bitcast float %129 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %161, i1 true) #3, !dbg !59
  %164 = getelementptr float, ptr addrspace(1) %6, i64 %160, !dbg !60
  %165 = bitcast float %158 to i32, !dbg !61
  %166 = bitcast float %159 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 true) #3, !dbg !61
  %167 = shl i32 %146, 13, !dbg !62
  %168 = add i32 %167, %.decomposed7, !dbg !63
  %169 = sext i32 %168 to i64, !dbg !64
  %170 = getelementptr float, ptr addrspace(1) %7, i64 %169, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %170, i1 true) #3, !dbg !65
  %171 = mul i32 %146, 8704, !dbg !66
  %172 = add i32 %171, %.decomposed7, !dbg !67
  %173 = sext i32 %172 to i64, !dbg !68
  %174 = getelementptr float, ptr addrspace(1) %8, i64 %173, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %174, i1 true) #3, !dbg !69
  %175 = mul i32 %146, 9216, !dbg !70
  %176 = add i32 %175, %.decomposed7, !dbg !71
  %177 = sext i32 %176 to i64, !dbg !72
  %178 = getelementptr float, ptr addrspace(1) %9, i64 %177, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %178, i1 true) #3, !dbg !73
  %179 = mul i32 %146, 9728, !dbg !74
  %180 = add i32 %179, %.decomposed7, !dbg !75
  %181 = sext i32 %180 to i64, !dbg !76
  %182 = getelementptr float, ptr addrspace(1) %10, i64 %181, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %182, i1 true) #3, !dbg !77
  %183 = mul i32 %146, 10240, !dbg !78
  %184 = add i32 %183, %.decomposed7, !dbg !79
  %185 = sext i32 %184 to i64, !dbg !80
  %186 = getelementptr float, ptr addrspace(1) %11, i64 %185, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %186, i1 true) #3, !dbg !81
  %187 = mul i32 %146, 10752, !dbg !82
  %188 = add i32 %187, %.decomposed7, !dbg !83
  %189 = sext i32 %188 to i64, !dbg !84
  %190 = getelementptr float, ptr addrspace(1) %12, i64 %189, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %190, i1 true) #3, !dbg !85
  %191 = mul i32 %146, 11264, !dbg !86
  %192 = add i32 %191, %.decomposed7, !dbg !87
  %193 = sext i32 %192 to i64, !dbg !88
  %194 = getelementptr float, ptr addrspace(1) %13, i64 %193, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %194, i1 true) #3, !dbg !89
  %195 = mul i32 %146, 11776, !dbg !90
  %196 = add i32 %195, %.decomposed7, !dbg !91
  %197 = sext i32 %196 to i64, !dbg !92
  %198 = getelementptr float, ptr addrspace(1) %14, i64 %197, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %198, i1 true) #3, !dbg !93
  %199 = mul i32 %146, 12288, !dbg !94
  %200 = add i32 %199, %.decomposed7, !dbg !95
  %201 = sext i32 %200 to i64, !dbg !96
  %202 = getelementptr float, ptr addrspace(1) %15, i64 %201, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %202, i1 true) #3, !dbg !97
  %203 = mul i32 %146, 12800, !dbg !98
  %204 = add i32 %203, %.decomposed7, !dbg !99
  %205 = sext i32 %204 to i64, !dbg !100
  %206 = getelementptr float, ptr addrspace(1) %16, i64 %205, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %206, i1 true) #3, !dbg !101
  %207 = mul i32 %146, 13312, !dbg !102
  %208 = add i32 %207, %.decomposed7, !dbg !103
  %209 = sext i32 %208 to i64, !dbg !104
  %210 = getelementptr float, ptr addrspace(1) %17, i64 %209, !dbg !104
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %210, i1 true) #3, !dbg !105
  %211 = mul i32 %146, 13824, !dbg !106
  %212 = add i32 %211, %.decomposed7, !dbg !107
  %213 = sext i32 %212 to i64, !dbg !108
  %214 = getelementptr float, ptr addrspace(1) %18, i64 %213, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %214, i1 true) #3, !dbg !109
  %215 = mul i32 %146, 14336, !dbg !110
  %216 = add i32 %215, %.decomposed7, !dbg !111
  %217 = sext i32 %216 to i64, !dbg !112
  %218 = getelementptr float, ptr addrspace(1) %19, i64 %217, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %218, i1 true) #3, !dbg !113
  %219 = mul i32 %146, 14848, !dbg !114
  %220 = add i32 %219, %.decomposed7, !dbg !115
  %221 = sext i32 %220 to i64, !dbg !116
  %222 = getelementptr float, ptr addrspace(1) %20, i64 %221, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %222, i1 true) #3, !dbg !117
  %223 = mul i32 %146, 15360, !dbg !118
  %224 = add i32 %223, %.decomposed7, !dbg !119
  %225 = sext i32 %224 to i64, !dbg !120
  %226 = getelementptr float, ptr addrspace(1) %21, i64 %225, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %226, i1 true) #3, !dbg !121
  %227 = mul i32 %146, 15872, !dbg !122
  %228 = add i32 %227, %.decomposed7, !dbg !123
  %229 = sext i32 %228 to i64, !dbg !124
  %230 = getelementptr float, ptr addrspace(1) %22, i64 %229, !dbg !124
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %230, i1 true) #3, !dbg !125
  %231 = shl i32 %146, 14, !dbg !126
  %232 = add i32 %231, %.decomposed7, !dbg !127
  %233 = sext i32 %232 to i64, !dbg !128
  %234 = getelementptr float, ptr addrspace(1) %23, i64 %233, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %234, i1 true) #3, !dbg !129
  %235 = mul i32 %146, 16896, !dbg !130
  %236 = add i32 %235, %.decomposed7, !dbg !131
  %237 = sext i32 %236 to i64, !dbg !132
  %238 = getelementptr float, ptr addrspace(1) %24, i64 %237, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %238, i1 true) #3, !dbg !133
  %239 = mul i32 %146, 17408, !dbg !134
  %240 = add i32 %239, %.decomposed7, !dbg !135
  %241 = sext i32 %240 to i64, !dbg !136
  %242 = getelementptr float, ptr addrspace(1) %25, i64 %241, !dbg !136
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %242, i1 true) #3, !dbg !137
  %243 = mul i32 %146, 17920, !dbg !138
  %244 = add i32 %243, %.decomposed7, !dbg !139
  %245 = sext i32 %244 to i64, !dbg !140
  %246 = getelementptr float, ptr addrspace(1) %26, i64 %245, !dbg !140
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %246, i1 true) #3, !dbg !141
  %247 = mul i32 %146, 18432, !dbg !142
  %248 = add i32 %247, %.decomposed7, !dbg !143
  %249 = sext i32 %248 to i64, !dbg !144
  %250 = getelementptr float, ptr addrspace(1) %27, i64 %249, !dbg !144
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %250, i1 true) #3, !dbg !145
  %251 = mul i32 %146, 18944, !dbg !146
  %252 = add i32 %251, %.decomposed7, !dbg !147
  %253 = sext i32 %252 to i64, !dbg !148
  %254 = getelementptr float, ptr addrspace(1) %28, i64 %253, !dbg !148
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %254, i1 true) #3, !dbg !149
  %255 = mul i32 %146, 19456, !dbg !150
  %256 = add i32 %255, %.decomposed7, !dbg !151
  %257 = sext i32 %256 to i64, !dbg !152
  %258 = getelementptr float, ptr addrspace(1) %29, i64 %257, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %258, i1 true) #3, !dbg !153
  %259 = mul i32 %146, 19968, !dbg !154
  %260 = add i32 %259, %.decomposed7, !dbg !155
  %261 = sext i32 %260 to i64, !dbg !156
  %262 = getelementptr float, ptr addrspace(1) %30, i64 %261, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %262, i1 true) #3, !dbg !157
  %263 = mul i32 %146, 20480, !dbg !158
  %264 = add i32 %263, %.decomposed7, !dbg !159
  %265 = sext i32 %264 to i64, !dbg !160
  %266 = getelementptr float, ptr addrspace(1) %31, i64 %265, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %266, i1 true) #3, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmo6lxyobnufokupjneuizon6oacpf6je4lzrvaz2ai7me57zatd.py", directory: "inductor_cache/mo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 30, column: 32, scope: !7)
!19 = !DILocation(line: 30, column: 40, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 45, scope: !7)
!23 = !DILocation(line: 31, column: 41, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 49, scope: !7)
!26 = !DILocation(line: 32, column: 41, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 49, scope: !7)
!29 = !DILocation(line: 33, column: 41, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 49, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 19, scope: !7)
!47 = !DILocation(line: 28, column: 19, scope: !7)
!48 = !DILocation(line: 29, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 55, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 56, column: 25, scope: !7)
!59 = !DILocation(line: 56, column: 36, scope: !7)
!60 = !DILocation(line: 57, column: 25, scope: !7)
!61 = !DILocation(line: 57, column: 37, scope: !7)
!62 = !DILocation(line: 58, column: 35, scope: !7)
!63 = !DILocation(line: 58, column: 30, scope: !7)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 46, scope: !7)
!66 = !DILocation(line: 59, column: 35, scope: !7)
!67 = !DILocation(line: 59, column: 30, scope: !7)
!68 = !DILocation(line: 59, column: 25, scope: !7)
!69 = !DILocation(line: 59, column: 46, scope: !7)
!70 = !DILocation(line: 60, column: 35, scope: !7)
!71 = !DILocation(line: 60, column: 30, scope: !7)
!72 = !DILocation(line: 60, column: 25, scope: !7)
!73 = !DILocation(line: 60, column: 46, scope: !7)
!74 = !DILocation(line: 61, column: 35, scope: !7)
!75 = !DILocation(line: 61, column: 30, scope: !7)
!76 = !DILocation(line: 61, column: 25, scope: !7)
!77 = !DILocation(line: 61, column: 46, scope: !7)
!78 = !DILocation(line: 62, column: 36, scope: !7)
!79 = !DILocation(line: 62, column: 30, scope: !7)
!80 = !DILocation(line: 62, column: 25, scope: !7)
!81 = !DILocation(line: 62, column: 47, scope: !7)
!82 = !DILocation(line: 63, column: 36, scope: !7)
!83 = !DILocation(line: 63, column: 30, scope: !7)
!84 = !DILocation(line: 63, column: 25, scope: !7)
!85 = !DILocation(line: 63, column: 47, scope: !7)
!86 = !DILocation(line: 64, column: 36, scope: !7)
!87 = !DILocation(line: 64, column: 30, scope: !7)
!88 = !DILocation(line: 64, column: 25, scope: !7)
!89 = !DILocation(line: 64, column: 47, scope: !7)
!90 = !DILocation(line: 65, column: 36, scope: !7)
!91 = !DILocation(line: 65, column: 30, scope: !7)
!92 = !DILocation(line: 65, column: 25, scope: !7)
!93 = !DILocation(line: 65, column: 47, scope: !7)
!94 = !DILocation(line: 66, column: 37, scope: !7)
!95 = !DILocation(line: 66, column: 31, scope: !7)
!96 = !DILocation(line: 66, column: 26, scope: !7)
!97 = !DILocation(line: 66, column: 48, scope: !7)
!98 = !DILocation(line: 67, column: 37, scope: !7)
!99 = !DILocation(line: 67, column: 31, scope: !7)
!100 = !DILocation(line: 67, column: 26, scope: !7)
!101 = !DILocation(line: 67, column: 48, scope: !7)
!102 = !DILocation(line: 68, column: 37, scope: !7)
!103 = !DILocation(line: 68, column: 31, scope: !7)
!104 = !DILocation(line: 68, column: 26, scope: !7)
!105 = !DILocation(line: 68, column: 48, scope: !7)
!106 = !DILocation(line: 69, column: 37, scope: !7)
!107 = !DILocation(line: 69, column: 31, scope: !7)
!108 = !DILocation(line: 69, column: 26, scope: !7)
!109 = !DILocation(line: 69, column: 48, scope: !7)
!110 = !DILocation(line: 70, column: 37, scope: !7)
!111 = !DILocation(line: 70, column: 31, scope: !7)
!112 = !DILocation(line: 70, column: 26, scope: !7)
!113 = !DILocation(line: 70, column: 48, scope: !7)
!114 = !DILocation(line: 71, column: 37, scope: !7)
!115 = !DILocation(line: 71, column: 31, scope: !7)
!116 = !DILocation(line: 71, column: 26, scope: !7)
!117 = !DILocation(line: 71, column: 48, scope: !7)
!118 = !DILocation(line: 72, column: 37, scope: !7)
!119 = !DILocation(line: 72, column: 31, scope: !7)
!120 = !DILocation(line: 72, column: 26, scope: !7)
!121 = !DILocation(line: 72, column: 48, scope: !7)
!122 = !DILocation(line: 73, column: 37, scope: !7)
!123 = !DILocation(line: 73, column: 31, scope: !7)
!124 = !DILocation(line: 73, column: 26, scope: !7)
!125 = !DILocation(line: 73, column: 48, scope: !7)
!126 = !DILocation(line: 74, column: 37, scope: !7)
!127 = !DILocation(line: 74, column: 31, scope: !7)
!128 = !DILocation(line: 74, column: 26, scope: !7)
!129 = !DILocation(line: 74, column: 48, scope: !7)
!130 = !DILocation(line: 75, column: 37, scope: !7)
!131 = !DILocation(line: 75, column: 31, scope: !7)
!132 = !DILocation(line: 75, column: 26, scope: !7)
!133 = !DILocation(line: 75, column: 48, scope: !7)
!134 = !DILocation(line: 76, column: 37, scope: !7)
!135 = !DILocation(line: 76, column: 31, scope: !7)
!136 = !DILocation(line: 76, column: 26, scope: !7)
!137 = !DILocation(line: 76, column: 48, scope: !7)
!138 = !DILocation(line: 77, column: 37, scope: !7)
!139 = !DILocation(line: 77, column: 31, scope: !7)
!140 = !DILocation(line: 77, column: 26, scope: !7)
!141 = !DILocation(line: 77, column: 48, scope: !7)
!142 = !DILocation(line: 78, column: 37, scope: !7)
!143 = !DILocation(line: 78, column: 31, scope: !7)
!144 = !DILocation(line: 78, column: 26, scope: !7)
!145 = !DILocation(line: 78, column: 48, scope: !7)
!146 = !DILocation(line: 79, column: 37, scope: !7)
!147 = !DILocation(line: 79, column: 31, scope: !7)
!148 = !DILocation(line: 79, column: 26, scope: !7)
!149 = !DILocation(line: 79, column: 48, scope: !7)
!150 = !DILocation(line: 80, column: 37, scope: !7)
!151 = !DILocation(line: 80, column: 31, scope: !7)
!152 = !DILocation(line: 80, column: 26, scope: !7)
!153 = !DILocation(line: 80, column: 48, scope: !7)
!154 = !DILocation(line: 81, column: 37, scope: !7)
!155 = !DILocation(line: 81, column: 31, scope: !7)
!156 = !DILocation(line: 81, column: 26, scope: !7)
!157 = !DILocation(line: 81, column: 48, scope: !7)
!158 = !DILocation(line: 82, column: 37, scope: !7)
!159 = !DILocation(line: 82, column: 31, scope: !7)
!160 = !DILocation(line: 82, column: 26, scope: !7)
!161 = !DILocation(line: 82, column: 48, scope: !7)
!162 = !DILocation(line: 82, column: 4, scope: !7)
