#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":19:0)
#loc1 = loc(unknown)
#loc27 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":40:25)
#loc34 = loc(callsite(#loc1 at #loc27))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_mv_15(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<2048> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<262144> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<2048> : tensor<1x8xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<128> : tensor<1x8xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<64x1xi32, #blocked2> loc(#loc5)
    %14 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %15 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc6)
    %16 = tt.expand_dims %14 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc6)
    %17 = tt.expand_dims %15 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1> loc(#loc6)
    %18 = arith.remsi %11, %cst_1 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %19 = arith.divsi %11, %cst_1 : tensor<64x1xi32, #blocked1> loc(#loc8)
    %20 = arith.divsi %12, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc8)
    %21 = tt.broadcast %18 : tensor<64x1xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc9)
    %22 = arith.muli %19, %cst_4 : tensor<64x1xi32, #blocked1> loc(#loc10)
    %23 = tt.broadcast %22 : tensor<64x1xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc11)
    %24 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %25 = arith.muli %20, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc13)
    %26 = tt.broadcast %25 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc14)
    %27 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc15)
    %28 = scf.for %arg5 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg6 = %cst) -> (tensor<64x8xf32, #blocked>)  : i32 {
      %34 = tt.splat %arg5 : i32 -> tensor<1x8xi32, #blocked> loc(#loc17)
      %35 = tt.splat %arg5 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc17)
      %36 = arith.addi %34, %16 : tensor<1x8xi32, #blocked> loc(#loc17)
      %37 = arith.addi %35, %17 : tensor<1x8xi32, #blocked1> loc(#loc17)
      %38 = arith.cmpi slt, %36, %cst_6 : tensor<1x8xi32, #blocked> loc(#loc18)
      %39 = arith.cmpi slt, %37, %cst_7 : tensor<1x8xi32, #blocked1> loc(#loc18)
      %40 = arith.muli %37, %cst_5 : tensor<1x8xi32, #blocked1> loc(#loc19)
      %41 = tt.broadcast %40 : tensor<1x8xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc9)
      %42 = arith.addi %21, %41 : tensor<64x8xi32, #blocked1> loc(#loc9)
      %43 = arith.addi %42, %23 : tensor<64x8xi32, #blocked1> loc(#loc11)
      %44 = tt.addptr %24, %43 : tensor<64x8x!tt.ptr<f32>, #blocked1>, tensor<64x8xi32, #blocked1> loc(#loc12)
      %45 = tt.broadcast %38 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc20)
      %46 = tt.broadcast %39 : tensor<1x8xi1, #blocked1> -> tensor<64x8xi1, #blocked1> loc(#loc20)
      %47 = tt.load %44, %46, %cst_0 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc20)
      %48 = triton_gpu.convert_layout %47 : tensor<64x8xf32, #blocked1> -> tensor<64x8xf32, #blocked> loc(#loc20)
      %49 = tt.broadcast %36 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc14)
      %50 = arith.addi %49, %26 : tensor<64x8xi32, #blocked> loc(#loc14)
      %51 = tt.addptr %27, %50 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc15)
      %52 = tt.load %51, %45, %cst evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc21)
      %53 = arith.mulf %48, %52 : tensor<64x8xf32, #blocked> loc(#loc22)
      %54 = arith.addf %arg6, %53 : tensor<64x8xf32, #blocked> loc(#loc23)
      %55 = arith.select %45, %54, %arg6 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc24)
      scf.yield %55 : tensor<64x8xf32, #blocked> loc(#loc25)
    } loc(#loc16)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc27)), %arg6: f32 loc(callsite(#loc1 at #loc27))):
      %34 = arith.addf %arg5, %arg6 : f32 loc(#loc36)
      tt.reduce.return %34 : f32 loc(#loc33)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc33)
    %30 = triton_gpu.convert_layout %29 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xf32, #blocked2> loc(#loc29)
    %32 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc30)
    %33 = tt.addptr %32, %13 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc30)
    tt.store %33, %31 : tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc31)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":22:28)
#loc3 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":22:33)
#loc4 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":23:44)
#loc5 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":23:23)
#loc6 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":25:33)
#loc7 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":26:19)
#loc8 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":27:19)
#loc9 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":34:39)
#loc10 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":34:56)
#loc11 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":34:49)
#loc12 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":34:34)
#loc13 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":35:43)
#loc14 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":35:39)
#loc15 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":35:34)
#loc16 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":30:36)
#loc17 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":31:27)
#loc18 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":32:25)
#loc19 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":34:44)
#loc20 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":34:61)
#loc21 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":35:48)
#loc22 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":36:22)
#loc23 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":38:23)
#loc24 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":39:38)
#loc25 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":39:8)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc29 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":40:28)
#loc30 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":41:25)
#loc31 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":41:36)
#loc32 = loc("inductor_cache/5m/c5m6k2hyhm3h5uly6znvdx5knr4ljlg5hi6ohoam3y3suslppweq.py":41:4)
#loc33 = loc(callsite(#loc26 at #loc27))
#loc35 = loc(callsite(#loc28 at #loc26))
#loc36 = loc(callsite(#loc35 at #loc27))
