; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_view_31(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %.fr = freeze i32 %4, !dbg !11
  %5 = shl i32 %.fr, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = icmp slt i32 %9, 36000, !dbg !14
  %14 = srem i32 %9, 36, !dbg !15
  %15 = srem i32 %10, 36, !dbg !15
  %16 = srem i32 %11, 36, !dbg !15
  %17 = srem i32 %12, 36, !dbg !15
  %.lhs.trunc = trunc nsw i32 %14 to i8, !dbg !16
  %18 = srem i8 %.lhs.trunc, 9, !dbg !16
  %.sext = sext i8 %18 to i32, !dbg !16
  %.lhs.trunc4 = trunc nsw i32 %15 to i8, !dbg !16
  %19 = srem i8 %.lhs.trunc4, 9, !dbg !16
  %.sext5 = sext i8 %19 to i32, !dbg !16
  %.lhs.trunc6 = trunc nsw i32 %16 to i8, !dbg !16
  %20 = srem i8 %.lhs.trunc6, 9, !dbg !16
  %.sext7 = sext i8 %20 to i32, !dbg !16
  %.lhs.trunc8 = trunc nsw i32 %17 to i8, !dbg !16
  %21 = srem i8 %.lhs.trunc8, 9, !dbg !16
  %.sext9 = sext i8 %21 to i32, !dbg !16
  %22 = mul nsw i32 %.sext, 1000, !dbg !17
  %23 = mul nsw i32 %.sext5, 1000, !dbg !17
  %24 = mul nsw i32 %.sext7, 1000, !dbg !17
  %25 = mul nsw i32 %.sext9, 1000, !dbg !17
  %26 = sub nsw i32 %9, %14, !dbg !18
  %27 = add i32 %26, %15, !dbg !19
  %.fr1 = freeze i32 %27, !dbg !20
  %28 = add i32 %26, %16, !dbg !19
  %.fr2 = freeze i32 %28, !dbg !20
  %29 = add i32 %26, %17, !dbg !19
  %.fr3 = freeze i32 %29, !dbg !20
  %30 = sdiv i32 %9, 9, !dbg !21
  %31 = sdiv i32 %.fr1, 9, !dbg !21
  %32 = sdiv i32 %.fr2, 9, !dbg !21
  %33 = sdiv i32 %.fr3, 9, !dbg !21
  %34 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !20
  %35 = insertelement <2 x i32> %34, i32 %30, i64 1, !dbg !20
  %36 = srem <2 x i32> %35, <i32 9000, i32 1000>, !dbg !20
  %37 = extractelement <2 x i32> %36, i64 0, !dbg !20
  %38 = sub nsw i32 %9, %37, !dbg !20
  %39 = insertelement <2 x i32> poison, i32 %.fr1, i64 0, !dbg !20
  %40 = insertelement <2 x i32> %39, i32 %31, i64 1, !dbg !20
  %41 = srem <2 x i32> %40, <i32 9000, i32 1000>, !dbg !20
  %42 = insertelement <2 x i32> poison, i32 %.fr2, i64 0, !dbg !20
  %43 = insertelement <2 x i32> %42, i32 %32, i64 1, !dbg !20
  %44 = srem <2 x i32> %43, <i32 9000, i32 1000>, !dbg !20
  %45 = insertelement <2 x i32> poison, i32 %.fr3, i64 0, !dbg !20
  %46 = insertelement <2 x i32> %45, i32 %33, i64 1, !dbg !20
  %47 = srem <2 x i32> %46, <i32 9000, i32 1000>, !dbg !20
  %48 = extractelement <2 x i32> %36, i64 1, !dbg !22
  %49 = add i32 %38, %48, !dbg !22
  %50 = add i32 %49, %22, !dbg !23
  %51 = add i32 %.fr1, %23, !dbg !20
  %52 = extractelement <2 x i32> %41, i64 0, !dbg !22
  %53 = sub i32 %51, %52, !dbg !22
  %54 = extractelement <2 x i32> %41, i64 1, !dbg !23
  %55 = add i32 %53, %54, !dbg !23
  %56 = add i32 %.fr2, %24, !dbg !20
  %57 = extractelement <2 x i32> %44, i64 0, !dbg !22
  %58 = sub i32 %56, %57, !dbg !22
  %59 = extractelement <2 x i32> %44, i64 1, !dbg !23
  %60 = add i32 %58, %59, !dbg !23
  %61 = add i32 %.fr3, %25, !dbg !20
  %62 = extractelement <2 x i32> %47, i64 0, !dbg !22
  %63 = sub i32 %61, %62, !dbg !22
  %64 = extractelement <2 x i32> %47, i64 1, !dbg !23
  %65 = add i32 %63, %64, !dbg !23
  %66 = sext i32 %50 to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = sext i32 %55 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = sext i32 %60 to i64, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = sext i32 %65 to i64, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %13) #1, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !25
  %78 = sext i32 %9 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %74, i32 %75, i32 %76, i32 %77, ptr addrspace(1) %79, i1 %13) #1, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2z6bida65skle3v5v255b2w3okeb3nx2kxqyzfaavpg5uyl4m72.py", directory: "inductor_cache/2z")
!4 = !{ptr @triton_poi_fused_view_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_view_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_view_31", linkageName: "triton_poi_fused_view_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 42, scope: !7)
!17 = !DILocation(line: 27, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 63, scope: !7)
!19 = !DILocation(line: 27, column: 60, scope: !7)
!20 = !DILocation(line: 27, column: 54, scope: !7)
!21 = !DILocation(line: 27, column: 97, scope: !7)
!22 = !DILocation(line: 27, column: 48, scope: !7)
!23 = !DILocation(line: 27, column: 80, scope: !7)
!24 = !DILocation(line: 27, column: 30, scope: !7)
!25 = !DILocation(line: 27, column: 111, scope: !7)
!26 = !DILocation(line: 28, column: 25, scope: !7)
!27 = !DILocation(line: 28, column: 36, scope: !7)
!28 = !DILocation(line: 28, column: 4, scope: !7)
