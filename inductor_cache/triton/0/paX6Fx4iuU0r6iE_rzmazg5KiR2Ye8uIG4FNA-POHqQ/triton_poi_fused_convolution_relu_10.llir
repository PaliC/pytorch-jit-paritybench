; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = or disjoint i32 %16, 16, !dbg !13
  %19 = or disjoint i32 %16, 24, !dbg !13
  %20 = or disjoint i32 %16, 32, !dbg !13
  %21 = or disjoint i32 %16, 40, !dbg !13
  %22 = or disjoint i32 %16, 48, !dbg !13
  %23 = or disjoint i32 %16, 56, !dbg !13
  %24 = icmp slt i32 %15, 1536, !dbg !14
  %25 = icmp slt i32 %16, 1536, !dbg !14
  %26 = icmp slt i32 %17, 1536, !dbg !14
  %27 = icmp slt i32 %18, 1536, !dbg !14
  %28 = icmp slt i32 %19, 1536, !dbg !14
  %29 = icmp slt i32 %20, 1536, !dbg !14
  %30 = icmp slt i32 %21, 1536, !dbg !14
  %31 = icmp slt i32 %22, 1536, !dbg !14
  %32 = icmp slt i32 %23, 1536, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %34 = shl i32 %33, 4, !dbg !16
  %35 = and i32 %9, 15, !dbg !17
  %36 = or disjoint i32 %34, %13, !dbg !18
  %37 = or disjoint i32 %34, %14, !dbg !18
  %38 = or disjoint i32 %34, %35, !dbg !18
  %39 = icmp slt i32 %36, 9, !dbg !19
  %40 = icmp slt i32 %37, 9, !dbg !19
  %41 = icmp slt i32 %38, 9, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %42 = sdiv i32 %.frozen, 384, !dbg !20
  %43 = mul i32 %42, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %43, !dbg !21
  %44 = mul i32 %36, 384, !dbg !22
  %45 = mul i32 %37, 384, !dbg !22
  %46 = mul i32 %42, 3456, !dbg !23
  %47 = add i32 %46, %.decomposed, !dbg !24
  %48 = add i32 %47, %44, !dbg !25
  %49 = add i32 %47, %45, !dbg !25
  %50 = sext i32 %48 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = and i1 %24, %39, !dbg !27
  %55 = and i1 %24, %40, !dbg !27
  %56 = and i1 %25, %41, !dbg !27
  %57 = and i1 %26, %41, !dbg !27
  %58 = and i1 %27, %41, !dbg !27
  %59 = and i1 %28, %41, !dbg !27
  %60 = and i1 %29, %41, !dbg !27
  %61 = and i1 %30, %41, !dbg !27
  %62 = and i1 %31, %41, !dbg !27
  %63 = and i1 %32, %41, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %54) #2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !28
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %55) #2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %74 = sext i32 %.decomposed to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !29
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %24) #2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !30
  %81 = insertelement <8 x i32> poison, i32 %73, i64 0, !dbg !28
  %82 = insertelement <8 x i32> %81, i32 %72, i64 1, !dbg !28
  %83 = insertelement <8 x i32> %82, i32 %71, i64 2, !dbg !28
  %84 = insertelement <8 x i32> %83, i32 %70, i64 3, !dbg !28
  %85 = insertelement <8 x i32> %84, i32 %68, i64 4, !dbg !28
  %86 = insertelement <8 x i32> %85, i32 %67, i64 5, !dbg !28
  %87 = insertelement <8 x i32> %86, i32 %66, i64 6, !dbg !28
  %88 = insertelement <8 x i32> %87, i32 %65, i64 7, !dbg !28
  %89 = bitcast <8 x i32> %88 to <8 x float>, !dbg !28
  %90 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !30
  %91 = insertelement <4 x i32> %90, i32 %79, i64 1, !dbg !30
  %92 = insertelement <4 x i32> %91, i32 %78, i64 2, !dbg !30
  %93 = insertelement <4 x i32> %92, i32 %77, i64 3, !dbg !30
  %94 = bitcast <4 x i32> %93 to <4 x float>, !dbg !30
  %95 = shufflevector <4 x float> %94, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %96 = fadd <8 x float> %95, %89, !dbg !31
  %97 = fcmp olt <8 x float> %96, zeroinitializer, !dbg !32
  %98 = extractelement <8 x i1> %97, i64 7, !dbg !36
  %99 = extractelement <8 x float> %96, i64 7, !dbg !36
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !36
  %101 = extractelement <8 x i1> %97, i64 6, !dbg !36
  %102 = extractelement <8 x float> %96, i64 6, !dbg !36
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !36
  %104 = extractelement <8 x i1> %97, i64 5, !dbg !36
  %105 = extractelement <8 x float> %96, i64 5, !dbg !36
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !36
  %107 = extractelement <8 x i1> %97, i64 4, !dbg !36
  %108 = extractelement <8 x float> %96, i64 4, !dbg !36
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !36
  %110 = extractelement <8 x i1> %97, i64 3, !dbg !36
  %111 = extractelement <8 x float> %96, i64 3, !dbg !36
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !36
  %113 = extractelement <8 x i1> %97, i64 2, !dbg !36
  %114 = extractelement <8 x float> %96, i64 2, !dbg !36
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !36
  %116 = extractelement <8 x i1> %97, i64 1, !dbg !36
  %117 = extractelement <8 x float> %96, i64 1, !dbg !36
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !36
  %119 = extractelement <8 x i1> %97, i64 0, !dbg !36
  %120 = extractelement <8 x float> %96, i64 0, !dbg !36
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !36
  %122 = mul i32 %16, 9, !dbg !37
  %123 = mul i32 %17, 9, !dbg !37
  %124 = mul i32 %18, 9, !dbg !37
  %125 = mul i32 %19, 9, !dbg !37
  %126 = mul i32 %20, 9, !dbg !37
  %127 = mul i32 %21, 9, !dbg !37
  %128 = mul i32 %22, 9, !dbg !37
  %129 = mul i32 %23, 9, !dbg !37
  %130 = add i32 %38, %122, !dbg !38
  %131 = add i32 %38, %123, !dbg !38
  %132 = add i32 %38, %124, !dbg !38
  %133 = add i32 %38, %125, !dbg !38
  %134 = add i32 %38, %126, !dbg !38
  %135 = add i32 %38, %127, !dbg !38
  %136 = add i32 %38, %128, !dbg !38
  %137 = add i32 %38, %129, !dbg !38
  %138 = sext i32 %130 to i64, !dbg !39
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !39
  %140 = sext i32 %131 to i64, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !39
  %142 = sext i32 %132 to i64, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !39
  %144 = sext i32 %133 to i64, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !39
  %146 = sext i32 %134 to i64, !dbg !39
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !39
  %148 = sext i32 %135 to i64, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !39
  %150 = sext i32 %136 to i64, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !39
  %152 = sext i32 %137 to i64, !dbg !39
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !39
  %154 = shl i32 %9, 6, !dbg !40
  %155 = and i32 %154, 960, !dbg !40
  %156 = or disjoint i32 %155, %13, !dbg !40
  %157 = and i32 %9, 127, !dbg !40
  %158 = lshr exact i32 %155, 4, !dbg !40
  %159 = add nuw nsw i32 %158, %156, !dbg !40
  %160 = zext nneg i32 %159 to i64, !dbg !40
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %160, !dbg !40
  %162 = bitcast float %100 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !40
  %163 = or disjoint i32 %156, 16, !dbg !40
  %164 = lshr i32 %163, 4, !dbg !40
  %165 = add nuw nsw i32 %164, %163, !dbg !40
  %166 = zext nneg i32 %165 to i64, !dbg !40
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %166, !dbg !40
  %168 = bitcast float %103 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !40
  %169 = or disjoint i32 %156, 32, !dbg !40
  %170 = lshr i32 %169, 4, !dbg !40
  %171 = add nuw nsw i32 %170, %169, !dbg !40
  %172 = zext nneg i32 %171 to i64, !dbg !40
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %172, !dbg !40
  %174 = bitcast float %106 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !40
  %175 = or disjoint i32 %156, 48, !dbg !40
  %176 = lshr i32 %175, 4, !dbg !40
  %177 = add nuw nsw i32 %176, %175, !dbg !40
  %178 = zext nneg i32 %177 to i64, !dbg !40
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %178, !dbg !40
  %180 = bitcast float %109 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !40
  %181 = or disjoint i32 %156, 8, !dbg !40
  %182 = add nuw nsw i32 %181, %158, !dbg !40
  %183 = zext nneg i32 %182 to i64, !dbg !40
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %183, !dbg !40
  %185 = bitcast float %112 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !40
  %186 = or disjoint i32 %156, 24, !dbg !40
  %187 = lshr i32 %186, 4, !dbg !40
  %188 = add nuw nsw i32 %187, %186, !dbg !40
  %189 = zext nneg i32 %188 to i64, !dbg !40
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %189, !dbg !40
  %191 = bitcast float %115 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !40
  %192 = or disjoint i32 %156, 40, !dbg !40
  %193 = lshr i32 %192, 4, !dbg !40
  %194 = add nuw nsw i32 %193, %192, !dbg !40
  %195 = zext nneg i32 %194 to i64, !dbg !40
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %195, !dbg !40
  %197 = bitcast float %118 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #2, !dbg !40
  %198 = or disjoint i32 %156, 56, !dbg !40
  %199 = lshr i32 %198, 4, !dbg !40
  %200 = add nuw nsw i32 %199, %198, !dbg !40
  %201 = zext nneg i32 %200 to i64, !dbg !40
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %201, !dbg !40
  %203 = bitcast float %121 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %204 = lshr i32 %157, 4, !dbg !40
  %205 = add nuw nsw i32 %204, %157, !dbg !40
  %206 = zext nneg i32 %205 to i64, !dbg !40
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %206, !dbg !40
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !40
  %209 = or disjoint i32 %157, 128, !dbg !40
  %210 = lshr i32 %209, 4, !dbg !40
  %211 = add nuw nsw i32 %210, %209, !dbg !40
  %212 = zext nneg i32 %211 to i64, !dbg !40
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %212, !dbg !40
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !40
  %215 = or disjoint i32 %157, 256, !dbg !40
  %216 = lshr i32 %215, 4, !dbg !40
  %217 = add nuw nsw i32 %216, %215, !dbg !40
  %218 = zext nneg i32 %217 to i64, !dbg !40
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %218, !dbg !40
  %220 = load i32, ptr addrspace(3) %219, align 4, !dbg !40
  %221 = or disjoint i32 %157, 384, !dbg !40
  %222 = lshr i32 %221, 4, !dbg !40
  %223 = add nuw nsw i32 %222, %221, !dbg !40
  %224 = zext nneg i32 %223 to i64, !dbg !40
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %224, !dbg !40
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !40
  %227 = or disjoint i32 %157, 512, !dbg !40
  %228 = lshr i32 %227, 4, !dbg !40
  %229 = add nuw nsw i32 %228, %227, !dbg !40
  %230 = zext nneg i32 %229 to i64, !dbg !40
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %230, !dbg !40
  %232 = load i32, ptr addrspace(3) %231, align 4, !dbg !40
  %233 = or disjoint i32 %157, 640, !dbg !40
  %234 = lshr i32 %233, 4, !dbg !40
  %235 = add nuw nsw i32 %234, %233, !dbg !40
  %236 = zext nneg i32 %235 to i64, !dbg !40
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %236, !dbg !40
  %238 = load i32, ptr addrspace(3) %237, align 4, !dbg !40
  %239 = or disjoint i32 %157, 768, !dbg !40
  %240 = lshr i32 %239, 4, !dbg !40
  %241 = add nuw nsw i32 %240, %239, !dbg !40
  %242 = zext nneg i32 %241 to i64, !dbg !40
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %242, !dbg !40
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !40
  %245 = or disjoint i32 %157, 896, !dbg !40
  %246 = lshr i32 %245, 4, !dbg !40
  %247 = add nuw nsw i32 %246, %245, !dbg !40
  %248 = zext nneg i32 %247 to i64, !dbg !40
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %248, !dbg !40
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %139, i1 %56) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %141, i1 %57) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %220, ptr addrspace(1) %143, i1 %58) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %226, ptr addrspace(1) %145, i1 %59) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %232, ptr addrspace(1) %147, i1 %60) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %149, i1 %61) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %244, ptr addrspace(1) %151, i1 %62) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %250, ptr addrspace(1) %153, i1 %63) #2, !dbg !40
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !41
  %252 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !41
  %253 = bitcast float %100 to i32, !dbg !42
  %254 = bitcast float %103 to i32, !dbg !42
  %255 = bitcast float %106 to i32, !dbg !42
  %256 = bitcast float %109 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %254, i32 %255, i32 %256, ptr addrspace(1) %251, i1 %54) #2, !dbg !42
  %257 = bitcast float %112 to i32, !dbg !42
  %258 = bitcast float %115 to i32, !dbg !42
  %259 = bitcast float %118 to i32, !dbg !42
  %260 = bitcast float %121 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %252, i1 %55) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7rd2ilxd3k7agyzyzaqopl4m73dbx6cjftajogchx5mt4cdtr26.py", directory: "inductor_cache/7r")
!4 = !{ptr @triton_poi_fused_convolution_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_10", linkageName: "triton_poi_fused_convolution_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 43, scope: !7)
!41 = !DILocation(line: 38, column: 25, scope: !7)
!42 = !DILocation(line: 38, column: 55, scope: !7)
!43 = !DILocation(line: 38, column: 4, scope: !7)
