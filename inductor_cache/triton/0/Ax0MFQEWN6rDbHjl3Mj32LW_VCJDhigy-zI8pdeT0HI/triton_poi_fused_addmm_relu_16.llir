; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_addmm_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 16, !dbg !12
  %14 = and i32 %12, 15, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = srem i32 %15, 4, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %16) #1, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = sext i32 %17 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %16) #1, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #1, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #1, !dbg !23
  %31 = bitcast i32 %30 to float, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #1, !dbg !25
  %34 = bitcast i32 %33 to float, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #1, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #1, !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #1, !dbg !31
  %43 = bitcast i32 %42 to float, !dbg !31
  %44 = fadd float %21, %25, !dbg !32
  %45 = fcmp olt float %44, 0.000000e+00, !dbg !33
  %46 = select i1 %45, float 0.000000e+00, float %44, !dbg !37
  %47 = fadd float %25, %28, !dbg !38
  %48 = fcmp olt float %47, 0.000000e+00, !dbg !39
  %49 = select i1 %48, float 0.000000e+00, float %47, !dbg !41
  %50 = fadd float %25, %31, !dbg !42
  %51 = fcmp olt float %50, 0.000000e+00, !dbg !43
  %52 = select i1 %51, float 0.000000e+00, float %50, !dbg !45
  %53 = fadd float %25, %34, !dbg !46
  %54 = fcmp olt float %53, 0.000000e+00, !dbg !47
  %55 = select i1 %54, float 0.000000e+00, float %53, !dbg !49
  %56 = fadd float %25, %37, !dbg !50
  %57 = fcmp olt float %56, 0.000000e+00, !dbg !51
  %58 = select i1 %57, float 0.000000e+00, float %56, !dbg !53
  %59 = fadd float %25, %40, !dbg !54
  %60 = fcmp olt float %59, 0.000000e+00, !dbg !55
  %61 = select i1 %60, float 0.000000e+00, float %59, !dbg !57
  %62 = fadd float %25, %43, !dbg !58
  %63 = fcmp olt float %62, 0.000000e+00, !dbg !59
  %64 = select i1 %63, float 0.000000e+00, float %62, !dbg !61
  %65 = icmp eq i32 %13, 0, !dbg !62
  %66 = bitcast float %46 to i32, !dbg !62
  %67 = and i1 %65, %16, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %66, ptr addrspace(1) %19, i1 %67) #1, !dbg !62
  %68 = bitcast float %49 to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %68, ptr addrspace(1) %26, i1 %67) #1, !dbg !63
  %69 = bitcast float %52 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %69, ptr addrspace(1) %29, i1 %67) #1, !dbg !64
  %70 = bitcast float %55 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %70, ptr addrspace(1) %32, i1 %67) #1, !dbg !65
  %71 = bitcast float %58 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %71, ptr addrspace(1) %35, i1 %67) #1, !dbg !66
  %72 = bitcast float %61 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %38, i1 %67) #1, !dbg !67
  %73 = bitcast float %64 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %41, i1 %67) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpbfbsvav62lw2mxgmwxyzt5jssacngtkaedtlnlco3aagyfljcs.py", directory: "inductor_cache/pb")
!4 = !{ptr @triton_poi_fused_addmm_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_addmm_relu_16, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_addmm_relu_16", linkageName: "triton_poi_fused_addmm_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 34, scope: !7)
!23 = !DILocation(line: 29, column: 39, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 40, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 40, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 40, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 36, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !40)
!40 = !DILocation(line: 38, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !40)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !44)
!44 = !DILocation(line: 40, column: 41, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !44)
!46 = !DILocation(line: 41, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !48)
!48 = !DILocation(line: 42, column: 41, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !48)
!50 = !DILocation(line: 43, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !52)
!52 = !DILocation(line: 44, column: 41, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !52)
!54 = !DILocation(line: 45, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !56)
!56 = !DILocation(line: 46, column: 41, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !56)
!58 = !DILocation(line: 47, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !60)
!60 = !DILocation(line: 48, column: 41, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !60)
!62 = !DILocation(line: 49, column: 39, scope: !7)
!63 = !DILocation(line: 50, column: 39, scope: !7)
!64 = !DILocation(line: 51, column: 40, scope: !7)
!65 = !DILocation(line: 52, column: 40, scope: !7)
!66 = !DILocation(line: 53, column: 40, scope: !7)
!67 = !DILocation(line: 54, column: 40, scope: !7)
!68 = !DILocation(line: 55, column: 40, scope: !7)
!69 = !DILocation(line: 55, column: 4, scope: !7)
