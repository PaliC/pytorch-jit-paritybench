; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_19(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = icmp slt i32 %9, 50176, !dbg !14
  %14 = srem i32 %9, 49, !dbg !15
  %15 = srem i32 %10, 49, !dbg !15
  %16 = srem i32 %11, 49, !dbg !15
  %17 = srem i32 %12, 49, !dbg !15
  %18 = sdiv i32 %9, 12544, !dbg !16
  %19 = sext i32 %9 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %13) #3, !dbg !18
  %22 = mul nsw i32 %18, 49, !dbg !19
  %23 = add nsw i32 %22, %14, !dbg !20
  %24 = add nsw i32 %22, %15, !dbg !20
  %25 = add nsw i32 %22, %16, !dbg !20
  %26 = add nsw i32 %22, %17, !dbg !20
  %27 = sext i32 %23 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = sext i32 %24 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = sext i32 %25 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = sext i32 %26 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #3, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #3, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #3, !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %13) #3, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = fadd float %36, 0x3E112E0BE0000000, !dbg !23
  %44 = fadd float %38, 0x3E112E0BE0000000, !dbg !23
  %45 = fadd float %40, 0x3E112E0BE0000000, !dbg !23
  %46 = fadd float %42, 0x3E112E0BE0000000, !dbg !23
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i = icmp eq i32 %47, 0, !dbg !24
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i = icmp eq i32 %48, 0, !dbg !24
  br i1 %.not.i, label %54, label %49, !dbg !24

49:                                               ; preds = %3
  br i1 %.not1.i, label %52, label %50, !dbg !24

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

54:                                               ; preds = %3
  br i1 %.not1.i, label %57, label %55, !dbg !24

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !24
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i1 = icmp eq i32 %59, 0, !dbg !24
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !24
  br i1 %.not.i1, label %66, label %61, !dbg !24

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !24

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !24

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !24
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i6 = icmp eq i32 %71, 0, !dbg !24
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i9 = icmp eq i32 %72, 0, !dbg !24
  br i1 %.not.i6, label %78, label %73, !dbg !24

73:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %76, label %74, !dbg !24

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

78:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %81, label %79, !dbg !24

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

__nv_sqrtf.exit10:                                ; preds = %74, %76, %79, %81
  %.0.i8 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !24
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i11 = icmp eq i32 %83, 0, !dbg !24
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i14 = icmp eq i32 %84, 0, !dbg !24
  br i1 %.not.i11, label %90, label %85, !dbg !24

85:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %88, label %86, !dbg !24

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

90:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %93, label %91, !dbg !24

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

__nv_sqrtf.exit15:                                ; preds = %86, %88, %91, %93
  %.0.i13 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !24
  %95 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %96 = bitcast i32 %95 to float, !dbg !18
  %97 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %98 = bitcast i32 %97 to float, !dbg !18
  %99 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %100 = bitcast i32 %99 to float, !dbg !18
  %101 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %102 = bitcast i32 %101 to float, !dbg !18
  %103 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !25
  %104 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !25
  %105 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !25
  %106 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !25
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %103) #3, !dbg !26
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %104) #3, !dbg !26
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %105) #3, !dbg !26
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %106) #3, !dbg !26
  %111 = bitcast float %107 to i32, !dbg !27
  %112 = bitcast float %108 to i32, !dbg !27
  %113 = bitcast float %109 to i32, !dbg !27
  %114 = bitcast float %110 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %112, i32 %113, i32 %114, ptr addrspace(1) %20, i1 %13) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwyugn3nvzlg5ww4kngs5vytckje5iyzvsuewawqalvz4xtkayv2.py", directory: "inductor_cache/wy")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_19", linkageName: "triton_poi_fused_add_div_sqrt_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 30, column: 18, scope: !7)
!24 = !DILocation(line: 31, column: 26, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 39, scope: !7)
!28 = !DILocation(line: 35, column: 4, scope: !7)
