; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 64, !dbg !12
  %10 = lshr i32 %8, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = and i32 %8, 63, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 9216, !dbg !14
  %16 = icmp slt i32 %14, 9216, !dbg !14
  %17 = shl i32 %8, 2, !dbg !15
  %18 = and i32 %17, 4, !dbg !15
  %.lobit = lshr exact i32 %9, 6, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %19 = sdiv i32 %.frozen, 18, !dbg !16
  %20 = mul i32 %19, 18, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = srem i32 %13, 18, !dbg !17
  %22 = shl nsw i32 %.decomposed, 7, !dbg !18
  %23 = shl nsw i32 %21, 7, !dbg !18
  %24 = mul i32 %19, 2304, !dbg !19
  %25 = or disjoint i32 %23, %18
  %26 = shl i32 %8, 3
  %27 = and i32 %26, 504
  %28 = or disjoint i32 %27, %.lobit
  %29 = and i32 %17, 252
  %30 = shl nuw nsw i32 %9, 2
  %31 = or disjoint i32 %29, %30
  %32 = lshr exact i32 %27, 1
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %32
  %34 = getelementptr inbounds float, ptr addrspace(3) %33, i32 %28
  %35 = or disjoint i32 %28, 2
  %36 = getelementptr inbounds float, ptr addrspace(3) %33, i32 %35
  %37 = or disjoint i32 %28, 4
  %38 = getelementptr inbounds float, ptr addrspace(3) %33, i32 %37
  %39 = or disjoint i32 %28, 6
  %40 = getelementptr inbounds float, ptr addrspace(3) %33, i32 %39
  %41 = lshr exact i32 %31, 1
  %42 = and i32 %41, 252
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i32 %42
  %44 = getelementptr float, ptr addrspace(3) %43, i32 %31
  %45 = sext i32 %25 to i64, !dbg !20
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !20
  %46 = insertelement <4 x i1> poison, i1 %15, i64 0, !dbg !21
  %47 = shufflevector <4 x i1> %46, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !21
  %invariant.op = or i32 %22, %.lobit, !dbg !20
  br label %48, !dbg !20

48:                                               ; preds = %5, %48
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %48 ]
  %49 = phi <4 x float> [ zeroinitializer, %5 ], [ %103, %48 ]
  %50 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %.reass.reass = or i32 %50, %invariant.op
  %51 = or disjoint i32 %.reass.reass, 2, !dbg !22
  %52 = or disjoint i32 %.reass.reass, 4, !dbg !22
  %53 = or disjoint i32 %.reass.reass, 6, !dbg !22
  %.reass.reass.frozen = freeze i32 %.reass.reass, !dbg !23
  %54 = sdiv i32 %.reass.reass.frozen, 9, !dbg !23
  %55 = mul i32 %54, 9, !dbg !24
  %.decomposed18 = sub i32 %.reass.reass.frozen, %55, !dbg !24
  %.frozen19 = freeze i32 %51, !dbg !23
  %56 = sdiv i32 %.frozen19, 9, !dbg !23
  %57 = mul i32 %56, 9, !dbg !24
  %.decomposed20 = sub i32 %.frozen19, %57, !dbg !24
  %.frozen21 = freeze i32 %52, !dbg !23
  %58 = sdiv i32 %.frozen21, 9, !dbg !23
  %59 = mul i32 %58, 9, !dbg !24
  %.decomposed22 = sub i32 %.frozen21, %59, !dbg !24
  %.frozen23 = freeze i32 %53, !dbg !23
  %60 = sdiv i32 %.frozen23, 9, !dbg !23
  %61 = mul i32 %60, 9, !dbg !24
  %.decomposed24 = sub i32 %.frozen23, %61, !dbg !24
  %62 = shl nsw i32 %.decomposed18, 8, !dbg !25
  %63 = shl nsw i32 %.decomposed20, 8, !dbg !25
  %64 = shl nsw i32 %.decomposed22, 8, !dbg !25
  %65 = shl nsw i32 %.decomposed24, 8, !dbg !25
  %66 = add i32 %54, %24, !dbg !26
  %67 = add i32 %66, %62, !dbg !27
  %68 = add i32 %56, %24, !dbg !26
  %69 = add i32 %68, %63, !dbg !27
  %70 = add i32 %58, %24, !dbg !26
  %71 = add i32 %70, %64, !dbg !27
  %72 = add i32 %60, %24, !dbg !26
  %73 = add i32 %72, %65, !dbg !27
  %74 = sext i32 %67 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !28
  %76 = sext i32 %69 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = sext i32 %71 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !28
  %80 = sext i32 %73 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %16, i32 0, i1 %16) #3, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %16, i32 0, i1 %16) #3, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %16, i32 0, i1 %16) #3, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %16, i32 0, i1 %16) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %86 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %86, i1 true) #3, !dbg !29
  %87 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %87, i1 true) #3, !dbg !29
  %88 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %88, i1 true) #3, !dbg !29
  %89 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %89, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !30
  %90 = load <4 x float>, ptr addrspace(3) %44, align 16, !dbg !29
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !31
  %96 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !31
  %97 = insertelement <4 x i32> %96, i32 %93, i64 1, !dbg !31
  %98 = insertelement <4 x i32> %97, i32 %94, i64 2, !dbg !31
  %99 = insertelement <4 x i32> %98, i32 %95, i64 3, !dbg !31
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !31
  %101 = fmul <4 x float> %90, %100, !dbg !32
  %102 = fadd <4 x float> %49, %101, !dbg !33
  %103 = select <4 x i1> %47, <4 x float> %102, <4 x float> %49, !dbg !21
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %104 = icmp samesign ult i64 %indvars.iv, 120, !dbg !20
  br i1 %104, label %48, label %105, !dbg !20

105:                                              ; preds = %48
  %shift = shufflevector <4 x float> %103, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !34
  %106 = fadd <4 x float> %103, %shift, !dbg !34
  %shift16 = shufflevector <4 x float> %103, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !34
  %107 = fadd <4 x float> %shift16, %106, !dbg !34
  %shift17 = shufflevector <4 x float> %103, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !34
  %108 = fadd <4 x float> %shift17, %107, !dbg !34
  %109 = extractelement <4 x float> %108, i64 0, !dbg !34
  %110 = bitcast float %109 to i32, !dbg !39
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !39
  %112 = bitcast i32 %111 to float, !dbg !39
  %113 = fadd float %109, %112, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  %115 = bitcast float %113 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !40
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !40
  %118 = sext i32 %14 to i64, !dbg !41
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !41
  %120 = icmp eq i32 %9, 0, !dbg !42
  %121 = and i1 %120, %16, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %119, i1 %121) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ssd2vsebmkbp33liwbv3ajc3ojmywrg7razthpmz37tlupkxws.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_red_fused_mv_23, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_23", linkageName: "triton_red_fused_mv_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 50, scope: !7)
!19 = !DILocation(line: 34, column: 67, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 39, column: 46, scope: !7)
!22 = !DILocation(line: 34, column: 46, scope: !7)
!23 = !DILocation(line: 34, column: 90, scope: !7)
!24 = !DILocation(line: 34, column: 56, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 62, scope: !7)
!27 = !DILocation(line: 34, column: 73, scope: !7)
!28 = !DILocation(line: 34, column: 34, scope: !7)
!29 = !DILocation(line: 34, column: 95, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 48, scope: !7)
!32 = !DILocation(line: 36, column: 22, scope: !7)
!33 = !DILocation(line: 38, column: 23, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 40, column: 28, scope: !7)
!41 = !DILocation(line: 41, column: 25, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 41, column: 4, scope: !7)
