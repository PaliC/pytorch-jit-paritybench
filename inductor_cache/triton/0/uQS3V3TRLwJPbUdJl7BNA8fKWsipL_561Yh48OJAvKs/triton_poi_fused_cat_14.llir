; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 2048, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = srem i32 %13, 32, !dbg !16
  %15 = mul i32 %13, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %.frozen1 = freeze i32 %11, !dbg !18
  %16 = sdiv i32 %.frozen1, 512, !dbg !18
  %17 = icmp slt i32 %14, 16, !dbg !19
  %18 = mul i32 %16, 512, !dbg !20
  %srem.decomposed = sub i32 %.frozen1, %18, !dbg !20
  %19 = shl nsw i32 %16, 8, !dbg !21
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = and i1 %12, %17, !dbg !24
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !25
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !25
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !25
  %27 = bitcast i32 %25 to float, !dbg !25
  %28 = bitcast i32 %26 to float, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !26
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !27
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = fsub float 0.000000e+00, %33, !dbg !28
  %36 = fsub float 0.000000e+00, %34, !dbg !28
  %37 = fmul float %35, 0x3FF7154760000000, !dbg !32
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #1, !dbg !32
  %39 = fmul float %36, 0x3FF7154760000000, !dbg !32
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #1, !dbg !32
  %41 = fadd float %38, 1.000000e+00, !dbg !33
  %42 = fadd float %40, 1.000000e+00, !dbg !33
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %41) #1, !dbg !34
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %42) #1, !dbg !34
  %45 = fmul float %43, %33, !dbg !35
  %46 = fmul float %44, %34, !dbg !35
  %47 = fadd float %45, %27, !dbg !36
  %48 = fadd float %46, %28, !dbg !36
  %49 = icmp sgt i32 %14, 15, !dbg !37
  %50 = shl nsw i32 %14, 4, !dbg !38
  %51 = add nsw i32 %.decomposed, -256, !dbg !38
  %52 = add nsw i32 %51, %19, !dbg !39
  %53 = add nsw i32 %52, %50, !dbg !40
  %54 = sext i32 %53 to i64, !dbg !41
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !41
  %56 = and i1 %12, %49, !dbg !42
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #1, !dbg !43
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !43
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !43
  %60 = bitcast i32 %58 to float, !dbg !43
  %61 = bitcast i32 %59 to float, !dbg !43
  %62 = fsub float 0.000000e+00, %60, !dbg !44
  %63 = fsub float 0.000000e+00, %61, !dbg !44
  %64 = fmul float %62, 0x3FF7154760000000, !dbg !46
  %65 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %64) #1, !dbg !46
  %66 = fmul float %63, 0x3FF7154760000000, !dbg !46
  %67 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %66) #1, !dbg !46
  %68 = fadd float %65, 1.000000e+00, !dbg !47
  %69 = fadd float %67, 1.000000e+00, !dbg !47
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %68) #1, !dbg !48
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %69) #1, !dbg !48
  %72 = fmul float %70, %60, !dbg !49
  %73 = fmul float %71, %61, !dbg !49
  %74 = select i1 %17, float %47, float %72, !dbg !50
  %75 = select i1 %17, float %48, float %73, !dbg !50
  %76 = sext i32 %11 to i64, !dbg !51
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !51
  %78 = bitcast float %74 to i32, !dbg !52
  %79 = bitcast float %75 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %78, i32 %79, ptr addrspace(1) %77, i1 %12) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6oqlavg36sbqcpdn36l5rkibqcm6v7mxgzj24aplcjvfm4jempd.py", directory: "inductor_cache/6o")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 49, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 61, scope: !7)
!25 = !DILocation(line: 33, column: 54, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 54, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 35, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 40, scope: !7)
!39 = !DILocation(line: 43, column: 36, scope: !7)
!40 = !DILocation(line: 43, column: 54, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 71, scope: !7)
!43 = !DILocation(line: 43, column: 63, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !45)
!45 = !DILocation(line: 44, column: 23, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !45)
!49 = !DILocation(line: 45, column: 20, scope: !7)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 37, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
