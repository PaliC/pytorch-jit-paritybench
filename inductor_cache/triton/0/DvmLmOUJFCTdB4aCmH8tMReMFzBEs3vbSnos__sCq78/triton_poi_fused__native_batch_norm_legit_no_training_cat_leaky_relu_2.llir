; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 1024, !dbg !14
  %19 = mul i32 %18, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = sext i32 %.decomposed to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = icmp slt i32 %.decomposed, 256, !dbg !24
  %38 = shl nsw i32 %18, 8, !dbg !25
  %39 = add nsw i32 %38, %.decomposed, !dbg !26
  %40 = sext i32 %39 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %43 = and i32 %.decomposed, -256, !dbg !29
  %44 = icmp eq i32 %43, 256, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %46 = getelementptr i8, ptr addrspace(1) %45, i64 -1024, !dbg !30
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !31
  %48 = icmp eq i32 %43, 512, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %50 = getelementptr i8, ptr addrspace(1) %49, i64 -2048, !dbg !33
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !34
  %52 = icmp sgt i32 %.decomposed, 767, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !36
  %54 = getelementptr i8, ptr addrspace(1) %53, i64 -3072, !dbg !36
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !37
  %56 = fadd float %29, 0x3EE4F8B580000000, !dbg !38
  %57 = fadd float %30, 0x3EE4F8B580000000, !dbg !38
  %58 = fadd float %31, 0x3EE4F8B580000000, !dbg !38
  %59 = fadd float %32, 0x3EE4F8B580000000, !dbg !38
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %60, 0, !dbg !39
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %61, 0, !dbg !39
  br i1 %.not.i, label %67, label %62, !dbg !39

62:                                               ; preds = %11
  br i1 %.not1.i, label %65, label %63, !dbg !39

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

67:                                               ; preds = %11
  br i1 %.not1.i, label %70, label %68, !dbg !39

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !39
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i12 = icmp eq i32 %72, 0, !dbg !39
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i15 = icmp eq i32 %73, 0, !dbg !39
  br i1 %.not.i12, label %79, label %74, !dbg !39

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %77, label %75, !dbg !39

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit16, !dbg !39

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit16, !dbg !39

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %82, label %80, !dbg !39

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit16, !dbg !39

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit16, !dbg !39

__nv_sqrtf.exit16:                                ; preds = %75, %77, %80, %82
  %.0.i14 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !39
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i17 = icmp eq i32 %84, 0, !dbg !39
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i20 = icmp eq i32 %85, 0, !dbg !39
  br i1 %.not.i17, label %91, label %86, !dbg !39

86:                                               ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %89, label %87, !dbg !39

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

91:                                               ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %94, label %92, !dbg !39

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

__nv_sqrtf.exit21:                                ; preds = %87, %89, %92, %94
  %.0.i19 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !39
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i22 = icmp eq i32 %96, 0, !dbg !39
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i25 = icmp eq i32 %97, 0, !dbg !39
  br i1 %.not.i22, label %103, label %98, !dbg !39

98:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %101, label %99, !dbg !39

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

103:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %106, label %104, !dbg !39

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

__nv_sqrtf.exit26:                                ; preds = %99, %101, %104, %106
  %.0.i24 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %113 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !31
  %115 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !37
  %117 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %118 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !37
  %122 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %123 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !37
  %127 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %128 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %129 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %130 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %131 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %132 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %133 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %134 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %135 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !40
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !40
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !40
  %140 = insertelement <4 x i1> poison, i1 %48, i64 0, !dbg !41
  %141 = shufflevector <4 x i1> %140, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !41
  %142 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !41
  %143 = insertelement <4 x i32> %142, i32 %115, i64 1, !dbg !41
  %144 = insertelement <4 x i32> %143, i32 %120, i64 2, !dbg !41
  %145 = insertelement <4 x i32> %144, i32 %125, i64 3, !dbg !41
  %146 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !41
  %147 = insertelement <4 x i32> %146, i32 %116, i64 1, !dbg !41
  %148 = insertelement <4 x i32> %147, i32 %121, i64 2, !dbg !41
  %149 = insertelement <4 x i32> %148, i32 %126, i64 3, !dbg !41
  %150 = select <4 x i1> %141, <4 x i32> %145, <4 x i32> %149, !dbg !41
  %151 = insertelement <4 x i1> poison, i1 %44, i64 0, !dbg !42
  %152 = shufflevector <4 x i1> %151, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !42
  %153 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !42
  %154 = insertelement <4 x i32> %153, i32 %114, i64 1, !dbg !42
  %155 = insertelement <4 x i32> %154, i32 %119, i64 2, !dbg !42
  %156 = insertelement <4 x i32> %155, i32 %124, i64 3, !dbg !42
  %157 = select <4 x i1> %152, <4 x i32> %156, <4 x i32> %150, !dbg !42
  %158 = insertelement <4 x i1> poison, i1 %37, i64 0, !dbg !43
  %159 = shufflevector <4 x i1> %158, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !43
  %160 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !43
  %161 = insertelement <4 x i32> %160, i32 %113, i64 1, !dbg !43
  %162 = insertelement <4 x i32> %161, i32 %118, i64 2, !dbg !43
  %163 = insertelement <4 x i32> %162, i32 %123, i64 3, !dbg !43
  %164 = select <4 x i1> %159, <4 x i32> %163, <4 x i32> %157, !dbg !43
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !43
  %166 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !17
  %167 = insertelement <4 x i32> %166, i32 %117, i64 1, !dbg !17
  %168 = insertelement <4 x i32> %167, i32 %122, i64 2, !dbg !17
  %169 = insertelement <4 x i32> %168, i32 %127, i64 3, !dbg !17
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !17
  %171 = fsub <4 x float> %165, %170, !dbg !44
  %172 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !23
  %173 = insertelement <4 x i32> %172, i32 %129, i64 1, !dbg !23
  %174 = insertelement <4 x i32> %173, i32 %130, i64 2, !dbg !23
  %175 = insertelement <4 x i32> %174, i32 %131, i64 3, !dbg !23
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !23
  %177 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !21
  %178 = insertelement <4 x i32> %177, i32 %133, i64 1, !dbg !21
  %179 = insertelement <4 x i32> %178, i32 %134, i64 2, !dbg !21
  %180 = insertelement <4 x i32> %179, i32 %135, i64 3, !dbg !21
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !21
  %182 = insertelement <4 x float> poison, float %139, i64 0, !dbg !45
  %183 = insertelement <4 x float> %182, float %138, i64 1, !dbg !45
  %184 = insertelement <4 x float> %183, float %137, i64 2, !dbg !45
  %185 = insertelement <4 x float> %184, float %136, i64 3, !dbg !45
  %186 = fmul <4 x float> %171, %185, !dbg !45
  %187 = fmul <4 x float> %186, %181, !dbg !46
  %188 = fadd <4 x float> %187, %176, !dbg !47
  %189 = fcmp ogt <4 x float> %188, zeroinitializer, !dbg !48
  %190 = extractelement <4 x float> %188, i64 3, !dbg !49
  %191 = fmul float %190, 0x3F847AE140000000, !dbg !50
  %192 = extractelement <4 x float> %188, i64 2, !dbg !49
  %193 = fmul float %192, 0x3F847AE140000000, !dbg !50
  %194 = extractelement <4 x float> %188, i64 1, !dbg !49
  %195 = fmul float %194, 0x3F847AE140000000, !dbg !50
  %196 = extractelement <4 x float> %188, i64 0, !dbg !49
  %197 = fmul float %196, 0x3F847AE140000000, !dbg !50
  %198 = extractelement <4 x i1> %189, i64 3, !dbg !49
  %199 = select i1 %198, float %190, float %191, !dbg !49
  %200 = extractelement <4 x i1> %189, i64 2, !dbg !49
  %201 = select i1 %200, float %192, float %193, !dbg !49
  %202 = extractelement <4 x i1> %189, i64 1, !dbg !49
  %203 = select i1 %202, float %194, float %195, !dbg !49
  %204 = extractelement <4 x i1> %189, i64 0, !dbg !49
  %205 = select i1 %204, float %196, float %197, !dbg !49
  %206 = sext i32 %17 to i64, !dbg !51
  %207 = getelementptr float, ptr addrspace(1) %9, i64 %206, !dbg !51
  %208 = extractelement <4 x i32> %164, i64 0, !dbg !52
  %209 = extractelement <4 x i32> %164, i64 1, !dbg !52
  %210 = extractelement <4 x i32> %164, i64 2, !dbg !52
  %211 = extractelement <4 x i32> %164, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %210, i32 %209, i32 %208, ptr addrspace(1) %207, i1 true) #3, !dbg !52
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !53
  %213 = bitcast float %199 to i32, !dbg !54
  %214 = bitcast float %201 to i32, !dbg !54
  %215 = bitcast float %203 to i32, !dbg !54
  %216 = bitcast float %205 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %213, i32 %214, i32 %215, i32 %216, ptr addrspace(1) %212, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnewqgjmp7t7egsutsy52xvlxakqe4ypiw7xrlxi5xatu6mxgqyf.py", directory: "inductor_cache/ne")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 31, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 40, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 56, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 56, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 56, scope: !7)
!38 = !DILocation(line: 56, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 27, scope: !7)
!40 = !DILocation(line: 59, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 35, scope: !7)
!42 = !DILocation(line: 52, column: 34, scope: !7)
!43 = !DILocation(line: 53, column: 33, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 64, column: 20, scope: !7)
!48 = !DILocation(line: 66, column: 20, scope: !7)
!49 = !DILocation(line: 69, column: 35, scope: !7)
!50 = !DILocation(line: 68, column: 20, scope: !7)
!51 = !DILocation(line: 70, column: 25, scope: !7)
!52 = !DILocation(line: 70, column: 37, scope: !7)
!53 = !DILocation(line: 71, column: 28, scope: !7)
!54 = !DILocation(line: 71, column: 40, scope: !7)
!55 = !DILocation(line: 71, column: 4, scope: !7)
