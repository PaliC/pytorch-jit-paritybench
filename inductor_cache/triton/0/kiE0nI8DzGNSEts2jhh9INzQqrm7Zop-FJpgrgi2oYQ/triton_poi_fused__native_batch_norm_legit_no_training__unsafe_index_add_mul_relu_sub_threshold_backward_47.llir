; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %33 = shl i32 %32, 7, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = and i32 %34, 127, !dbg !12
  %36 = or disjoint i32 %33, %35, !dbg !13
  %37 = sdiv i32 %36, 256, !dbg !14
  %38 = srem i32 %37, 4, !dbg !15
  %.frozen = freeze i32 %36, !dbg !16
  %39 = sdiv i32 %.frozen, 16, !dbg !16
  %40 = srem i32 %39, 16, !dbg !17
  %41 = mul i32 %39, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %41, !dbg !18
  %42 = sext i32 %36 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !20
  %45 = sext i32 %38 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !30
  %57 = sext i32 %40 to i64, !dbg !31
  %58 = getelementptr i64, ptr addrspace(1) %7, i64 %57, !dbg !31
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !32
  %60 = sext i32 %.decomposed to i64, !dbg !33
  %61 = getelementptr i64, ptr addrspace(1) %8, i64 %60, !dbg !33
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !34
  %63 = getelementptr i64, ptr addrspace(1) %10, i64 %60, !dbg !35
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %11, i64 %60, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !38
  %67 = getelementptr i64, ptr addrspace(1) %12, i64 %57, !dbg !39
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %13, i64 %57, !dbg !41
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %71 = getelementptr i64, ptr addrspace(1) %14, i64 %57, !dbg !43
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !44
  %73 = getelementptr i64, ptr addrspace(1) %15, i64 %60, !dbg !45
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !46
  %75 = getelementptr i64, ptr addrspace(1) %17, i64 %60, !dbg !47
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !48
  %77 = getelementptr float, ptr addrspace(1) %18, i64 %60, !dbg !49
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !50
  %79 = getelementptr i64, ptr addrspace(1) %19, i64 %57, !dbg !51
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %20, i64 %57, !dbg !53
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !54
  %83 = getelementptr i64, ptr addrspace(1) %21, i64 %57, !dbg !55
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !56
  %85 = getelementptr i64, ptr addrspace(1) %22, i64 %60, !dbg !57
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !58
  %87 = getelementptr i64, ptr addrspace(1) %24, i64 %60, !dbg !59
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !60
  %89 = getelementptr float, ptr addrspace(1) %25, i64 %60, !dbg !61
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !62
  %91 = getelementptr i64, ptr addrspace(1) %26, i64 %57, !dbg !63
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !64
  %93 = getelementptr float, ptr addrspace(1) %27, i64 %57, !dbg !65
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !66
  %95 = fadd float %50, 0x3EE4F8B580000000, !dbg !67
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %96, 0, !dbg !68
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %97, 0, !dbg !68
  br i1 %.not.i, label %103, label %98, !dbg !68

98:                                               ; preds = %31
  br i1 %.not1.i, label %101, label %99, !dbg !68

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

103:                                              ; preds = %31
  br i1 %.not1.i, label %106, label %104, !dbg !68

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !68
  %108 = bitcast i32 %44 to float, !dbg !20
  %109 = bitcast i32 %47 to float, !dbg !22
  %110 = fsub float %108, %109, !dbg !69
  %111 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !54
  %112 = insertelement <2 x i32> %111, i32 %94, i64 1, !dbg !54
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !54
  %114 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !50
  %115 = insertelement <2 x i32> %114, i32 %90, i64 1, !dbg !50
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !50
  %117 = bitcast i32 %70 to float, !dbg !42
  %118 = bitcast i32 %56 to float, !dbg !30
  %119 = bitcast i32 %54 to float, !dbg !28
  %120 = bitcast i32 %52 to float, !dbg !26
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !70
  %122 = fmul float %110, %121, !dbg !71
  %123 = fmul float %122, %120, !dbg !72
  %124 = fadd float %123, %119, !dbg !73
  %125 = fadd float %124, %118, !dbg !74
  %126 = fcmp olt float %125, 0.000000e+00, !dbg !75
  %127 = select i1 %126, float 0.000000e+00, float %125, !dbg !79
  %128 = lshr i64 %59, 60, !dbg !80
  %129 = and i64 %128, 8, !dbg !80
  %130 = add i64 %129, %59, !dbg !80
  %131 = lshr i64 %62, 60, !dbg !81
  %132 = and i64 %131, 8, !dbg !81
  %133 = shl i64 %130, 3, !dbg !82
  %134 = shl nsw i32 %37, 6, !dbg !83
  %135 = sext i32 %134 to i64, !dbg !84
  %136 = getelementptr float, ptr addrspace(1) %9, i64 %62, !dbg !85
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %132, !dbg !85
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %133, !dbg !85
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %135, !dbg !85
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !86
  %141 = lshr i64 %64, 60, !dbg !87
  %142 = and i64 %141, 8, !dbg !87
  %143 = getelementptr float, ptr addrspace(1) %9, i64 %64, !dbg !88
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %142, !dbg !88
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %133, !dbg !88
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %135, !dbg !88
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !89
  %148 = lshr i64 %68, 60, !dbg !90
  %149 = and i64 %148, 8, !dbg !90
  %150 = add i64 %149, %68, !dbg !90
  %151 = shl i64 %150, 3, !dbg !91
  %152 = getelementptr float, ptr addrspace(1) %137, i64 %151, !dbg !92
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %135, !dbg !92
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #3, !dbg !93
  %155 = getelementptr float, ptr addrspace(1) %144, i64 %151, !dbg !94
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %135, !dbg !94
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !95
  %158 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !93
  %159 = insertelement <2 x i32> %158, i32 %140, i64 1, !dbg !93
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !93
  %161 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !95
  %162 = insertelement <2 x i32> %161, i32 %147, i64 1, !dbg !95
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !95
  %164 = fsub <2 x float> %163, %160, !dbg !96
  %165 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !97
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !97
  %167 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %168 = fmul <2 x float> %164, %167, !dbg !97
  %169 = fadd <2 x float> %168, %160, !dbg !98
  %170 = extractelement <2 x float> %169, i64 0, !dbg !99
  %171 = extractelement <2 x float> %169, i64 1, !dbg !100
  %172 = fsub float %170, %171, !dbg !99
  %173 = fmul float %172, %117, !dbg !101
  %174 = fadd float %171, %173, !dbg !100
  %175 = fadd float %127, %174, !dbg !102
  %176 = lshr i64 %72, 61, !dbg !103
  %177 = and i64 %176, 4, !dbg !103
  %178 = add i64 %177, %72, !dbg !103
  %179 = lshr i64 %74, 61, !dbg !104
  %180 = and i64 %179, 4, !dbg !104
  %181 = shl i64 %178, 2, !dbg !105
  %182 = shl nsw i32 %37, 4, !dbg !106
  %183 = sext i32 %182 to i64, !dbg !107
  %184 = getelementptr float, ptr addrspace(1) %16, i64 %74, !dbg !108
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %180, !dbg !108
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %181, !dbg !108
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %183, !dbg !108
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 true) #3, !dbg !109
  %189 = lshr i64 %76, 61, !dbg !110
  %190 = and i64 %189, 4, !dbg !110
  %191 = getelementptr float, ptr addrspace(1) %16, i64 %76, !dbg !111
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %190, !dbg !111
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %181, !dbg !111
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %183, !dbg !111
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #3, !dbg !112
  %196 = lshr i64 %80, 61, !dbg !113
  %197 = and i64 %196, 4, !dbg !113
  %198 = add i64 %197, %80, !dbg !113
  %199 = shl i64 %198, 2, !dbg !114
  %200 = getelementptr float, ptr addrspace(1) %185, i64 %199, !dbg !115
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %183, !dbg !115
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #3, !dbg !116
  %203 = getelementptr float, ptr addrspace(1) %192, i64 %199, !dbg !117
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %183, !dbg !117
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #3, !dbg !118
  %206 = lshr i64 %84, 62, !dbg !119
  %207 = and i64 %206, 2, !dbg !119
  %208 = add i64 %207, %84, !dbg !119
  %209 = lshr i64 %86, 62, !dbg !120
  %210 = and i64 %209, 2, !dbg !120
  %211 = shl i64 %208, 1, !dbg !121
  %212 = shl nsw i32 %37, 2, !dbg !122
  %213 = sext i32 %212 to i64, !dbg !123
  %214 = getelementptr float, ptr addrspace(1) %23, i64 %86, !dbg !124
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %210, !dbg !124
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %211, !dbg !124
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %213, !dbg !124
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !125
  %219 = lshr i64 %88, 62, !dbg !126
  %220 = and i64 %219, 2, !dbg !126
  %221 = getelementptr float, ptr addrspace(1) %23, i64 %88, !dbg !127
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %220, !dbg !127
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %211, !dbg !127
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %213, !dbg !127
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !128
  %226 = lshr i64 %92, 62, !dbg !129
  %227 = and i64 %226, 2, !dbg !129
  %228 = add i64 %227, %92, !dbg !129
  %229 = shl i64 %228, 1, !dbg !130
  %230 = getelementptr float, ptr addrspace(1) %215, i64 %229, !dbg !131
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %213, !dbg !131
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 true) #3, !dbg !132
  %233 = getelementptr float, ptr addrspace(1) %222, i64 %229, !dbg !133
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %213, !dbg !133
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !134
  %236 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !109
  %237 = insertelement <2 x i32> %236, i32 %218, i64 1, !dbg !109
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !109
  %239 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !112
  %240 = insertelement <2 x i32> %239, i32 %225, i64 1, !dbg !112
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !112
  %242 = fsub <2 x float> %241, %238, !dbg !135
  %243 = fmul <2 x float> %242, %116, !dbg !136
  %244 = fadd <2 x float> %243, %238, !dbg !137
  %245 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !116
  %246 = insertelement <2 x i32> %245, i32 %232, i64 1, !dbg !116
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !116
  %248 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !118
  %249 = insertelement <2 x i32> %248, i32 %235, i64 1, !dbg !118
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !118
  %251 = fsub <2 x float> %250, %247, !dbg !138
  %252 = fmul <2 x float> %251, %116, !dbg !139
  %253 = fadd <2 x float> %252, %247, !dbg !140
  %254 = fsub <2 x float> %253, %244, !dbg !141
  %255 = fmul <2 x float> %254, %113, !dbg !142
  %256 = fadd <2 x float> %244, %255, !dbg !143
  %257 = extractelement <2 x float> %256, i64 0, !dbg !144
  %258 = fadd float %175, %257, !dbg !144
  %259 = extractelement <2 x float> %256, i64 1, !dbg !145
  %260 = fadd float %258, %259, !dbg !145
  %261 = fcmp olt float %260, 0.000000e+00, !dbg !146
  %262 = select i1 %261, float 0.000000e+00, float %260, !dbg !148
  %263 = fcmp ole float %262, 0.000000e+00, !dbg !149
  %264 = getelementptr float, ptr addrspace(1) %28, i64 %42, !dbg !150
  %265 = bitcast float %127 to i32, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %264, i1 true) #3, !dbg !151
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !152
  %267 = bitcast float %260 to i32, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %266, i1 true) #3, !dbg !153
  %268 = getelementptr i1, ptr addrspace(1) %29, i64 %42, !dbg !154
  %269 = zext i1 %263 to i8, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %269, ptr addrspace(1) %268, i1 true) #3, !dbg !155
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbtfthvmpexhbm454gjf2vg3byy2xdc6haorhn7lic6dzzp6kkbf.py", directory: "inductor_cache/bt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 32, scope: !7)
!56 = !DILocation(line: 47, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 32, scope: !7)
!58 = !DILocation(line: 48, column: 37, scope: !7)
!59 = !DILocation(line: 49, column: 32, scope: !7)
!60 = !DILocation(line: 49, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 33, scope: !7)
!62 = !DILocation(line: 50, column: 38, scope: !7)
!63 = !DILocation(line: 51, column: 33, scope: !7)
!64 = !DILocation(line: 51, column: 38, scope: !7)
!65 = !DILocation(line: 52, column: 33, scope: !7)
!66 = !DILocation(line: 52, column: 38, scope: !7)
!67 = !DILocation(line: 55, column: 18, scope: !7)
!68 = !DILocation(line: 56, column: 26, scope: !7)
!69 = !DILocation(line: 53, column: 18, scope: !7)
!70 = !DILocation(line: 58, column: 18, scope: !7)
!71 = !DILocation(line: 61, column: 19, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 63, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 20, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlockFile(scope: !7, file: !77, discriminator: 0)
!77 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!78 = !DILocation(line: 66, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !78)
!80 = !DILocation(line: 70, column: 35, scope: !7)
!81 = !DILocation(line: 73, column: 35, scope: !7)
!82 = !DILocation(line: 74, column: 41, scope: !7)
!83 = !DILocation(line: 74, column: 52, scope: !7)
!84 = !DILocation(line: 74, column: 49, scope: !7)
!85 = !DILocation(line: 74, column: 31, scope: !7)
!86 = !DILocation(line: 74, column: 57, scope: !7)
!87 = !DILocation(line: 77, column: 35, scope: !7)
!88 = !DILocation(line: 78, column: 31, scope: !7)
!89 = !DILocation(line: 78, column: 57, scope: !7)
!90 = !DILocation(line: 84, column: 35, scope: !7)
!91 = !DILocation(line: 85, column: 41, scope: !7)
!92 = !DILocation(line: 85, column: 31, scope: !7)
!93 = !DILocation(line: 85, column: 57, scope: !7)
!94 = !DILocation(line: 86, column: 31, scope: !7)
!95 = !DILocation(line: 86, column: 57, scope: !7)
!96 = !DILocation(line: 87, column: 20, scope: !7)
!97 = !DILocation(line: 88, column: 20, scope: !7)
!98 = !DILocation(line: 89, column: 20, scope: !7)
!99 = !DILocation(line: 90, column: 20, scope: !7)
!100 = !DILocation(line: 92, column: 20, scope: !7)
!101 = !DILocation(line: 91, column: 20, scope: !7)
!102 = !DILocation(line: 93, column: 20, scope: !7)
!103 = !DILocation(line: 97, column: 35, scope: !7)
!104 = !DILocation(line: 100, column: 35, scope: !7)
!105 = !DILocation(line: 101, column: 42, scope: !7)
!106 = !DILocation(line: 101, column: 53, scope: !7)
!107 = !DILocation(line: 101, column: 50, scope: !7)
!108 = !DILocation(line: 101, column: 32, scope: !7)
!109 = !DILocation(line: 101, column: 58, scope: !7)
!110 = !DILocation(line: 104, column: 35, scope: !7)
!111 = !DILocation(line: 105, column: 32, scope: !7)
!112 = !DILocation(line: 105, column: 58, scope: !7)
!113 = !DILocation(line: 111, column: 35, scope: !7)
!114 = !DILocation(line: 112, column: 42, scope: !7)
!115 = !DILocation(line: 112, column: 32, scope: !7)
!116 = !DILocation(line: 112, column: 58, scope: !7)
!117 = !DILocation(line: 113, column: 32, scope: !7)
!118 = !DILocation(line: 113, column: 58, scope: !7)
!119 = !DILocation(line: 124, column: 35, scope: !7)
!120 = !DILocation(line: 127, column: 35, scope: !7)
!121 = !DILocation(line: 128, column: 42, scope: !7)
!122 = !DILocation(line: 128, column: 52, scope: !7)
!123 = !DILocation(line: 128, column: 50, scope: !7)
!124 = !DILocation(line: 128, column: 32, scope: !7)
!125 = !DILocation(line: 128, column: 57, scope: !7)
!126 = !DILocation(line: 131, column: 35, scope: !7)
!127 = !DILocation(line: 132, column: 33, scope: !7)
!128 = !DILocation(line: 132, column: 58, scope: !7)
!129 = !DILocation(line: 138, column: 38, scope: !7)
!130 = !DILocation(line: 139, column: 43, scope: !7)
!131 = !DILocation(line: 139, column: 33, scope: !7)
!132 = !DILocation(line: 139, column: 59, scope: !7)
!133 = !DILocation(line: 140, column: 33, scope: !7)
!134 = !DILocation(line: 140, column: 59, scope: !7)
!135 = !DILocation(line: 106, column: 20, scope: !7)
!136 = !DILocation(line: 107, column: 20, scope: !7)
!137 = !DILocation(line: 108, column: 20, scope: !7)
!138 = !DILocation(line: 114, column: 20, scope: !7)
!139 = !DILocation(line: 115, column: 20, scope: !7)
!140 = !DILocation(line: 116, column: 20, scope: !7)
!141 = !DILocation(line: 117, column: 20, scope: !7)
!142 = !DILocation(line: 118, column: 20, scope: !7)
!143 = !DILocation(line: 119, column: 20, scope: !7)
!144 = !DILocation(line: 120, column: 20, scope: !7)
!145 = !DILocation(line: 147, column: 21, scope: !7)
!146 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !147)
!147 = !DILocation(line: 148, column: 43, scope: !7)
!148 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !147)
!149 = !DILocation(line: 150, column: 23, scope: !7)
!150 = !DILocation(line: 151, column: 25, scope: !7)
!151 = !DILocation(line: 151, column: 37, scope: !7)
!152 = !DILocation(line: 152, column: 28, scope: !7)
!153 = !DILocation(line: 152, column: 41, scope: !7)
!154 = !DILocation(line: 153, column: 25, scope: !7)
!155 = !DILocation(line: 153, column: 38, scope: !7)
!156 = !DILocation(line: 153, column: 4, scope: !7)
