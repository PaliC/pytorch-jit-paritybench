; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_div_mean_mul_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = shl i32 %6, 2, !dbg !10
  %10 = and i32 %9, 252, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !11
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #4, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !12
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !13
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !12
  %31 = insertelement <2 x i32> %30, i32 %15, i64 1, !dbg !12
  %32 = bitcast <2 x i32> %31 to <2 x float>, !dbg !12
  %33 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !14
  %34 = insertelement <2 x i32> %33, i32 %21, i64 1, !dbg !14
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !14
  %36 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %37 = insertelement <2 x i32> %36, i32 %27, i64 1, !dbg !16
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !16
  %39 = fsub <2 x float> %32, %35, !dbg !17
  %40 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %39), !dbg !18
  %41 = fmul <2 x float> %40, %38, !dbg !19
  %42 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !12
  %43 = insertelement <2 x i32> %42, i32 %16, i64 1, !dbg !12
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !12
  %45 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !14
  %46 = insertelement <2 x i32> %45, i32 %22, i64 1, !dbg !14
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !14
  %48 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %49 = insertelement <2 x i32> %48, i32 %28, i64 1, !dbg !16
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !16
  %51 = fsub <2 x float> %44, %47, !dbg !17
  %52 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %51), !dbg !18
  %53 = fmul <2 x float> %52, %50, !dbg !19
  %shift = shufflevector <2 x float> %41, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %54 = fadd <2 x float> %41, %shift, !dbg !20
  %shift1 = shufflevector <2 x float> %53, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %55 = fadd <2 x float> %shift1, %54, !dbg !20
  %56 = fadd <2 x float> %53, %55, !dbg !20
  %57 = extractelement <2 x float> %56, i64 0, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = bitcast float %61 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %61, %64, !dbg !20
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !20
  %70 = bitcast float %69 to i32, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %69, %72, !dbg !20
  %74 = bitcast float %73 to i32, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = fadd float %73, %76, !dbg !20
  %78 = icmp eq i32 %7, 0, !dbg !25
  %79 = and i32 %8, 1, !dbg !25
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !25
  %81 = bitcast float %77 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %78) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %82 = icmp slt i32 %6, 2, !dbg !25
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !25
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #4, !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = fadd float %85, %87, !dbg !20
  %89 = and i32 %6, 1, !dbg !25
  %90 = icmp eq i32 %89, 0, !dbg !25
  %91 = and i1 %82, %90, !dbg !25
  %92 = bitcast float %88 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %92, i1 %91) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %93 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %94 = fadd float %93, 0.000000e+00, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %shift2 = shufflevector <2 x float> %38, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %95 = fadd <2 x float> %shift2, %38, !dbg !32
  %shift3 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %96 = fadd <2 x float> %95, %shift3, !dbg !32
  %97 = fadd <2 x float> %96, %50, !dbg !32
  %98 = extractelement <2 x float> %97, i64 0, !dbg !32
  %99 = bitcast float %98 to i32, !dbg !30
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = fadd float %98, %101, !dbg !32
  %103 = bitcast float %102 to i32, !dbg !30
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !30
  %105 = bitcast i32 %104 to float, !dbg !30
  %106 = fadd float %102, %105, !dbg !32
  %107 = bitcast float %106 to i32, !dbg !30
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = fadd float %106, %109, !dbg !32
  %111 = bitcast float %110 to i32, !dbg !30
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !30
  %113 = bitcast i32 %112 to float, !dbg !30
  %114 = fadd float %110, %113, !dbg !32
  %115 = bitcast float %114 to i32, !dbg !30
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !30
  %117 = bitcast i32 %116 to float, !dbg !30
  %118 = fadd float %114, %117, !dbg !32
  %119 = bitcast float %118 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %119, i1 %78) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #4, !dbg !30
  %121 = bitcast i32 %120 to float, !dbg !30
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = fadd float %121, %123, !dbg !32
  %125 = bitcast float %124 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %125, i1 %91) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %126 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %127 = fadd float %126, 0.000000e+00, !dbg !33
  %128 = fadd float %127, 0x3EB0C6F7A0000000, !dbg !35
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %128) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %urem = and i32 %6, 63, !dbg !38
  %130 = icmp eq i32 %urem, 0, !dbg !38
  %131 = bitcast float %129 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %0, i1 %130) #4, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cna6nguyzugn5r6c6g2vsvcwivkuuerbo7bs5q6x2fptmfr3wes4.py", directory: "inductor_cache/na")
!4 = !{ptr @triton_per_fused_abs_add_div_mean_mul_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_mean_mul_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_mean_mul_sub_sum_0", linkageName: "triton_per_fused_abs_add_div_mean_mul_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 34, column: 18, scope: !7)
!18 = !DILocation(line: 35, column: 23, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 38, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !31)
!31 = !DILocation(line: 40, column: 58, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !34)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 4, scope: !7)
!38 = !DILocation(line: 47, column: 63, scope: !7)
!39 = !DILocation(line: 47, column: 4, scope: !7)
