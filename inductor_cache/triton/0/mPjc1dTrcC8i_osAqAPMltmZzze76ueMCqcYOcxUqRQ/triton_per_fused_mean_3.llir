; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %.lobit1 = lshr i32 %8, 4, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = and i32 %8, 7, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = lshr i32 %8, 2, !dbg !14
  %19 = and i32 %18, 15, !dbg !14
  %20 = and i32 %8, 15, !dbg !14
  %21 = icmp samesign ult i32 %19, 9, !dbg !15
  %22 = icmp samesign ult i32 %20, 9, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %23 = sdiv i32 %.frozen, 4096, !dbg !16
  %24 = mul i32 %23, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = sdiv i32 %15, 4096, !dbg !16
  %26 = sdiv i32 %16, 4096, !dbg !16
  %27 = srem i32 %25, 512, !dbg !18
  %28 = srem i32 %26, 512, !dbg !18
  %29 = shl nuw nsw i32 %19, 12, !dbg !19
  %30 = add nsw i32 %.decomposed, %29, !dbg !20
  %31 = mul i32 %23, 36864, !dbg !21
  %32 = add i32 %30, %31, !dbg !22
  %33 = sext i32 %32 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !24
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %38 = shl i32 %8, 5, !dbg !24
  %39 = and i32 %38, 96, !dbg !24
  %40 = or disjoint i32 %39, %19, !dbg !24
  %41 = and i32 %8, 63, !dbg !24
  %42 = lshr exact i32 %39, 2, !dbg !24
  %43 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %42, !dbg !24
  %44 = getelementptr inbounds float, ptr addrspace(3) %43, i32 %40, !dbg !24
  %45 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 true) #3, !dbg !24
  %46 = or disjoint i32 %40, 16, !dbg !24
  %47 = lshr i32 %46, 4, !dbg !24
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i32 %47, !dbg !24
  %49 = getelementptr float, ptr addrspace(3) %48, i32 %46, !dbg !24
  %50 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %51 = lshr i32 %41, 4, !dbg !24
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !24
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %41, !dbg !24
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !24
  %55 = or disjoint i32 %41, 64, !dbg !24
  %56 = lshr i32 %55, 4, !dbg !24
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !24
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %55, !dbg !24
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !24
  %60 = mul nsw i32 %27, 9, !dbg !25
  %61 = mul nsw i32 %28, 9, !dbg !25
  %62 = add nsw i32 %60, %20, !dbg !26
  %63 = add nsw i32 %61, %20, !dbg !26
  %64 = sext i32 %62 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !27
  %66 = sext i32 %63 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %22, i32 0, i1 %22) #3, !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %22, i32 0, i1 %22) #3, !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = fadd float %54, %69, !dbg !29
  %73 = fadd float %59, %71, !dbg !29
  %74 = select i1 %22, float %72, float 0.000000e+00, !dbg !30
  %75 = select i1 %22, float %73, float 0.000000e+00, !dbg !30
  %76 = bitcast float %74 to i32, !dbg !31
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = fadd float %74, %78, !dbg !35
  %80 = bitcast float %79 to i32, !dbg !31
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = fadd float %79, %82, !dbg !35
  %84 = bitcast float %83 to i32, !dbg !31
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !31
  %86 = bitcast i32 %85 to float, !dbg !31
  %87 = fadd float %83, %86, !dbg !35
  %88 = bitcast float %87 to i32, !dbg !31
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fadd float %87, %90, !dbg !35
  %92 = bitcast float %75 to i32, !dbg !31
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = fadd float %75, %94, !dbg !35
  %96 = bitcast float %95 to i32, !dbg !31
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = fadd float %95, %98, !dbg !35
  %100 = bitcast float %99 to i32, !dbg !31
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = fadd float %99, %102, !dbg !35
  %104 = bitcast float %103 to i32, !dbg !31
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = fadd float %103, %106, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %109 = bitcast float %91 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #3, !dbg !37
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %111 = bitcast float %107 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %113 = load i32, ptr addrspace(3) %112, align 4, !dbg !37
  %114 = sext i32 %17 to i64, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !38
  %116 = and i32 %8, 56, !dbg !39
  %117 = icmp eq i32 %116, 0, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %115, i1 %117) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_per_fused_mean_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_3", linkageName: "triton_per_fused_mean_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 29, scope: !7)
!19 = !DILocation(line: 34, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 51, scope: !7)
!22 = !DILocation(line: 34, column: 45, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 56, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 33, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 39, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 39, column: 27, scope: !7)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 4, scope: !7)
