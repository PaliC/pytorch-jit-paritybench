; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = sdiv i32 %17, 256, !dbg !14
  %.frozen1 = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen1, 262144, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %20 = sdiv i32 %.frozen, 16, !dbg !16
  %21 = srem i32 %20, 16, !dbg !17
  %22 = mul i32 %20, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = mul i32 %19, 262144, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %23, !dbg !19
  %24 = shl nsw i32 %19, 17, !dbg !20
  %25 = add nsw i32 %24, %srem.decomposed, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = sext i32 %21 to i64, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !23
  %30 = sext i32 %.decomposed to i64, !dbg !24
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !24
  %32 = mul i32 %19, 294912, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr i64, ptr addrspace(1) %4, i64 %30, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !29
  %37 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !30
  %38 = insertelement <2 x i32> %37, i32 %18, i64 1, !dbg !30
  %39 = srem <2 x i32> %38, <i32 256, i32 1024>, !dbg !30
  %40 = extractelement <2 x i32> %39, i64 1, !dbg !31
  %41 = icmp slt i32 %40, 512, !dbg !32
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #1, !dbg !33
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !33
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !33
  %45 = bitcast i32 %43 to float, !dbg !33
  %46 = bitcast i32 %44 to float, !dbg !33
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %29, i1 %41, i1 %41) #1, !dbg !34
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %29, i1 %41, i1 %41) #1, !dbg !34
  %49 = add i64 %47, 24, !dbg !35
  %50 = icmp slt i64 %47, 0, !dbg !36
  %51 = select i1 %50, i64 %49, i64 %47, !dbg !37
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %31, i1 %41, i1 %41, i1 %41) #1, !dbg !38
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !38
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !38
  %55 = add i64 %53, 24, !dbg !39
  %56 = add i64 %54, 24, !dbg !39
  %57 = icmp slt i64 %53, 0, !dbg !40
  %58 = icmp slt i64 %54, 0, !dbg !40
  %59 = select i1 %57, i64 %55, i64 %53, !dbg !41
  %60 = select i1 %58, i64 %56, i64 %54, !dbg !41
  %61 = mul i64 %51, 24, !dbg !42
  %62 = mul nsw i32 %40, 576, !dbg !43
  %63 = sext i32 %62 to i64, !dbg !44
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %61, !dbg !45
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %63, !dbg !45
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %33, !dbg !45
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %61, !dbg !45
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %63, !dbg !45
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %33, !dbg !45
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %41, i32 0, i1 %41) #1, !dbg !46
  %73 = bitcast i32 %72 to float, !dbg !46
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %41, i32 0, i1 %41) #1, !dbg !46
  %75 = bitcast i32 %74 to float, !dbg !46
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %34, i1 %41, i1 %41, i1 %41) #1, !dbg !47
  %77 = extractvalue { i64, i64 } %76, 0, !dbg !47
  %78 = extractvalue { i64, i64 } %76, 1, !dbg !47
  %79 = add i64 %77, 24, !dbg !48
  %80 = add i64 %78, 24, !dbg !48
  %81 = icmp slt i64 %77, 0, !dbg !49
  %82 = icmp slt i64 %78, 0, !dbg !49
  %83 = select i1 %81, i64 %79, i64 %77, !dbg !50
  %84 = select i1 %82, i64 %80, i64 %78, !dbg !50
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !51
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %61, !dbg !51
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %63, !dbg !51
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %33, !dbg !51
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !51
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %61, !dbg !51
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %63, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %33, !dbg !51
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %41, i32 0, i1 %41) #1, !dbg !52
  %94 = bitcast i32 %93 to float, !dbg !52
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %41, i32 0, i1 %41) #1, !dbg !52
  %96 = bitcast i32 %95 to float, !dbg !52
  %97 = fsub float %94, %73, !dbg !53
  %98 = fsub float %96, %75, !dbg !53
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #1, !dbg !54
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !54
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !54
  %102 = bitcast i32 %100 to float, !dbg !54
  %103 = bitcast i32 %101 to float, !dbg !54
  %104 = fmul float %97, %102, !dbg !55
  %105 = fmul float %98, %103, !dbg !55
  %106 = fadd float %104, %73, !dbg !56
  %107 = fadd float %105, %75, !dbg !56
  %108 = fsub float %106, %45, !dbg !57
  %109 = fsub float %107, %46, !dbg !57
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %41, i32 0, i1 %41) #1, !dbg !58
  %111 = bitcast i32 %110 to float, !dbg !58
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %41, i32 0, i1 %41) #1, !dbg !58
  %113 = bitcast i32 %112 to float, !dbg !58
  %114 = fmul float %108, %111, !dbg !59
  %115 = fmul float %109, %113, !dbg !59
  %116 = fadd float %114, %45, !dbg !60
  %117 = fadd float %115, %46, !dbg !60
  %118 = icmp sgt i32 %40, 511, !dbg !31
  %119 = insertelement <2 x i32> <i32 poison, i32 -512>, i32 %24, i64 0, !dbg !61
  %120 = add nsw <2 x i32> %119, %39, !dbg !61
  %121 = extractelement <2 x i32> %120, i64 1, !dbg !62
  %122 = shl nsw i32 %121, 8, !dbg !62
  %123 = extractelement <2 x i32> %120, i64 0, !dbg !63
  %124 = add nsw i32 %123, %122, !dbg !63
  %125 = sext i32 %124 to i64, !dbg !64
  %126 = getelementptr float, ptr addrspace(1) %7, i64 %125, !dbg !64
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %126, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !65
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !65
  %129 = extractvalue { i32, i32 } %127, 1, !dbg !65
  %130 = bitcast i32 %128 to float, !dbg !65
  %131 = bitcast i32 %129 to float, !dbg !65
  %132 = sext i32 %121 to i64, !dbg !66
  %133 = getelementptr float, ptr addrspace(1) %8, i64 %132, !dbg !66
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %118, i32 0, i1 %118) #1, !dbg !67
  %135 = bitcast i32 %134 to float, !dbg !67
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %118, i32 0, i1 %118) #1, !dbg !67
  %137 = bitcast i32 %136 to float, !dbg !67
  %138 = fadd float %130, %135, !dbg !68
  %139 = fadd float %131, %137, !dbg !68
  %140 = select i1 %41, float %116, float %138, !dbg !69
  %141 = select i1 %41, float %117, float %139, !dbg !69
  %142 = sext i32 %17 to i64, !dbg !70
  %143 = getelementptr float, ptr addrspace(1) %9, i64 %142, !dbg !70
  %144 = bitcast float %140 to i32, !dbg !71
  %145 = bitcast float %141 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %145, ptr addrspace(1) %143, i1 true) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxoakdwinlm2hlg6lub7lt6nuca37jqmht45twit55xwpum3px77.py", directory: "inductor_cache/xo")
!4 = !{ptr @triton_poi_fused_cat_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_18", linkageName: "triton_poi_fused_cat_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 53, scope: !7)
!21 = !DILocation(line: 35, column: 46, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 41, column: 31, scope: !7)
!25 = !DILocation(line: 45, column: 68, scope: !7)
!26 = !DILocation(line: 45, column: 61, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 52, column: 31, scope: !7)
!29 = !DILocation(line: 56, column: 31, scope: !7)
!30 = !DILocation(line: 26, column: 19, scope: !7)
!31 = !DILocation(line: 61, column: 20, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 58, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 33, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 35, scope: !7)
!42 = !DILocation(line: 45, column: 42, scope: !7)
!43 = !DILocation(line: 45, column: 55, scope: !7)
!44 = !DILocation(line: 45, column: 50, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 73, scope: !7)
!47 = !DILocation(line: 46, column: 36, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 35, scope: !7)
!51 = !DILocation(line: 50, column: 31, scope: !7)
!52 = !DILocation(line: 50, column: 73, scope: !7)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 52, column: 36, scope: !7)
!55 = !DILocation(line: 53, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 36, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 58, column: 19, scope: !7)
!61 = !DILocation(line: 64, column: 36, scope: !7)
!62 = !DILocation(line: 64, column: 41, scope: !7)
!63 = !DILocation(line: 64, column: 56, scope: !7)
!64 = !DILocation(line: 64, column: 31, scope: !7)
!65 = !DILocation(line: 64, column: 68, scope: !7)
!66 = !DILocation(line: 65, column: 31, scope: !7)
!67 = !DILocation(line: 65, column: 45, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 0, scope: !7)
!70 = !DILocation(line: 70, column: 25, scope: !7)
!71 = !DILocation(line: 70, column: 37, scope: !7)
!72 = !DILocation(line: 70, column: 4, scope: !7)
