; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_sqrt_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 1, !dbg !12
  %11 = and i32 %10, 6, !dbg !12
  %12 = and i32 %8, 7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %15 = lshr i32 %8, 5, !dbg !15
  %16 = and i32 %8, 60, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %17 = sdiv i32 %.frozen, 4, !dbg !16
  %18 = mul i32 %17, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = add nsw i32 %.decomposed, %16, !dbg !18
  %20 = shl i32 %17, 6, !dbg !19
  %21 = add i32 %19, %20, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = select i1 %14, float %27, float 0.000000e+00, !dbg !23
  %30 = select i1 %14, float %28, float 0.000000e+00, !dbg !23
  %31 = bitcast float %29 to i32, !dbg !24
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 16, i32 31), !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = fadd float %29, %33, !dbg !28
  %35 = bitcast float %34 to i32, !dbg !24
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = fadd float %34, %37, !dbg !28
  %39 = bitcast float %38 to i32, !dbg !24
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = fadd float %38, %41, !dbg !28
  %43 = bitcast float %30 to i32, !dbg !24
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = fadd float %30, %45, !dbg !28
  %47 = bitcast float %46 to i32, !dbg !24
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = fadd float %46, %49, !dbg !28
  %51 = bitcast float %50 to i32, !dbg !24
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = fadd float %50, %53, !dbg !28
  %55 = icmp samesign ult i32 %9, 4, !dbg !24
  %56 = and i32 %15, 1, !dbg !24
  %57 = shl nuw nsw i32 %11, 1, !dbg !24
  %58 = or disjoint i32 %57, %56, !dbg !24
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %60 = bitcast float %42 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %55) #5, !dbg !24
  %61 = or disjoint i32 %57, 2, !dbg !24
  %62 = or disjoint i32 %61, %56, !dbg !24
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !24
  %64 = bitcast float %54 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 %55) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %65 = icmp slt i32 %8, 16, !dbg !24
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !24
  %67 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #5, !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !24
  %70 = bitcast i32 %69 to float, !dbg !24
  %71 = fadd float %68, %70, !dbg !28
  %72 = and i32 %8, 1, !dbg !24
  %73 = icmp eq i32 %72, 0, !dbg !24
  %74 = and i1 %65, %73, !dbg !24
  %75 = bitcast float %71 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %75, i1 %74) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !24
  %77 = load float, ptr addrspace(3) %76, align 16, !dbg !24
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !24
  %79 = load float, ptr addrspace(3) %78, align 8, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %81 = bitcast float %77 to i32, !dbg !30
  %82 = bitcast float %79 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %80, i32 %81, i32 %82, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !30
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.600000e+01) #5, !dbg !30
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 1.600000e+01) #5, !dbg !30
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.600000e+01) #5, !dbg !30
  %88 = fsub float %27, %86, !dbg !31
  %89 = fsub float %28, %87, !dbg !31
  %90 = fmul float %88, %88, !dbg !32
  %91 = fmul float %89, %89, !dbg !32
  %92 = select i1 %14, float %90, float 0.000000e+00, !dbg !33
  %93 = select i1 %14, float %91, float 0.000000e+00, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %94 = bitcast float %92 to i32, !dbg !34
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = fadd float %92, %96, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !34
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !34
  %100 = bitcast i32 %99 to float, !dbg !34
  %101 = fadd float %97, %100, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = fadd float %101, %104, !dbg !36
  %106 = bitcast float %93 to i32, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fadd float %93, %108, !dbg !36
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !36
  %114 = bitcast float %113 to i32, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = fadd float %113, %116, !dbg !36
  %118 = bitcast float %105 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %118, i1 %55) #5, !dbg !34
  %119 = bitcast float %117 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %119, i1 %55) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #5, !dbg !34
  %121 = bitcast i32 %120 to float, !dbg !34
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = fadd float %121, %123, !dbg !36
  %125 = bitcast float %124 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %125, i1 %74) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %126 = load i32, ptr addrspace(3) %76, align 16, !dbg !34
  %127 = load i32, ptr addrspace(3) %78, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %80, i32 %126, i32 %127, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %128 = load float, ptr addrspace(3) %83, align 4, !dbg !37
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 1.600000e+01) #5, !dbg !38
  %130 = fadd float %129, 0x3E112E0BE0000000, !dbg !39
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %131, 0, !dbg !37
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i = icmp eq i32 %132, 0, !dbg !37
  br i1 %.not.i, label %138, label %133, !dbg !37

133:                                              ; preds = %5
  br i1 %.not1.i, label %136, label %134, !dbg !37

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

138:                                              ; preds = %5
  br i1 %.not1.i, label %141, label %139, !dbg !37

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %134, %136, %139, %141
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !37
  %143 = or disjoint i32 %7, %12, !dbg !13
  %144 = icmp slt i32 %143, 16, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %145 = sext i32 %143 to i64, !dbg !41
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !41
  %147 = lshr i32 %9, 3, !dbg !42
  %148 = shl nuw nsw i32 %56, 2, !dbg !42
  %149 = or disjoint i32 %148, %147, !dbg !42
  %150 = icmp eq i32 %149, 0, !dbg !42
  %151 = bitcast float %85 to i32, !dbg !42
  %152 = and i1 %150, %144, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %146, i1 %152) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !44
  %154 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %153, i1 %152) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py", directory: "inductor_cache/vo")
!4 = !{ptr @triton_per_fused_add_mean_sqrt_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_sqrt_var_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_sqrt_var_0", linkageName: "triton_per_fused_add_mean_sqrt_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 33, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 35, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !35)
!35 = !DILocation(line: 47, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !35)
!37 = !DILocation(line: 53, column: 27, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 4, scope: !7)
!41 = !DILocation(line: 55, column: 28, scope: !7)
!42 = !DILocation(line: 55, column: 40, scope: !7)
!43 = !DILocation(line: 56, column: 4, scope: !7)
!44 = !DILocation(line: 57, column: 28, scope: !7)
!45 = !DILocation(line: 57, column: 40, scope: !7)
!46 = !DILocation(line: 57, column: 4, scope: !7)
