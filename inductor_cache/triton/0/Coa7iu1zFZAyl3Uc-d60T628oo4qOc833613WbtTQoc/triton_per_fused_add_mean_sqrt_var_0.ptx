//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused_add_mean_sqrt_var_0 // -- Begin function triton_per_fused_add_mean_sqrt_var_0
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
.global .align 1 .b8 _$_str_$_2[17] = {95, 95, 67, 85, 68, 65, 95, 80, 82, 69, 67, 95, 83, 81, 82, 84};
                                        // @triton_per_fused_add_mean_sqrt_var_0
.visible .entry triton_per_fused_add_mean_sqrt_var_0(
	.param .u64 .ptr .global .align 1 triton_per_fused_add_mean_sqrt_var_0_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_mean_sqrt_var_0_param_1,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_mean_sqrt_var_0_param_2,
	.param .u32 triton_per_fused_add_mean_sqrt_var_0_param_3,
	.param .u32 triton_per_fused_add_mean_sqrt_var_0_param_4
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<20>;
	.reg .b32 	%r<100>;
	.reg .f32 	%f<46>;
	.reg .b64 	%rd<9>;
	.loc	1 19 0                          // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:19:0

// %bb.0:                               // %__nv_sqrtf.exit
	ld.param.u64 	%rd4, [triton_per_fused_add_mean_sqrt_var_0_param_0];
	ld.param.u64 	%rd5, [triton_per_fused_add_mean_sqrt_var_0_param_1];
$L__tmp0:
	.loc	1 23 28                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:23:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 23 33                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:23:33
	shl.b32 	%r42, %r1, 3;
	ld.param.u64 	%rd6, [triton_per_fused_add_mean_sqrt_var_0_param_2];
	.loc	1 24 44                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:24:44
	mov.u32 	%r43, %tid.x;
	and.b32  	%r44, %r43, 31;
	shl.b32 	%r45, %r43, 1;
	and.b32  	%r46, %r45, 6;
	and.b32  	%r47, %r43, 7;
	.loc	1 24 23                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:24:23
	or.b32  	%r48, %r42, %r46;
	.loc	1 25 21                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:25:21
	setp.lt.s32 	%p1, %r48, 16;
	.loc	1 26 34                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:26:34
	and.b32  	%r49, %r43, 60;
	.loc	1 31 19                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:31:19
	shr.s32 	%r51, %r48, 31;
	shr.u32 	%r52, %r51, 30;
	add.s32 	%r53, %r48, %r52;
	.loc	1 30 19                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:30:19
	and.b32  	%r54, %r53, -4;
	sub.s32 	%r55, %r48, %r54;
	.loc	1 33 35                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:33:35
	add.s32 	%r56, %r55, %r49;
	.loc	1 33 45                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:33:45
	shl.b32 	%r57, %r53, 4;
	and.b32  	%r58, %r57, -64;
	.loc	1 33 42                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:33:42
	add.s32 	%r59, %r56, %r58;
	.loc	1 33 30                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:33:30
	mul.wide.s32 	%rd7, %r59, 4;
	add.s64 	%rd1, %rd6, %rd7;
	mov.b32 	%r4, 0;
	.loc	1 33 50                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:33:50
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	@%p1 ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r4;
	@!%p1 mov.u32 %r3, %r4;
	// end inline asm
	mov.b32 	%f1, %r2;
	mov.b32 	%f2, %r3;
	.loc	1 35 33                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:35:33
	selp.f32 	%f3, %f1, 0f00000000, %p1;
	selp.f32 	%f4, %f2, 0f00000000, %p1;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r60, %f3;
	shfl.sync.bfly.b32	%r61, %r60, 16, 31, -1;
	mov.b32 	%f5, %r61;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f6, %f3, %f5;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r62, %f6;
	shfl.sync.bfly.b32	%r63, %r62, 8, 31, -1;
	mov.b32 	%f7, %r63;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f8, %f6, %f7;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r64, %f8;
	shfl.sync.bfly.b32	%r65, %r64, 4, 31, -1;
	mov.b32 	%f9, %r65;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f10, %f8, %f9;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r66, %f4;
	shfl.sync.bfly.b32	%r67, %r66, 16, 31, -1;
	mov.b32 	%f11, %r67;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f12, %f4, %f11;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r68, %f12;
	shfl.sync.bfly.b32	%r69, %r68, 8, 31, -1;
	mov.b32 	%f13, %r69;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f14, %f12, %f13;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r70, %f14;
	shfl.sync.bfly.b32	%r71, %r70, 4, 31, -1;
	mov.b32 	%f15, %r71;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f16, %f14, %f15;
	.loc	2 267 36                        // standard.py:267:36
	setp.lt.u32 	%p4, %r44, 4;
	shl.b32 	%r72, %r46, 3;
	shr.u32 	%r73, %r43, 3;
	and.b32  	%r74, %r73, 4;
	or.b32  	%r75, %r72, %r74;
	mov.u32 	%r76, global_smem;
	add.s32 	%r6, %r76, %r75;
	mov.b32 	%r7, %f10;
	// begin inline asm
	@%p4 st.shared.b32 [ %r6 + 0 ], %r7;
	// end inline asm
	add.s32 	%r8, %r6, 8;
	mov.b32 	%r9, %f16;
	// begin inline asm
	@%p4 st.shared.b32 [ %r8 + 0 ], %r9;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p6, %r43, 16;
	shl.b32 	%r77, %r43, 2;
	add.s32 	%r11, %r76, %r77;
	// begin inline asm
	@%p6 ld.shared.b32 %r10, [ %r11 + 0 ];
	// end inline asm
	mov.b32 	%f17, %r10;
	shfl.sync.bfly.b32	%r78, %r10, 1, 31, -1;
	mov.b32 	%f18, %r78;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f19, %f17, %f18;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r79, %r43, 1;
	setp.eq.b32 	%p16, %r79, 1;
	not.pred 	%p17, %p16;
	and.pred  	%p7, %p6, %p17;
	mov.b32 	%r13, %f19;
	// begin inline asm
	@%p7 st.shared.b32 [ %r11 + 0 ], %r13;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r80, %r76, %r72;
$L__tmp2:
	.loc	1 42 19                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:42:19
	ld.shared.u32 	%r15, [%r80];
	ld.shared.u32 	%r16, [%r80+8];
	bar.sync 	0;
	shl.b32 	%r81, %r46, 2;
	sub.s32 	%r34, %r80, %r81;
	mov.pred 	%p8, -1;
	// begin inline asm
	@%p8 st.shared.v2.b32 [ %r34 + 0 ], { %r15, %r16 };
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r82, %r47, 2;
	add.s32 	%r83, %r76, %r82;
	ld.shared.u32 	%r18, [%r83];
	mov.b32 	%r19, 1098907648;
	// begin inline asm
	div.full.f32 %r40, %r18, %r19;
	// end inline asm
	// begin inline asm
	div.full.f32 %r20, %r15, %r19;
	// end inline asm
	mov.b32 	%f20, %r20;
	// begin inline asm
	div.full.f32 %r23, %r16, %r19;
	// end inline asm
	mov.b32 	%f21, %r23;
	.loc	1 43 19                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:43:19
	sub.f32 	%f22, %f1, %f20;
	sub.f32 	%f23, %f2, %f21;
	.loc	1 44 20                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:44:20
	mul.f32 	%f24, %f22, %f22;
	mul.f32 	%f25, %f23, %f23;
	.loc	1 46 35                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:46:35
	selp.f32 	%f26, %f24, 0f00000000, %p1;
	selp.f32 	%f27, %f25, 0f00000000, %p1;
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r84, %f26;
	shfl.sync.bfly.b32	%r85, %r84, 16, 31, -1;
	mov.b32 	%f28, %r85;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f29, %f26, %f28;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r86, %f29;
	shfl.sync.bfly.b32	%r87, %r86, 8, 31, -1;
	mov.b32 	%f30, %r87;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f31, %f29, %f30;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r88, %f31;
	shfl.sync.bfly.b32	%r89, %r88, 4, 31, -1;
	mov.b32 	%f32, %r89;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f33, %f31, %f32;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r90, %f27;
	shfl.sync.bfly.b32	%r91, %r90, 16, 31, -1;
	mov.b32 	%f34, %r91;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f27, %f34;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r92, %f35;
	shfl.sync.bfly.b32	%r93, %r92, 8, 31, -1;
	mov.b32 	%f36, %r93;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f37, %f35, %f36;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r94, %f37;
	shfl.sync.bfly.b32	%r95, %r94, 4, 31, -1;
	mov.b32 	%f38, %r95;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f39, %f37, %f38;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r27, %f33;
	// begin inline asm
	@%p4 st.shared.b32 [ %r6 + 0 ], %r27;
	// end inline asm
	mov.b32 	%r29, %f39;
	// begin inline asm
	@%p4 st.shared.b32 [ %r8 + 0 ], %r29;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p6 ld.shared.b32 %r30, [ %r11 + 0 ];
	// end inline asm
	mov.b32 	%f40, %r30;
	shfl.sync.bfly.b32	%r96, %r30, 1, 31, -1;
	mov.b32 	%f41, %r96;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f42, %f40, %f41;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r33, %f42;
	// begin inline asm
	@%p7 st.shared.b32 [ %r11 + 0 ], %r33;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r35, [%r80];
	ld.shared.u32 	%r36, [%r80+8];
$L__tmp4:
	.loc	1 53 27                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:53:27
	bar.sync 	0;
	// begin inline asm
	@%p8 st.shared.v2.b32 [ %r34 + 0 ], { %r35, %r36 };
	// end inline asm
	bar.sync 	0;
	.loc	1 50 20                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:50:20
	ld.shared.u32 	%r38, [%r83];
	// begin inline asm
	div.full.f32 %r37, %r38, %r19;
	// end inline asm
	mov.b32 	%f43, %r37;
	.loc	1 52 20                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:52:20
	add.f32 	%f44, %f43, 0f3089705F;
	.loc	1 53 27                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:53:27
	sqrt.approx.ftz.f32 	%f45, %f44;
	.loc	1 24 23                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:24:23
	or.b32  	%r97, %r42, %r47;
	.loc	1 25 21                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:25:21
	setp.lt.s32 	%p18, %r97, 16;
	.loc	1 54 4                          // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:54:4
	bar.sync 	0;
	.loc	1 55 28                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:55:28
	mul.wide.s32 	%rd8, %r97, 4;
	add.s64 	%rd2, %rd4, %rd8;
	.loc	1 55 40                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:55:40
	bfe.u32 	%r98, %r43, 3, 2;
	or.b32  	%r99, %r74, %r98;
	setp.eq.s32 	%p19, %r99, 0;
	and.pred  	%p14, %p19, %p18;
	// begin inline asm
	@%p14 st.global.b32 [ %rd2 + 0 ], { %r40 };
	// end inline asm
	.loc	1 56 4                          // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:56:4
	bar.sync 	0;
	.loc	1 57 28                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:57:28
	add.s64 	%rd3, %rd5, %rd8;
	.loc	1 57 40                         // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:57:40
	mov.b32 	%r41, %f45;
	// begin inline asm
	@%p14 st.global.b32 [ %rd3 + 0 ], { %r41 };
	// end inline asm
	.loc	1 57 4                          // cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py:57:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 205                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xc6 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 118
.b8 111
.b8 116
.b8 113
.b8 119
.b8 119
.b8 116
.b8 112
.b8 53
.b8 109
.b8 97
.b8 115
.b8 99
.b8 121
.b8 52
.b8 113
.b8 113
.b8 111
.b8 108
.b8 110
.b8 122
.b8 118
.b8 107
.b8 100
.b8 54
.b8 115
.b8 121
.b8 53
.b8 100
.b8 114
.b8 103
.b8 109
.b8 111
.b8 55
.b8 103
.b8 114
.b8 111
.b8 118
.b8 108
.b8 108
.b8 54
.b8 112
.b8 115
.b8 100
.b8 97
.b8 101
.b8 118
.b8 108
.b8 97
.b8 51
.b8 119
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 118
.b8 111
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x27 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 109
.b8 101
.b8 97
.b8 110
.b8 95
.b8 115
.b8 113
.b8 114
.b8 116
.b8 95
.b8 118
.b8 97
.b8 114
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8a:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x9f:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xb7:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 47                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
