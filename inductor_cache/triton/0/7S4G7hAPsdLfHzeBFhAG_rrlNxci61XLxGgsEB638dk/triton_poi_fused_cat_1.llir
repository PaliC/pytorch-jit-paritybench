; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 4096, !dbg !14
  %20 = srem i32 %19, 512, !dbg !15
  %21 = mul i32 %19, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %.frozen16 = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen16, 2097152, !dbg !17
  %23 = mul i32 %22, 2097152, !dbg !18
  %.decomposed17 = sub i32 %.frozen16, %23, !dbg !18
  %24 = icmp slt i32 %20, 256, !dbg !19
  %25 = shl nsw i32 %22, 20, !dbg !20
  %26 = add nsw i32 %25, %.decomposed17, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !23
  %30 = sext i32 %20 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %24, i32 0, i1 %24) #3, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %24, i32 0, i1 %24) #3, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %24, i32 0, i1 %24) #3, !dbg !27
  %36 = bitcast i32 %35 to float, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %24, i32 0, i1 %24) #3, !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = fadd float %36, 0x3EE4F8B580000000, !dbg !28
  %40 = fadd float %38, 0x3EE4F8B580000000, !dbg !28
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %41, 0, !dbg !29
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %42, 0, !dbg !29
  br i1 %.not.i, label %48, label %43, !dbg !29

43:                                               ; preds = %12
  br i1 %.not1.i, label %46, label %44, !dbg !29

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

48:                                               ; preds = %12
  br i1 %.not1.i, label %51, label %49, !dbg !29

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %44, %46, %49, %51
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !29
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %53, 0, !dbg !29
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %54, 0, !dbg !29
  br i1 %.not.i1, label %60, label %55, !dbg !29

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !29

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !29

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %56, %58, %61, %63
  %.0.i3 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !29
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %24, i32 0, i1 %24) #3, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %24, i32 0, i1 %24) #3, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !33
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %24, i32 0, i1 %24) #3, !dbg !34
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %24, i32 0, i1 %24) #3, !dbg !34
  %73 = icmp sgt i32 %20, 255, !dbg !35
  %74 = add nsw i32 %20, -256, !dbg !36
  %75 = shl nsw i32 %74, 12, !dbg !37
  %76 = add nsw i32 %25, %.decomposed, !dbg !38
  %77 = add nsw i32 %76, %75, !dbg !39
  %78 = sext i32 %77 to i64, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !40
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !41
  %81 = sext i32 %74 to i64, !dbg !42
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !42
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %73, i32 0, i1 %73) #3, !dbg !43
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %73, i32 0, i1 %73) #3, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %81, !dbg !44
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %73, i32 0, i1 %73) #3, !dbg !45
  %87 = bitcast i32 %86 to float, !dbg !45
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %73, i32 0, i1 %73) #3, !dbg !45
  %89 = bitcast i32 %88 to float, !dbg !45
  %90 = fadd float %87, 0x3EE4F8B580000000, !dbg !46
  %91 = fadd float %89, 0x3EE4F8B580000000, !dbg !46
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %92, 0, !dbg !47
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !47
  br i1 %.not.i6, label %99, label %94, !dbg !47

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !47

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !47

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !47
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %104, 0, !dbg !47
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %105, 0, !dbg !47
  br i1 %.not.i11, label %111, label %106, !dbg !47

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !47

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !47

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %107, %109, %112, %114
  %.0.i13 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !47
  %116 = extractvalue { i32, i32 } %80, 1, !dbg !41
  %117 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !43
  %118 = insertelement <4 x i32> %117, i32 %83, i64 1, !dbg !43
  %119 = insertelement <4 x i32> %118, i32 %32, i64 2, !dbg !43
  %120 = insertelement <4 x i32> %119, i32 %33, i64 3, !dbg !43
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !43
  %122 = extractvalue { i32, i32 } %80, 0, !dbg !41
  %123 = extractvalue { i32, i32 } %29, 1, !dbg !23
  %124 = extractvalue { i32, i32 } %29, 0, !dbg !23
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %127 = getelementptr float, ptr addrspace(1) %8, i64 %81, !dbg !49
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %73, i32 0, i1 %73) #3, !dbg !50
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %73, i32 0, i1 %73) #3, !dbg !50
  %130 = getelementptr float, ptr addrspace(1) %9, i64 %81, !dbg !51
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %73, i32 0, i1 %73) #3, !dbg !52
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %73, i32 0, i1 %73) #3, !dbg !52
  %133 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !41
  %134 = insertelement <4 x i32> %133, i32 %122, i64 1, !dbg !41
  %135 = insertelement <4 x i32> %134, i32 %124, i64 2, !dbg !41
  %136 = insertelement <4 x i32> %135, i32 %123, i64 3, !dbg !41
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !41
  %138 = fsub <4 x float> %137, %121, !dbg !53
  %139 = insertelement <4 x float> poison, float %126, i64 0, !dbg !54
  %140 = insertelement <4 x float> %139, float %125, i64 1, !dbg !54
  %141 = insertelement <4 x float> %140, float %65, i64 2, !dbg !54
  %142 = insertelement <4 x float> %141, float %66, i64 3, !dbg !54
  %143 = fmul <4 x float> %138, %142, !dbg !54
  %144 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !50
  %145 = insertelement <4 x i32> %144, i32 %128, i64 1, !dbg !50
  %146 = insertelement <4 x i32> %145, i32 %68, i64 2, !dbg !50
  %147 = insertelement <4 x i32> %146, i32 %69, i64 3, !dbg !50
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !50
  %149 = fmul <4 x float> %143, %148, !dbg !55
  %150 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !52
  %151 = insertelement <4 x i32> %150, i32 %131, i64 1, !dbg !52
  %152 = insertelement <4 x i32> %151, i32 %71, i64 2, !dbg !52
  %153 = insertelement <4 x i32> %152, i32 %72, i64 3, !dbg !52
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !52
  %155 = fadd <4 x float> %149, %154, !dbg !56
  %156 = fcmp olt <4 x float> %155, zeroinitializer, !dbg !57
  %157 = extractelement <4 x i1> %156, i64 3, !dbg !61
  %158 = extractelement <4 x float> %155, i64 3, !dbg !61
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !61
  %160 = extractelement <4 x i1> %156, i64 2, !dbg !61
  %161 = extractelement <4 x float> %155, i64 2, !dbg !61
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !61
  %163 = extractelement <4 x i1> %156, i64 1, !dbg !63
  %164 = extractelement <4 x float> %155, i64 1, !dbg !63
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !63
  %166 = extractelement <4 x i1> %156, i64 0, !dbg !63
  %167 = extractelement <4 x float> %155, i64 0, !dbg !63
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !63
  %169 = select i1 %24, float %162, float %165, !dbg !64
  %170 = select i1 %24, float %159, float %168, !dbg !64
  %171 = mul i32 %22, 6291456, !dbg !65
  %172 = add i32 %171, %.decomposed17, !dbg !66
  %173 = sext i32 %172 to i64, !dbg !67
  %174 = getelementptr float, ptr addrspace(1) %10, i64 %173, !dbg !67
  %175 = bitcast float %169 to i32, !dbg !68
  %176 = bitcast float %170 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 true) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctzaoven3cu6u3qglfhf5qn3e4kpg7ucjgfrldga6ru75pjb3hgl.py", directory: "inductor_cache/tz")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 55, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 60, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 53, column: 20, scope: !7)
!36 = !DILocation(line: 56, column: 51, scope: !7)
!37 = !DILocation(line: 56, column: 42, scope: !7)
!38 = !DILocation(line: 56, column: 36, scope: !7)
!39 = !DILocation(line: 56, column: 57, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 70, scope: !7)
!42 = !DILocation(line: 57, column: 31, scope: !7)
!43 = !DILocation(line: 57, column: 45, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 45, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 27, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 31, scope: !7)
!50 = !DILocation(line: 68, column: 45, scope: !7)
!51 = !DILocation(line: 70, column: 31, scope: !7)
!52 = !DILocation(line: 70, column: 45, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 71, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 73, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !62)
!62 = !DILocation(line: 50, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 77, column: 38, scope: !7)
!66 = !DILocation(line: 77, column: 30, scope: !7)
!67 = !DILocation(line: 77, column: 25, scope: !7)
!68 = !DILocation(line: 77, column: 50, scope: !7)
!69 = !DILocation(line: 77, column: 4, scope: !7)
