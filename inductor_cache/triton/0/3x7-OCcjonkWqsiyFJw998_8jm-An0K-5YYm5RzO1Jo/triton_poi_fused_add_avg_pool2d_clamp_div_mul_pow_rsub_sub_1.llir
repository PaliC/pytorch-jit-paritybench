; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 56, !dbg !14
  %14 = mul i32 %13, 56, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %12, 56, !dbg !15
  %16 = shl i32 %13, 6, !dbg !16
  %17 = add i32 %16, %.decomposed, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = bitcast i32 %21 to float, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = or disjoint i32 %17, 1, !dbg !20
  %26 = add i32 %16, %15, !dbg !21
  %27 = add i32 %26, 1, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %33 = bitcast i32 %32 to float, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = add i32 %17, 2, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %42 = bitcast i32 %40 to float, !dbg !26
  %43 = bitcast i32 %41 to float, !dbg !26
  %44 = add i32 %17, 3, !dbg !27
  %45 = add i32 %26, 3, !dbg !27
  %46 = sext i32 %44 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !29
  %51 = bitcast i32 %50 to float, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = add i32 %17, 4, !dbg !30
  %55 = sext i32 %54 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !31
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !32
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !32
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !32
  %60 = bitcast i32 %58 to float, !dbg !32
  %61 = bitcast i32 %59 to float, !dbg !32
  %62 = add i32 %17, 5, !dbg !33
  %63 = add i32 %26, 5, !dbg !33
  %64 = sext i32 %62 to i64, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !34
  %66 = sext i32 %63 to i64, !dbg !34
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !34
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !35
  %69 = bitcast i32 %68 to float, !dbg !35
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !35
  %71 = bitcast i32 %70 to float, !dbg !35
  %72 = add i32 %17, 6, !dbg !36
  %73 = sext i32 %72 to i64, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !37
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !38
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !38
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !38
  %78 = bitcast i32 %76 to float, !dbg !38
  %79 = bitcast i32 %77 to float, !dbg !38
  %80 = add i32 %17, 7, !dbg !39
  %81 = add i32 %26, 7, !dbg !39
  %82 = sext i32 %80 to i64, !dbg !40
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !40
  %84 = sext i32 %81 to i64, !dbg !40
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !40
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !41
  %87 = bitcast i32 %86 to float, !dbg !41
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !41
  %89 = bitcast i32 %88 to float, !dbg !41
  %90 = add i32 %17, 8, !dbg !42
  %91 = sext i32 %90 to i64, !dbg !43
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !43
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !44
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !44
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !44
  %96 = bitcast i32 %94 to float, !dbg !44
  %97 = bitcast i32 %95 to float, !dbg !44
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !45
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !46
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !46
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !46
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !47
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !47
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !48
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !48
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !49
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !50
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !50
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !50
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !51
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !52
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !52
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !53
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !54
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !54
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !54
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !55
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !55
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !56
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !56
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !57
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !58
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !58
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !58
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !59
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !59
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !60
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !60
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !61
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !62
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !62
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !62
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !63
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !64
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !64
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !64
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !65
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !65
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !66
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !66
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !67
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !68
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !68
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !68
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !69
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !69
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !70
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !70
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !71
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !72
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !72
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !72
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !73
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !73
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !74
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !74
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !75
  %159 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !76
  %160 = extractvalue { i32, i32 } %159, 0, !dbg !76
  %161 = extractvalue { i32, i32 } %159, 1, !dbg !76
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !77
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !77
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !78
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #1, !dbg !78
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !79
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !80
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !80
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !80
  %170 = fadd float %33, %23, !dbg !81
  %171 = fadd float %24, %35, !dbg !81
  %172 = fadd float %170, %42, !dbg !82
  %173 = fadd float %171, %43, !dbg !82
  %174 = fadd float %172, %51, !dbg !83
  %175 = fadd float %173, %53, !dbg !83
  %176 = fadd float %174, %60, !dbg !84
  %177 = fadd float %175, %61, !dbg !84
  %178 = fadd float %176, %69, !dbg !85
  %179 = fadd float %177, %71, !dbg !85
  %180 = fadd float %178, %78, !dbg !86
  %181 = fadd float %179, %79, !dbg !86
  %182 = fadd float %180, %87, !dbg !87
  %183 = fadd float %181, %89, !dbg !87
  %184 = fadd float %182, %96, !dbg !88
  %185 = fadd float %183, %97, !dbg !88
  %186 = fmul float %184, 0x3FBC71C720000000, !dbg !89
  %187 = fmul float %185, 0x3FBC71C720000000, !dbg !89
  %188 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !46
  %189 = insertelement <2 x i32> %188, i32 %136, i64 1, !dbg !46
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !46
  %191 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !48
  %192 = insertelement <2 x i32> %191, i32 %140, i64 1, !dbg !48
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !48
  %194 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !50
  %195 = insertelement <2 x i32> %194, i32 %144, i64 1, !dbg !50
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !50
  %197 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !52
  %198 = insertelement <2 x i32> %197, i32 %148, i64 1, !dbg !52
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !52
  %200 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !54
  %201 = insertelement <2 x i32> %200, i32 %152, i64 1, !dbg !54
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !54
  %203 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !56
  %204 = insertelement <2 x i32> %203, i32 %156, i64 1, !dbg !56
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !56
  %206 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !58
  %207 = insertelement <2 x i32> %206, i32 %160, i64 1, !dbg !58
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !58
  %209 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !60
  %210 = insertelement <2 x i32> %209, i32 %164, i64 1, !dbg !60
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !60
  %212 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !62
  %213 = insertelement <2 x i32> %212, i32 %168, i64 1, !dbg !62
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !62
  %215 = fadd <2 x float> %193, %190, !dbg !90
  %216 = fadd <2 x float> %215, %196, !dbg !91
  %217 = fadd <2 x float> %216, %199, !dbg !92
  %218 = fadd <2 x float> %217, %202, !dbg !93
  %219 = fadd <2 x float> %218, %205, !dbg !94
  %220 = fadd <2 x float> %219, %208, !dbg !95
  %221 = fadd <2 x float> %220, %211, !dbg !96
  %222 = fadd <2 x float> %221, %214, !dbg !97
  %223 = fmul <2 x float> %222, splat (float 0x3FBC71C720000000), !dbg !98
  %224 = fmul <2 x float> %190, %190, !dbg !99
  %225 = fmul <2 x float> %193, %193, !dbg !100
  %226 = fadd <2 x float> %225, %224, !dbg !101
  %227 = fmul <2 x float> %196, %196, !dbg !102
  %228 = fadd <2 x float> %226, %227, !dbg !103
  %229 = fmul <2 x float> %199, %199, !dbg !104
  %230 = fadd <2 x float> %229, %228, !dbg !105
  %231 = fmul <2 x float> %202, %202, !dbg !106
  %232 = fadd <2 x float> %230, %231, !dbg !107
  %233 = fmul <2 x float> %205, %205, !dbg !108
  %234 = fadd <2 x float> %233, %232, !dbg !109
  %235 = fmul <2 x float> %208, %208, !dbg !110
  %236 = fadd <2 x float> %234, %235, !dbg !111
  %237 = fmul <2 x float> %211, %211, !dbg !112
  %238 = fadd <2 x float> %237, %236, !dbg !113
  %239 = fmul <2 x float> %214, %214, !dbg !114
  %240 = fadd <2 x float> %238, %239, !dbg !115
  %241 = fmul <2 x float> %240, splat (float 0x3FBC71C720000000), !dbg !116
  %242 = extractelement <2 x float> %223, i64 0, !dbg !117
  %243 = fmul float %242, 2.000000e+00, !dbg !118
  %244 = extractelement <2 x float> %223, i64 1, !dbg !117
  %245 = fmul float %243, %244, !dbg !119
  %246 = fadd float %245, 0x3F1A36E2E0000000, !dbg !120
  %247 = fmul float %242, %244, !dbg !117
  %248 = fsub float %186, %247, !dbg !121
  %249 = fmul float %248, 2.000000e+00, !dbg !122
  %250 = fadd float %249, 0x3F4D7DBF40000000, !dbg !123
  %251 = fmul float %246, %250, !dbg !124
  %252 = fmul <2 x float> %223, %223, !dbg !125
  %253 = fsub <2 x float> %241, %252, !dbg !126
  %254 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !46
  %255 = insertelement <2 x i32> %254, i32 %137, i64 1, !dbg !46
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !46
  %257 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !48
  %258 = insertelement <2 x i32> %257, i32 %141, i64 1, !dbg !48
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !48
  %260 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !50
  %261 = insertelement <2 x i32> %260, i32 %145, i64 1, !dbg !50
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !50
  %263 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !52
  %264 = insertelement <2 x i32> %263, i32 %149, i64 1, !dbg !52
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !52
  %266 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !54
  %267 = insertelement <2 x i32> %266, i32 %153, i64 1, !dbg !54
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !54
  %269 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !56
  %270 = insertelement <2 x i32> %269, i32 %157, i64 1, !dbg !56
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !56
  %272 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !58
  %273 = insertelement <2 x i32> %272, i32 %161, i64 1, !dbg !58
  %274 = bitcast <2 x i32> %273 to <2 x float>, !dbg !58
  %275 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !60
  %276 = insertelement <2 x i32> %275, i32 %165, i64 1, !dbg !60
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !60
  %278 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !62
  %279 = insertelement <2 x i32> %278, i32 %169, i64 1, !dbg !62
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !62
  %281 = fadd <2 x float> %256, %259, !dbg !90
  %282 = fadd <2 x float> %281, %262, !dbg !91
  %283 = fadd <2 x float> %282, %265, !dbg !92
  %284 = fadd <2 x float> %283, %268, !dbg !93
  %285 = fadd <2 x float> %284, %271, !dbg !94
  %286 = fadd <2 x float> %285, %274, !dbg !95
  %287 = fadd <2 x float> %286, %277, !dbg !96
  %288 = fadd <2 x float> %287, %280, !dbg !97
  %289 = fmul <2 x float> %288, splat (float 0x3FBC71C720000000), !dbg !98
  %290 = fmul <2 x float> %256, %256, !dbg !99
  %291 = fmul <2 x float> %259, %259, !dbg !100
  %292 = fadd <2 x float> %290, %291, !dbg !101
  %293 = fmul <2 x float> %262, %262, !dbg !102
  %294 = fadd <2 x float> %292, %293, !dbg !103
  %295 = fmul <2 x float> %265, %265, !dbg !104
  %296 = fadd <2 x float> %295, %294, !dbg !105
  %297 = fmul <2 x float> %268, %268, !dbg !106
  %298 = fadd <2 x float> %296, %297, !dbg !107
  %299 = fmul <2 x float> %271, %271, !dbg !108
  %300 = fadd <2 x float> %299, %298, !dbg !109
  %301 = fmul <2 x float> %274, %274, !dbg !110
  %302 = fadd <2 x float> %300, %301, !dbg !111
  %303 = fmul <2 x float> %277, %277, !dbg !112
  %304 = fadd <2 x float> %303, %302, !dbg !113
  %305 = fmul <2 x float> %280, %280, !dbg !114
  %306 = fadd <2 x float> %304, %305, !dbg !115
  %307 = fmul <2 x float> %306, splat (float 0x3FBC71C720000000), !dbg !116
  %308 = extractelement <2 x float> %289, i64 0, !dbg !117
  %309 = fmul float %308, 2.000000e+00, !dbg !118
  %310 = extractelement <2 x float> %289, i64 1, !dbg !117
  %311 = fmul float %309, %310, !dbg !119
  %312 = fadd float %311, 0x3F1A36E2E0000000, !dbg !120
  %313 = fmul float %308, %310, !dbg !117
  %314 = fsub float %187, %313, !dbg !121
  %315 = fmul float %314, 2.000000e+00, !dbg !122
  %316 = fadd float %315, 0x3F4D7DBF40000000, !dbg !123
  %317 = fmul float %312, %316, !dbg !124
  %318 = fmul <2 x float> %289, %289, !dbg !125
  %319 = fsub <2 x float> %307, %318, !dbg !126
  %320 = shufflevector <2 x float> %252, <2 x float> %253, <2 x i32> <i32 0, i32 2>, !dbg !127
  %321 = shufflevector <2 x float> %252, <2 x float> %253, <2 x i32> <i32 1, i32 3>, !dbg !127
  %322 = fadd <2 x float> %320, %321, !dbg !127
  %323 = fadd <2 x float> %322, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !128
  %324 = shufflevector <2 x float> %318, <2 x float> %319, <2 x i32> <i32 0, i32 2>, !dbg !127
  %325 = shufflevector <2 x float> %318, <2 x float> %319, <2 x i32> <i32 1, i32 3>, !dbg !127
  %326 = fadd <2 x float> %324, %325, !dbg !127
  %327 = fadd <2 x float> %326, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !128
  %shift = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %328 = fmul <2 x float> %323, %shift, !dbg !129
  %329 = extractelement <2 x float> %328, i64 0, !dbg !129
  %shift2 = shufflevector <2 x float> %327, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !129
  %330 = fmul <2 x float> %327, %shift2, !dbg !129
  %331 = extractelement <2 x float> %330, i64 0, !dbg !129
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %329) #1, !dbg !130
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %331) #1, !dbg !130
  %334 = fsub float 1.000000e+00, %332, !dbg !131
  %335 = fsub float 1.000000e+00, %333, !dbg !131
  %336 = fmul float %334, 5.000000e-01, !dbg !132
  %337 = fmul float %335, 5.000000e-01, !dbg !132
  %.inv = fcmp ole float %336, 0.000000e+00, !dbg !133
  %338 = select i1 %.inv, float 0.000000e+00, float %336, !dbg !133
  %.inv1 = fcmp ole float %337, 0.000000e+00, !dbg !133
  %339 = select i1 %.inv1, float 0.000000e+00, float %337, !dbg !133
  %340 = fcmp olt float %338, 1.000000e+00, !dbg !137
  %341 = fcmp olt float %339, 1.000000e+00, !dbg !137
  %342 = fcmp uno float %338, 0.000000e+00, !dbg !139
  %343 = fcmp uno float %339, 0.000000e+00, !dbg !139
  %344 = or i1 %340, %342, !dbg !140
  %345 = or i1 %341, %343, !dbg !140
  %346 = sext i32 %11 to i64, !dbg !141
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !141
  %348 = bitcast float %338 to i32, !dbg !142
  %349 = select i1 %344, i32 %348, i32 1065353216, !dbg !143
  %350 = bitcast float %339 to i32, !dbg !142
  %351 = select i1 %345, i32 %350, i32 1065353216, !dbg !143
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %349, i32 %351, ptr addrspace(1) %347, i1 true) #1, !dbg !142
  ret void, !dbg !144
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvcerakyysng7n3pg6qonj5kxgpcyv2ku6rxlwpm5dwi3usfkbhk.py", directory: "inductor_cache/vc")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1", linkageName: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 38, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 43, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 47, scope: !7)
!24 = !DILocation(line: 29, column: 39, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 47, scope: !7)
!27 = !DILocation(line: 30, column: 39, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 47, scope: !7)
!30 = !DILocation(line: 31, column: 39, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 47, scope: !7)
!33 = !DILocation(line: 32, column: 39, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 47, scope: !7)
!36 = !DILocation(line: 33, column: 40, scope: !7)
!37 = !DILocation(line: 33, column: 31, scope: !7)
!38 = !DILocation(line: 33, column: 48, scope: !7)
!39 = !DILocation(line: 34, column: 40, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 48, scope: !7)
!42 = !DILocation(line: 35, column: 40, scope: !7)
!43 = !DILocation(line: 35, column: 31, scope: !7)
!44 = !DILocation(line: 35, column: 48, scope: !7)
!45 = !DILocation(line: 36, column: 31, scope: !7)
!46 = !DILocation(line: 36, column: 44, scope: !7)
!47 = !DILocation(line: 37, column: 31, scope: !7)
!48 = !DILocation(line: 37, column: 48, scope: !7)
!49 = !DILocation(line: 38, column: 31, scope: !7)
!50 = !DILocation(line: 38, column: 48, scope: !7)
!51 = !DILocation(line: 39, column: 31, scope: !7)
!52 = !DILocation(line: 39, column: 48, scope: !7)
!53 = !DILocation(line: 40, column: 31, scope: !7)
!54 = !DILocation(line: 40, column: 48, scope: !7)
!55 = !DILocation(line: 41, column: 31, scope: !7)
!56 = !DILocation(line: 41, column: 48, scope: !7)
!57 = !DILocation(line: 42, column: 31, scope: !7)
!58 = !DILocation(line: 42, column: 48, scope: !7)
!59 = !DILocation(line: 43, column: 31, scope: !7)
!60 = !DILocation(line: 43, column: 48, scope: !7)
!61 = !DILocation(line: 44, column: 31, scope: !7)
!62 = !DILocation(line: 44, column: 48, scope: !7)
!63 = !DILocation(line: 45, column: 31, scope: !7)
!64 = !DILocation(line: 45, column: 44, scope: !7)
!65 = !DILocation(line: 46, column: 31, scope: !7)
!66 = !DILocation(line: 46, column: 48, scope: !7)
!67 = !DILocation(line: 47, column: 31, scope: !7)
!68 = !DILocation(line: 47, column: 48, scope: !7)
!69 = !DILocation(line: 48, column: 31, scope: !7)
!70 = !DILocation(line: 48, column: 48, scope: !7)
!71 = !DILocation(line: 49, column: 31, scope: !7)
!72 = !DILocation(line: 49, column: 48, scope: !7)
!73 = !DILocation(line: 50, column: 31, scope: !7)
!74 = !DILocation(line: 50, column: 48, scope: !7)
!75 = !DILocation(line: 51, column: 31, scope: !7)
!76 = !DILocation(line: 51, column: 48, scope: !7)
!77 = !DILocation(line: 52, column: 31, scope: !7)
!78 = !DILocation(line: 52, column: 48, scope: !7)
!79 = !DILocation(line: 53, column: 31, scope: !7)
!80 = !DILocation(line: 53, column: 48, scope: !7)
!81 = !DILocation(line: 54, column: 18, scope: !7)
!82 = !DILocation(line: 55, column: 18, scope: !7)
!83 = !DILocation(line: 56, column: 18, scope: !7)
!84 = !DILocation(line: 57, column: 18, scope: !7)
!85 = !DILocation(line: 58, column: 19, scope: !7)
!86 = !DILocation(line: 59, column: 20, scope: !7)
!87 = !DILocation(line: 60, column: 20, scope: !7)
!88 = !DILocation(line: 61, column: 20, scope: !7)
!89 = !DILocation(line: 63, column: 20, scope: !7)
!90 = !DILocation(line: 64, column: 20, scope: !7)
!91 = !DILocation(line: 65, column: 20, scope: !7)
!92 = !DILocation(line: 66, column: 20, scope: !7)
!93 = !DILocation(line: 67, column: 20, scope: !7)
!94 = !DILocation(line: 68, column: 20, scope: !7)
!95 = !DILocation(line: 69, column: 20, scope: !7)
!96 = !DILocation(line: 70, column: 20, scope: !7)
!97 = !DILocation(line: 71, column: 20, scope: !7)
!98 = !DILocation(line: 72, column: 20, scope: !7)
!99 = !DILocation(line: 73, column: 20, scope: !7)
!100 = !DILocation(line: 74, column: 20, scope: !7)
!101 = !DILocation(line: 75, column: 20, scope: !7)
!102 = !DILocation(line: 76, column: 20, scope: !7)
!103 = !DILocation(line: 77, column: 20, scope: !7)
!104 = !DILocation(line: 78, column: 20, scope: !7)
!105 = !DILocation(line: 79, column: 20, scope: !7)
!106 = !DILocation(line: 80, column: 20, scope: !7)
!107 = !DILocation(line: 81, column: 20, scope: !7)
!108 = !DILocation(line: 82, column: 20, scope: !7)
!109 = !DILocation(line: 83, column: 20, scope: !7)
!110 = !DILocation(line: 84, column: 20, scope: !7)
!111 = !DILocation(line: 85, column: 20, scope: !7)
!112 = !DILocation(line: 86, column: 20, scope: !7)
!113 = !DILocation(line: 87, column: 20, scope: !7)
!114 = !DILocation(line: 88, column: 20, scope: !7)
!115 = !DILocation(line: 89, column: 20, scope: !7)
!116 = !DILocation(line: 90, column: 20, scope: !7)
!117 = !DILocation(line: 123, column: 20, scope: !7)
!118 = !DILocation(line: 119, column: 20, scope: !7)
!119 = !DILocation(line: 120, column: 20, scope: !7)
!120 = !DILocation(line: 122, column: 20, scope: !7)
!121 = !DILocation(line: 124, column: 20, scope: !7)
!122 = !DILocation(line: 125, column: 20, scope: !7)
!123 = !DILocation(line: 127, column: 21, scope: !7)
!124 = !DILocation(line: 128, column: 21, scope: !7)
!125 = !DILocation(line: 129, column: 21, scope: !7)
!126 = !DILocation(line: 133, column: 21, scope: !7)
!127 = !DILocation(line: 131, column: 22, scope: !7)
!128 = !DILocation(line: 132, column: 22, scope: !7)
!129 = !DILocation(line: 137, column: 22, scope: !7)
!130 = !DILocation(line: 138, column: 22, scope: !7)
!131 = !DILocation(line: 140, column: 22, scope: !7)
!132 = !DILocation(line: 142, column: 22, scope: !7)
!133 = !DILocation(line: 121, column: 29, scope: !134, inlinedAt: !136)
!134 = distinct !DILexicalBlockFile(scope: !7, file: !135, discriminator: 0)
!135 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!136 = !DILocation(line: 144, column: 44, scope: !7)
!137 = !DILocation(line: 110, column: 15, scope: !134, inlinedAt: !138)
!138 = !DILocation(line: 145, column: 44, scope: !7)
!139 = !DILocation(line: 112, column: 21, scope: !134, inlinedAt: !138)
!140 = !DILocation(line: 112, column: 16, scope: !134, inlinedAt: !138)
!141 = !DILocation(line: 146, column: 28, scope: !7)
!142 = !DILocation(line: 146, column: 41, scope: !7)
!143 = !DILocation(line: 113, column: 29, scope: !134, inlinedAt: !138)
!144 = !DILocation(line: 146, column: 4, scope: !7)
