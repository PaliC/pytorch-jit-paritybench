; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_constant_pad_nd_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = or disjoint i32 %6, %9, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = or disjoint i32 %6, %10, !dbg !13
  %23 = or disjoint i32 %6, %11, !dbg !13
  %24 = or disjoint i32 %6, %12, !dbg !13
  %25 = or disjoint i32 %6, %13, !dbg !13
  %26 = or disjoint i32 %22, 512, !dbg !13
  %27 = or disjoint i32 %22, 640, !dbg !13
  %28 = or disjoint i32 %22, 768, !dbg !13
  %29 = or disjoint i32 %22, 896, !dbg !13
  %30 = icmp slt i32 %14, 67600, !dbg !14
  %31 = icmp slt i32 %18, 67600, !dbg !14
  %32 = icmp slt i32 %22, 67600, !dbg !14
  %33 = icmp slt i32 %23, 67600, !dbg !14
  %34 = icmp slt i32 %24, 67600, !dbg !14
  %35 = icmp slt i32 %25, 67600, !dbg !14
  %36 = icmp slt i32 %26, 67600, !dbg !14
  %37 = icmp slt i32 %27, 67600, !dbg !14
  %38 = icmp slt i32 %28, 67600, !dbg !14
  %39 = icmp slt i32 %29, 67600, !dbg !14
  %40 = sdiv i32 %14, 65, !dbg !15
  %41 = sdiv i32 %15, 65, !dbg !15
  %42 = sdiv i32 %16, 65, !dbg !15
  %43 = sdiv i32 %17, 65, !dbg !15
  %44 = sdiv i32 %18, 65, !dbg !15
  %45 = sdiv i32 %19, 65, !dbg !15
  %46 = sdiv i32 %20, 65, !dbg !15
  %47 = sdiv i32 %21, 65, !dbg !15
  %48 = sdiv i32 %14, 4225, !dbg !16
  %49 = sdiv i32 %15, 4225, !dbg !16
  %50 = sdiv i32 %16, 4225, !dbg !16
  %51 = sdiv i32 %17, 4225, !dbg !16
  %52 = sdiv i32 %18, 4225, !dbg !16
  %53 = sdiv i32 %19, 4225, !dbg !16
  %54 = sdiv i32 %20, 4225, !dbg !16
  %55 = sdiv i32 %21, 4225, !dbg !16
  %.frozen = freeze i32 %22, !dbg !16
  %56 = sdiv i32 %.frozen, 4225, !dbg !16
  %.frozen8 = freeze i32 %23, !dbg !16
  %57 = sdiv i32 %.frozen8, 4225, !dbg !16
  %.frozen10 = freeze i32 %24, !dbg !16
  %58 = sdiv i32 %.frozen10, 4225, !dbg !16
  %.frozen12 = freeze i32 %25, !dbg !16
  %59 = sdiv i32 %.frozen12, 4225, !dbg !16
  %.frozen14 = freeze i32 %26, !dbg !16
  %60 = sdiv i32 %.frozen14, 4225, !dbg !16
  %.frozen16 = freeze i32 %27, !dbg !16
  %61 = sdiv i32 %.frozen16, 4225, !dbg !16
  %.frozen18 = freeze i32 %28, !dbg !16
  %62 = sdiv i32 %.frozen18, 4225, !dbg !16
  %.frozen20 = freeze i32 %29, !dbg !16
  %63 = sdiv i32 %.frozen20, 4225, !dbg !16
  %64 = mul i32 %56, 4225, !dbg !17
  %.decomposed = sub i32 %.frozen, %64, !dbg !17
  %65 = mul i32 %57, 4225, !dbg !17
  %.decomposed9 = sub i32 %.frozen8, %65, !dbg !17
  %66 = mul i32 %58, 4225, !dbg !17
  %.decomposed11 = sub i32 %.frozen10, %66, !dbg !17
  %67 = mul i32 %59, 4225, !dbg !17
  %.decomposed13 = sub i32 %.frozen12, %67, !dbg !17
  %68 = mul i32 %60, 4225, !dbg !17
  %.decomposed15 = sub i32 %.frozen14, %68, !dbg !17
  %69 = mul i32 %61, 4225, !dbg !17
  %.decomposed17 = sub i32 %.frozen16, %69, !dbg !17
  %70 = mul i32 %62, 4225, !dbg !17
  %.decomposed19 = sub i32 %.frozen18, %70, !dbg !17
  %71 = mul i32 %63, 4225, !dbg !17
  %.decomposed21 = sub i32 %.frozen20, %71, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !18
  %73 = insertelement <2 x i32> %72, i32 %40, i64 1, !dbg !18
  %74 = srem <2 x i32> %73, splat (i32 65), !dbg !18
  %75 = icmp sgt <2 x i32> %74, zeroinitializer, !dbg !19
  %76 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !18
  %77 = insertelement <2 x i32> %76, i32 %41, i64 1, !dbg !18
  %78 = srem <2 x i32> %77, splat (i32 65), !dbg !18
  %79 = icmp sgt <2 x i32> %78, zeroinitializer, !dbg !19
  %80 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %81 = insertelement <2 x i32> %80, i32 %42, i64 1, !dbg !18
  %82 = srem <2 x i32> %81, splat (i32 65), !dbg !18
  %83 = icmp sgt <2 x i32> %82, zeroinitializer, !dbg !19
  %84 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %85 = insertelement <2 x i32> %84, i32 %43, i64 1, !dbg !18
  %86 = srem <2 x i32> %85, splat (i32 65), !dbg !18
  %87 = icmp sgt <2 x i32> %86, zeroinitializer, !dbg !19
  %88 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %89 = insertelement <2 x i32> %88, i32 %44, i64 1, !dbg !18
  %90 = srem <2 x i32> %89, splat (i32 65), !dbg !18
  %91 = icmp sgt <2 x i32> %90, zeroinitializer, !dbg !19
  %92 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !18
  %93 = insertelement <2 x i32> %92, i32 %45, i64 1, !dbg !18
  %94 = srem <2 x i32> %93, splat (i32 65), !dbg !18
  %95 = icmp sgt <2 x i32> %94, zeroinitializer, !dbg !19
  %96 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %97 = insertelement <2 x i32> %96, i32 %46, i64 1, !dbg !18
  %98 = srem <2 x i32> %97, splat (i32 65), !dbg !18
  %99 = icmp sgt <2 x i32> %98, zeroinitializer, !dbg !19
  %100 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %101 = insertelement <2 x i32> %100, i32 %47, i64 1, !dbg !18
  %102 = srem <2 x i32> %101, splat (i32 65), !dbg !18
  %103 = icmp sgt <2 x i32> %102, zeroinitializer, !dbg !19
  %shift = shufflevector <2 x i1> %75, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %104 = and <2 x i1> %75, %shift, !dbg !20
  %105 = extractelement <2 x i1> %104, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %79, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %106 = and <2 x i1> %79, %shift1, !dbg !20
  %107 = extractelement <2 x i1> %106, i64 0, !dbg !20
  %shift2 = shufflevector <2 x i1> %83, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %108 = and <2 x i1> %83, %shift2, !dbg !20
  %109 = extractelement <2 x i1> %108, i64 0, !dbg !20
  %shift3 = shufflevector <2 x i1> %87, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %110 = and <2 x i1> %87, %shift3, !dbg !20
  %111 = extractelement <2 x i1> %110, i64 0, !dbg !20
  %shift4 = shufflevector <2 x i1> %91, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %112 = and <2 x i1> %91, %shift4, !dbg !20
  %113 = extractelement <2 x i1> %112, i64 0, !dbg !20
  %shift5 = shufflevector <2 x i1> %95, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %114 = and <2 x i1> %95, %shift5, !dbg !20
  %115 = extractelement <2 x i1> %114, i64 0, !dbg !20
  %shift6 = shufflevector <2 x i1> %99, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %116 = and <2 x i1> %99, %shift6, !dbg !20
  %117 = extractelement <2 x i1> %116, i64 0, !dbg !20
  %shift7 = shufflevector <2 x i1> %103, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %118 = and <2 x i1> %103, %shift7, !dbg !20
  %119 = extractelement <2 x i1> %118, i64 0, !dbg !20
  %120 = extractelement <2 x i32> %74, i64 0, !dbg !21
  %121 = add nsw i32 %120, -65, !dbg !21
  %122 = extractelement <2 x i32> %78, i64 0, !dbg !21
  %123 = add nsw i32 %122, -65, !dbg !21
  %124 = extractelement <2 x i32> %82, i64 0, !dbg !21
  %125 = add nsw i32 %124, -65, !dbg !21
  %126 = extractelement <2 x i32> %86, i64 0, !dbg !21
  %127 = add nsw i32 %126, -65, !dbg !21
  %128 = extractelement <2 x i32> %90, i64 0, !dbg !21
  %129 = add nsw i32 %128, -65, !dbg !21
  %130 = extractelement <2 x i32> %94, i64 0, !dbg !21
  %131 = add nsw i32 %130, -65, !dbg !21
  %132 = extractelement <2 x i32> %98, i64 0, !dbg !21
  %133 = add nsw i32 %132, -65, !dbg !21
  %134 = extractelement <2 x i32> %102, i64 0, !dbg !21
  %135 = add nsw i32 %134, -65, !dbg !21
  %136 = extractelement <2 x i32> %74, i64 1, !dbg !22
  %137 = shl nsw i32 %136, 6, !dbg !22
  %138 = extractelement <2 x i32> %78, i64 1, !dbg !22
  %139 = shl nsw i32 %138, 6, !dbg !22
  %140 = extractelement <2 x i32> %82, i64 1, !dbg !22
  %141 = shl nsw i32 %140, 6, !dbg !22
  %142 = extractelement <2 x i32> %86, i64 1, !dbg !22
  %143 = shl nsw i32 %142, 6, !dbg !22
  %144 = extractelement <2 x i32> %90, i64 1, !dbg !22
  %145 = shl nsw i32 %144, 6, !dbg !22
  %146 = extractelement <2 x i32> %94, i64 1, !dbg !22
  %147 = shl nsw i32 %146, 6, !dbg !22
  %148 = extractelement <2 x i32> %98, i64 1, !dbg !22
  %149 = shl nsw i32 %148, 6, !dbg !22
  %150 = extractelement <2 x i32> %102, i64 1, !dbg !22
  %151 = shl nsw i32 %150, 6, !dbg !22
  %152 = shl nsw i32 %48, 12, !dbg !23
  %153 = shl nsw i32 %49, 12, !dbg !23
  %154 = shl nsw i32 %50, 12, !dbg !23
  %155 = shl nsw i32 %51, 12, !dbg !23
  %156 = shl nsw i32 %52, 12, !dbg !23
  %157 = shl nsw i32 %53, 12, !dbg !23
  %158 = shl nsw i32 %54, 12, !dbg !23
  %159 = shl nsw i32 %55, 12, !dbg !23
  %160 = add nsw i32 %121, %152, !dbg !24
  %161 = add nsw i32 %160, %137, !dbg !25
  %162 = add nsw i32 %123, %153, !dbg !24
  %163 = add nsw i32 %162, %139, !dbg !25
  %164 = add nsw i32 %125, %154, !dbg !24
  %165 = add nsw i32 %164, %141, !dbg !25
  %166 = add nsw i32 %127, %155, !dbg !24
  %167 = add nsw i32 %166, %143, !dbg !25
  %168 = add nsw i32 %129, %156, !dbg !24
  %169 = add nsw i32 %168, %145, !dbg !25
  %170 = add nsw i32 %131, %157, !dbg !24
  %171 = add nsw i32 %170, %147, !dbg !25
  %172 = add nsw i32 %133, %158, !dbg !24
  %173 = add nsw i32 %172, %149, !dbg !25
  %174 = add nsw i32 %135, %159, !dbg !24
  %175 = add nsw i32 %174, %151, !dbg !25
  %176 = sext i32 %161 to i64, !dbg !26
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !26
  %178 = sext i32 %163 to i64, !dbg !26
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !26
  %180 = sext i32 %165 to i64, !dbg !26
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !26
  %182 = sext i32 %167 to i64, !dbg !26
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !26
  %184 = sext i32 %169 to i64, !dbg !26
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !26
  %186 = sext i32 %171 to i64, !dbg !26
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !26
  %188 = sext i32 %173 to i64, !dbg !26
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !26
  %190 = sext i32 %175 to i64, !dbg !26
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !26
  %192 = and i1 %30, %105, !dbg !27
  %193 = and i1 %107, %30, !dbg !27
  %194 = and i1 %109, %30, !dbg !27
  %195 = and i1 %111, %30, !dbg !27
  %196 = and i1 %31, %113, !dbg !27
  %197 = and i1 %31, %115, !dbg !27
  %198 = and i1 %31, %117, !dbg !27
  %199 = and i1 %31, %119, !dbg !27
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %192, i32 0, i1 %192) #2, !dbg !28
  %201 = bitcast i32 %200 to float, !dbg !28
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %193, i32 0, i1 %193) #2, !dbg !28
  %203 = bitcast i32 %202 to float, !dbg !28
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %194, i32 0, i1 %194) #2, !dbg !28
  %205 = bitcast i32 %204 to float, !dbg !28
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %195, i32 0, i1 %195) #2, !dbg !28
  %207 = bitcast i32 %206 to float, !dbg !28
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %196, i32 0, i1 %196) #2, !dbg !28
  %209 = bitcast i32 %208 to float, !dbg !28
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %197, i32 0, i1 %197) #2, !dbg !28
  %211 = bitcast i32 %210 to float, !dbg !28
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %198, i32 0, i1 %198) #2, !dbg !28
  %213 = bitcast i32 %212 to float, !dbg !28
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %199, i32 0, i1 %199) #2, !dbg !28
  %215 = bitcast i32 %214 to float, !dbg !28
  %216 = fcmp olt float %201, 0.000000e+00, !dbg !29
  %217 = fcmp olt float %203, 0.000000e+00, !dbg !29
  %218 = fcmp olt float %205, 0.000000e+00, !dbg !29
  %219 = fcmp olt float %207, 0.000000e+00, !dbg !29
  %220 = fcmp olt float %209, 0.000000e+00, !dbg !29
  %221 = fcmp olt float %211, 0.000000e+00, !dbg !29
  %222 = fcmp olt float %213, 0.000000e+00, !dbg !29
  %223 = fcmp olt float %215, 0.000000e+00, !dbg !29
  %224 = select i1 %216, float 0.000000e+00, float %201, !dbg !33
  %225 = select i1 %217, float 0.000000e+00, float %203, !dbg !33
  %226 = select i1 %218, float 0.000000e+00, float %205, !dbg !33
  %227 = select i1 %219, float 0.000000e+00, float %207, !dbg !33
  %228 = select i1 %220, float 0.000000e+00, float %209, !dbg !33
  %229 = select i1 %221, float 0.000000e+00, float %211, !dbg !33
  %230 = select i1 %222, float 0.000000e+00, float %213, !dbg !33
  %231 = select i1 %223, float 0.000000e+00, float %215, !dbg !33
  %232 = sext i32 %14 to i64, !dbg !34
  %233 = getelementptr float, ptr addrspace(1) %1, i64 %232, !dbg !34
  %234 = sext i32 %18 to i64, !dbg !34
  %235 = getelementptr float, ptr addrspace(1) %1, i64 %234, !dbg !34
  %236 = bitcast float %224 to i32, !dbg !35
  %237 = select i1 %105, i32 %236, i32 0, !dbg !36
  %238 = bitcast float %225 to i32, !dbg !35
  %239 = select i1 %107, i32 %238, i32 0, !dbg !36
  %240 = bitcast float %226 to i32, !dbg !35
  %241 = select i1 %109, i32 %240, i32 0, !dbg !36
  %242 = bitcast float %227 to i32, !dbg !35
  %243 = select i1 %111, i32 %242, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %239, i32 %241, i32 %243, ptr addrspace(1) %233, i1 %30) #2, !dbg !35
  %244 = bitcast float %228 to i32, !dbg !35
  %245 = select i1 %113, i32 %244, i32 0, !dbg !36
  %246 = bitcast float %229 to i32, !dbg !35
  %247 = select i1 %115, i32 %246, i32 0, !dbg !36
  %248 = bitcast float %230 to i32, !dbg !35
  %249 = select i1 %117, i32 %248, i32 0, !dbg !36
  %250 = bitcast float %231 to i32, !dbg !35
  %251 = select i1 %119, i32 %250, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %247, i32 %249, i32 %251, ptr addrspace(1) %235, i1 %31) #2, !dbg !35
  %252 = mul i32 %56, 4256, !dbg !37
  %253 = mul i32 %57, 4256, !dbg !37
  %254 = mul i32 %58, 4256, !dbg !37
  %255 = mul i32 %59, 4256, !dbg !37
  %256 = mul i32 %60, 4256, !dbg !37
  %257 = mul i32 %61, 4256, !dbg !37
  %258 = mul i32 %62, 4256, !dbg !37
  %259 = mul i32 %63, 4256, !dbg !37
  %260 = add i32 %252, %.decomposed, !dbg !38
  %261 = add i32 %253, %.decomposed9, !dbg !38
  %262 = add i32 %254, %.decomposed11, !dbg !38
  %263 = add i32 %255, %.decomposed13, !dbg !38
  %264 = add i32 %256, %.decomposed15, !dbg !38
  %265 = add i32 %257, %.decomposed17, !dbg !38
  %266 = add i32 %258, %.decomposed19, !dbg !38
  %267 = add i32 %259, %.decomposed21, !dbg !38
  %268 = sext i32 %260 to i64, !dbg !39
  %269 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !39
  %270 = sext i32 %261 to i64, !dbg !39
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %270, !dbg !39
  %272 = sext i32 %262 to i64, !dbg !39
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %272, !dbg !39
  %274 = sext i32 %263 to i64, !dbg !39
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %274, !dbg !39
  %276 = sext i32 %264 to i64, !dbg !39
  %277 = getelementptr float, ptr addrspace(1) %2, i64 %276, !dbg !39
  %278 = sext i32 %265 to i64, !dbg !39
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %278, !dbg !39
  %280 = sext i32 %266 to i64, !dbg !39
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %280, !dbg !39
  %282 = sext i32 %267 to i64, !dbg !39
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %282, !dbg !39
  %284 = zext nneg i32 %9 to i64, !dbg !40
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %285, i32 %200, i32 %202, i32 %204, i32 %206, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %286 = zext nneg i32 %10 to i64, !dbg !40
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !40
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !40
  %289 = zext nneg i32 %11 to i64, !dbg !40
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %289, !dbg !40
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !40
  %292 = zext nneg i32 %12 to i64, !dbg !40
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %292, !dbg !40
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !40
  %295 = zext nneg i32 %13 to i64, !dbg !40
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %295, !dbg !40
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %285, i32 %208, i32 %210, i32 %212, i32 %214, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %298 = load i32, ptr addrspace(3) %287, align 4, !dbg !40
  %299 = load i32, ptr addrspace(3) %290, align 4, !dbg !40
  %300 = load i32, ptr addrspace(3) %293, align 4, !dbg !40
  %301 = load i32, ptr addrspace(3) %296, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %269, i1 %32) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %271, i1 %33) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %273, i1 %34) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %297, ptr addrspace(1) %275, i1 %35) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %277, i1 %36) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %279, i1 %37) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %281, i1 %38) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %283, i1 %39) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3zk36qur2k7euplfn5vp26omqotaujkohsfstktnpe2iyhf7wx4.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_5", linkageName: "triton_poi_fused_constant_pad_nd_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 46, scope: !7)
!23 = !DILocation(line: 35, column: 56, scope: !7)
!24 = !DILocation(line: 35, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 51, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 68, scope: !7)
!28 = !DILocation(line: 35, column: 61, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 40, column: 25, scope: !7)
!35 = !DILocation(line: 40, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 33, scope: !7)
!37 = !DILocation(line: 41, column: 35, scope: !7)
!38 = !DILocation(line: 41, column: 30, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 46, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
