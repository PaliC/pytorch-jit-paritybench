; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 8, !dbg !13
  %14 = and i32 %11, 255, !dbg !14
  %15 = or disjoint i32 %13, %14, !dbg !15
  %16 = icmp slt i32 %15, 131, !dbg !16
  %17 = mul i32 %10, 2096, !dbg !17
  %18 = add i32 %15, %17, !dbg !18
  %19 = add i32 %18, 131, !dbg !18
  %20 = add i32 %18, 262, !dbg !18
  %21 = add i32 %18, 393, !dbg !18
  %22 = add i32 %18, 524, !dbg !18
  %23 = add i32 %18, 655, !dbg !18
  %24 = add i32 %18, 786, !dbg !18
  %25 = add i32 %18, 917, !dbg !18
  %26 = add i32 %18, 1048, !dbg !18
  %27 = add i32 %18, 1179, !dbg !18
  %28 = add i32 %18, 1310, !dbg !18
  %29 = add i32 %18, 1441, !dbg !18
  %30 = add i32 %18, 1572, !dbg !18
  %31 = add i32 %18, 1703, !dbg !18
  %32 = add i32 %18, 1834, !dbg !18
  %33 = add i32 %18, 1965, !dbg !18
  %34 = sext i32 %18 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = sext i32 %19 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = sext i32 %20 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = sext i32 %21 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = sext i32 %22 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !19
  %44 = sext i32 %23 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !19
  %46 = sext i32 %24 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !19
  %48 = sext i32 %25 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !19
  %50 = sext i32 %26 to i64, !dbg !19
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !19
  %52 = sext i32 %27 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !19
  %54 = sext i32 %28 to i64, !dbg !19
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !19
  %56 = sext i32 %29 to i64, !dbg !19
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !19
  %58 = sext i32 %30 to i64, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !19
  %60 = sext i32 %31 to i64, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !19
  %62 = sext i32 %32 to i64, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !19
  %64 = sext i32 %33 to i64, !dbg !19
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #4, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #4, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #4, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #4, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %16) #4, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #4, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %16) #4, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #4, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #4, !dbg !20
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %16) #4, !dbg !20
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %16) #4, !dbg !20
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %16) #4, !dbg !20
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %16) #4, !dbg !20
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %16) #4, !dbg !20
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %16) #4, !dbg !20
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %16) #4, !dbg !20
  %82 = sext i32 %15 to i64, !dbg !21
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !21
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %16) #4, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !23
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %16) #4, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %16) #4, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %16) #4, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %82, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %16) #4, !dbg !30
  %94 = fadd float %87, 0x3EE4F8B580000000, !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %95, 0, !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %96, 0, !dbg !32
  br i1 %.not.i, label %102, label %97, !dbg !32

97:                                               ; preds = %9
  br i1 %.not1.i, label %100, label %98, !dbg !32

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

102:                                              ; preds = %9
  br i1 %.not1.i, label %105, label %103, !dbg !32

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !32
  %107 = insertelement <16 x i32> poison, i32 %81, i64 0, !dbg !20
  %108 = insertelement <16 x i32> %107, i32 %80, i64 1, !dbg !20
  %109 = insertelement <16 x i32> %108, i32 %79, i64 2, !dbg !20
  %110 = insertelement <16 x i32> %109, i32 %78, i64 3, !dbg !20
  %111 = insertelement <16 x i32> %110, i32 %77, i64 4, !dbg !20
  %112 = insertelement <16 x i32> %111, i32 %76, i64 5, !dbg !20
  %113 = insertelement <16 x i32> %112, i32 %75, i64 6, !dbg !20
  %114 = insertelement <16 x i32> %113, i32 %74, i64 7, !dbg !20
  %115 = insertelement <16 x i32> %114, i32 %73, i64 8, !dbg !20
  %116 = insertelement <16 x i32> %115, i32 %72, i64 9, !dbg !20
  %117 = insertelement <16 x i32> %116, i32 %71, i64 10, !dbg !20
  %118 = insertelement <16 x i32> %117, i32 %70, i64 11, !dbg !20
  %119 = insertelement <16 x i32> %118, i32 %69, i64 12, !dbg !20
  %120 = insertelement <16 x i32> %119, i32 %68, i64 13, !dbg !20
  %121 = insertelement <16 x i32> %120, i32 %67, i64 14, !dbg !20
  %122 = insertelement <16 x i32> %121, i32 %66, i64 15, !dbg !20
  %123 = bitcast <16 x i32> %122 to <16 x float>, !dbg !20
  %124 = bitcast i32 %93 to float, !dbg !30
  %125 = shl i32 %10, 4, !dbg !33
  %126 = shl i32 %11, 2, !dbg !11
  %127 = and i32 %126, 12, !dbg !11
  %128 = or disjoint i32 %125, %127, !dbg !34
  %.frozen = freeze i32 %128, !dbg !35
  %129 = sdiv i32 %.frozen, 256, !dbg !35
  %130 = mul i32 %129, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %130, !dbg !36
  %131 = lshr i32 %11, 2, !dbg !14
  %132 = and i32 %131, 63, !dbg !14
  %133 = or disjoint i32 %132, %13, !dbg !15
  %134 = icmp slt i32 %13, 0, !dbg !16
  %135 = or disjoint i32 %133, 128, !dbg !15
  %136 = icmp slt i32 %135, 131, !dbg !16
  %137 = or disjoint i32 %133, 64, !dbg !15
  %138 = icmp slt i32 %137, 131, !dbg !16
  %139 = icmp slt i32 %133, 131, !dbg !16
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %141 = insertelement <16 x i32> poison, i32 %84, i64 0, !dbg !38
  %142 = bitcast <16 x i32> %141 to <16 x float>, !dbg !38
  %143 = shufflevector <16 x float> %142, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %144 = fsub <16 x float> %123, %143, !dbg !38
  %145 = insertelement <16 x float> poison, float %140, i64 0, !dbg !39
  %146 = shufflevector <16 x float> %145, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %147 = fmul <16 x float> %144, %146, !dbg !39
  %148 = insertelement <16 x i32> poison, i32 %89, i64 0, !dbg !40
  %149 = bitcast <16 x i32> %148 to <16 x float>, !dbg !40
  %150 = shufflevector <16 x float> %149, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %151 = fmul <16 x float> %147, %150, !dbg !40
  %152 = insertelement <16 x i32> poison, i32 %91, i64 0, !dbg !41
  %153 = bitcast <16 x i32> %152 to <16 x float>, !dbg !41
  %154 = shufflevector <16 x float> %153, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %155 = fadd <16 x float> %151, %154, !dbg !41
  %156 = fcmp ogt <16 x float> %155, zeroinitializer, !dbg !42
  %157 = extractelement <16 x float> %155, i64 15, !dbg !43
  %158 = fmul float %157, %124, !dbg !44
  %159 = extractelement <16 x float> %155, i64 14, !dbg !43
  %160 = fmul float %159, %124, !dbg !44
  %161 = extractelement <16 x float> %155, i64 13, !dbg !43
  %162 = fmul float %161, %124, !dbg !44
  %163 = extractelement <16 x float> %155, i64 12, !dbg !43
  %164 = fmul float %163, %124, !dbg !44
  %165 = extractelement <16 x float> %155, i64 11, !dbg !43
  %166 = fmul float %165, %124, !dbg !44
  %167 = extractelement <16 x float> %155, i64 10, !dbg !43
  %168 = fmul float %167, %124, !dbg !44
  %169 = extractelement <16 x float> %155, i64 9, !dbg !43
  %170 = fmul float %169, %124, !dbg !44
  %171 = extractelement <16 x float> %155, i64 8, !dbg !43
  %172 = fmul float %171, %124, !dbg !44
  %173 = extractelement <16 x float> %155, i64 7, !dbg !43
  %174 = fmul float %173, %124, !dbg !44
  %175 = extractelement <16 x float> %155, i64 6, !dbg !43
  %176 = fmul float %175, %124, !dbg !44
  %177 = extractelement <16 x float> %155, i64 5, !dbg !43
  %178 = fmul float %177, %124, !dbg !44
  %179 = extractelement <16 x float> %155, i64 4, !dbg !43
  %180 = fmul float %179, %124, !dbg !44
  %181 = extractelement <16 x float> %155, i64 3, !dbg !43
  %182 = fmul float %181, %124, !dbg !44
  %183 = extractelement <16 x float> %155, i64 2, !dbg !43
  %184 = fmul float %183, %124, !dbg !44
  %185 = extractelement <16 x float> %155, i64 1, !dbg !43
  %186 = fmul float %185, %124, !dbg !44
  %187 = extractelement <16 x float> %155, i64 0, !dbg !43
  %188 = fmul float %187, %124, !dbg !44
  %189 = extractelement <16 x i1> %156, i64 15, !dbg !43
  %190 = select i1 %189, float %157, float %158, !dbg !43
  %191 = extractelement <16 x i1> %156, i64 14, !dbg !43
  %192 = select i1 %191, float %159, float %160, !dbg !43
  %193 = extractelement <16 x i1> %156, i64 13, !dbg !43
  %194 = select i1 %193, float %161, float %162, !dbg !43
  %195 = extractelement <16 x i1> %156, i64 12, !dbg !43
  %196 = select i1 %195, float %163, float %164, !dbg !43
  %197 = extractelement <16 x i1> %156, i64 11, !dbg !43
  %198 = select i1 %197, float %165, float %166, !dbg !43
  %199 = extractelement <16 x i1> %156, i64 10, !dbg !43
  %200 = select i1 %199, float %167, float %168, !dbg !43
  %201 = extractelement <16 x i1> %156, i64 9, !dbg !43
  %202 = select i1 %201, float %169, float %170, !dbg !43
  %203 = extractelement <16 x i1> %156, i64 8, !dbg !43
  %204 = select i1 %203, float %171, float %172, !dbg !43
  %205 = extractelement <16 x i1> %156, i64 7, !dbg !43
  %206 = select i1 %205, float %173, float %174, !dbg !43
  %207 = extractelement <16 x i1> %156, i64 6, !dbg !43
  %208 = select i1 %207, float %175, float %176, !dbg !43
  %209 = extractelement <16 x i1> %156, i64 5, !dbg !43
  %210 = select i1 %209, float %177, float %178, !dbg !43
  %211 = extractelement <16 x i1> %156, i64 4, !dbg !43
  %212 = select i1 %211, float %179, float %180, !dbg !43
  %213 = extractelement <16 x i1> %156, i64 3, !dbg !43
  %214 = select i1 %213, float %181, float %182, !dbg !43
  %215 = extractelement <16 x i1> %156, i64 2, !dbg !43
  %216 = select i1 %215, float %183, float %184, !dbg !43
  %217 = extractelement <16 x i1> %156, i64 1, !dbg !43
  %218 = select i1 %217, float %185, float %186, !dbg !43
  %219 = extractelement <16 x i1> %156, i64 0, !dbg !43
  %220 = select i1 %219, float %187, float %188, !dbg !43
  %221 = shl i32 %133, 8, !dbg !45
  %222 = shl i32 %137, 8, !dbg !45
  %223 = shl i32 %135, 8, !dbg !45
  %224 = or disjoint i32 %221, 49152, !dbg !45
  %225 = mul i32 %129, 33536, !dbg !46
  %226 = add i32 %225, %.decomposed, !dbg !47
  %227 = add i32 %226, %221, !dbg !48
  %228 = add i32 %226, %222, !dbg !48
  %229 = add i32 %226, %223, !dbg !48
  %230 = add i32 %226, %224, !dbg !48
  %231 = sext i32 %227 to i64, !dbg !49
  %232 = getelementptr float, ptr addrspace(1) %6, i64 %231, !dbg !49
  %233 = sext i32 %228 to i64, !dbg !49
  %234 = getelementptr float, ptr addrspace(1) %6, i64 %233, !dbg !49
  %235 = sext i32 %229 to i64, !dbg !49
  %236 = getelementptr float, ptr addrspace(1) %6, i64 %235, !dbg !49
  %237 = sext i32 %230 to i64, !dbg !49
  %238 = getelementptr float, ptr addrspace(1) %6, i64 %237, !dbg !49
  %239 = shl i32 %11, 4, !dbg !50
  %240 = and i32 %239, 4080, !dbg !50
  %241 = and i32 %126, 1020, !dbg !50
  %242 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %240, !dbg !50
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240, !dbg !50
  %244 = bitcast float %190 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !50
  %245 = or disjoint i32 %240, 1, !dbg !50
  %246 = getelementptr float, ptr addrspace(3) %242, i32 %245, !dbg !50
  %247 = bitcast float %192 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !50
  %248 = or disjoint i32 %240, 2, !dbg !50
  %249 = getelementptr float, ptr addrspace(3) %242, i32 %248, !dbg !50
  %250 = bitcast float %194 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !50
  %251 = or disjoint i32 %240, 3, !dbg !50
  %252 = getelementptr float, ptr addrspace(3) %242, i32 %251, !dbg !50
  %253 = bitcast float %196 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !50
  %254 = or disjoint i32 %240, 4, !dbg !50
  %255 = getelementptr float, ptr addrspace(3) %242, i32 %254, !dbg !50
  %256 = bitcast float %198 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !50
  %257 = or disjoint i32 %240, 5, !dbg !50
  %258 = getelementptr float, ptr addrspace(3) %242, i32 %257, !dbg !50
  %259 = bitcast float %200 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !50
  %260 = or disjoint i32 %240, 6, !dbg !50
  %261 = getelementptr float, ptr addrspace(3) %242, i32 %260, !dbg !50
  %262 = bitcast float %202 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !50
  %263 = or disjoint i32 %240, 7, !dbg !50
  %264 = getelementptr float, ptr addrspace(3) %242, i32 %263, !dbg !50
  %265 = bitcast float %204 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !50
  %266 = or disjoint i32 %240, 8, !dbg !50
  %267 = getelementptr float, ptr addrspace(3) %242, i32 %266, !dbg !50
  %268 = bitcast float %206 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !50
  %269 = or disjoint i32 %240, 9, !dbg !50
  %270 = getelementptr float, ptr addrspace(3) %242, i32 %269, !dbg !50
  %271 = bitcast float %208 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !50
  %272 = or disjoint i32 %240, 10, !dbg !50
  %273 = getelementptr float, ptr addrspace(3) %242, i32 %272, !dbg !50
  %274 = bitcast float %210 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !50
  %275 = or disjoint i32 %240, 11, !dbg !50
  %276 = getelementptr float, ptr addrspace(3) %242, i32 %275, !dbg !50
  %277 = bitcast float %212 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !50
  %278 = or disjoint i32 %240, 12, !dbg !50
  %279 = getelementptr float, ptr addrspace(3) %242, i32 %278, !dbg !50
  %280 = bitcast float %214 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !50
  %281 = or disjoint i32 %240, 13, !dbg !50
  %282 = getelementptr float, ptr addrspace(3) %242, i32 %281, !dbg !50
  %283 = bitcast float %216 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !50
  %284 = or disjoint i32 %240, 14, !dbg !50
  %285 = getelementptr float, ptr addrspace(3) %242, i32 %284, !dbg !50
  %286 = bitcast float %218 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !50
  %287 = or disjoint i32 %240, 15, !dbg !50
  %288 = getelementptr float, ptr addrspace(3) %242, i32 %287, !dbg !50
  %289 = bitcast float %220 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %290 = and i32 %11, 252, !dbg !50
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !50
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %241, !dbg !50
  %293 = or disjoint i32 %241, 1024, !dbg !50
  %294 = lshr exact i32 %293, 2, !dbg !50
  %295 = and i32 %294, 508, !dbg !50
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !50
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %293, !dbg !50
  %298 = load <4 x i32>, ptr addrspace(3) %297, align 16, !dbg !50
  %299 = or disjoint i32 %241, 2048, !dbg !50
  %300 = lshr exact i32 %299, 2, !dbg !50
  %301 = and i32 %300, 764, !dbg !50
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !50
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %299, !dbg !50
  %304 = load <4 x i32>, ptr addrspace(3) %303, align 16, !dbg !50
  %305 = or disjoint i32 %241, 3072, !dbg !50
  %306 = lshr exact i32 %305, 2, !dbg !50
  %307 = and i32 %306, 1020, !dbg !50
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %307, !dbg !50
  %309 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %305, !dbg !50
  %310 = load <4 x i32>, ptr addrspace(3) %309, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %292, align 16, !dbg !50
  %311 = getelementptr inbounds i8, ptr addrspace(3) %292, i32 4, !dbg !50
  %.extract18 = load i32, ptr addrspace(3) %311, align 4, !dbg !50
  %312 = getelementptr inbounds i8, ptr addrspace(3) %292, i32 8, !dbg !50
  %.extract19 = load i32, ptr addrspace(3) %312, align 8, !dbg !50
  %313 = getelementptr inbounds i8, ptr addrspace(3) %292, i32 12, !dbg !50
  %.extract20 = load i32, ptr addrspace(3) %313, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %232, i1 %139) #4, !dbg !50
  %.extract21 = extractelement <4 x i32> %298, i64 0, !dbg !50
  %.extract22 = extractelement <4 x i32> %298, i64 1, !dbg !50
  %.extract23 = extractelement <4 x i32> %298, i64 2, !dbg !50
  %.extract24 = extractelement <4 x i32> %298, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %234, i1 %138) #4, !dbg !50
  %.extract25 = extractelement <4 x i32> %304, i64 0, !dbg !50
  %.extract26 = extractelement <4 x i32> %304, i64 1, !dbg !50
  %.extract27 = extractelement <4 x i32> %304, i64 2, !dbg !50
  %.extract28 = extractelement <4 x i32> %304, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %236, i1 %136) #4, !dbg !50
  %.extract29 = extractelement <4 x i32> %310, i64 0, !dbg !50
  %.extract30 = extractelement <4 x i32> %310, i64 1, !dbg !50
  %.extract31 = extractelement <4 x i32> %310, i64 2, !dbg !50
  %.extract32 = extractelement <4 x i32> %310, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %238, i1 %134) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caprzmeyxnstor3taxev322jmu34u442jkilf3zykmu7pd2zt7yj.py", directory: "inductor_cache/ap")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 22, column: 33, scope: !7)
!34 = !DILocation(line: 23, column: 23, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 34, scope: !7)
!46 = !DILocation(line: 53, column: 45, scope: !7)
!47 = !DILocation(line: 53, column: 30, scope: !7)
!48 = !DILocation(line: 53, column: 39, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
