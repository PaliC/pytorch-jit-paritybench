; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 2, !dbg !12
  %15 = and i32 %13, 62, !dbg !12
  %16 = lshr i32 %12, 1, !dbg !12
  %17 = and i32 %16, 63, !dbg !12
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = or disjoint i32 %11, %17, !dbg !13
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = icmp slt i32 %19, 64, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = lshr i32 %12, 5, !dbg !17
  %25 = and i32 %24, 3, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = or disjoint i32 %23, %14, !dbg !18
  %28 = icmp slt i32 %26, 64, !dbg !19
  %29 = icmp slt i32 %27, 64, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %30 = sdiv i32 %.frozen, 16, !dbg !20
  %31 = mul i32 %30, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = shl i32 %26, 4, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = shl i32 %30, 10, !dbg !24
  %35 = add i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %20, %28, !dbg !27
  %39 = and i1 %21, %29, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = shl i32 %12, 3, !dbg !28
  %44 = and i32 %43, 248, !dbg !28
  %45 = or disjoint i32 %44, %25, !dbg !28
  %46 = and i32 %13, 254, !dbg !28
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %44, !dbg !28
  %48 = getelementptr inbounds float, ptr addrspace(3) %47, i32 %45, !dbg !28
  %49 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #4, !dbg !28
  %50 = or disjoint i32 %45, 4, !dbg !28
  %51 = lshr i32 %50, 2, !dbg !28
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !28
  %53 = getelementptr float, ptr addrspace(3) %52, i32 %50, !dbg !28
  %54 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %55 = lshr i32 %46, 2, !dbg !28
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %55, !dbg !28
  %57 = getelementptr inbounds float, ptr addrspace(3) %56, i32 %46, !dbg !28
  %58 = load float, ptr addrspace(3) %57, align 4, !dbg !28
  %59 = or disjoint i32 %46, 1, !dbg !28
  %60 = getelementptr inbounds float, ptr addrspace(3) %56, i32 %59, !dbg !28
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !28
  %62 = shl i32 %19, 6, !dbg !29
  %63 = add i32 %27, %62, !dbg !30
  %64 = sext i32 %63 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !31
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %39) #4, !dbg !32
  %67 = sext i32 %27 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !33
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %29) #4, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !35
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %29) #4, !dbg !36
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !36
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !36
  %74 = bitcast i32 %72 to float, !dbg !36
  %75 = bitcast i32 %73 to float, !dbg !36
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !37
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %29) #4, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !39
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %29) #4, !dbg !40
  %80 = fadd float %74, 0x3EE4F8B580000000, !dbg !41
  %81 = fadd float %75, 0x3EE4F8B580000000, !dbg !41
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %82, 0, !dbg !42
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %83, 0, !dbg !42
  br i1 %.not.i, label %89, label %84, !dbg !42

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !42

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !42

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !42
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i3 = icmp eq i32 %94, 0, !dbg !42
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i6 = icmp eq i32 %95, 0, !dbg !42
  br i1 %.not.i3, label %101, label %96, !dbg !42

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %99, label %97, !dbg !42

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %104, label %102, !dbg !42

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit7, !dbg !42

__nv_sqrtf.exit7:                                 ; preds = %97, %99, %102, %104
  %.0.i5 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !42
  %106 = extractvalue { i32, i32 } %66, 1, !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = extractvalue { i32, i32 } %69, 1, !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = fsub float %107, %109, !dbg !43
  %111 = extractvalue { i32, i32 } %66, 0, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = extractvalue { i32, i32 } %69, 0, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = fsub float %112, %114, !dbg !43
  %116 = extractvalue { i32, i32 } %79, 1, !dbg !40
  %117 = bitcast i32 %116 to float, !dbg !40
  %118 = extractvalue { i32, i32 } %79, 0, !dbg !40
  %119 = bitcast i32 %118 to float, !dbg !40
  %120 = extractvalue { i32, i32 } %77, 1, !dbg !38
  %121 = bitcast i32 %120 to float, !dbg !38
  %122 = extractvalue { i32, i32 } %77, 0, !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !44
  %126 = fmul float %115, %124, !dbg !45
  %127 = fmul float %110, %125, !dbg !45
  %128 = fmul float %126, %123, !dbg !46
  %129 = fmul float %127, %121, !dbg !46
  %130 = fadd float %128, %119, !dbg !47
  %131 = fadd float %129, %117, !dbg !47
  %132 = fadd float %58, %130, !dbg !48
  %133 = fadd float %61, %131, !dbg !48
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %64, !dbg !49
  %135 = bitcast float %132 to i32, !dbg !50
  %136 = bitcast float %133 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 %39) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csau6uhtgfznjxh7jglbzqlw7hzdjkq3kjpw6qsw5bknzvg4kp6j.py", directory: "inductor_cache/sa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 38, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 45, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
