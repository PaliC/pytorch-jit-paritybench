; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_div_eq_masked_fill_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 4, !dbg !15
  %15 = srem i32 %12, 4, !dbg !15
  %16 = sdiv i32 %11, 16, !dbg !16
  %17 = shl nsw i32 %14, 2, !dbg !17
  %18 = shl nsw i32 %15, 2, !dbg !17
  %19 = shl nsw i32 %16, 4, !dbg !18
  %20 = add i32 %17, %19, !dbg !19
  %21 = add i32 %19, %18, !dbg !19
  %22 = sext i32 %20 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %13) #1, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !21
  %28 = shl i32 %11, 2, !dbg !22
  %29 = shl i32 %12, 2, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #1, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !24
  %36 = or disjoint i32 %17, 1, !dbg !25
  %37 = or disjoint i32 %18, 1, !dbg !25
  %38 = add i32 %36, %19, !dbg !26
  %39 = add i32 %37, %19, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !28
  %46 = or disjoint i32 %28, 1, !dbg !29
  %47 = or disjoint i32 %29, 1, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !31
  %54 = or disjoint i32 %17, 2, !dbg !32
  %55 = or disjoint i32 %18, 2, !dbg !32
  %56 = add i32 %54, %19, !dbg !33
  %57 = add i32 %55, %19, !dbg !33
  %58 = sext i32 %56 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !34
  %60 = sext i32 %57 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !35
  %64 = or disjoint i32 %28, 2, !dbg !36
  %65 = or disjoint i32 %29, 2, !dbg !36
  %66 = sext i32 %64 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !37
  %68 = sext i32 %65 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = or disjoint i32 %17, 3, !dbg !39
  %75 = or disjoint i32 %18, 3, !dbg !39
  %76 = add i32 %74, %19, !dbg !40
  %77 = add i32 %75, %19, !dbg !40
  %78 = sext i32 %76 to i64, !dbg !41
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !41
  %80 = sext i32 %77 to i64, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !41
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !42
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !42
  %84 = or disjoint i32 %28, 3, !dbg !43
  %85 = or disjoint i32 %29, 3, !dbg !43
  %86 = sext i32 %84 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !44
  %88 = sext i32 %85 to i64, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %13) #1, !dbg !45
  %91 = bitcast i32 %90 to float, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %13) #1, !dbg !45
  %93 = bitcast i32 %92 to float, !dbg !45
  %94 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %95 = insertelement <2 x i32> %94, i32 %52, i64 1, !dbg !24
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !24
  %97 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !46
  %98 = insertelement <2 x i32> %97, i32 %44, i64 1, !dbg !46
  %99 = and <2 x i32> %98, splat (i32 2147483647), !dbg !46
  %100 = icmp eq <2 x i32> %99, zeroinitializer, !dbg !46
  %101 = select <2 x i1> %100, <2 x float> splat (float -1.000000e+09), <2 x float> %96, !dbg !47
  %102 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %103 = insertelement <2 x i32> %102, i32 %53, i64 1, !dbg !24
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !24
  %105 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !46
  %106 = insertelement <2 x i32> %105, i32 %45, i64 1, !dbg !46
  %107 = and <2 x i32> %106, splat (i32 2147483647), !dbg !46
  %108 = icmp eq <2 x i32> %107, zeroinitializer, !dbg !46
  %109 = select <2 x i1> %108, <2 x float> splat (float -1.000000e+09), <2 x float> %104, !dbg !47
  %110 = extractelement <2 x float> %101, i64 0, !dbg !48
  %111 = extractelement <2 x float> %101, i64 1, !dbg !49
  %112 = fcmp ogt float %110, %111, !dbg !50
  %113 = extractelement <2 x float> %109, i64 0, !dbg !48
  %114 = extractelement <2 x float> %109, i64 1, !dbg !49
  %115 = fcmp ogt float %113, %114, !dbg !50
  %116 = fcmp uno float %110, 0.000000e+00, !dbg !54
  %117 = fcmp uno float %113, 0.000000e+00, !dbg !54
  %118 = or i1 %116, %112, !dbg !55
  %119 = or i1 %117, %115, !dbg !55
  %120 = select i1 %118, float %110, float %111, !dbg !56
  %121 = select i1 %119, float %113, float %114, !dbg !56
  %122 = fcmp uno float %120, 0.000000e+00, !dbg !57
  %123 = fcmp uno float %121, 0.000000e+00, !dbg !57
  %124 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !59
  %125 = insertelement <4 x i32> %124, i32 %82, i64 1, !dbg !59
  %126 = insertelement <4 x i32> %125, i32 %63, i64 2, !dbg !59
  %127 = insertelement <4 x i32> %126, i32 %62, i64 3, !dbg !59
  %128 = and <4 x i32> %127, splat (i32 2147483647), !dbg !59
  %129 = icmp eq <4 x i32> %128, zeroinitializer, !dbg !59
  %130 = extractelement <4 x i1> %129, i64 3, !dbg !60
  %131 = select i1 %130, float -1.000000e+09, float %71, !dbg !60
  %132 = extractelement <4 x i1> %129, i64 2, !dbg !60
  %133 = select i1 %132, float -1.000000e+09, float %73, !dbg !60
  %134 = fcmp ogt float %120, %131, !dbg !61
  %135 = fcmp ogt float %121, %133, !dbg !61
  %136 = or i1 %122, %134, !dbg !62
  %137 = or i1 %123, %135, !dbg !62
  %138 = select i1 %136, float %120, float %131, !dbg !63
  %139 = select i1 %137, float %121, float %133, !dbg !63
  %140 = extractelement <4 x i1> %129, i64 1, !dbg !64
  %141 = select i1 %140, float -1.000000e+09, float %91, !dbg !64
  %142 = extractelement <4 x i1> %129, i64 0, !dbg !64
  %143 = select i1 %142, float -1.000000e+09, float %93, !dbg !64
  %144 = fcmp ogt float %138, %141, !dbg !65
  %145 = fcmp ogt float %139, %143, !dbg !65
  %146 = fcmp uno float %138, 0.000000e+00, !dbg !67
  %147 = fcmp uno float %139, 0.000000e+00, !dbg !67
  %148 = or i1 %146, %144, !dbg !68
  %149 = or i1 %147, %145, !dbg !68
  %150 = select i1 %148, float %138, float %141, !dbg !69
  %151 = select i1 %149, float %139, float %143, !dbg !69
  %152 = fsub float %110, %150, !dbg !48
  %153 = fsub float %113, %151, !dbg !48
  %154 = fmul float %152, 0x3FF7154760000000, !dbg !70
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !70
  %156 = fmul float %153, 0x3FF7154760000000, !dbg !70
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !70
  %158 = fsub float %111, %150, !dbg !49
  %159 = fsub float %114, %151, !dbg !49
  %160 = fmul float %158, 0x3FF7154760000000, !dbg !71
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #1, !dbg !71
  %162 = fmul float %159, 0x3FF7154760000000, !dbg !71
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !71
  %164 = fadd float %155, %161, !dbg !72
  %165 = fadd float %157, %163, !dbg !72
  %166 = fsub float %131, %150, !dbg !73
  %167 = fsub float %133, %151, !dbg !73
  %168 = fmul float %166, 0x3FF7154760000000, !dbg !74
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #1, !dbg !74
  %170 = fmul float %167, 0x3FF7154760000000, !dbg !74
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #1, !dbg !74
  %172 = fadd float %164, %169, !dbg !75
  %173 = fadd float %165, %171, !dbg !75
  %174 = fsub float %141, %150, !dbg !76
  %175 = fsub float %143, %151, !dbg !76
  %176 = fmul float %174, 0x3FF7154760000000, !dbg !77
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #1, !dbg !77
  %178 = fmul float %175, 0x3FF7154760000000, !dbg !77
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #1, !dbg !77
  %180 = fadd float %172, %177, !dbg !78
  %181 = fadd float %173, %179, !dbg !78
  %182 = sext i32 %11 to i64, !dbg !79
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !79
  %184 = bitcast float %150 to i32, !dbg !80
  %185 = bitcast float %151 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %183, i1 %13) #1, !dbg !80
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %182, !dbg !81
  %187 = bitcast float %180 to i32, !dbg !82
  %188 = bitcast float %181 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %187, i32 %188, ptr addrspace(1) %186, i1 %13) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4cu4farctickfdxy3cgnepf4emgz2e5yb3pqh6cmbn3uppqlkmr.py", directory: "inductor_cache/4c")
!4 = !{ptr @triton_poi_fused__softmax_div_eq_masked_fill_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_div_eq_masked_fill_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_div_eq_masked_fill_3", linkageName: "triton_poi_fused__softmax_div_eq_masked_fill_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 32, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 49, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 30, column: 31, scope: !7)
!31 = !DILocation(line: 30, column: 42, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 31, column: 42, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 50, scope: !7)
!36 = !DILocation(line: 32, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 31, scope: !7)
!42 = !DILocation(line: 33, column: 50, scope: !7)
!43 = !DILocation(line: 34, column: 35, scope: !7)
!44 = !DILocation(line: 34, column: 31, scope: !7)
!45 = !DILocation(line: 34, column: 42, scope: !7)
!46 = !DILocation(line: 36, column: 19, scope: !7)
!47 = !DILocation(line: 40, column: 32, scope: !7)
!48 = !DILocation(line: 53, column: 19, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 44, column: 41, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 48, column: 42, scope: !7)
!59 = !DILocation(line: 49, column: 21, scope: !7)
!60 = !DILocation(line: 47, column: 34, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !58)
!62 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !58)
!63 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !58)
!64 = !DILocation(line: 51, column: 34, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !66)
!66 = !DILocation(line: 52, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !66)
!70 = !DILocation(line: 54, column: 24, scope: !7)
!71 = !DILocation(line: 56, column: 24, scope: !7)
!72 = !DILocation(line: 57, column: 20, scope: !7)
!73 = !DILocation(line: 58, column: 20, scope: !7)
!74 = !DILocation(line: 59, column: 24, scope: !7)
!75 = !DILocation(line: 60, column: 20, scope: !7)
!76 = !DILocation(line: 61, column: 20, scope: !7)
!77 = !DILocation(line: 62, column: 24, scope: !7)
!78 = !DILocation(line: 63, column: 20, scope: !7)
!79 = !DILocation(line: 64, column: 25, scope: !7)
!80 = !DILocation(line: 64, column: 37, scope: !7)
!81 = !DILocation(line: 65, column: 25, scope: !7)
!82 = !DILocation(line: 65, column: 37, scope: !7)
!83 = !DILocation(line: 65, column: 4, scope: !7)
