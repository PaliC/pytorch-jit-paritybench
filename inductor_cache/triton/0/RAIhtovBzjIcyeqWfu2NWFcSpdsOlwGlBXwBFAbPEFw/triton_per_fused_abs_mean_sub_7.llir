; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = lshr i32 %8, 5, !dbg !14
  %12 = and i32 %11, 7, !dbg !14
  %13 = or disjoint i32 %12, 8, !dbg !14
  %14 = or disjoint i32 %12, 16, !dbg !14
  %15 = or disjoint i32 %12, 24, !dbg !14
  %16 = or disjoint i32 %12, 32, !dbg !14
  %17 = or disjoint i32 %12, 40, !dbg !14
  %18 = or disjoint i32 %12, 48, !dbg !14
  %19 = or disjoint i32 %12, 56, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %20 = sdiv i32 %.frozen, 128, !dbg !15
  %21 = mul i32 %20, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = shl nuw nsw i32 %12, 6, !dbg !17
  %23 = shl nuw nsw i32 %13, 6, !dbg !17
  %24 = shl nuw nsw i32 %14, 6, !dbg !17
  %25 = shl nuw nsw i32 %15, 6, !dbg !17
  %26 = shl nuw nsw i32 %16, 6, !dbg !17
  %27 = shl nuw nsw i32 %17, 6, !dbg !17
  %28 = shl nuw nsw i32 %18, 6, !dbg !17
  %29 = shl nuw nsw i32 %19, 6, !dbg !17
  %30 = shl nsw i32 %20, 7, !dbg !18
  %31 = or disjoint i32 %30, %12, !dbg !19
  %32 = or disjoint i32 %30, %13, !dbg !19
  %33 = or disjoint i32 %30, %14, !dbg !19
  %34 = or disjoint i32 %30, %15, !dbg !19
  %35 = or disjoint i32 %30, %16, !dbg !19
  %36 = or disjoint i32 %30, %17, !dbg !19
  %37 = or disjoint i32 %30, %18, !dbg !19
  %38 = or disjoint i32 %30, %19, !dbg !19
  %39 = or disjoint i32 %31, 64, !dbg !19
  %40 = or disjoint i32 %31, 72, !dbg !19
  %41 = or disjoint i32 %31, 80, !dbg !19
  %42 = or disjoint i32 %31, 88, !dbg !19
  %43 = or disjoint i32 %31, 96, !dbg !19
  %44 = or disjoint i32 %31, 104, !dbg !19
  %45 = or disjoint i32 %31, 112, !dbg !19
  %46 = or disjoint i32 %31, 120, !dbg !19
  %47 = sdiv i32 %31, 64, !dbg !20
  %48 = sdiv i32 %32, 64, !dbg !20
  %49 = sdiv i32 %33, 64, !dbg !20
  %50 = sdiv i32 %34, 64, !dbg !20
  %51 = sdiv i32 %35, 64, !dbg !20
  %52 = sdiv i32 %36, 64, !dbg !20
  %53 = sdiv i32 %37, 64, !dbg !20
  %54 = sdiv i32 %38, 64, !dbg !20
  %55 = sdiv i32 %39, 64, !dbg !20
  %56 = sdiv i32 %40, 64, !dbg !20
  %57 = sdiv i32 %41, 64, !dbg !20
  %58 = sdiv i32 %42, 64, !dbg !20
  %59 = sdiv i32 %43, 64, !dbg !20
  %60 = sdiv i32 %44, 64, !dbg !20
  %61 = sdiv i32 %45, 64, !dbg !20
  %62 = sdiv i32 %46, 64, !dbg !20
  %63 = srem i32 %47, 64, !dbg !21
  %64 = srem i32 %48, 64, !dbg !21
  %65 = srem i32 %49, 64, !dbg !21
  %66 = srem i32 %50, 64, !dbg !21
  %67 = srem i32 %51, 64, !dbg !21
  %68 = srem i32 %52, 64, !dbg !21
  %69 = srem i32 %53, 64, !dbg !21
  %70 = srem i32 %54, 64, !dbg !21
  %71 = srem i32 %55, 64, !dbg !21
  %72 = srem i32 %56, 64, !dbg !21
  %73 = srem i32 %57, 64, !dbg !21
  %74 = srem i32 %58, 64, !dbg !21
  %75 = srem i32 %59, 64, !dbg !21
  %76 = srem i32 %60, 64, !dbg !21
  %77 = srem i32 %61, 64, !dbg !21
  %78 = srem i32 %62, 64, !dbg !21
  %79 = shl nsw i32 %63, 12, !dbg !22
  %80 = shl nsw i32 %64, 12, !dbg !22
  %81 = shl nsw i32 %65, 12, !dbg !22
  %82 = shl nsw i32 %66, 12, !dbg !22
  %83 = shl nsw i32 %67, 12, !dbg !22
  %84 = shl nsw i32 %68, 12, !dbg !22
  %85 = shl nsw i32 %69, 12, !dbg !22
  %86 = shl nsw i32 %70, 12, !dbg !22
  %87 = shl nsw i32 %71, 12, !dbg !22
  %88 = shl nsw i32 %72, 12, !dbg !22
  %89 = shl nsw i32 %73, 12, !dbg !22
  %90 = shl nsw i32 %74, 12, !dbg !22
  %91 = shl nsw i32 %75, 12, !dbg !22
  %92 = shl nsw i32 %76, 12, !dbg !22
  %93 = shl nsw i32 %77, 12, !dbg !22
  %94 = shl nsw i32 %78, 12, !dbg !22
  %95 = or disjoint i32 %79, %22, !dbg !23
  %96 = or disjoint i32 %80, %23, !dbg !23
  %97 = or disjoint i32 %81, %24, !dbg !23
  %98 = or disjoint i32 %82, %25, !dbg !23
  %99 = or disjoint i32 %83, %26, !dbg !23
  %100 = or disjoint i32 %84, %27, !dbg !23
  %101 = or disjoint i32 %85, %28, !dbg !23
  %102 = or disjoint i32 %86, %29, !dbg !23
  %103 = or disjoint i32 %87, %22, !dbg !23
  %104 = shl nsw i32 %.decomposed, 13, !dbg !24
  %105 = add i32 %31, %104, !dbg !25
  %106 = add i32 %32, %104, !dbg !25
  %107 = add i32 %33, %104, !dbg !25
  %108 = add i32 %34, %104, !dbg !25
  %109 = add i32 %35, %104, !dbg !25
  %110 = add i32 %36, %104, !dbg !25
  %111 = add i32 %37, %104, !dbg !25
  %112 = add i32 %38, %104, !dbg !25
  %113 = add i32 %39, %104, !dbg !25
  %114 = add i32 %40, %104, !dbg !25
  %115 = add i32 %41, %104, !dbg !25
  %116 = add i32 %42, %104, !dbg !25
  %117 = add i32 %43, %104, !dbg !25
  %118 = add i32 %44, %104, !dbg !25
  %119 = add i32 %45, %104, !dbg !25
  %120 = add i32 %46, %104, !dbg !25
  %121 = sdiv i32 %105, 262144, !dbg !26
  %122 = sdiv i32 %106, 262144, !dbg !26
  %123 = sdiv i32 %107, 262144, !dbg !26
  %124 = sdiv i32 %108, 262144, !dbg !26
  %125 = sdiv i32 %109, 262144, !dbg !26
  %126 = sdiv i32 %110, 262144, !dbg !26
  %127 = sdiv i32 %111, 262144, !dbg !26
  %128 = sdiv i32 %112, 262144, !dbg !26
  %129 = sdiv i32 %113, 262144, !dbg !26
  %130 = sdiv i32 %114, 262144, !dbg !26
  %131 = sdiv i32 %115, 262144, !dbg !26
  %132 = sdiv i32 %116, 262144, !dbg !26
  %133 = sdiv i32 %117, 262144, !dbg !26
  %134 = sdiv i32 %118, 262144, !dbg !26
  %135 = sdiv i32 %119, 262144, !dbg !26
  %136 = sdiv i32 %120, 262144, !dbg !26
  %137 = shl nsw i32 %121, 18, !dbg !27
  %138 = shl nsw i32 %122, 18, !dbg !27
  %139 = shl nsw i32 %123, 18, !dbg !27
  %140 = shl nsw i32 %124, 18, !dbg !27
  %141 = shl nsw i32 %125, 18, !dbg !27
  %142 = shl nsw i32 %126, 18, !dbg !27
  %143 = shl nsw i32 %127, 18, !dbg !27
  %144 = shl nsw i32 %128, 18, !dbg !27
  %145 = shl nsw i32 %129, 18, !dbg !27
  %146 = shl nsw i32 %130, 18, !dbg !27
  %147 = shl nsw i32 %131, 18, !dbg !27
  %148 = shl nsw i32 %132, 18, !dbg !27
  %149 = shl nsw i32 %133, 18, !dbg !27
  %150 = shl nsw i32 %134, 18, !dbg !27
  %151 = shl nsw i32 %135, 18, !dbg !27
  %152 = shl nsw i32 %136, 18, !dbg !27
  %153 = add i32 %95, %137, !dbg !28
  %154 = add i32 %96, %138, !dbg !28
  %155 = add i32 %97, %139, !dbg !28
  %156 = add i32 %98, %140, !dbg !28
  %157 = add i32 %99, %141, !dbg !28
  %158 = add i32 %100, %142, !dbg !28
  %159 = add i32 %101, %143, !dbg !28
  %160 = add i32 %102, %144, !dbg !28
  %161 = add i32 %103, %145, !dbg !28
  %162 = sdiv i32 %105, 4096, !dbg !29
  %163 = sdiv i32 %106, 4096, !dbg !29
  %164 = sdiv i32 %107, 4096, !dbg !29
  %165 = sdiv i32 %108, 4096, !dbg !29
  %166 = sdiv i32 %109, 4096, !dbg !29
  %167 = sdiv i32 %110, 4096, !dbg !29
  %168 = sdiv i32 %111, 4096, !dbg !29
  %169 = sdiv i32 %112, 4096, !dbg !29
  %170 = sdiv i32 %113, 4096, !dbg !29
  %171 = sdiv i32 %114, 4096, !dbg !29
  %172 = sdiv i32 %115, 4096, !dbg !29
  %173 = sdiv i32 %116, 4096, !dbg !29
  %174 = sdiv i32 %117, 4096, !dbg !29
  %175 = sdiv i32 %118, 4096, !dbg !29
  %176 = sdiv i32 %119, 4096, !dbg !29
  %177 = sdiv i32 %120, 4096, !dbg !29
  %178 = srem i32 %162, 64, !dbg !30
  %179 = srem i32 %163, 64, !dbg !30
  %180 = srem i32 %164, 64, !dbg !30
  %181 = srem i32 %165, 64, !dbg !30
  %182 = srem i32 %166, 64, !dbg !30
  %183 = srem i32 %167, 64, !dbg !30
  %184 = srem i32 %168, 64, !dbg !30
  %185 = srem i32 %169, 64, !dbg !30
  %186 = srem i32 %170, 64, !dbg !30
  %187 = srem i32 %171, 64, !dbg !30
  %188 = srem i32 %172, 64, !dbg !30
  %189 = srem i32 %173, 64, !dbg !30
  %190 = srem i32 %174, 64, !dbg !30
  %191 = srem i32 %175, 64, !dbg !30
  %192 = srem i32 %176, 64, !dbg !30
  %193 = srem i32 %177, 64, !dbg !30
  %194 = add i32 %153, %178, !dbg !31
  %195 = add nsw i32 %154, %179, !dbg !31
  %196 = add nsw i32 %155, %180, !dbg !31
  %197 = add nsw i32 %156, %181, !dbg !31
  %198 = add nsw i32 %157, %182, !dbg !31
  %199 = add nsw i32 %158, %183, !dbg !31
  %200 = add nsw i32 %159, %184, !dbg !31
  %201 = add nsw i32 %160, %185, !dbg !31
  %202 = add i32 %161, %186, !dbg !31
  %203 = or disjoint i32 %22, %88, !dbg !28
  %204 = or disjoint i32 %203, 512, !dbg !28
  %205 = add i32 %204, %146, !dbg !23
  %206 = add nsw i32 %205, %187, !dbg !31
  %207 = or disjoint i32 %22, %89, !dbg !28
  %208 = or disjoint i32 %207, 1024, !dbg !28
  %209 = add i32 %208, %147, !dbg !23
  %210 = add nsw i32 %209, %188, !dbg !31
  %211 = or disjoint i32 %22, %90, !dbg !28
  %212 = or disjoint i32 %211, 1536, !dbg !28
  %213 = add i32 %212, %148, !dbg !23
  %214 = add nsw i32 %213, %189, !dbg !31
  %215 = or disjoint i32 %22, %91, !dbg !28
  %216 = or disjoint i32 %215, 2048, !dbg !28
  %217 = add i32 %216, %149, !dbg !23
  %218 = add nsw i32 %217, %190, !dbg !31
  %219 = or disjoint i32 %22, %92, !dbg !28
  %220 = or disjoint i32 %219, 2560, !dbg !28
  %221 = add i32 %220, %150, !dbg !23
  %222 = add nsw i32 %221, %191, !dbg !31
  %223 = or disjoint i32 %22, %93, !dbg !28
  %224 = or disjoint i32 %223, 3072, !dbg !28
  %225 = add i32 %224, %151, !dbg !23
  %226 = add nsw i32 %225, %192, !dbg !31
  %227 = or disjoint i32 %22, %94, !dbg !28
  %228 = or disjoint i32 %227, 3584, !dbg !28
  %229 = add i32 %228, %152, !dbg !23
  %230 = add nsw i32 %229, %193, !dbg !31
  %231 = sext i32 %194 to i64, !dbg !32
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !32
  %233 = sext i32 %195 to i64, !dbg !32
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !32
  %235 = sext i32 %196 to i64, !dbg !32
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !32
  %237 = sext i32 %197 to i64, !dbg !32
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !32
  %239 = sext i32 %198 to i64, !dbg !32
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !32
  %241 = sext i32 %199 to i64, !dbg !32
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !32
  %243 = sext i32 %200 to i64, !dbg !32
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !32
  %245 = sext i32 %201 to i64, !dbg !32
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !32
  %247 = sext i32 %202 to i64, !dbg !32
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !32
  %249 = sext i32 %206 to i64, !dbg !32
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !32
  %251 = sext i32 %210 to i64, !dbg !32
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !32
  %253 = sext i32 %214 to i64, !dbg !32
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !32
  %255 = sext i32 %218 to i64, !dbg !32
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !32
  %257 = sext i32 %222 to i64, !dbg !32
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !32
  %259 = sext i32 %226 to i64, !dbg !32
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !32
  %261 = sext i32 %230 to i64, !dbg !32
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !32
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #3, !dbg !33
  %264 = bitcast i32 %263 to float, !dbg !33
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !33
  %266 = bitcast i32 %265 to float, !dbg !33
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #3, !dbg !33
  %268 = bitcast i32 %267 to float, !dbg !33
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !33
  %270 = bitcast i32 %269 to float, !dbg !33
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !33
  %272 = bitcast i32 %271 to float, !dbg !33
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #3, !dbg !33
  %274 = bitcast i32 %273 to float, !dbg !33
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !33
  %276 = bitcast i32 %275 to float, !dbg !33
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #3, !dbg !33
  %278 = bitcast i32 %277 to float, !dbg !33
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #3, !dbg !33
  %280 = bitcast i32 %279 to float, !dbg !33
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #3, !dbg !33
  %282 = bitcast i32 %281 to float, !dbg !33
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #3, !dbg !33
  %284 = bitcast i32 %283 to float, !dbg !33
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !33
  %286 = bitcast i32 %285 to float, !dbg !33
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #3, !dbg !33
  %288 = bitcast i32 %287 to float, !dbg !33
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #3, !dbg !33
  %290 = bitcast i32 %289 to float, !dbg !33
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #3, !dbg !33
  %292 = bitcast i32 %291 to float, !dbg !33
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #3, !dbg !33
  %294 = bitcast i32 %293 to float, !dbg !33
  %295 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !34
  %296 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !34
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !34
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !34
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !34
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !34
  %301 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !34
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !34
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !34
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !34
  %305 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !34
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !34
  %307 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !34
  %308 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !34
  %309 = getelementptr float, ptr addrspace(1) %1, i64 %259, !dbg !34
  %310 = getelementptr float, ptr addrspace(1) %1, i64 %261, !dbg !34
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 true) #3, !dbg !35
  %312 = bitcast i32 %311 to float, !dbg !35
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #3, !dbg !35
  %314 = bitcast i32 %313 to float, !dbg !35
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #3, !dbg !35
  %316 = bitcast i32 %315 to float, !dbg !35
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #3, !dbg !35
  %318 = bitcast i32 %317 to float, !dbg !35
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #3, !dbg !35
  %320 = bitcast i32 %319 to float, !dbg !35
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #3, !dbg !35
  %322 = bitcast i32 %321 to float, !dbg !35
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #3, !dbg !35
  %324 = bitcast i32 %323 to float, !dbg !35
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #3, !dbg !35
  %326 = bitcast i32 %325 to float, !dbg !35
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #3, !dbg !35
  %328 = bitcast i32 %327 to float, !dbg !35
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #3, !dbg !35
  %330 = bitcast i32 %329 to float, !dbg !35
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #3, !dbg !35
  %332 = bitcast i32 %331 to float, !dbg !35
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #3, !dbg !35
  %334 = bitcast i32 %333 to float, !dbg !35
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #3, !dbg !35
  %336 = bitcast i32 %335 to float, !dbg !35
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #3, !dbg !35
  %338 = bitcast i32 %337 to float, !dbg !35
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #3, !dbg !35
  %340 = bitcast i32 %339 to float, !dbg !35
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #3, !dbg !35
  %342 = bitcast i32 %341 to float, !dbg !35
  %343 = fsub float %264, %312, !dbg !36
  %344 = fsub float %266, %314, !dbg !36
  %345 = fsub float %268, %316, !dbg !36
  %346 = fsub float %270, %318, !dbg !36
  %347 = fsub float %272, %320, !dbg !36
  %348 = fsub float %274, %322, !dbg !36
  %349 = fsub float %276, %324, !dbg !36
  %350 = fsub float %278, %326, !dbg !36
  %351 = fsub float %280, %328, !dbg !36
  %352 = fsub float %282, %330, !dbg !36
  %353 = fsub float %284, %332, !dbg !36
  %354 = fsub float %286, %334, !dbg !36
  %355 = fsub float %288, %336, !dbg !36
  %356 = fsub float %290, %338, !dbg !36
  %357 = fsub float %292, %340, !dbg !36
  %358 = fsub float %294, %342, !dbg !36
  %359 = tail call float @llvm.fabs.f32(float %343), !dbg !37
  %360 = tail call float @llvm.fabs.f32(float %344), !dbg !37
  %361 = tail call float @llvm.fabs.f32(float %345), !dbg !37
  %362 = tail call float @llvm.fabs.f32(float %346), !dbg !37
  %363 = tail call float @llvm.fabs.f32(float %347), !dbg !37
  %364 = tail call float @llvm.fabs.f32(float %348), !dbg !37
  %365 = tail call float @llvm.fabs.f32(float %349), !dbg !37
  %366 = tail call float @llvm.fabs.f32(float %350), !dbg !37
  %367 = tail call float @llvm.fabs.f32(float %351), !dbg !37
  %368 = tail call float @llvm.fabs.f32(float %352), !dbg !37
  %369 = tail call float @llvm.fabs.f32(float %353), !dbg !37
  %370 = tail call float @llvm.fabs.f32(float %354), !dbg !37
  %371 = tail call float @llvm.fabs.f32(float %355), !dbg !37
  %372 = tail call float @llvm.fabs.f32(float %356), !dbg !37
  %373 = tail call float @llvm.fabs.f32(float %357), !dbg !37
  %374 = tail call float @llvm.fabs.f32(float %358), !dbg !37
  %375 = fadd float %359, %360, !dbg !38
  %376 = fadd float %375, %361, !dbg !38
  %377 = fadd float %376, %362, !dbg !38
  %378 = fadd float %377, %363, !dbg !38
  %379 = fadd float %378, %364, !dbg !38
  %380 = fadd float %379, %365, !dbg !38
  %381 = fadd float %380, %366, !dbg !38
  %382 = fadd float %381, %367, !dbg !38
  %383 = fadd float %382, %368, !dbg !38
  %384 = fadd float %383, %369, !dbg !38
  %385 = fadd float %384, %370, !dbg !38
  %386 = fadd float %385, %371, !dbg !38
  %387 = fadd float %386, %372, !dbg !38
  %388 = fadd float %387, %373, !dbg !38
  %389 = fadd float %388, %374, !dbg !38
  %390 = shl nuw nsw i32 %9, 3, !dbg !43
  %391 = or disjoint i32 %390, %12, !dbg !43
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %391, !dbg !43
  %393 = bitcast float %389 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %394 = icmp slt i32 %8, 256, !dbg !43
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %396 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %394) #3, !dbg !43
  %397 = bitcast i32 %396 to float, !dbg !43
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !43
  %399 = bitcast i32 %398 to float, !dbg !43
  %400 = fadd float %397, %399, !dbg !38
  %401 = bitcast float %400 to i32, !dbg !43
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 2, i32 31), !dbg !43
  %403 = bitcast i32 %402 to float, !dbg !43
  %404 = fadd float %400, %403, !dbg !38
  %405 = bitcast float %404 to i32, !dbg !43
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 1, i32 31), !dbg !43
  %407 = bitcast i32 %406 to float, !dbg !43
  %408 = fadd float %404, %407, !dbg !38
  %409 = and i32 %8, 7, !dbg !43
  %410 = icmp eq i32 %409, 0, !dbg !43
  %411 = and i1 %394, %410, !dbg !43
  %412 = bitcast float %408 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %412, i1 %411) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !43
  %414 = load i32, ptr addrspace(3) %413, align 16, !dbg !43
  %415 = sext i32 %10 to i64, !dbg !44
  %416 = getelementptr float, ptr addrspace(1) %2, i64 %415, !dbg !44
  %417 = icmp eq i32 %12, 0, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %414, ptr addrspace(1) %416, i1 %417) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfwdzuz47qjhpv4kh3e3x6dn55agnhqws33db56spewnipwrasv7.py", directory: "inductor_cache/fw")
!4 = !{ptr @triton_per_fused_abs_mean_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_7", linkageName: "triton_per_fused_abs_mean_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 65, scope: !7)
!19 = !DILocation(line: 33, column: 61, scope: !7)
!20 = !DILocation(line: 33, column: 72, scope: !7)
!21 = !DILocation(line: 33, column: 78, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 33, column: 47, scope: !7)
!24 = !DILocation(line: 33, column: 113, scope: !7)
!25 = !DILocation(line: 33, column: 108, scope: !7)
!26 = !DILocation(line: 33, column: 120, scope: !7)
!27 = !DILocation(line: 33, column: 93, scope: !7)
!28 = !DILocation(line: 33, column: 85, scope: !7)
!29 = !DILocation(line: 33, column: 160, scope: !7)
!30 = !DILocation(line: 33, column: 168, scope: !7)
!31 = !DILocation(line: 33, column: 132, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 175, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 175, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 23, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 38, column: 24, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
