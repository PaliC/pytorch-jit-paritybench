; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 4, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 14, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = icmp slt i32 %23, 1408, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %26 = shl i32 %25, 4, !dbg !16
  %27 = lshr i32 %20, 3, !dbg !17
  %28 = and i32 %27, 15, !dbg !17
  %29 = or disjoint i32 %26, %28, !dbg !18
  %30 = icmp slt i32 %29, 16, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %31 = sdiv i32 %.frozen, 352, !dbg !20
  %32 = mul i32 %31, 352, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %.frozen16 = freeze i32 %29, !dbg !22
  %33 = sdiv i32 %.frozen16, 4, !dbg !22
  %34 = mul i32 %33, 4, !dbg !23
  %.decomposed17 = sub i32 %.frozen16, %34, !dbg !23
  %35 = icmp slt i32 %.decomposed, 88, !dbg !24
  %36 = mul i32 %29, 88, !dbg !25
  %37 = mul i32 %31, 1408, !dbg !26
  %38 = add i32 %36, %37, !dbg !27
  %39 = add i32 %38, %.decomposed, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = and i1 %35, %30, !dbg !30
  %43 = and i1 %24, %42, !dbg !31
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !32
  %45 = add nsw i32 %.decomposed, -88, !dbg !33
  %46 = icmp ult i32 %45, 88, !dbg !33
  %47 = mul nsw i32 %.decomposed17, 88, !dbg !34
  %48 = mul i32 %33, 440, !dbg !35
  %49 = mul i32 %31, 2200, !dbg !36
  %50 = add i32 %49, 528, !dbg !37
  %51 = add i32 %50, %47, !dbg !38
  %52 = add i32 %51, %48, !dbg !39
  %53 = add i32 %52, %45, !dbg !40
  %54 = sext i32 %53 to i64, !dbg !41
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !41
  %56 = and i1 %30, %46, !dbg !42
  %57 = and i1 %24, %56, !dbg !43
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !44
  %59 = add i32 %38, %45, !dbg !45
  %60 = sext i32 %59 to i64, !dbg !46
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !46
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !47
  %63 = sext i32 %45 to i64, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !48
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !49
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !50
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !51
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !51
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !51
  %70 = bitcast i32 %68 to float, !dbg !51
  %71 = bitcast i32 %69 to float, !dbg !51
  %72 = fadd float %70, 0x3F50624DE0000000, !dbg !52
  %73 = fadd float %71, 0x3F50624DE0000000, !dbg !52
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %74, 0, !dbg !53
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %75, 0, !dbg !53
  br i1 %.not.i, label %81, label %76, !dbg !53

76:                                               ; preds = %17
  br i1 %.not1.i, label %79, label %77, !dbg !53

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

81:                                               ; preds = %17
  br i1 %.not1.i, label %84, label %82, !dbg !53

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !53
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %86, 0, !dbg !53
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !53
  br i1 %.not.i1, label %93, label %88, !dbg !53

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !53

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !53

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !53
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !54
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !55
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !56
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !57
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %102, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !58
  %104 = add nsw i32 %.decomposed, -176, !dbg !59
  %105 = icmp ult i32 %104, 88, !dbg !59
  %106 = add i32 %38, %104, !dbg !60
  %107 = sext i32 %106 to i64, !dbg !61
  %108 = getelementptr float, ptr addrspace(1) %7, i64 %107, !dbg !61
  %109 = and i1 %30, %105, !dbg !62
  %110 = and i1 %24, %109, !dbg !63
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #3, !dbg !64
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !65
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %112, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #3, !dbg !66
  %114 = icmp sgt i32 %.decomposed, 263, !dbg !67
  %115 = add nsw i32 %.decomposed, -264, !dbg !68
  %116 = add i32 %38, %115, !dbg !69
  %117 = sext i32 %116 to i64, !dbg !70
  %118 = getelementptr float, ptr addrspace(1) %8, i64 %117, !dbg !70
  %119 = and i1 %114, %30, !dbg !71
  %120 = and i1 %24, %119, !dbg !72
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %118, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !73
  %122 = sext i32 %115 to i64, !dbg !74
  %123 = getelementptr float, ptr addrspace(1) %9, i64 %122, !dbg !74
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %123, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !75
  %125 = getelementptr float, ptr addrspace(1) %10, i64 %122, !dbg !76
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %125, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !77
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !77
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !77
  %129 = bitcast i32 %127 to float, !dbg !77
  %130 = bitcast i32 %128 to float, !dbg !77
  %131 = fadd float %129, 0x3F50624DE0000000, !dbg !78
  %132 = fadd float %130, 0x3F50624DE0000000, !dbg !78
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i6 = icmp eq i32 %133, 0, !dbg !79
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i9 = icmp eq i32 %134, 0, !dbg !79
  br i1 %.not.i6, label %140, label %135, !dbg !79

135:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %138, label %136, !dbg !79

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

140:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %143, label %141, !dbg !79

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

__nv_sqrtf.exit10:                                ; preds = %136, %138, %141, %143
  %.0.i8 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !79
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i11 = icmp eq i32 %145, 0, !dbg !79
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i14 = icmp eq i32 %146, 0, !dbg !79
  br i1 %.not.i11, label %152, label %147, !dbg !79

147:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %150, label %148, !dbg !79

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

152:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %155, label %153, !dbg !79

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

__nv_sqrtf.exit15:                                ; preds = %148, %150, %153, %155
  %.0.i13 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !79
  %157 = extractvalue { i32, i32 } %121, 1, !dbg !73
  %158 = bitcast i32 %157 to float, !dbg !73
  %159 = extractvalue { i32, i32 } %124, 1, !dbg !75
  %160 = bitcast i32 %159 to float, !dbg !75
  %161 = fsub float %158, %160, !dbg !80
  %162 = extractvalue { i32, i32 } %121, 0, !dbg !73
  %163 = bitcast i32 %162 to float, !dbg !73
  %164 = extractvalue { i32, i32 } %124, 0, !dbg !75
  %165 = bitcast i32 %164 to float, !dbg !75
  %166 = fsub float %163, %165, !dbg !80
  %167 = extractvalue { i32, i32 } %111, 1, !dbg !64
  %168 = bitcast i32 %167 to float, !dbg !64
  %169 = extractvalue { i32, i32 } %113, 1, !dbg !66
  %170 = bitcast i32 %169 to float, !dbg !66
  %171 = fadd float %168, %170, !dbg !81
  %172 = extractvalue { i32, i32 } %111, 0, !dbg !64
  %173 = bitcast i32 %172 to float, !dbg !64
  %174 = extractvalue { i32, i32 } %113, 0, !dbg !66
  %175 = bitcast i32 %174 to float, !dbg !66
  %176 = fadd float %173, %175, !dbg !81
  %177 = extractvalue { i32, i32 } %62, 1, !dbg !47
  %178 = bitcast i32 %177 to float, !dbg !47
  %179 = extractvalue { i32, i32 } %65, 1, !dbg !49
  %180 = bitcast i32 %179 to float, !dbg !49
  %181 = fsub float %178, %180, !dbg !82
  %182 = fmul float %181, %99, !dbg !83
  %183 = extractvalue { i32, i32 } %101, 1, !dbg !56
  %184 = bitcast i32 %183 to float, !dbg !56
  %185 = fmul float %182, %184, !dbg !84
  %186 = extractvalue { i32, i32 } %103, 1, !dbg !58
  %187 = bitcast i32 %186 to float, !dbg !58
  %188 = fadd float %185, %187, !dbg !85
  %189 = extractvalue { i32, i32 } %58, 1, !dbg !44
  %190 = bitcast i32 %189 to float, !dbg !44
  %191 = fadd float %188, %190, !dbg !86
  %192 = extractvalue { i32, i32 } %62, 0, !dbg !47
  %193 = bitcast i32 %192 to float, !dbg !47
  %194 = extractvalue { i32, i32 } %65, 0, !dbg !49
  %195 = bitcast i32 %194 to float, !dbg !49
  %196 = fsub float %193, %195, !dbg !82
  %197 = fmul float %196, %98, !dbg !83
  %198 = extractvalue { i32, i32 } %101, 0, !dbg !56
  %199 = bitcast i32 %198 to float, !dbg !56
  %200 = fmul float %197, %199, !dbg !84
  %201 = extractvalue { i32, i32 } %103, 0, !dbg !58
  %202 = bitcast i32 %201 to float, !dbg !58
  %203 = fadd float %200, %202, !dbg !85
  %204 = extractvalue { i32, i32 } %58, 0, !dbg !44
  %205 = bitcast i32 %204 to float, !dbg !44
  %206 = fadd float %203, %205, !dbg !86
  %207 = extractvalue { i32, i32 } %44, 1, !dbg !32
  %208 = bitcast i32 %207 to float, !dbg !32
  %209 = extractvalue { i32, i32 } %44, 0, !dbg !32
  %210 = bitcast i32 %209 to float, !dbg !32
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !87
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !87
  %213 = fmul float %166, %211, !dbg !88
  %214 = fmul float %161, %212, !dbg !88
  %215 = getelementptr float, ptr addrspace(1) %11, i64 %122, !dbg !89
  %216 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %215, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !90
  %217 = extractvalue { i32, i32 } %216, 0, !dbg !90
  %218 = extractvalue { i32, i32 } %216, 1, !dbg !90
  %219 = bitcast i32 %217 to float, !dbg !90
  %220 = bitcast i32 %218 to float, !dbg !90
  %221 = fmul float %213, %219, !dbg !91
  %222 = fmul float %214, %220, !dbg !91
  %223 = getelementptr float, ptr addrspace(1) %12, i64 %122, !dbg !92
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %223, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !93
  %225 = extractvalue { i32, i32 } %224, 0, !dbg !93
  %226 = extractvalue { i32, i32 } %224, 1, !dbg !93
  %227 = bitcast i32 %225 to float, !dbg !93
  %228 = bitcast i32 %226 to float, !dbg !93
  %229 = fadd float %221, %227, !dbg !94
  %230 = fadd float %222, %228, !dbg !94
  %231 = add i32 %52, %115, !dbg !95
  %232 = sext i32 %231 to i64, !dbg !96
  %233 = getelementptr float, ptr addrspace(1) %13, i64 %232, !dbg !96
  %234 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %233, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !97
  %235 = extractvalue { i32, i32 } %234, 0, !dbg !97
  %236 = extractvalue { i32, i32 } %234, 1, !dbg !97
  %237 = bitcast i32 %235 to float, !dbg !97
  %238 = bitcast i32 %236 to float, !dbg !97
  %239 = fadd float %229, %237, !dbg !98
  %240 = fadd float %230, %238, !dbg !98
  %241 = select i1 %114, float %239, float 0.000000e+00, !dbg !99
  %242 = select i1 %114, float %240, float 0.000000e+00, !dbg !99
  %243 = select i1 %105, float %176, float %241, !dbg !100
  %244 = select i1 %105, float %171, float %242, !dbg !100
  %245 = select i1 %46, float %206, float %243, !dbg !100
  %246 = select i1 %46, float %191, float %244, !dbg !100
  %247 = select i1 %35, float %210, float %245, !dbg !101
  %248 = select i1 %35, float %208, float %246, !dbg !101
  %249 = fcmp olt float %247, 0.000000e+00, !dbg !102
  %250 = fcmp olt float %248, 0.000000e+00, !dbg !102
  %251 = select i1 %249, float 0.000000e+00, float %247, !dbg !106
  %252 = select i1 %250, float 0.000000e+00, float %248, !dbg !106
  %253 = mul i32 %29, 352, !dbg !107
  %254 = add i32 %253, %.decomposed, !dbg !108
  %255 = mul i32 %31, 5632, !dbg !109
  %256 = add i32 %254, %255, !dbg !110
  %257 = sext i32 %256 to i64, !dbg !111
  %258 = getelementptr float, ptr addrspace(1) %14, i64 %257, !dbg !111
  %259 = and i1 %24, %30, !dbg !112
  %260 = bitcast float %251 to i32, !dbg !113
  %261 = bitcast float %252 to i32, !dbg !113
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %261, ptr addrspace(1) %258, i1 %259) #3, !dbg !113
  ret void, !dbg !114
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp7efk3n7suawpmmg6uxlknfuboraywrgpg643rfoqhdaho2izxo.py", directory: "inductor_cache/p7")
!4 = !{ptr @triton_poi_fused_cat_relu_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_43", linkageName: "triton_poi_fused_cat_relu_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 39, column: 33, scope: !7)
!26 = !DILocation(line: 39, column: 43, scope: !7)
!27 = !DILocation(line: 39, column: 38, scope: !7)
!28 = !DILocation(line: 39, column: 49, scope: !7)
!29 = !DILocation(line: 39, column: 30, scope: !7)
!30 = !DILocation(line: 39, column: 62, scope: !7)
!31 = !DILocation(line: 39, column: 70, scope: !7)
!32 = !DILocation(line: 39, column: 55, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 44, column: 40, scope: !7)
!35 = !DILocation(line: 44, column: 49, scope: !7)
!36 = !DILocation(line: 44, column: 59, scope: !7)
!37 = !DILocation(line: 44, column: 37, scope: !7)
!38 = !DILocation(line: 44, column: 45, scope: !7)
!39 = !DILocation(line: 44, column: 54, scope: !7)
!40 = !DILocation(line: 44, column: 65, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 86, scope: !7)
!43 = !DILocation(line: 44, column: 94, scope: !7)
!44 = !DILocation(line: 44, column: 79, scope: !7)
!45 = !DILocation(line: 45, column: 50, scope: !7)
!46 = !DILocation(line: 45, column: 31, scope: !7)
!47 = !DILocation(line: 45, column: 64, scope: !7)
!48 = !DILocation(line: 46, column: 31, scope: !7)
!49 = !DILocation(line: 46, column: 79, scope: !7)
!50 = !DILocation(line: 48, column: 31, scope: !7)
!51 = !DILocation(line: 48, column: 79, scope: !7)
!52 = !DILocation(line: 50, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 27, scope: !7)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 79, scope: !7)
!57 = !DILocation(line: 59, column: 31, scope: !7)
!58 = !DILocation(line: 59, column: 79, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 50, scope: !7)
!61 = !DILocation(line: 68, column: 31, scope: !7)
!62 = !DILocation(line: 68, column: 73, scope: !7)
!63 = !DILocation(line: 68, column: 81, scope: !7)
!64 = !DILocation(line: 68, column: 65, scope: !7)
!65 = !DILocation(line: 69, column: 31, scope: !7)
!66 = !DILocation(line: 69, column: 65, scope: !7)
!67 = !DILocation(line: 73, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 59, scope: !7)
!69 = !DILocation(line: 76, column: 50, scope: !7)
!70 = !DILocation(line: 76, column: 31, scope: !7)
!71 = !DILocation(line: 76, column: 73, scope: !7)
!72 = !DILocation(line: 76, column: 81, scope: !7)
!73 = !DILocation(line: 76, column: 65, scope: !7)
!74 = !DILocation(line: 77, column: 31, scope: !7)
!75 = !DILocation(line: 77, column: 80, scope: !7)
!76 = !DILocation(line: 79, column: 32, scope: !7)
!77 = !DILocation(line: 79, column: 81, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 27, scope: !7)
!80 = !DILocation(line: 78, column: 20, scope: !7)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 47, column: 20, scope: !7)
!83 = !DILocation(line: 56, column: 20, scope: !7)
!84 = !DILocation(line: 58, column: 20, scope: !7)
!85 = !DILocation(line: 60, column: 20, scope: !7)
!86 = !DILocation(line: 61, column: 20, scope: !7)
!87 = !DILocation(line: 84, column: 20, scope: !7)
!88 = !DILocation(line: 87, column: 20, scope: !7)
!89 = !DILocation(line: 88, column: 32, scope: !7)
!90 = !DILocation(line: 88, column: 81, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 90, column: 32, scope: !7)
!93 = !DILocation(line: 90, column: 81, scope: !7)
!94 = !DILocation(line: 91, column: 20, scope: !7)
!95 = !DILocation(line: 92, column: 66, scope: !7)
!96 = !DILocation(line: 92, column: 32, scope: !7)
!97 = !DILocation(line: 92, column: 81, scope: !7)
!98 = !DILocation(line: 93, column: 20, scope: !7)
!99 = !DILocation(line: 95, column: 35, scope: !7)
!100 = !DILocation(line: 0, scope: !7)
!101 = !DILocation(line: 98, column: 33, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlockFile(scope: !7, file: !104, discriminator: 0)
!104 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!105 = !DILocation(line: 100, column: 42, scope: !7)
!106 = !DILocation(line: 121, column: 29, scope: !103, inlinedAt: !105)
!107 = !DILocation(line: 101, column: 34, scope: !7)
!108 = !DILocation(line: 101, column: 30, scope: !7)
!109 = !DILocation(line: 101, column: 44, scope: !7)
!110 = !DILocation(line: 101, column: 39, scope: !7)
!111 = !DILocation(line: 101, column: 25, scope: !7)
!112 = !DILocation(line: 101, column: 64, scope: !7)
!113 = !DILocation(line: 101, column: 56, scope: !7)
!114 = !DILocation(line: 101, column: 4, scope: !7)
