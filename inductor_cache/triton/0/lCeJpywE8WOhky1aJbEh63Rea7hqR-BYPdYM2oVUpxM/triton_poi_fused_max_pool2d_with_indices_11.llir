; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %23 = sdiv i32 %.frozen, 12, !dbg !14
  %24 = mul i32 %23, 12, !dbg !15
  %.decomposed = sub i32 %.frozen, %24, !dbg !15
  %25 = srem i32 %14, 12, !dbg !15
  %26 = srem i32 %15, 12, !dbg !15
  %27 = srem i32 %16, 12, !dbg !15
  %.frozen18 = freeze i32 %17, !dbg !14
  %28 = sdiv i32 %.frozen18, 12, !dbg !14
  %29 = mul i32 %28, 12, !dbg !15
  %.decomposed19 = sub i32 %.frozen18, %29, !dbg !15
  %30 = srem i32 %18, 12, !dbg !15
  %31 = srem i32 %19, 12, !dbg !15
  %32 = srem i32 %20, 12, !dbg !15
  %33 = shl nsw i32 %.decomposed, 1, !dbg !16
  %34 = shl nsw i32 %25, 1, !dbg !16
  %35 = shl nsw i32 %26, 1, !dbg !16
  %36 = shl nsw i32 %27, 1, !dbg !16
  %37 = shl nsw i32 %.decomposed19, 1, !dbg !16
  %38 = shl nsw i32 %30, 1, !dbg !16
  %39 = shl nsw i32 %31, 1, !dbg !16
  %40 = shl nsw i32 %32, 1, !dbg !16
  %41 = mul i32 %23, 48, !dbg !17
  %42 = mul i32 %28, 48, !dbg !17
  %43 = add i32 %33, %41, !dbg !18
  %44 = add i32 %41, %34, !dbg !18
  %45 = add i32 %41, %35, !dbg !18
  %46 = add i32 %41, %36, !dbg !18
  %47 = add i32 %37, %42, !dbg !18
  %48 = add i32 %38, %42, !dbg !18
  %49 = add i32 %39, %42, !dbg !18
  %50 = add i32 %40, %42, !dbg !18
  %51 = sext i32 %43 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = sext i32 %44 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = sext i32 %45 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %46 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = sext i32 %47 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = sext i32 %48 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = sext i32 %49 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = sext i32 %50 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !20
  %75 = or disjoint i32 %43, 1, !dbg !21
  %76 = or disjoint i32 %44, 1, !dbg !21
  %77 = or disjoint i32 %45, 1, !dbg !21
  %78 = or disjoint i32 %46, 1, !dbg !21
  %79 = or disjoint i32 %47, 1, !dbg !21
  %80 = or disjoint i32 %48, 1, !dbg !21
  %81 = or disjoint i32 %49, 1, !dbg !21
  %82 = or disjoint i32 %50, 1, !dbg !21
  %83 = sext i32 %75 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %76 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %77 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %78 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %79 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %80 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %81 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = sext i32 %82 to i64, !dbg !22
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !22
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #2, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #2, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !23
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !23
  %107 = add i32 %41, 24, !dbg !24
  %108 = add i32 %107, %33, !dbg !25
  %109 = add i32 %107, %34, !dbg !25
  %110 = add i32 %107, %35, !dbg !25
  %111 = add i32 %107, %36, !dbg !25
  %112 = add i32 %42, 24, !dbg !24
  %113 = add i32 %112, %37, !dbg !25
  %114 = add i32 %112, %38, !dbg !25
  %115 = add i32 %112, %39, !dbg !25
  %116 = add i32 %112, %40, !dbg !25
  %117 = sext i32 %108 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !26
  %119 = sext i32 %109 to i64, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !26
  %121 = sext i32 %110 to i64, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !26
  %123 = sext i32 %111 to i64, !dbg !26
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !26
  %125 = sext i32 %113 to i64, !dbg !26
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !26
  %127 = sext i32 %114 to i64, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !26
  %129 = sext i32 %115 to i64, !dbg !26
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !26
  %131 = sext i32 %116 to i64, !dbg !26
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !26
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !27
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #2, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !27
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #2, !dbg !27
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !27
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #2, !dbg !27
  %141 = add i32 %41, 25, !dbg !28
  %142 = add i32 %141, %33, !dbg !29
  %143 = add i32 %141, %34, !dbg !29
  %144 = add i32 %141, %35, !dbg !29
  %145 = add i32 %141, %36, !dbg !29
  %146 = add i32 %42, 25, !dbg !28
  %147 = add i32 %146, %37, !dbg !29
  %148 = add i32 %146, %38, !dbg !29
  %149 = add i32 %146, %39, !dbg !29
  %150 = add i32 %146, %40, !dbg !29
  %151 = sext i32 %142 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !30
  %153 = sext i32 %143 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !30
  %155 = sext i32 %144 to i64, !dbg !30
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !30
  %157 = sext i32 %145 to i64, !dbg !30
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !30
  %159 = sext i32 %147 to i64, !dbg !30
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !30
  %161 = sext i32 %148 to i64, !dbg !30
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !30
  %163 = sext i32 %149 to i64, !dbg !30
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !30
  %165 = sext i32 %150 to i64, !dbg !30
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !30
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !31
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !31
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !31
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #2, !dbg !31
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !31
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #2, !dbg !31
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !31
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #2, !dbg !31
  %175 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !20
  %176 = insertelement <4 x i32> %175, i32 %68, i64 1, !dbg !20
  %177 = insertelement <4 x i32> %176, i32 %69, i64 2, !dbg !20
  %178 = insertelement <4 x i32> %177, i32 %70, i64 3, !dbg !20
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !20
  %180 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !23
  %181 = insertelement <4 x i32> %180, i32 %100, i64 1, !dbg !23
  %182 = insertelement <4 x i32> %181, i32 %101, i64 2, !dbg !23
  %183 = insertelement <4 x i32> %182, i32 %102, i64 3, !dbg !23
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !23
  %185 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !27
  %186 = insertelement <4 x i32> %185, i32 %134, i64 1, !dbg !27
  %187 = insertelement <4 x i32> %186, i32 %135, i64 2, !dbg !27
  %188 = insertelement <4 x i32> %187, i32 %136, i64 3, !dbg !27
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !27
  %190 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !31
  %191 = insertelement <4 x i32> %190, i32 %168, i64 1, !dbg !31
  %192 = insertelement <4 x i32> %191, i32 %169, i64 2, !dbg !31
  %193 = insertelement <4 x i32> %192, i32 %170, i64 3, !dbg !31
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !31
  %195 = fcmp ogt <4 x float> %184, %179, !dbg !32
  %196 = fcmp uno <4 x float> %184, zeroinitializer, !dbg !36
  %197 = or <4 x i1> %195, %196, !dbg !37
  %.v = select <4 x i1> %197, <4 x i32> %183, <4 x i32> %178, !dbg !38
  %198 = bitcast <4 x i32> %.v to <4 x float>, !dbg !38
  %199 = fcmp olt <4 x float> %198, %189, !dbg !39
  %200 = fcmp uno <4 x float> %189, zeroinitializer, !dbg !41
  %201 = or <4 x i1> %199, %200, !dbg !42
  %.v15 = select <4 x i1> %201, <4 x i32> %188, <4 x i32> %.v, !dbg !43
  %202 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !43
  %203 = fcmp olt <4 x float> %202, %194, !dbg !44
  %204 = extractelement <4 x i1> %203, i64 0, !dbg !46
  %205 = extractelement <4 x i1> %203, i64 1, !dbg !46
  %206 = extractelement <4 x i1> %203, i64 2, !dbg !46
  %207 = extractelement <4 x i1> %203, i64 3, !dbg !46
  %208 = zext <4 x i1> %195 to <4 x i8>, !dbg !47
  %209 = select <4 x i1> %199, <4 x i8> splat (i8 2), <4 x i8> %208, !dbg !48
  %210 = select <4 x i1> %203, <4 x i8> splat (i8 3), <4 x i8> %209, !dbg !49
  %211 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !20
  %212 = insertelement <4 x i32> %211, i32 %72, i64 1, !dbg !20
  %213 = insertelement <4 x i32> %212, i32 %73, i64 2, !dbg !20
  %214 = insertelement <4 x i32> %213, i32 %74, i64 3, !dbg !20
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !20
  %216 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !23
  %217 = insertelement <4 x i32> %216, i32 %104, i64 1, !dbg !23
  %218 = insertelement <4 x i32> %217, i32 %105, i64 2, !dbg !23
  %219 = insertelement <4 x i32> %218, i32 %106, i64 3, !dbg !23
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !23
  %221 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !27
  %222 = insertelement <4 x i32> %221, i32 %138, i64 1, !dbg !27
  %223 = insertelement <4 x i32> %222, i32 %139, i64 2, !dbg !27
  %224 = insertelement <4 x i32> %223, i32 %140, i64 3, !dbg !27
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !27
  %226 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !31
  %227 = insertelement <4 x i32> %226, i32 %172, i64 1, !dbg !31
  %228 = insertelement <4 x i32> %227, i32 %173, i64 2, !dbg !31
  %229 = insertelement <4 x i32> %228, i32 %174, i64 3, !dbg !31
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !31
  %231 = fcmp ogt <4 x float> %220, %215, !dbg !32
  %232 = fcmp uno <4 x float> %220, zeroinitializer, !dbg !36
  %233 = or <4 x i1> %231, %232, !dbg !37
  %.v16 = select <4 x i1> %233, <4 x i32> %219, <4 x i32> %214, !dbg !38
  %234 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !38
  %235 = fcmp olt <4 x float> %234, %225, !dbg !39
  %236 = fcmp uno <4 x float> %225, zeroinitializer, !dbg !41
  %237 = or <4 x i1> %235, %236, !dbg !42
  %.v17 = select <4 x i1> %237, <4 x i32> %224, <4 x i32> %.v16, !dbg !43
  %238 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !43
  %239 = fcmp olt <4 x float> %238, %230, !dbg !44
  %240 = shufflevector <4 x float> %230, <4 x float> %194, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !50
  %241 = fcmp uno <8 x float> %240, zeroinitializer, !dbg !50
  %242 = extractelement <8 x i1> %241, i64 7, !dbg !46
  %243 = or i1 %204, %242, !dbg !46
  %244 = extractelement <8 x i1> %241, i64 6, !dbg !46
  %245 = or i1 %205, %244, !dbg !46
  %246 = extractelement <8 x i1> %241, i64 5, !dbg !46
  %247 = or i1 %206, %246, !dbg !46
  %248 = extractelement <8 x i1> %241, i64 4, !dbg !46
  %249 = or i1 %207, %248, !dbg !46
  %250 = extractelement <4 x i1> %239, i64 0, !dbg !46
  %251 = extractelement <8 x i1> %241, i64 3, !dbg !46
  %252 = or i1 %250, %251, !dbg !46
  %253 = extractelement <4 x i1> %239, i64 1, !dbg !46
  %254 = extractelement <8 x i1> %241, i64 2, !dbg !46
  %255 = or i1 %253, %254, !dbg !46
  %256 = extractelement <4 x i1> %239, i64 2, !dbg !46
  %257 = extractelement <8 x i1> %241, i64 1, !dbg !46
  %258 = or i1 %256, %257, !dbg !46
  %259 = extractelement <4 x i1> %239, i64 3, !dbg !46
  %260 = extractelement <8 x i1> %241, i64 0, !dbg !46
  %261 = or i1 %259, %260, !dbg !46
  %262 = zext <4 x i1> %231 to <4 x i8>, !dbg !47
  %263 = select <4 x i1> %235, <4 x i8> splat (i8 2), <4 x i8> %262, !dbg !48
  %264 = select <4 x i1> %239, <4 x i8> splat (i8 3), <4 x i8> %263, !dbg !49
  %265 = sext i32 %21 to i64, !dbg !51
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !51
  %267 = sext i32 %22 to i64, !dbg !51
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !51
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !52
  %270 = extractelement <4 x i32> %.v15, i64 0, !dbg !52
  %271 = select i1 %243, i32 %167, i32 %270, !dbg !53
  %272 = extractelement <4 x i32> %.v15, i64 1, !dbg !52
  %273 = select i1 %245, i32 %168, i32 %272, !dbg !53
  %274 = extractelement <4 x i32> %.v15, i64 2, !dbg !52
  %275 = select i1 %247, i32 %169, i32 %274, !dbg !53
  %276 = extractelement <4 x i32> %.v15, i64 3, !dbg !52
  %277 = select i1 %249, i32 %170, i32 %276, !dbg !53
  %278 = extractelement <4 x i32> %.v17, i64 0, !dbg !52
  %279 = select i1 %252, i32 %171, i32 %278, !dbg !53
  %280 = extractelement <4 x i32> %.v17, i64 1, !dbg !52
  %281 = select i1 %255, i32 %172, i32 %280, !dbg !53
  %282 = extractelement <4 x i32> %.v17, i64 2, !dbg !52
  %283 = select i1 %258, i32 %173, i32 %282, !dbg !53
  %284 = extractelement <4 x i32> %.v17, i64 3, !dbg !52
  %285 = select i1 %261, i32 %174, i32 %284, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %269, i32 %271, i32 %273, i32 %275, i32 %277, i1 true) #2, !dbg !52
  %286 = getelementptr inbounds i8, ptr addrspace(3) %269, i32 16, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %286, i32 %279, i32 %281, i32 %283, i32 %285, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !52
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !52
  %289 = load <4 x i32>, ptr addrspace(3) %288, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %287, align 16, !dbg !52
  %290 = getelementptr inbounds i8, ptr addrspace(3) %287, i32 4, !dbg !52
  %.extract8 = load i32, ptr addrspace(3) %290, align 4, !dbg !52
  %291 = getelementptr inbounds i8, ptr addrspace(3) %287, i32 8, !dbg !52
  %.extract9 = load i32, ptr addrspace(3) %291, align 8, !dbg !52
  %292 = getelementptr inbounds i8, ptr addrspace(3) %287, i32 12, !dbg !52
  %.extract10 = load i32, ptr addrspace(3) %292, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %266, i1 true) #2, !dbg !52
  %.extract11 = extractelement <4 x i32> %289, i64 0, !dbg !52
  %.extract12 = extractelement <4 x i32> %289, i64 1, !dbg !52
  %.extract13 = extractelement <4 x i32> %289, i64 2, !dbg !52
  %.extract14 = extractelement <4 x i32> %289, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %268, i1 true) #2, !dbg !52
  %293 = sext i32 %13 to i64, !dbg !54
  %294 = getelementptr i8, ptr addrspace(1) %2, i64 %293, !dbg !54
  %295 = bitcast <4 x i8> %210 to i32, !dbg !55
  %296 = bitcast <4 x i8> %264 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %295, i32 %296, ptr addrspace(1) %294, i1 true) #2, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4dyart4hhre2ljg5dqr6dsichtutes4htsd6k5ogaye5kjzgkj6.py", directory: "inductor_cache/4d")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 49, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 50, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 50, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 31, column: 40, scope: !7)
!36 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 32, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !45)
!45 = !DILocation(line: 33, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !45)
!47 = !DILocation(line: 37, column: 33, scope: !7)
!48 = !DILocation(line: 40, column: 35, scope: !7)
!49 = !DILocation(line: 43, column: 35, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !45)
!51 = !DILocation(line: 44, column: 25, scope: !7)
!52 = !DILocation(line: 44, column: 36, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !45)
!54 = !DILocation(line: 45, column: 25, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 45, column: 4, scope: !7)
