; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = srem i32 %9, 512, !dbg !14
  %12 = sdiv i32 %9, 51200, !dbg !15
  %13 = sdiv i32 %10, 51200, !dbg !15
  %14 = shl i32 %12, 21, !dbg !16
  %15 = shl i32 %13, 21, !dbg !16
  %16 = add i32 %14, %11, !dbg !17
  %17 = add i32 %16, -33280, !dbg !18
  %18 = add i32 %15, %11, !dbg !17
  %19 = add i32 %18, -33280, !dbg !18
  %20 = add i32 %16, -32768, !dbg !19
  %21 = add i32 %18, -32768, !dbg !19
  %22 = add i32 %16, -32256, !dbg !20
  %23 = add i32 %18, -32256, !dbg !20
  %24 = add i32 %16, -512, !dbg !21
  %25 = add i32 %18, -512, !dbg !21
  %26 = add i32 %16, 512, !dbg !22
  %27 = add i32 %18, 512, !dbg !22
  %28 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !23
  %29 = shufflevector <2 x i32> %28, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !23
  %30 = sdiv <2 x i32> %29, <i32 5120, i32 512>, !dbg !23
  %31 = srem <2 x i32> %30, splat (i32 10), !dbg !24
  %32 = extractelement <2 x i32> %31, i64 0, !dbg !25
  %33 = icmp sgt i32 %32, 0, !dbg !26
  %34 = extractelement <2 x i32> %31, i64 1, !dbg !25
  %35 = icmp sgt i32 %34, 0, !dbg !27
  %36 = and i1 %33, %35, !dbg !28
  %37 = mul nsw i32 %34, 3584, !dbg !29
  %38 = mul nsw i32 %32, 229376, !dbg !30
  %39 = add i32 %17, %37, !dbg !31
  %40 = add i32 %39, %38, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !33
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36) #1, !dbg !34
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !34
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !34
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !34
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !34
  %48 = bitcast i32 %44 to float, !dbg !34
  %49 = bitcast i32 %45 to float, !dbg !34
  %50 = bitcast i32 %46 to float, !dbg !34
  %51 = bitcast i32 %47 to float, !dbg !34
  %52 = icmp sgt i32 %34, -1, !dbg !35
  %53 = and i1 %33, %52, !dbg !36
  %54 = add i32 %20, %37, !dbg !37
  %55 = add i32 %54, %38, !dbg !38
  %56 = sext i32 %55 to i64, !dbg !39
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !39
  %58 = icmp ult <2 x i32> %31, splat (i32 9), !dbg !40
  %59 = extractelement <2 x i1> %58, i64 1, !dbg !41
  %60 = and i1 %33, %59, !dbg !41
  %61 = add i32 %22, %37, !dbg !42
  %62 = add i32 %61, %38, !dbg !43
  %63 = sext i32 %62 to i64, !dbg !44
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !44
  %65 = icmp sgt i32 %32, -1, !dbg !45
  %66 = and i1 %65, %35, !dbg !46
  %67 = add i32 %24, %37, !dbg !47
  %68 = add i32 %67, %38, !dbg !48
  %69 = sext i32 %68 to i64, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !49
  %71 = or i32 %32, %34, !dbg !25
  %72 = icmp sgt i32 %71, -1, !dbg !25
  %73 = add i32 %16, %37, !dbg !50
  %74 = add i32 %73, %38, !dbg !51
  %75 = sext i32 %74 to i64, !dbg !52
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !52
  %77 = and i1 %65, %59, !dbg !53
  %78 = add i32 %26, %37, !dbg !54
  %79 = add i32 %78, %38, !dbg !55
  %80 = sext i32 %79 to i64, !dbg !56
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !56
  %82 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !23
  %83 = shufflevector <2 x i32> %82, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !23
  %84 = sdiv <2 x i32> %83, <i32 5120, i32 512>, !dbg !23
  %85 = srem <2 x i32> %84, splat (i32 10), !dbg !24
  %86 = extractelement <2 x i32> %85, i64 0, !dbg !25
  %87 = icmp sgt i32 %86, 0, !dbg !26
  %88 = extractelement <2 x i32> %85, i64 1, !dbg !25
  %89 = icmp sgt i32 %88, 0, !dbg !27
  %90 = and i1 %87, %89, !dbg !28
  %91 = mul nsw i32 %88, 3584, !dbg !29
  %92 = mul nsw i32 %86, 229376, !dbg !30
  %93 = add i32 %19, %91, !dbg !31
  %94 = add i32 %93, %92, !dbg !32
  %95 = sext i32 %94 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !33
  %97 = icmp sgt i32 %88, -1, !dbg !35
  %98 = and i1 %87, %97, !dbg !36
  %99 = add i32 %21, %91, !dbg !37
  %100 = add i32 %99, %92, !dbg !38
  %101 = sext i32 %100 to i64, !dbg !39
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !39
  %103 = icmp ult <2 x i32> %85, splat (i32 9), !dbg !40
  %104 = extractelement <2 x i1> %103, i64 1, !dbg !41
  %105 = and i1 %87, %104, !dbg !41
  %106 = add i32 %23, %91, !dbg !42
  %107 = add i32 %106, %92, !dbg !43
  %108 = sext i32 %107 to i64, !dbg !44
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !44
  %110 = icmp sgt i32 %86, -1, !dbg !45
  %111 = and i1 %110, %89, !dbg !46
  %112 = add i32 %25, %91, !dbg !47
  %113 = add i32 %112, %92, !dbg !48
  %114 = sext i32 %113 to i64, !dbg !49
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !49
  %116 = or i32 %86, %88, !dbg !25
  %117 = icmp sgt i32 %116, -1, !dbg !25
  %118 = add i32 %18, %91, !dbg !50
  %119 = add i32 %118, %92, !dbg !51
  %120 = sext i32 %119 to i64, !dbg !52
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !52
  %122 = and i1 %110, %104, !dbg !53
  %123 = add i32 %27, %91, !dbg !54
  %124 = add i32 %123, %92, !dbg !55
  %125 = sext i32 %124 to i64, !dbg !56
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !56
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90, i32 -8388608, i1 %90) #1, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !34
  %132 = bitcast i32 %128 to float, !dbg !34
  %133 = bitcast i32 %129 to float, !dbg !34
  %134 = bitcast i32 %130 to float, !dbg !34
  %135 = bitcast i32 %131 to float, !dbg !34
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53, i32 -8388608, i1 %53) #1, !dbg !57
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !57
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !57
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !57
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !57
  %141 = bitcast i32 %137 to float, !dbg !57
  %142 = bitcast i32 %138 to float, !dbg !57
  %143 = bitcast i32 %139 to float, !dbg !57
  %144 = bitcast i32 %140 to float, !dbg !57
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #1, !dbg !57
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !57
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !57
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !57
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !57
  %150 = bitcast i32 %146 to float, !dbg !57
  %151 = bitcast i32 %147 to float, !dbg !57
  %152 = bitcast i32 %148 to float, !dbg !57
  %153 = bitcast i32 %149 to float, !dbg !57
  %154 = fcmp ogt float %141, %48, !dbg !58
  %155 = fcmp ogt float %142, %49, !dbg !58
  %156 = fcmp ogt float %143, %50, !dbg !58
  %157 = fcmp ogt float %144, %51, !dbg !58
  %158 = fcmp ogt float %150, %132, !dbg !58
  %159 = fcmp ogt float %151, %133, !dbg !58
  %160 = fcmp ogt float %152, %134, !dbg !58
  %161 = fcmp ogt float %153, %135, !dbg !58
  %162 = fcmp uno float %141, 0.000000e+00, !dbg !62
  %163 = fcmp uno float %142, 0.000000e+00, !dbg !62
  %164 = fcmp uno float %143, 0.000000e+00, !dbg !62
  %165 = fcmp uno float %144, 0.000000e+00, !dbg !62
  %166 = fcmp uno float %150, 0.000000e+00, !dbg !62
  %167 = fcmp uno float %151, 0.000000e+00, !dbg !62
  %168 = fcmp uno float %152, 0.000000e+00, !dbg !62
  %169 = fcmp uno float %153, 0.000000e+00, !dbg !62
  %170 = or i1 %154, %162, !dbg !63
  %171 = or i1 %155, %163, !dbg !63
  %172 = or i1 %156, %164, !dbg !63
  %173 = or i1 %157, %165, !dbg !63
  %174 = or i1 %158, %166, !dbg !63
  %175 = or i1 %159, %167, !dbg !63
  %176 = or i1 %160, %168, !dbg !63
  %177 = or i1 %161, %169, !dbg !63
  %178 = select i1 %170, float %141, float %48, !dbg !64
  %179 = select i1 %171, float %142, float %49, !dbg !64
  %180 = select i1 %172, float %143, float %50, !dbg !64
  %181 = select i1 %173, float %144, float %51, !dbg !64
  %182 = select i1 %174, float %150, float %132, !dbg !64
  %183 = select i1 %175, float %151, float %133, !dbg !64
  %184 = select i1 %176, float %152, float %134, !dbg !64
  %185 = select i1 %177, float %153, float %135, !dbg !64
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %60, i32 -8388608, i1 %60, i32 -8388608, i1 %60, i32 -8388608, i1 %60, i32 -8388608, i1 %60) #1, !dbg !65
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !65
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !65
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !65
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !65
  %191 = bitcast i32 %187 to float, !dbg !65
  %192 = bitcast i32 %188 to float, !dbg !65
  %193 = bitcast i32 %189 to float, !dbg !65
  %194 = bitcast i32 %190 to float, !dbg !65
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105) #1, !dbg !65
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !65
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !65
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !65
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !65
  %200 = bitcast i32 %196 to float, !dbg !65
  %201 = bitcast i32 %197 to float, !dbg !65
  %202 = bitcast i32 %198 to float, !dbg !65
  %203 = bitcast i32 %199 to float, !dbg !65
  %204 = fcmp olt float %178, %191, !dbg !66
  %205 = fcmp olt float %179, %192, !dbg !66
  %206 = fcmp olt float %180, %193, !dbg !66
  %207 = fcmp olt float %181, %194, !dbg !66
  %208 = fcmp olt float %182, %200, !dbg !66
  %209 = fcmp olt float %183, %201, !dbg !66
  %210 = fcmp olt float %184, %202, !dbg !66
  %211 = fcmp olt float %185, %203, !dbg !66
  %212 = fcmp uno float %191, 0.000000e+00, !dbg !68
  %213 = fcmp uno float %192, 0.000000e+00, !dbg !68
  %214 = fcmp uno float %193, 0.000000e+00, !dbg !68
  %215 = fcmp uno float %194, 0.000000e+00, !dbg !68
  %216 = fcmp uno float %200, 0.000000e+00, !dbg !68
  %217 = fcmp uno float %201, 0.000000e+00, !dbg !68
  %218 = fcmp uno float %202, 0.000000e+00, !dbg !68
  %219 = fcmp uno float %203, 0.000000e+00, !dbg !68
  %220 = or i1 %212, %204, !dbg !69
  %221 = or i1 %213, %205, !dbg !69
  %222 = or i1 %214, %206, !dbg !69
  %223 = or i1 %215, %207, !dbg !69
  %224 = or i1 %216, %208, !dbg !69
  %225 = or i1 %217, %209, !dbg !69
  %226 = or i1 %218, %210, !dbg !69
  %227 = or i1 %219, %211, !dbg !69
  %228 = select i1 %220, float %191, float %178, !dbg !70
  %229 = select i1 %221, float %192, float %179, !dbg !70
  %230 = select i1 %222, float %193, float %180, !dbg !70
  %231 = select i1 %223, float %194, float %181, !dbg !70
  %232 = select i1 %224, float %200, float %182, !dbg !70
  %233 = select i1 %225, float %201, float %183, !dbg !70
  %234 = select i1 %226, float %202, float %184, !dbg !70
  %235 = select i1 %227, float %203, float %185, !dbg !70
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66) #1, !dbg !71
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !71
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !71
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !71
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !71
  %241 = bitcast i32 %237 to float, !dbg !71
  %242 = bitcast i32 %238 to float, !dbg !71
  %243 = bitcast i32 %239 to float, !dbg !71
  %244 = bitcast i32 %240 to float, !dbg !71
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111) #1, !dbg !71
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !71
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !71
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !71
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !71
  %250 = bitcast i32 %246 to float, !dbg !71
  %251 = bitcast i32 %247 to float, !dbg !71
  %252 = bitcast i32 %248 to float, !dbg !71
  %253 = bitcast i32 %249 to float, !dbg !71
  %254 = fcmp olt float %228, %241, !dbg !72
  %255 = fcmp olt float %229, %242, !dbg !72
  %256 = fcmp olt float %230, %243, !dbg !72
  %257 = fcmp olt float %231, %244, !dbg !72
  %258 = fcmp olt float %232, %250, !dbg !72
  %259 = fcmp olt float %233, %251, !dbg !72
  %260 = fcmp olt float %234, %252, !dbg !72
  %261 = fcmp olt float %235, %253, !dbg !72
  %262 = fcmp uno float %241, 0.000000e+00, !dbg !74
  %263 = fcmp uno float %242, 0.000000e+00, !dbg !74
  %264 = fcmp uno float %243, 0.000000e+00, !dbg !74
  %265 = fcmp uno float %244, 0.000000e+00, !dbg !74
  %266 = fcmp uno float %250, 0.000000e+00, !dbg !74
  %267 = fcmp uno float %251, 0.000000e+00, !dbg !74
  %268 = fcmp uno float %252, 0.000000e+00, !dbg !74
  %269 = fcmp uno float %253, 0.000000e+00, !dbg !74
  %270 = or i1 %262, %254, !dbg !75
  %271 = or i1 %263, %255, !dbg !75
  %272 = or i1 %264, %256, !dbg !75
  %273 = or i1 %265, %257, !dbg !75
  %274 = or i1 %266, %258, !dbg !75
  %275 = or i1 %267, %259, !dbg !75
  %276 = or i1 %268, %260, !dbg !75
  %277 = or i1 %269, %261, !dbg !75
  %278 = select i1 %270, float %241, float %228, !dbg !76
  %279 = select i1 %271, float %242, float %229, !dbg !76
  %280 = select i1 %272, float %243, float %230, !dbg !76
  %281 = select i1 %273, float %244, float %231, !dbg !76
  %282 = select i1 %274, float %250, float %232, !dbg !76
  %283 = select i1 %275, float %251, float %233, !dbg !76
  %284 = select i1 %276, float %252, float %234, !dbg !76
  %285 = select i1 %277, float %253, float %235, !dbg !76
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #1, !dbg !77
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !77
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !77
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !77
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !77
  %291 = bitcast i32 %287 to float, !dbg !77
  %292 = bitcast i32 %288 to float, !dbg !77
  %293 = bitcast i32 %289 to float, !dbg !77
  %294 = bitcast i32 %290 to float, !dbg !77
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #1, !dbg !77
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !77
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !77
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !77
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !77
  %300 = bitcast i32 %296 to float, !dbg !77
  %301 = bitcast i32 %297 to float, !dbg !77
  %302 = bitcast i32 %298 to float, !dbg !77
  %303 = bitcast i32 %299 to float, !dbg !77
  %304 = fcmp olt float %278, %291, !dbg !78
  %305 = fcmp olt float %279, %292, !dbg !78
  %306 = fcmp olt float %280, %293, !dbg !78
  %307 = fcmp olt float %281, %294, !dbg !78
  %308 = fcmp olt float %282, %300, !dbg !78
  %309 = fcmp olt float %283, %301, !dbg !78
  %310 = fcmp olt float %284, %302, !dbg !78
  %311 = fcmp olt float %285, %303, !dbg !78
  %312 = fcmp uno float %291, 0.000000e+00, !dbg !80
  %313 = fcmp uno float %292, 0.000000e+00, !dbg !80
  %314 = fcmp uno float %293, 0.000000e+00, !dbg !80
  %315 = fcmp uno float %294, 0.000000e+00, !dbg !80
  %316 = fcmp uno float %300, 0.000000e+00, !dbg !80
  %317 = fcmp uno float %301, 0.000000e+00, !dbg !80
  %318 = fcmp uno float %302, 0.000000e+00, !dbg !80
  %319 = fcmp uno float %303, 0.000000e+00, !dbg !80
  %320 = or i1 %312, %304, !dbg !81
  %321 = or i1 %313, %305, !dbg !81
  %322 = or i1 %314, %306, !dbg !81
  %323 = or i1 %315, %307, !dbg !81
  %324 = or i1 %316, %308, !dbg !81
  %325 = or i1 %317, %309, !dbg !81
  %326 = or i1 %318, %310, !dbg !81
  %327 = or i1 %319, %311, !dbg !81
  %328 = select i1 %320, float %291, float %278, !dbg !82
  %329 = select i1 %321, float %292, float %279, !dbg !82
  %330 = select i1 %322, float %293, float %280, !dbg !82
  %331 = select i1 %323, float %294, float %281, !dbg !82
  %332 = select i1 %324, float %300, float %282, !dbg !82
  %333 = select i1 %325, float %301, float %283, !dbg !82
  %334 = select i1 %326, float %302, float %284, !dbg !82
  %335 = select i1 %327, float %303, float %285, !dbg !82
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #1, !dbg !83
  %337 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !83
  %338 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !83
  %339 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !83
  %340 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !83
  %341 = bitcast i32 %337 to float, !dbg !83
  %342 = bitcast i32 %338 to float, !dbg !83
  %343 = bitcast i32 %339 to float, !dbg !83
  %344 = bitcast i32 %340 to float, !dbg !83
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #1, !dbg !83
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !83
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !83
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !83
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !83
  %350 = bitcast i32 %346 to float, !dbg !83
  %351 = bitcast i32 %347 to float, !dbg !83
  %352 = bitcast i32 %348 to float, !dbg !83
  %353 = bitcast i32 %349 to float, !dbg !83
  %354 = fcmp olt float %328, %341, !dbg !84
  %355 = fcmp olt float %329, %342, !dbg !84
  %356 = fcmp olt float %330, %343, !dbg !84
  %357 = fcmp olt float %331, %344, !dbg !84
  %358 = fcmp olt float %332, %350, !dbg !84
  %359 = fcmp olt float %333, %351, !dbg !84
  %360 = fcmp olt float %334, %352, !dbg !84
  %361 = fcmp olt float %335, %353, !dbg !84
  %362 = fcmp uno float %341, 0.000000e+00, !dbg !86
  %363 = fcmp uno float %342, 0.000000e+00, !dbg !86
  %364 = fcmp uno float %343, 0.000000e+00, !dbg !86
  %365 = fcmp uno float %344, 0.000000e+00, !dbg !86
  %366 = fcmp uno float %350, 0.000000e+00, !dbg !86
  %367 = fcmp uno float %351, 0.000000e+00, !dbg !86
  %368 = fcmp uno float %352, 0.000000e+00, !dbg !86
  %369 = fcmp uno float %353, 0.000000e+00, !dbg !86
  %370 = or i1 %362, %354, !dbg !87
  %371 = or i1 %363, %355, !dbg !87
  %372 = or i1 %364, %356, !dbg !87
  %373 = or i1 %365, %357, !dbg !87
  %374 = or i1 %366, %358, !dbg !87
  %375 = or i1 %367, %359, !dbg !87
  %376 = or i1 %368, %360, !dbg !87
  %377 = or i1 %369, %361, !dbg !87
  %378 = select i1 %370, float %341, float %328, !dbg !88
  %379 = select i1 %371, float %342, float %329, !dbg !88
  %380 = select i1 %372, float %343, float %330, !dbg !88
  %381 = select i1 %373, float %344, float %331, !dbg !88
  %382 = select i1 %374, float %350, float %332, !dbg !88
  %383 = select i1 %375, float %351, float %333, !dbg !88
  %384 = select i1 %376, float %352, float %334, !dbg !88
  %385 = select i1 %377, float %353, float %335, !dbg !88
  %386 = extractelement <2 x i1> %58, i64 0, !dbg !89
  %387 = and i1 %386, %35, !dbg !89
  %388 = extractelement <2 x i1> %103, i64 0, !dbg !89
  %389 = and i1 %388, %89, !dbg !89
  %390 = add i32 %16, 32256, !dbg !90
  %391 = add i32 %390, %37, !dbg !91
  %392 = add i32 %391, %38, !dbg !92
  %393 = add i32 %18, 32256, !dbg !90
  %394 = add i32 %393, %91, !dbg !91
  %395 = add i32 %394, %92, !dbg !92
  %396 = sext i32 %392 to i64, !dbg !93
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %396, !dbg !93
  %398 = sext i32 %395 to i64, !dbg !93
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !93
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %397, i1 %387, i32 -8388608, i1 %387, i32 -8388608, i1 %387, i32 -8388608, i1 %387, i32 -8388608, i1 %387) #1, !dbg !94
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !94
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !94
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !94
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !94
  %405 = bitcast i32 %401 to float, !dbg !94
  %406 = bitcast i32 %402 to float, !dbg !94
  %407 = bitcast i32 %403 to float, !dbg !94
  %408 = bitcast i32 %404 to float, !dbg !94
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %389, i32 -8388608, i1 %389, i32 -8388608, i1 %389, i32 -8388608, i1 %389, i32 -8388608, i1 %389) #1, !dbg !94
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !94
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !94
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !94
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !94
  %414 = bitcast i32 %410 to float, !dbg !94
  %415 = bitcast i32 %411 to float, !dbg !94
  %416 = bitcast i32 %412 to float, !dbg !94
  %417 = bitcast i32 %413 to float, !dbg !94
  %418 = fcmp olt float %378, %405, !dbg !95
  %419 = fcmp olt float %379, %406, !dbg !95
  %420 = fcmp olt float %380, %407, !dbg !95
  %421 = fcmp olt float %381, %408, !dbg !95
  %422 = fcmp olt float %382, %414, !dbg !95
  %423 = fcmp olt float %383, %415, !dbg !95
  %424 = fcmp olt float %384, %416, !dbg !95
  %425 = fcmp olt float %385, %417, !dbg !95
  %426 = fcmp uno float %405, 0.000000e+00, !dbg !97
  %427 = fcmp uno float %406, 0.000000e+00, !dbg !97
  %428 = fcmp uno float %407, 0.000000e+00, !dbg !97
  %429 = fcmp uno float %408, 0.000000e+00, !dbg !97
  %430 = fcmp uno float %414, 0.000000e+00, !dbg !97
  %431 = fcmp uno float %415, 0.000000e+00, !dbg !97
  %432 = fcmp uno float %416, 0.000000e+00, !dbg !97
  %433 = fcmp uno float %417, 0.000000e+00, !dbg !97
  %434 = or i1 %426, %418, !dbg !98
  %435 = or i1 %427, %419, !dbg !98
  %436 = or i1 %428, %420, !dbg !98
  %437 = or i1 %429, %421, !dbg !98
  %438 = or i1 %430, %422, !dbg !98
  %439 = or i1 %431, %423, !dbg !98
  %440 = or i1 %432, %424, !dbg !98
  %441 = or i1 %433, %425, !dbg !98
  %442 = select i1 %434, float %405, float %378, !dbg !99
  %443 = select i1 %435, float %406, float %379, !dbg !99
  %444 = select i1 %436, float %407, float %380, !dbg !99
  %445 = select i1 %437, float %408, float %381, !dbg !99
  %446 = select i1 %438, float %414, float %382, !dbg !99
  %447 = select i1 %439, float %415, float %383, !dbg !99
  %448 = select i1 %440, float %416, float %384, !dbg !99
  %449 = select i1 %441, float %417, float %385, !dbg !99
  %450 = and i1 %386, %52, !dbg !100
  %451 = and i1 %388, %97, !dbg !100
  %452 = add i32 %16, 32768, !dbg !101
  %453 = add i32 %452, %37, !dbg !102
  %454 = add i32 %453, %38, !dbg !103
  %455 = add i32 %18, 32768, !dbg !101
  %456 = add i32 %455, %91, !dbg !102
  %457 = add i32 %456, %92, !dbg !103
  %458 = sext i32 %454 to i64, !dbg !104
  %459 = getelementptr float, ptr addrspace(1) %0, i64 %458, !dbg !104
  %460 = sext i32 %457 to i64, !dbg !104
  %461 = getelementptr float, ptr addrspace(1) %0, i64 %460, !dbg !104
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %459, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450) #1, !dbg !105
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !105
  %464 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !105
  %465 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !105
  %466 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !105
  %467 = bitcast i32 %463 to float, !dbg !105
  %468 = bitcast i32 %464 to float, !dbg !105
  %469 = bitcast i32 %465 to float, !dbg !105
  %470 = bitcast i32 %466 to float, !dbg !105
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %461, i1 %451, i32 -8388608, i1 %451, i32 -8388608, i1 %451, i32 -8388608, i1 %451, i32 -8388608, i1 %451) #1, !dbg !105
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !105
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !105
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !105
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !105
  %476 = bitcast i32 %472 to float, !dbg !105
  %477 = bitcast i32 %473 to float, !dbg !105
  %478 = bitcast i32 %474 to float, !dbg !105
  %479 = bitcast i32 %475 to float, !dbg !105
  %480 = fcmp olt float %442, %467, !dbg !106
  %481 = fcmp olt float %443, %468, !dbg !106
  %482 = fcmp olt float %444, %469, !dbg !106
  %483 = fcmp olt float %445, %470, !dbg !106
  %484 = fcmp olt float %446, %476, !dbg !106
  %485 = fcmp olt float %447, %477, !dbg !106
  %486 = fcmp olt float %448, %478, !dbg !106
  %487 = fcmp olt float %449, %479, !dbg !106
  %488 = fcmp uno float %467, 0.000000e+00, !dbg !108
  %489 = fcmp uno float %468, 0.000000e+00, !dbg !108
  %490 = fcmp uno float %469, 0.000000e+00, !dbg !108
  %491 = fcmp uno float %470, 0.000000e+00, !dbg !108
  %492 = fcmp uno float %476, 0.000000e+00, !dbg !108
  %493 = fcmp uno float %477, 0.000000e+00, !dbg !108
  %494 = fcmp uno float %478, 0.000000e+00, !dbg !108
  %495 = fcmp uno float %479, 0.000000e+00, !dbg !108
  %496 = or i1 %488, %480, !dbg !109
  %497 = or i1 %489, %481, !dbg !109
  %498 = or i1 %490, %482, !dbg !109
  %499 = or i1 %491, %483, !dbg !109
  %500 = or i1 %492, %484, !dbg !109
  %501 = or i1 %493, %485, !dbg !109
  %502 = or i1 %494, %486, !dbg !109
  %503 = or i1 %495, %487, !dbg !109
  %504 = select i1 %496, float %467, float %442, !dbg !110
  %505 = select i1 %497, float %468, float %443, !dbg !110
  %506 = select i1 %498, float %469, float %444, !dbg !110
  %507 = select i1 %499, float %470, float %445, !dbg !110
  %508 = select i1 %500, float %476, float %446, !dbg !110
  %509 = select i1 %501, float %477, float %447, !dbg !110
  %510 = select i1 %502, float %478, float %448, !dbg !110
  %511 = select i1 %503, float %479, float %449, !dbg !110
  %512 = and i1 %386, %59, !dbg !111
  %513 = and i1 %388, %104, !dbg !111
  %514 = add i32 %16, 33280, !dbg !112
  %515 = add i32 %514, %37, !dbg !113
  %516 = add i32 %515, %38, !dbg !114
  %517 = add i32 %18, 33280, !dbg !112
  %518 = add i32 %517, %91, !dbg !113
  %519 = add i32 %518, %92, !dbg !114
  %520 = sext i32 %516 to i64, !dbg !115
  %521 = getelementptr float, ptr addrspace(1) %0, i64 %520, !dbg !115
  %522 = sext i32 %519 to i64, !dbg !115
  %523 = getelementptr float, ptr addrspace(1) %0, i64 %522, !dbg !115
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %521, i1 %512, i32 -8388608, i1 %512, i32 -8388608, i1 %512, i32 -8388608, i1 %512, i32 -8388608, i1 %512) #1, !dbg !116
  %525 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !116
  %526 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !116
  %527 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !116
  %528 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !116
  %529 = bitcast i32 %525 to float, !dbg !116
  %530 = bitcast i32 %526 to float, !dbg !116
  %531 = bitcast i32 %527 to float, !dbg !116
  %532 = bitcast i32 %528 to float, !dbg !116
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %523, i1 %513, i32 -8388608, i1 %513, i32 -8388608, i1 %513, i32 -8388608, i1 %513, i32 -8388608, i1 %513) #1, !dbg !116
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !116
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !116
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !116
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !116
  %538 = bitcast i32 %534 to float, !dbg !116
  %539 = bitcast i32 %535 to float, !dbg !116
  %540 = bitcast i32 %536 to float, !dbg !116
  %541 = bitcast i32 %537 to float, !dbg !116
  %542 = fcmp olt float %504, %529, !dbg !117
  %543 = fcmp olt float %505, %530, !dbg !117
  %544 = fcmp olt float %506, %531, !dbg !117
  %545 = fcmp olt float %507, %532, !dbg !117
  %546 = fcmp olt float %508, %538, !dbg !117
  %547 = fcmp olt float %509, %539, !dbg !117
  %548 = fcmp olt float %510, %540, !dbg !117
  %549 = fcmp olt float %511, %541, !dbg !117
  %550 = fcmp uno float %529, 0.000000e+00, !dbg !119
  %551 = fcmp uno float %530, 0.000000e+00, !dbg !119
  %552 = fcmp uno float %531, 0.000000e+00, !dbg !119
  %553 = fcmp uno float %532, 0.000000e+00, !dbg !119
  %554 = fcmp uno float %538, 0.000000e+00, !dbg !119
  %555 = fcmp uno float %539, 0.000000e+00, !dbg !119
  %556 = fcmp uno float %540, 0.000000e+00, !dbg !119
  %557 = fcmp uno float %541, 0.000000e+00, !dbg !119
  %558 = or i1 %550, %542, !dbg !120
  %559 = or i1 %551, %543, !dbg !120
  %560 = or i1 %552, %544, !dbg !120
  %561 = or i1 %553, %545, !dbg !120
  %562 = or i1 %554, %546, !dbg !120
  %563 = or i1 %555, %547, !dbg !120
  %564 = or i1 %556, %548, !dbg !120
  %565 = or i1 %557, %549, !dbg !120
  %566 = sext i32 %9 to i64, !dbg !121
  %567 = getelementptr float, ptr addrspace(1) %1, i64 %566, !dbg !121
  %568 = sext i32 %10 to i64, !dbg !121
  %569 = getelementptr float, ptr addrspace(1) %1, i64 %568, !dbg !121
  %570 = bitcast float %504 to i32, !dbg !122
  %571 = select i1 %558, i32 %525, i32 %570, !dbg !123
  %572 = bitcast float %505 to i32, !dbg !122
  %573 = select i1 %559, i32 %526, i32 %572, !dbg !123
  %574 = bitcast float %506 to i32, !dbg !122
  %575 = select i1 %560, i32 %527, i32 %574, !dbg !123
  %576 = bitcast float %507 to i32, !dbg !122
  %577 = select i1 %561, i32 %528, i32 %576, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %571, i32 %573, i32 %575, i32 %577, ptr addrspace(1) %567, i1 true) #1, !dbg !122
  %578 = bitcast float %508 to i32, !dbg !122
  %579 = select i1 %562, i32 %534, i32 %578, !dbg !123
  %580 = bitcast float %509 to i32, !dbg !122
  %581 = select i1 %563, i32 %535, i32 %580, !dbg !123
  %582 = bitcast float %510 to i32, !dbg !122
  %583 = select i1 %564, i32 %536, i32 %582, !dbg !123
  %584 = bitcast float %511 to i32, !dbg !122
  %585 = select i1 %565, i32 %537, i32 %584, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %579, i32 %581, i32 %583, i32 %585, ptr addrspace(1) %569, i1 true) #1, !dbg !122
  ret void, !dbg !124
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvjmbim3xdwvdaizhqiju7esogwfcwiotmgfgaony4pih565h4go.py", directory: "inductor_cache/vj")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 40, column: 77, scope: !7)
!17 = !DILocation(line: 40, column: 42, scope: !7)
!18 = !DILocation(line: 40, column: 47, scope: !7)
!19 = !DILocation(line: 46, column: 47, scope: !7)
!20 = !DILocation(line: 53, column: 47, scope: !7)
!21 = !DILocation(line: 60, column: 45, scope: !7)
!22 = !DILocation(line: 66, column: 42, scope: !7)
!23 = !DILocation(line: 24, column: 21, scope: !7)
!24 = !DILocation(line: 24, column: 29, scope: !7)
!25 = !DILocation(line: 62, column: 20, scope: !7)
!26 = !DILocation(line: 31, column: 19, scope: !7)
!27 = !DILocation(line: 36, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 40, column: 52, scope: !7)
!30 = !DILocation(line: 40, column: 64, scope: !7)
!31 = !DILocation(line: 40, column: 57, scope: !7)
!32 = !DILocation(line: 40, column: 69, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 82, scope: !7)
!35 = !DILocation(line: 42, column: 21, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 57, scope: !7)
!38 = !DILocation(line: 46, column: 69, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 71, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 19, scope: !7)
!42 = !DILocation(line: 53, column: 57, scope: !7)
!43 = !DILocation(line: 53, column: 69, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 21, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 55, scope: !7)
!48 = !DILocation(line: 60, column: 67, scope: !7)
!49 = !DILocation(line: 60, column: 31, scope: !7)
!50 = !DILocation(line: 63, column: 46, scope: !7)
!51 = !DILocation(line: 63, column: 58, scope: !7)
!52 = !DILocation(line: 63, column: 31, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 52, scope: !7)
!55 = !DILocation(line: 66, column: 64, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 46, column: 82, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 47, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 53, column: 82, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !67)
!67 = !DILocation(line: 54, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !67)
!71 = !DILocation(line: 60, column: 80, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !73)
!73 = !DILocation(line: 61, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !73)
!77 = !DILocation(line: 63, column: 71, scope: !7)
!78 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !79)
!79 = !DILocation(line: 64, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !79)
!83 = !DILocation(line: 66, column: 77, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !85)
!89 = !DILocation(line: 72, column: 20, scope: !7)
!90 = !DILocation(line: 73, column: 44, scope: !7)
!91 = !DILocation(line: 73, column: 54, scope: !7)
!92 = !DILocation(line: 73, column: 66, scope: !7)
!93 = !DILocation(line: 73, column: 31, scope: !7)
!94 = !DILocation(line: 73, column: 79, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !96)
!96 = !DILocation(line: 74, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !96)
!100 = !DILocation(line: 75, column: 20, scope: !7)
!101 = !DILocation(line: 76, column: 44, scope: !7)
!102 = !DILocation(line: 76, column: 54, scope: !7)
!103 = !DILocation(line: 76, column: 66, scope: !7)
!104 = !DILocation(line: 76, column: 31, scope: !7)
!105 = !DILocation(line: 76, column: 79, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !107)
!107 = !DILocation(line: 77, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !107)
!111 = !DILocation(line: 78, column: 20, scope: !7)
!112 = !DILocation(line: 79, column: 44, scope: !7)
!113 = !DILocation(line: 79, column: 54, scope: !7)
!114 = !DILocation(line: 79, column: 66, scope: !7)
!115 = !DILocation(line: 79, column: 31, scope: !7)
!116 = !DILocation(line: 79, column: 79, scope: !7)
!117 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !118)
!118 = !DILocation(line: 80, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !118)
!121 = !DILocation(line: 81, column: 25, scope: !7)
!122 = !DILocation(line: 81, column: 37, scope: !7)
!123 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !118)
!124 = !DILocation(line: 81, column: 4, scope: !7)
