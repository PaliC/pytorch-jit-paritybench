#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":19:0)
#loc1 = loc(unknown)
#loc14 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":43:41)
#loc42 = loc(callsite(#loc1 at #loc14))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_div_sqrt_sub_var_mean_29(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.048000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_4 = arith.constant dense<1.000000e-10> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e-10> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<2.048000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.cmpi slt, %3, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc5)
    %5 = arith.muli %0, %c2048_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc7)
    %7 = arith.addi %3, %6 : tensor<1x2048xi32, #blocked> loc(#loc7)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc9)
    %11 = arith.andi %4, %10 : tensor<1x2048xi1, #blocked> loc(#loc9)
    %12 = tt.load %9, %11, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.select %11, %12, %cst_0 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc11)
    %14 = arith.select %11, %cst_1, %cst_0 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc12)
    %15:3 = "tt.reduce"(%13, %cst_0, %14) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc14)), %arg6: f32 loc(callsite(#loc1 at #loc14)), %arg7: f32 loc(callsite(#loc1 at #loc14)), %arg8: f32 loc(callsite(#loc1 at #loc14)), %arg9: f32 loc(callsite(#loc1 at #loc14)), %arg10: f32 loc(callsite(#loc1 at #loc14))):
      %36 = arith.subf %arg8, %arg5 : f32 loc(#loc55)
      %37 = arith.addf %arg7, %arg10 : f32 loc(#loc56)
      %38 = arith.cmpf oeq, %37, %cst_3 : f32 loc(#loc57)
      %39 = arith.divf %arg10, %37 : f32 loc(#loc58)
      %40 = arith.select %38, %cst_3, %39 : f32 loc(#loc59)
      %41 = arith.mulf %36, %40 : f32 loc(#loc60)
      %42 = arith.addf %arg5, %41 : f32 loc(#loc61)
      %43 = arith.addf %arg6, %arg9 : f32 loc(#loc62)
      %44 = arith.mulf %36, %36 : f32 loc(#loc63)
      %45 = arith.mulf %44, %arg7 : f32 loc(#loc64)
      %46 = arith.mulf %45, %40 : f32 loc(#loc65)
      %47 = arith.addf %43, %46 : f32 loc(#loc66)
      tt.reduce.return %42, %47, %37 : f32, f32, f32 loc(#loc41)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc41)
    %16 = tt.expand_dims %15#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc27)
    %17 = triton_gpu.convert_layout %15#1 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc29)
    %19 = tt.expand_dims %15#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc29)
    %20 = arith.divf %18, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc30)
    %21 = arith.divf %19, %cst : tensor<1x1xf32, #blocked> loc(#loc30)
    %22 = arith.addf %20, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc31)
    %23 = arith.addf %21, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc31)
    %24 = tt.extern_elementwise %22 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc28)
    %25 = tt.extern_elementwise %23 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc28)
    gpu.barrier loc(#loc32)
    %26 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %27 = tt.splat %26 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %28 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc34)
    tt.store %27, %24, %28 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %29 = tt.load %9, %11, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc35)
    %30 = tt.broadcast %16 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc36)
    %31 = arith.subf %29, %30 : tensor<1x2048xf32, #blocked> loc(#loc36)
    %32 = tt.broadcast %25 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc37)
    %33 = arith.divf %31, %32 : tensor<1x2048xf32, #blocked> loc(#loc37)
    %34 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc38)
    %35 = tt.addptr %34, %7 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc38)
    tt.store %35, %33, %11 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":22:28)
#loc3 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":24:21)
#loc4 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":25:33)
#loc5 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":32:25)
#loc6 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":34:44)
#loc7 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":34:39)
#loc8 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":34:34)
#loc9 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":34:57)
#loc10 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":34:49)
#loc11 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":39:60)
#loc12 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":41:64)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc27 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":45:20)
#loc28 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":52:26)
#loc29 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":46:20)
#loc30 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":49:18)
#loc31 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":51:18)
#loc32 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":53:4)
#loc33 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":54:28)
#loc34 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":54:39)
#loc35 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":59:50)
#loc36 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":60:24)
#loc37 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":61:24)
#loc38 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":62:29)
#loc39 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":62:51)
#loc40 = loc("inductor_cache/jc/cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py":55:4)
#loc41 = loc(callsite(#loc13 at #loc14))
#loc43 = loc(callsite(#loc15 at #loc13))
#loc44 = loc(callsite(#loc16 at #loc13))
#loc45 = loc(callsite(#loc17 at #loc13))
#loc46 = loc(callsite(#loc18 at #loc13))
#loc47 = loc(callsite(#loc19 at #loc13))
#loc48 = loc(callsite(#loc20 at #loc13))
#loc49 = loc(callsite(#loc21 at #loc13))
#loc50 = loc(callsite(#loc22 at #loc13))
#loc51 = loc(callsite(#loc23 at #loc13))
#loc52 = loc(callsite(#loc24 at #loc13))
#loc53 = loc(callsite(#loc25 at #loc13))
#loc54 = loc(callsite(#loc26 at #loc13))
#loc55 = loc(callsite(#loc43 at #loc14))
#loc56 = loc(callsite(#loc44 at #loc14))
#loc57 = loc(callsite(#loc45 at #loc14))
#loc58 = loc(callsite(#loc46 at #loc14))
#loc59 = loc(callsite(#loc47 at #loc14))
#loc60 = loc(callsite(#loc48 at #loc14))
#loc61 = loc(callsite(#loc49 at #loc14))
#loc62 = loc(callsite(#loc50 at #loc14))
#loc63 = loc(callsite(#loc51 at #loc14))
#loc64 = loc(callsite(#loc52 at #loc14))
#loc65 = loc(callsite(#loc53 at #loc14))
#loc66 = loc(callsite(#loc54 at #loc14))
