; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = shl i32 %6, 11, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = select i1 %7, float %22, float 0.000000e+00, !dbg !17
  %27 = select i1 %7, float %23, float 0.000000e+00, !dbg !17
  %28 = select i1 %7, float %24, float 0.000000e+00, !dbg !17
  %29 = select i1 %7, float %25, float 0.000000e+00, !dbg !17
  %30 = select i1 %7, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %31 = fsub float %27, %26, !dbg !19
  %32 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !24
  %33 = fcmp oeq float %32, 0.000000e+00, !dbg !25
  %34 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %32) #5, !dbg !26
  %35 = select i1 %33, float 0.000000e+00, float %34, !dbg !27
  %36 = fmul float %35, %31, !dbg !28
  %37 = fadd float %26, %36, !dbg !29
  %38 = fmul float %31, %31, !dbg !30
  %39 = fmul float %30, %38, !dbg !31
  %40 = fmul float %35, %39, !dbg !32
  %41 = fadd float %40, 0.000000e+00, !dbg !33
  %42 = fsub float %28, %37, !dbg !19
  %43 = select i1 %7, float 3.000000e+00, float 0.000000e+00, !dbg !24
  %44 = fcmp oeq float %43, 0.000000e+00, !dbg !25
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %43) #5, !dbg !26
  %46 = select i1 %44, float 0.000000e+00, float %45, !dbg !27
  %47 = fmul float %46, %42, !dbg !28
  %48 = fadd float %37, %47, !dbg !29
  %49 = fmul float %42, %42, !dbg !30
  %50 = fmul float %32, %49, !dbg !31
  %51 = fmul float %46, %50, !dbg !32
  %52 = fadd float %41, %51, !dbg !33
  %53 = fsub float %29, %48, !dbg !19
  %54 = select i1 %7, float 4.000000e+00, float 0.000000e+00, !dbg !24
  %55 = fcmp oeq float %54, 0.000000e+00, !dbg !25
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %54) #5, !dbg !26
  %57 = select i1 %55, float 0.000000e+00, float %56, !dbg !27
  %58 = fmul float %57, %53, !dbg !28
  %59 = fadd float %48, %58, !dbg !29
  %60 = fmul float %53, %53, !dbg !30
  %61 = fmul float %43, %60, !dbg !31
  %62 = fmul float %57, %61, !dbg !32
  %63 = fadd float %52, %62, !dbg !33
  %64 = bitcast float %59 to i32, !dbg !34
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = bitcast float %63 to i32, !dbg !34
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = bitcast float %54 to i32, !dbg !34
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !34
  %72 = bitcast i32 %71 to float, !dbg !34
  %73 = fsub float %66, %59, !dbg !19
  %74 = fadd float %54, %72, !dbg !24
  %75 = fcmp oeq float %74, 0.000000e+00, !dbg !25
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %74) #5, !dbg !26
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !27
  %78 = fmul float %77, %73, !dbg !28
  %79 = fadd float %59, %78, !dbg !29
  %80 = fadd float %63, %69, !dbg !35
  %81 = fmul float %73, %73, !dbg !30
  %82 = fmul float %54, %81, !dbg !31
  %83 = fmul float %77, %82, !dbg !32
  %84 = fadd float %80, %83, !dbg !33
  %85 = bitcast float %79 to i32, !dbg !34
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !34
  %87 = bitcast i32 %86 to float, !dbg !34
  %88 = bitcast float %84 to i32, !dbg !34
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = bitcast float %74 to i32, !dbg !34
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !34
  %93 = bitcast i32 %92 to float, !dbg !34
  %94 = fsub float %87, %79, !dbg !19
  %95 = fadd float %74, %93, !dbg !24
  %96 = fcmp oeq float %95, 0.000000e+00, !dbg !25
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %95) #5, !dbg !26
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !27
  %99 = fmul float %98, %94, !dbg !28
  %100 = fadd float %79, %99, !dbg !29
  %101 = fadd float %84, %90, !dbg !35
  %102 = fmul float %94, %94, !dbg !30
  %103 = fmul float %74, %102, !dbg !31
  %104 = fmul float %98, %103, !dbg !32
  %105 = fadd float %101, %104, !dbg !33
  %106 = bitcast float %100 to i32, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = bitcast float %105 to i32, !dbg !34
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !34
  %111 = bitcast i32 %110 to float, !dbg !34
  %112 = bitcast float %95 to i32, !dbg !34
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = fsub float %108, %100, !dbg !19
  %116 = fadd float %95, %114, !dbg !24
  %117 = fcmp oeq float %116, 0.000000e+00, !dbg !25
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %116) #5, !dbg !26
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !27
  %120 = fmul float %119, %115, !dbg !28
  %121 = fadd float %100, %120, !dbg !29
  %122 = fadd float %105, %111, !dbg !35
  %123 = fmul float %115, %115, !dbg !30
  %124 = fmul float %95, %123, !dbg !31
  %125 = fmul float %119, %124, !dbg !32
  %126 = fadd float %122, %125, !dbg !33
  %127 = bitcast float %121 to i32, !dbg !34
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = bitcast float %126 to i32, !dbg !34
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = bitcast float %116 to i32, !dbg !34
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = fsub float %129, %121, !dbg !19
  %137 = fadd float %116, %135, !dbg !24
  %138 = fcmp oeq float %137, 0.000000e+00, !dbg !25
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %137) #5, !dbg !26
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !27
  %141 = fmul float %136, %140, !dbg !28
  %142 = fadd float %121, %141, !dbg !29
  %143 = fadd float %126, %132, !dbg !35
  %144 = fmul float %136, %136, !dbg !30
  %145 = fmul float %116, %144, !dbg !31
  %146 = fmul float %140, %145, !dbg !32
  %147 = fadd float %143, %146, !dbg !33
  %148 = bitcast float %142 to i32, !dbg !34
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = bitcast float %147 to i32, !dbg !34
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !34
  %153 = bitcast i32 %152 to float, !dbg !34
  %154 = bitcast float %137 to i32, !dbg !34
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = fsub float %150, %142, !dbg !19
  %158 = fadd float %137, %156, !dbg !24
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !25
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %158) #5, !dbg !26
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !27
  %162 = fmul float %157, %161, !dbg !28
  %163 = fadd float %142, %162, !dbg !29
  %164 = fadd float %147, %153, !dbg !35
  %165 = fmul float %157, %157, !dbg !30
  %166 = fmul float %137, %165, !dbg !31
  %167 = fmul float %161, %166, !dbg !32
  %168 = fadd float %164, %167, !dbg !33
  %169 = icmp eq i32 %9, 0, !dbg !34
  %170 = and i32 %10, 15, !dbg !34
  %171 = zext nneg i32 %170 to i64, !dbg !34
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i64 %171, !dbg !34
  %173 = bitcast float %163 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 %169) #5, !dbg !34
  %174 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %171, !dbg !34
  %175 = bitcast float %168 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 %169) #5, !dbg !34
  %176 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %171, !dbg !34
  %177 = bitcast float %158 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 %169) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %178 = icmp slt i32 %8, 16, !dbg !34
  %179 = sext i32 %8 to i64, !dbg !34
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !34
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %178) #5, !dbg !34
  %182 = bitcast i32 %181 to float, !dbg !34
  %183 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %179, !dbg !34
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %178) #5, !dbg !34
  %185 = bitcast i32 %184 to float, !dbg !34
  %186 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %179, !dbg !34
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %178) #5, !dbg !34
  %188 = bitcast i32 %187 to float, !dbg !34
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !34
  %190 = bitcast i32 %189 to float, !dbg !34
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !34
  %194 = bitcast i32 %193 to float, !dbg !34
  %195 = fsub float %190, %182, !dbg !19
  %196 = fadd float %188, %194, !dbg !24
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !25
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %196) #5, !dbg !26
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !27
  %200 = fmul float %195, %199, !dbg !28
  %201 = fadd float %200, %182, !dbg !29
  %202 = fadd float %185, %192, !dbg !35
  %203 = fmul float %195, %195, !dbg !30
  %204 = fmul float %203, %188, !dbg !31
  %205 = fmul float %204, %199, !dbg !32
  %206 = fadd float %202, %205, !dbg !33
  %207 = bitcast float %201 to i32, !dbg !34
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !34
  %209 = bitcast i32 %208 to float, !dbg !34
  %210 = bitcast float %206 to i32, !dbg !34
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !34
  %212 = bitcast i32 %211 to float, !dbg !34
  %213 = bitcast float %196 to i32, !dbg !34
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !34
  %215 = bitcast i32 %214 to float, !dbg !34
  %216 = fsub float %209, %201, !dbg !19
  %217 = fadd float %196, %215, !dbg !24
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !25
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %217) #5, !dbg !26
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !27
  %221 = fmul float %216, %220, !dbg !28
  %222 = fadd float %201, %221, !dbg !29
  %223 = fadd float %206, %212, !dbg !35
  %224 = fmul float %216, %216, !dbg !30
  %225 = fmul float %196, %224, !dbg !31
  %226 = fmul float %220, %225, !dbg !32
  %227 = fadd float %223, %226, !dbg !33
  %228 = bitcast float %222 to i32, !dbg !34
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !34
  %230 = bitcast i32 %229 to float, !dbg !34
  %231 = bitcast float %227 to i32, !dbg !34
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !34
  %233 = bitcast i32 %232 to float, !dbg !34
  %234 = bitcast float %217 to i32, !dbg !34
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !34
  %236 = bitcast i32 %235 to float, !dbg !34
  %237 = fsub float %230, %222, !dbg !19
  %238 = fadd float %217, %236, !dbg !24
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !25
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %238) #5, !dbg !26
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !27
  %242 = fmul float %237, %241, !dbg !28
  %243 = fadd float %222, %242, !dbg !29
  %244 = fadd float %227, %233, !dbg !35
  %245 = fmul float %237, %237, !dbg !30
  %246 = fmul float %217, %245, !dbg !31
  %247 = fmul float %241, %246, !dbg !32
  %248 = fadd float %244, %247, !dbg !33
  %249 = bitcast float %243 to i32, !dbg !34
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 1, i32 31), !dbg !34
  %251 = bitcast i32 %250 to float, !dbg !34
  %252 = bitcast float %248 to i32, !dbg !34
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !34
  %254 = bitcast i32 %253 to float, !dbg !34
  %255 = bitcast float %238 to i32, !dbg !34
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !34
  %257 = bitcast i32 %256 to float, !dbg !34
  %258 = fsub float %251, %243, !dbg !19
  %259 = fadd float %238, %257, !dbg !24
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !25
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %259) #5, !dbg !26
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !27
  %263 = fmul float %258, %262, !dbg !28
  %264 = fadd float %243, %263, !dbg !29
  %265 = fadd float %248, %254, !dbg !35
  %266 = fmul float %258, %258, !dbg !30
  %267 = fmul float %238, %266, !dbg !31
  %268 = fmul float %262, %267, !dbg !32
  %269 = fadd float %265, %268, !dbg !33
  %270 = and i32 %8, 15, !dbg !34
  %271 = icmp eq i32 %270, 0, !dbg !34
  %272 = and i1 %178, %271, !dbg !34
  %273 = bitcast float %264 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %273, i1 %272) #5, !dbg !34
  %274 = bitcast float %269 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %274, i1 %272) #5, !dbg !34
  %275 = bitcast float %259 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %275, i1 %272) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %276 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %277 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !34
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float 2.048000e+03) #5, !dbg !36
  %279 = fadd float %278, 0x3DDB7CDFE0000000, !dbg !37
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %280, 0, !dbg !38
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !38
  %.not1.i = icmp eq i32 %281, 0, !dbg !38
  br i1 %.not.i, label %287, label %282, !dbg !38

282:                                              ; preds = %5
  br i1 %.not1.i, label %285, label %283, !dbg !38

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

287:                                              ; preds = %5
  br i1 %.not1.i, label %290, label %288, !dbg !38

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %283, %285, %288, %290
  %.0.i = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !38
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !38
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !38
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !38
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i16 = icmp eq i32 %298, 0, !dbg !38
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !38
  %.not1.i19 = icmp eq i32 %299, 0, !dbg !38
  br i1 %.not.i16, label %305, label %300, !dbg !38

300:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %303, label %301, !dbg !38

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

305:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %308, label %306, !dbg !38

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #5, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %301, %303, %306, %308
  %.0.i18 = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %310 = sext i32 %6 to i64, !dbg !40
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !40
  %urem = and i32 %8, 511, !dbg !41
  %312 = icmp eq i32 %urem, 0, !dbg !41
  %313 = bitcast float %.0.i to i32, !dbg !41
  %314 = and i1 %312, %7, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %313, ptr addrspace(1) %311, i1 %314) #5, !dbg !41
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !42
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !42
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !42
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !42
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !42
  %320 = bitcast i32 %316 to float, !dbg !42
  %321 = bitcast i32 %317 to float, !dbg !42
  %322 = bitcast i32 %318 to float, !dbg !42
  %323 = bitcast i32 %319 to float, !dbg !42
  %324 = fsub float %320, %276, !dbg !43
  %325 = fsub float %321, %276, !dbg !43
  %326 = fsub float %322, %276, !dbg !43
  %327 = fsub float %323, %276, !dbg !43
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %324, float %.0.i18) #5, !dbg !44
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float %.0.i18) #5, !dbg !44
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float %.0.i18) #5, !dbg !44
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float %.0.i18) #5, !dbg !44
  %332 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !45
  %333 = bitcast float %328 to i32, !dbg !46
  %334 = bitcast float %329 to i32, !dbg !46
  %335 = bitcast float %330 to i32, !dbg !46
  %336 = bitcast float %331 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %332, i1 %7) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjctq7bdmjpemdpkrrlharkjkzwm265pp6vcb7dsem654coffwer.py", directory: "inductor_cache/jc")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_29, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_29, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_29", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 39, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 41, column: 64, scope: !7)
!19 = !DILocation(line: 192, column: 21, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 43, column: 41, scope: !7)
!24 = !DILocation(line: 193, column: 28, scope: !20, inlinedAt: !23)
!25 = !DILocation(line: 194, column: 39, scope: !20, inlinedAt: !23)
!26 = !DILocation(line: 194, column: 60, scope: !20, inlinedAt: !23)
!27 = !DILocation(line: 194, column: 49, scope: !20, inlinedAt: !23)
!28 = !DILocation(line: 196, column: 25, scope: !20, inlinedAt: !23)
!29 = !DILocation(line: 196, column: 17, scope: !20, inlinedAt: !23)
!30 = !DILocation(line: 197, column: 30, scope: !20, inlinedAt: !23)
!31 = !DILocation(line: 197, column: 38, scope: !20, inlinedAt: !23)
!32 = !DILocation(line: 197, column: 49, scope: !20, inlinedAt: !23)
!33 = !DILocation(line: 197, column: 22, scope: !20, inlinedAt: !23)
!34 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !23)
!35 = !DILocation(line: 197, column: 15, scope: !20, inlinedAt: !23)
!36 = !DILocation(line: 49, column: 18, scope: !7)
!37 = !DILocation(line: 51, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 26, scope: !7)
!39 = !DILocation(line: 53, column: 4, scope: !7)
!40 = !DILocation(line: 54, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 39, scope: !7)
!42 = !DILocation(line: 59, column: 50, scope: !7)
!43 = !DILocation(line: 60, column: 24, scope: !7)
!44 = !DILocation(line: 61, column: 24, scope: !7)
!45 = !DILocation(line: 62, column: 29, scope: !7)
!46 = !DILocation(line: 62, column: 51, scope: !7)
!47 = !DILocation(line: 55, column: 4, scope: !7)
