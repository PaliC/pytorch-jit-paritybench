; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 107850176, !dbg !14
  %18 = icmp slt i32 %13, 107850176, !dbg !14
  %19 = sdiv i32 %9, 1685159, !dbg !15
  %20 = sdiv i32 %10, 1685159, !dbg !15
  %21 = sdiv i32 %11, 1685159, !dbg !15
  %22 = sdiv i32 %12, 1685159, !dbg !15
  %23 = sdiv i32 %13, 1685159, !dbg !15
  %24 = sdiv i32 %14, 1685159, !dbg !15
  %25 = sdiv i32 %15, 1685159, !dbg !15
  %26 = sdiv i32 %16, 1685159, !dbg !15
  %.lhs.trunc = trunc nsw i32 %19 to i16, !dbg !16
  %27 = srem i16 %.lhs.trunc, 16, !dbg !16
  %.lhs.trunc1 = trunc nsw i32 %20 to i16, !dbg !16
  %28 = srem i16 %.lhs.trunc1, 16, !dbg !16
  %.lhs.trunc3 = trunc nsw i32 %21 to i16, !dbg !16
  %29 = srem i16 %.lhs.trunc3, 16, !dbg !16
  %.lhs.trunc5 = trunc nsw i32 %22 to i16, !dbg !16
  %30 = srem i16 %.lhs.trunc5, 16, !dbg !16
  %.lhs.trunc7 = trunc nsw i32 %23 to i16, !dbg !16
  %31 = srem i16 %.lhs.trunc7, 16, !dbg !16
  %.lhs.trunc9 = trunc nsw i32 %24 to i16, !dbg !16
  %32 = srem i16 %.lhs.trunc9, 16, !dbg !16
  %.lhs.trunc11 = trunc nsw i32 %25 to i16, !dbg !16
  %33 = srem i16 %.lhs.trunc11, 16, !dbg !16
  %.lhs.trunc13 = trunc nsw i32 %26 to i16, !dbg !16
  %34 = srem i16 %.lhs.trunc13, 16, !dbg !16
  %35 = sext i32 %9 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = sext i32 %13 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #1, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !18
  %49 = sext i16 %27 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !19
  %51 = sext i16 %28 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !19
  %53 = sext i16 %29 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !19
  %55 = sext i16 %30 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !19
  %57 = sext i16 %31 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !19
  %59 = sext i16 %32 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !19
  %61 = sext i16 %33 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !19
  %63 = sext i16 %34 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #1, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %17) #1, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #1, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %17) #1, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #1, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %18) #1, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #1, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %18) #1, !dbg !20
  %73 = insertelement <8 x i32> poison, i32 %48, i64 0, !dbg !18
  %74 = insertelement <8 x i32> %73, i32 %47, i64 1, !dbg !18
  %75 = insertelement <8 x i32> %74, i32 %46, i64 2, !dbg !18
  %76 = insertelement <8 x i32> %75, i32 %45, i64 3, !dbg !18
  %77 = insertelement <8 x i32> %76, i32 %43, i64 4, !dbg !18
  %78 = insertelement <8 x i32> %77, i32 %42, i64 5, !dbg !18
  %79 = insertelement <8 x i32> %78, i32 %41, i64 6, !dbg !18
  %80 = insertelement <8 x i32> %79, i32 %40, i64 7, !dbg !18
  %81 = bitcast <8 x i32> %80 to <8 x float>, !dbg !18
  %82 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !20
  %83 = insertelement <8 x i32> %82, i32 %71, i64 1, !dbg !20
  %84 = insertelement <8 x i32> %83, i32 %70, i64 2, !dbg !20
  %85 = insertelement <8 x i32> %84, i32 %69, i64 3, !dbg !20
  %86 = insertelement <8 x i32> %85, i32 %68, i64 4, !dbg !20
  %87 = insertelement <8 x i32> %86, i32 %67, i64 5, !dbg !20
  %88 = insertelement <8 x i32> %87, i32 %66, i64 6, !dbg !20
  %89 = insertelement <8 x i32> %88, i32 %65, i64 7, !dbg !20
  %90 = bitcast <8 x i32> %89 to <8 x float>, !dbg !20
  %91 = fadd <8 x float> %81, %90, !dbg !21
  %92 = fcmp olt <8 x float> %91, zeroinitializer, !dbg !22
  %93 = extractelement <8 x i1> %92, i64 7, !dbg !26
  %94 = extractelement <8 x i1> %92, i64 6, !dbg !26
  %95 = extractelement <8 x i1> %92, i64 5, !dbg !26
  %96 = extractelement <8 x i1> %92, i64 4, !dbg !26
  %97 = extractelement <8 x i1> %92, i64 3, !dbg !26
  %98 = extractelement <8 x i1> %92, i64 2, !dbg !26
  %99 = extractelement <8 x i1> %92, i64 1, !dbg !26
  %100 = extractelement <8 x i1> %92, i64 0, !dbg !26
  %bc = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %101 = extractelement <8 x i32> %bc, i64 7, !dbg !27
  %102 = select i1 %93, i32 0, i32 %101, !dbg !26
  %bc15 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %103 = extractelement <8 x i32> %bc15, i64 6, !dbg !27
  %104 = select i1 %94, i32 0, i32 %103, !dbg !26
  %bc16 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %105 = extractelement <8 x i32> %bc16, i64 5, !dbg !27
  %106 = select i1 %95, i32 0, i32 %105, !dbg !26
  %bc17 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %107 = extractelement <8 x i32> %bc17, i64 4, !dbg !27
  %108 = select i1 %96, i32 0, i32 %107, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %104, i32 %106, i32 %108, ptr addrspace(1) %36, i1 %17) #1, !dbg !27
  %bc18 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %109 = extractelement <8 x i32> %bc18, i64 3, !dbg !27
  %110 = select i1 %97, i32 0, i32 %109, !dbg !26
  %bc19 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %111 = extractelement <8 x i32> %bc19, i64 2, !dbg !27
  %112 = select i1 %98, i32 0, i32 %111, !dbg !26
  %bc20 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %113 = extractelement <8 x i32> %bc20, i64 1, !dbg !27
  %114 = select i1 %99, i32 0, i32 %113, !dbg !26
  %bc21 = bitcast <8 x float> %91 to <8 x i32>, !dbg !27
  %115 = extractelement <8 x i32> %bc21, i64 0, !dbg !27
  %116 = select i1 %100, i32 0, i32 %115, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %110, i32 %112, i32 %114, i32 %116, ptr addrspace(1) %38, i1 %18) #1, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cllqkqebcd5ykvztcmpsvcytrnnsh26xsha4vc2ozsppa5v46lb7.py", directory: "inductor_cache/ll")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 31, column: 39, scope: !7)
!28 = !DILocation(line: 31, column: 4, scope: !7)
